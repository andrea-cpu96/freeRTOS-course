
002LED_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000527c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800541c  0800541c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005554  08005554  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005554  08005554  00006554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800555c  0800555c  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800555c  0800555c  0000655c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005560  08005560  00006560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005564  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001aa68  20000014  08005578  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001aa7c  08005578  00007a7c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012741  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002941  00000000  00000000  00019785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001c0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da9  00000000  00000000  0001d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001e029  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ab  00000000  00000000  000371d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaac4  00000000  00000000  0004b37c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5e40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f8  00000000  00000000  000f5e84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f1  00000000  00000000  000fa87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005404 	.word	0x08005404

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005404 	.word	0x08005404

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194a8 	.word	0x200194a8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb8d 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f86f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8d7 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* SEGGER LOGS Configurations */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <main+0xd0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	@ (8000634 <main+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000582:	f003 fa73 	bl	8003a6c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 8000586:	f004 f8e9 	bl	800475c <SEGGER_SYSVIEW_Start>
  /* End of EGGER LOGS Configurations */

  /* Tasks Creation */
  status = xTaskCreate(task1_handler, "LED-Green-Task", 200, NULL, 2, &task1_h);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	22c8      	movs	r2, #200	@ 0xc8
 8000598:	4927      	ldr	r1, [pc, #156]	@ (8000638 <main+0xd4>)
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0xd8>)
 800059c:	f001 fecc 	bl	8002338 <xTaskCreate>
 80005a0:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x58>
  status = xTaskCreate(task2_handler, "LED-Red-Task", 200, NULL, 2, &task2_h);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	@ 0xc8
 80005ce:	491c      	ldr	r1, [pc, #112]	@ (8000640 <main+0xdc>)
 80005d0:	481c      	ldr	r0, [pc, #112]	@ (8000644 <main+0xe0>)
 80005d2:	f001 feb1 	bl	8002338 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00b      	beq.n	80005f6 <main+0x92>
    __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x8e>
  status = xTaskCreate(task3_handler, "LED-Orange-Task", 200, NULL, 2, &task3_h);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	22c8      	movs	r2, #200	@ 0xc8
 8000602:	4911      	ldr	r1, [pc, #68]	@ (8000648 <main+0xe4>)
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <main+0xe8>)
 8000606:	f001 fe97 	bl	8002338 <xTaskCreate>
 800060a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00b      	beq.n	800062a <main+0xc6>
    __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	613b      	str	r3, [r7, #16]
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xc2>
  /* End of Tasks Creation */

  /* Start Scheduler */
  vTaskStartScheduler();
 800062a:	f002 f85b 	bl	80026e4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0xca>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0800541c 	.word	0x0800541c
 800063c:	080009e1 	.word	0x080009e1
 8000640:	0800542c 	.word	0x0800542c
 8000644:	08000a05 	.word	0x08000a05
 8000648:	0800543c 	.word	0x0800543c
 800064c:	08000a29 	.word	0x08000a29

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 fe96 	bl	8005390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006c4:	23c0      	movs	r3, #192	@ 0xc0
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdd7 	bl	8001288 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9c6 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2103      	movs	r1, #3
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f838 	bl	8001778 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9af 	bl	8000a70 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fd1a 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fd15 	bl	8001220 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fd0f 	bl	8001220 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000802:	2304      	movs	r3, #4
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	486d      	ldr	r0, [pc, #436]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 8000816:	f000 fb7f 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4866      	ldr	r0, [pc, #408]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 8000832:	f000 fb71 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000836:	2332      	movs	r3, #50	@ 0x32
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4860      	ldr	r0, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 800084c:	f000 fb64 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485a      	ldr	r0, [pc, #360]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000868:	f000 fb56 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086c:	2308      	movs	r3, #8
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4852      	ldr	r0, [pc, #328]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000888:	f000 fb46 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000890:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	484d      	ldr	r0, [pc, #308]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008a2:	f000 fb39 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a6:	2310      	movs	r3, #16
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b6:	2306      	movs	r3, #6
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4845      	ldr	r0, [pc, #276]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008c2:	f000 fb29 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c6:	23e0      	movs	r3, #224	@ 0xe0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483d      	ldr	r0, [pc, #244]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008e2:	f000 fb19 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4836      	ldr	r0, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 8000904:	f000 fb08 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000908:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800090c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482c      	ldr	r0, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 8000922:	f000 faf9 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000926:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000938:	2306      	movs	r3, #6
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000944:	f000 fae8 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fadb 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000962:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000974:	230a      	movs	r3, #10
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000980:	f000 faca 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 8000998:	f000 fabe 	bl	8000f18 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800099c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	2312      	movs	r3, #18
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 80009ba:	f000 faad 	bl	8000f18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <task1_handler+0x20>)
 80009ee:	f000 fc30 	bl	8001252 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80009f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f6:	f000 f989 	bl	8000d0c <HAL_Delay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009fa:	bf00      	nop
 80009fc:	e7f4      	b.n	80009e8 <task1_handler+0x8>
 80009fe:	bf00      	nop
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <task2_handler>:
	}

}

static void task2_handler(void *parameters)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <task2_handler+0x20>)
 8000a12:	f000 fc1e 	bl	8001252 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 8000a16:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a1a:	f000 f977 	bl	8000d0c <HAL_Delay>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a1e:	bf00      	nop
 8000a20:	e7f4      	b.n	8000a0c <task2_handler+0x8>
 8000a22:	bf00      	nop
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <task3_handler>:
	}

}

static void task3_handler(void *parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <task3_handler+0x20>)
 8000a36:	f000 fc0c 	bl	8001252 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 8000a3a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a3e:	f000 f965 	bl	8000d0c <HAL_Delay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000a42:	bf00      	nop
 8000a44:	e7f4      	b.n	8000a30 <task3_handler+0x8>
 8000a46:	bf00      	nop
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f935 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40000c00 	.word	0x40000c00

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aba:	f002 fb9b 	bl	80031f4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a32      	ldr	r2, [pc, #200]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f844 	bl	8001b90 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b12:	f001 f829 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b18:	e004      	b.n	8000b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1a:	f001 f825 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b26:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <HAL_InitTick+0xe8>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	0c9b      	lsrs	r3, r3, #18
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <HAL_InitTick+0xf0>)
 8000b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b40:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b44:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b58:	4817      	ldr	r0, [pc, #92]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b5a:	f001 f84b 	bl	8001bf4 <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b6c:	4812      	ldr	r0, [pc, #72]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b6e:	f001 f89b 	bl	8001ca8 <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d111      	bne.n	8000ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b80:	2032      	movs	r0, #50	@ 0x32
 8000b82:	f000 f9bb 	bl	8000efc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d808      	bhi.n	8000b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f000 f997 	bl	8000ec4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_InitTick+0xf4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e002      	b.n	8000ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	@ 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20000030 	.word	0x20000030
 8000bbc:	40000c00 	.word	0x40000c00
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM5_IRQHandler+0x10>)
 8000c02:	f001 f8b3 	bl	8001d6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000030 	.word	0x20000030

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f004 fb9d 	bl	80053a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc7d 	bl	8000564 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c78:	08005564 	.word	0x08005564
  ldr r2, =_sbss
 8000c7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c80:	2001aa7c 	.word	0x2001aa7c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8fc 	bl	8000eae <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff08 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fede 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000078 	.word	0x20000078

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000078 	.word	0x20000078

08000d0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b084      	sub	sp, #16
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d14:	f7ff ffee 	bl	8000cf4 <HAL_GetTick>
 8000d18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d24:	d005      	beq.n	8000d32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d26:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_Delay+0x44>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	4413      	add	r3, r2
 8000d30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d32:	bf00      	nop
 8000d34:	f7ff ffde 	bl	8000cf4 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d8f7      	bhi.n	8000d34 <HAL_Delay+0x28>
  {
  }
}
 8000d44:	bf00      	nop
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	20000008 	.word	0x20000008

08000d54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d64:	4b0c      	ldr	r3, [pc, #48]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d6a:	68ba      	ldr	r2, [r7, #8]
 8000d6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d70:	4013      	ands	r3, r2
 8000d72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d86:	4a04      	ldr	r2, [pc, #16]	@ (8000d98 <__NVIC_SetPriorityGrouping+0x44>)
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	60d3      	str	r3, [r2, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000da0:	4b04      	ldr	r3, [pc, #16]	@ (8000db4 <__NVIC_GetPriorityGrouping+0x18>)
 8000da2:	68db      	ldr	r3, [r3, #12]
 8000da4:	0a1b      	lsrs	r3, r3, #8
 8000da6:	f003 0307 	and.w	r3, r3, #7
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr
 8000db4:	e000ed00 	.word	0xe000ed00

08000db8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	db0b      	blt.n	8000de2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	f003 021f 	and.w	r2, r3, #31
 8000dd0:	4907      	ldr	r1, [pc, #28]	@ (8000df0 <__NVIC_EnableIRQ+0x38>)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	095b      	lsrs	r3, r3, #5
 8000dd8:	2001      	movs	r0, #1
 8000dda:	fa00 f202 	lsl.w	r2, r0, r2
 8000dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	e000e100 	.word	0xe000e100

08000df4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	6039      	str	r1, [r7, #0]
 8000dfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	db0a      	blt.n	8000e1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	b2da      	uxtb	r2, r3
 8000e0c:	490c      	ldr	r1, [pc, #48]	@ (8000e40 <__NVIC_SetPriority+0x4c>)
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	0112      	lsls	r2, r2, #4
 8000e14:	b2d2      	uxtb	r2, r2
 8000e16:	440b      	add	r3, r1
 8000e18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e1c:	e00a      	b.n	8000e34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	b2da      	uxtb	r2, r3
 8000e22:	4908      	ldr	r1, [pc, #32]	@ (8000e44 <__NVIC_SetPriority+0x50>)
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f003 030f 	and.w	r3, r3, #15
 8000e2a:	3b04      	subs	r3, #4
 8000e2c:	0112      	lsls	r2, r2, #4
 8000e2e:	b2d2      	uxtb	r2, r2
 8000e30:	440b      	add	r3, r1
 8000e32:	761a      	strb	r2, [r3, #24]
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	e000e100 	.word	0xe000e100
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b089      	sub	sp, #36	@ 0x24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f1c3 0307 	rsb	r3, r3, #7
 8000e62:	2b04      	cmp	r3, #4
 8000e64:	bf28      	it	cs
 8000e66:	2304      	movcs	r3, #4
 8000e68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3304      	adds	r3, #4
 8000e6e:	2b06      	cmp	r3, #6
 8000e70:	d902      	bls.n	8000e78 <NVIC_EncodePriority+0x30>
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	3b03      	subs	r3, #3
 8000e76:	e000      	b.n	8000e7a <NVIC_EncodePriority+0x32>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	68bb      	ldr	r3, [r7, #8]
 8000e8a:	401a      	ands	r2, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e90:	f04f 31ff 	mov.w	r1, #4294967295
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	fa01 f303 	lsl.w	r3, r1, r3
 8000e9a:	43d9      	mvns	r1, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea0:	4313      	orrs	r3, r2
         );
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3724      	adds	r7, #36	@ 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b082      	sub	sp, #8
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f7ff ff4c 	bl	8000d54 <__NVIC_SetPriorityGrouping>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
 8000ed0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed6:	f7ff ff61 	bl	8000d9c <__NVIC_GetPriorityGrouping>
 8000eda:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	68b9      	ldr	r1, [r7, #8]
 8000ee0:	6978      	ldr	r0, [r7, #20]
 8000ee2:	f7ff ffb1 	bl	8000e48 <NVIC_EncodePriority>
 8000ee6:	4602      	mov	r2, r0
 8000ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eec:	4611      	mov	r1, r2
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff ff80 	bl	8000df4 <__NVIC_SetPriority>
}
 8000ef4:	bf00      	nop
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f7ff ff54 	bl	8000db8 <__NVIC_EnableIRQ>
}
 8000f10:	bf00      	nop
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}

08000f18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61fb      	str	r3, [r7, #28]
 8000f32:	e159      	b.n	80011e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f34:	2201      	movs	r2, #1
 8000f36:	69fb      	ldr	r3, [r7, #28]
 8000f38:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	697a      	ldr	r2, [r7, #20]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	f040 8148 	bne.w	80011e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	f003 0303 	and.w	r3, r3, #3
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d005      	beq.n	8000f6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	685b      	ldr	r3, [r3, #4]
 8000f62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d130      	bne.n	8000fcc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f70:	69fb      	ldr	r3, [r7, #28]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	68da      	ldr	r2, [r3, #12]
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4013      	ands	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	091b      	lsrs	r3, r3, #4
 8000fb6:	f003 0201 	and.w	r2, r3, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f003 0303 	and.w	r3, r3, #3
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	d017      	beq.n	8001008 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	2203      	movs	r2, #3
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b02      	cmp	r3, #2
 8001012:	d123      	bne.n	800105c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	08da      	lsrs	r2, r3, #3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3208      	adds	r2, #8
 800101c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	f003 0307 	and.w	r3, r3, #7
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	220f      	movs	r2, #15
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	691a      	ldr	r2, [r3, #16]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	08da      	lsrs	r2, r3, #3
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3208      	adds	r2, #8
 8001056:	69b9      	ldr	r1, [r7, #24]
 8001058:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 0203 	and.w	r2, r3, #3
 800107c:	69fb      	ldr	r3, [r7, #28]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001098:	2b00      	cmp	r3, #0
 800109a:	f000 80a2 	beq.w	80011e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b57      	ldr	r3, [pc, #348]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a56      	ldr	r2, [pc, #344]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b54      	ldr	r3, [pc, #336]	@ (8001200 <HAL_GPIO_Init+0x2e8>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ba:	4a52      	ldr	r2, [pc, #328]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	089b      	lsrs	r3, r3, #2
 80010c0:	3302      	adds	r3, #2
 80010c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	f003 0303 	and.w	r3, r3, #3
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	220f      	movs	r2, #15
 80010d2:	fa02 f303 	lsl.w	r3, r2, r3
 80010d6:	43db      	mvns	r3, r3
 80010d8:	69ba      	ldr	r2, [r7, #24]
 80010da:	4013      	ands	r3, r2
 80010dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4a49      	ldr	r2, [pc, #292]	@ (8001208 <HAL_GPIO_Init+0x2f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d019      	beq.n	800111a <HAL_GPIO_Init+0x202>
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4a48      	ldr	r2, [pc, #288]	@ (800120c <HAL_GPIO_Init+0x2f4>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d013      	beq.n	8001116 <HAL_GPIO_Init+0x1fe>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4a47      	ldr	r2, [pc, #284]	@ (8001210 <HAL_GPIO_Init+0x2f8>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d00d      	beq.n	8001112 <HAL_GPIO_Init+0x1fa>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a46      	ldr	r2, [pc, #280]	@ (8001214 <HAL_GPIO_Init+0x2fc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d007      	beq.n	800110e <HAL_GPIO_Init+0x1f6>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a45      	ldr	r2, [pc, #276]	@ (8001218 <HAL_GPIO_Init+0x300>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d101      	bne.n	800110a <HAL_GPIO_Init+0x1f2>
 8001106:	2304      	movs	r3, #4
 8001108:	e008      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110a:	2307      	movs	r3, #7
 800110c:	e006      	b.n	800111c <HAL_GPIO_Init+0x204>
 800110e:	2303      	movs	r3, #3
 8001110:	e004      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001112:	2302      	movs	r3, #2
 8001114:	e002      	b.n	800111c <HAL_GPIO_Init+0x204>
 8001116:	2301      	movs	r3, #1
 8001118:	e000      	b.n	800111c <HAL_GPIO_Init+0x204>
 800111a:	2300      	movs	r3, #0
 800111c:	69fa      	ldr	r2, [r7, #28]
 800111e:	f002 0203 	and.w	r2, r2, #3
 8001122:	0092      	lsls	r2, r2, #2
 8001124:	4093      	lsls	r3, r2
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4313      	orrs	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800112c:	4935      	ldr	r1, [pc, #212]	@ (8001204 <HAL_GPIO_Init+0x2ec>)
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	69ba      	ldr	r2, [r7, #24]
 8001136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113a:	4b38      	ldr	r3, [pc, #224]	@ (800121c <HAL_GPIO_Init+0x304>)
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	693b      	ldr	r3, [r7, #16]
 800115a:	4313      	orrs	r3, r2
 800115c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800115e:	4a2f      	ldr	r2, [pc, #188]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001164:	4b2d      	ldr	r3, [pc, #180]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	43db      	mvns	r3, r3
 800116e:	69ba      	ldr	r2, [r7, #24]
 8001170:	4013      	ands	r3, r2
 8001172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d003      	beq.n	8001188 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001188:	4a24      	ldr	r2, [pc, #144]	@ (800121c <HAL_GPIO_Init+0x304>)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800118e:	4b23      	ldr	r3, [pc, #140]	@ (800121c <HAL_GPIO_Init+0x304>)
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b2:	4a1a      	ldr	r2, [pc, #104]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b8:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011dc:	4a0f      	ldr	r2, [pc, #60]	@ (800121c <HAL_GPIO_Init+0x304>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3301      	adds	r3, #1
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	2b0f      	cmp	r3, #15
 80011ec:	f67f aea2 	bls.w	8000f34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f0:	bf00      	nop
 80011f2:	bf00      	nop
 80011f4:	3724      	adds	r7, #36	@ 0x24
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	40023800 	.word	0x40023800
 8001204:	40013800 	.word	0x40013800
 8001208:	40020000 	.word	0x40020000
 800120c:	40020400 	.word	0x40020400
 8001210:	40020800 	.word	0x40020800
 8001214:	40020c00 	.word	0x40020c00
 8001218:	40021000 	.word	0x40021000
 800121c:	40013c00 	.word	0x40013c00

08001220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	807b      	strh	r3, [r7, #2]
 800122c:	4613      	mov	r3, r2
 800122e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001230:	787b      	ldrb	r3, [r7, #1]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001236:	887a      	ldrh	r2, [r7, #2]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800123c:	e003      	b.n	8001246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800123e:	887b      	ldrh	r3, [r7, #2]
 8001240:	041a      	lsls	r2, r3, #16
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]
}
 8001246:	bf00      	nop
 8001248:	370c      	adds	r7, #12
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr

08001252 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001252:	b480      	push	{r7}
 8001254:	b085      	sub	sp, #20
 8001256:	af00      	add	r7, sp, #0
 8001258:	6078      	str	r0, [r7, #4]
 800125a:	460b      	mov	r3, r1
 800125c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4013      	ands	r3, r2
 800126a:	041a      	lsls	r2, r3, #16
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43d9      	mvns	r1, r3
 8001270:	887b      	ldrh	r3, [r7, #2]
 8001272:	400b      	ands	r3, r1
 8001274:	431a      	orrs	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
	...

08001288 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d101      	bne.n	800129a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001296:	2301      	movs	r3, #1
 8001298:	e267      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d075      	beq.n	8001392 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012a6:	4b88      	ldr	r3, [pc, #544]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b04      	cmp	r3, #4
 80012b0:	d00c      	beq.n	80012cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b2:	4b85      	ldr	r3, [pc, #532]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	d112      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012be:	4b82      	ldr	r3, [pc, #520]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ca:	d10b      	bne.n	80012e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012cc:	4b7e      	ldr	r3, [pc, #504]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d05b      	beq.n	8001390 <HAL_RCC_OscConfig+0x108>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d157      	bne.n	8001390 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e242      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012ec:	d106      	bne.n	80012fc <HAL_RCC_OscConfig+0x74>
 80012ee:	4b76      	ldr	r3, [pc, #472]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a75      	ldr	r2, [pc, #468]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80012f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	e01d      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001304:	d10c      	bne.n	8001320 <HAL_RCC_OscConfig+0x98>
 8001306:	4b70      	ldr	r3, [pc, #448]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a6f      	ldr	r2, [pc, #444]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800130c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001310:	6013      	str	r3, [r2, #0]
 8001312:	4b6d      	ldr	r3, [pc, #436]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a6c      	ldr	r2, [pc, #432]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001318:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800131c:	6013      	str	r3, [r2, #0]
 800131e:	e00b      	b.n	8001338 <HAL_RCC_OscConfig+0xb0>
 8001320:	4b69      	ldr	r3, [pc, #420]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a68      	ldr	r2, [pc, #416]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001326:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b66      	ldr	r3, [pc, #408]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a65      	ldr	r2, [pc, #404]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001332:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001336:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001340:	f7ff fcd8 	bl	8000cf4 <HAL_GetTick>
 8001344:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	e008      	b.n	800135a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001348:	f7ff fcd4 	bl	8000cf4 <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	2b64      	cmp	r3, #100	@ 0x64
 8001354:	d901      	bls.n	800135a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001356:	2303      	movs	r3, #3
 8001358:	e207      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b5b      	ldr	r3, [pc, #364]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d0f0      	beq.n	8001348 <HAL_RCC_OscConfig+0xc0>
 8001366:	e014      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fcc4 	bl	8000cf4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fcc0 	bl	8000cf4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	@ 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e1f3      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001382:	4b51      	ldr	r3, [pc, #324]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d1f0      	bne.n	8001370 <HAL_RCC_OscConfig+0xe8>
 800138e:	e000      	b.n	8001392 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001390:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d063      	beq.n	8001466 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800139e:	4b4a      	ldr	r3, [pc, #296]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f003 030c 	and.w	r3, r3, #12
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d00b      	beq.n	80013c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013aa:	4b47      	ldr	r3, [pc, #284]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ac:	689b      	ldr	r3, [r3, #8]
 80013ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013b2:	2b08      	cmp	r3, #8
 80013b4:	d11c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013b6:	4b44      	ldr	r3, [pc, #272]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d116      	bne.n	80013f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c2:	4b41      	ldr	r3, [pc, #260]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d005      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	68db      	ldr	r3, [r3, #12]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d001      	beq.n	80013da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e1c7      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013da:	4b3b      	ldr	r3, [pc, #236]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	691b      	ldr	r3, [r3, #16]
 80013e6:	00db      	lsls	r3, r3, #3
 80013e8:	4937      	ldr	r1, [pc, #220]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 80013ea:	4313      	orrs	r3, r2
 80013ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ee:	e03a      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f8:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 80013fa:	2201      	movs	r2, #1
 80013fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fe:	f7ff fc79 	bl	8000cf4 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001406:	f7ff fc75 	bl	8000cf4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e1a8      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001418:	4b2b      	ldr	r3, [pc, #172]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001424:	4b28      	ldr	r3, [pc, #160]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	4925      	ldr	r1, [pc, #148]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 8001434:	4313      	orrs	r3, r2
 8001436:	600b      	str	r3, [r1, #0]
 8001438:	e015      	b.n	8001466 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <HAL_RCC_OscConfig+0x244>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fc58 	bl	8000cf4 <HAL_GetTick>
 8001444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001446:	e008      	b.n	800145a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001448:	f7ff fc54 	bl	8000cf4 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	2b02      	cmp	r3, #2
 8001454:	d901      	bls.n	800145a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e187      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145a:	4b1b      	ldr	r3, [pc, #108]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f003 0302 	and.w	r3, r3, #2
 8001462:	2b00      	cmp	r3, #0
 8001464:	d1f0      	bne.n	8001448 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0308 	and.w	r3, r3, #8
 800146e:	2b00      	cmp	r3, #0
 8001470:	d036      	beq.n	80014e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d016      	beq.n	80014a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 800147c:	2201      	movs	r2, #1
 800147e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001480:	f7ff fc38 	bl	8000cf4 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001488:	f7ff fc34 	bl	8000cf4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e167      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <HAL_RCC_OscConfig+0x240>)
 800149c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x200>
 80014a6:	e01b      	b.n	80014e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014a8:	4b09      	ldr	r3, [pc, #36]	@ (80014d0 <HAL_RCC_OscConfig+0x248>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ae:	f7ff fc21 	bl	8000cf4 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b4:	e00e      	b.n	80014d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b6:	f7ff fc1d 	bl	8000cf4 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d907      	bls.n	80014d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e150      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80014c8:	40023800 	.word	0x40023800
 80014cc:	42470000 	.word	0x42470000
 80014d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d4:	4b88      	ldr	r3, [pc, #544]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d8:	f003 0302 	and.w	r3, r3, #2
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1ea      	bne.n	80014b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0304 	and.w	r3, r3, #4
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 8097 	beq.w	800161c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f2:	4b81      	ldr	r3, [pc, #516]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80014f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10f      	bne.n	800151e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
 8001502:	4b7d      	ldr	r3, [pc, #500]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a7c      	ldr	r2, [pc, #496]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b7a      	ldr	r3, [pc, #488]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b77      	ldr	r3, [pc, #476]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b74      	ldr	r3, [pc, #464]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a73      	ldr	r2, [pc, #460]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff fbdd 	bl	8000cf4 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff fbd9 	bl	8000cf4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e10c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b6a      	ldr	r3, [pc, #424]	@ (80016fc <HAL_RCC_OscConfig+0x474>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x2ea>
 8001564:	4b64      	ldr	r3, [pc, #400]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001568:	4a63      	ldr	r2, [pc, #396]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001570:	e01c      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	2b05      	cmp	r3, #5
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x30c>
 800157a:	4b5f      	ldr	r3, [pc, #380]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800157c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800157e:	4a5e      	ldr	r2, [pc, #376]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	6713      	str	r3, [r2, #112]	@ 0x70
 8001586:	4b5c      	ldr	r3, [pc, #368]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158a:	4a5b      	ldr	r2, [pc, #364]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6713      	str	r3, [r2, #112]	@ 0x70
 8001592:	e00b      	b.n	80015ac <HAL_RCC_OscConfig+0x324>
 8001594:	4b58      	ldr	r3, [pc, #352]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001598:	4a57      	ldr	r2, [pc, #348]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800159a:	f023 0301 	bic.w	r3, r3, #1
 800159e:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a0:	4b55      	ldr	r3, [pc, #340]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a4:	4a54      	ldr	r2, [pc, #336]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	f023 0304 	bic.w	r3, r3, #4
 80015aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d015      	beq.n	80015e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b4:	f7ff fb9e 	bl	8000cf4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ba:	e00a      	b.n	80015d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015bc:	f7ff fb9a 	bl	8000cf4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d2:	4b49      	ldr	r3, [pc, #292]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0ee      	beq.n	80015bc <HAL_RCC_OscConfig+0x334>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e0:	f7ff fb88 	bl	8000cf4 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015e6:	e00a      	b.n	80015fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015e8:	f7ff fb84 	bl	8000cf4 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e0b5      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015fe:	4b3e      	ldr	r3, [pc, #248]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d1ee      	bne.n	80015e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800160a:	7dfb      	ldrb	r3, [r7, #23]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d105      	bne.n	800161c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001610:	4b39      	ldr	r3, [pc, #228]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a38      	ldr	r2, [pc, #224]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001616:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	2b00      	cmp	r3, #0
 8001622:	f000 80a1 	beq.w	8001768 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001626:	4b34      	ldr	r3, [pc, #208]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	f003 030c 	and.w	r3, r3, #12
 800162e:	2b08      	cmp	r3, #8
 8001630:	d05c      	beq.n	80016ec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	699b      	ldr	r3, [r3, #24]
 8001636:	2b02      	cmp	r3, #2
 8001638:	d141      	bne.n	80016be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163a:	4b31      	ldr	r3, [pc, #196]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001640:	f7ff fb58 	bl	8000cf4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fb54 	bl	8000cf4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e087      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	4b27      	ldr	r3, [pc, #156]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d1f0      	bne.n	8001648 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001674:	019b      	lsls	r3, r3, #6
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800167c:	085b      	lsrs	r3, r3, #1
 800167e:	3b01      	subs	r3, #1
 8001680:	041b      	lsls	r3, r3, #16
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001688:	061b      	lsls	r3, r3, #24
 800168a:	491b      	ldr	r1, [pc, #108]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001690:	4b1b      	ldr	r3, [pc, #108]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 8001692:	2201      	movs	r2, #1
 8001694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fb2d 	bl	8000cf4 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169c:	e008      	b.n	80016b0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800169e:	f7ff fb29 	bl	8000cf4 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d901      	bls.n	80016b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016ac:	2303      	movs	r3, #3
 80016ae:	e05c      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0f0      	beq.n	800169e <HAL_RCC_OscConfig+0x416>
 80016bc:	e054      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_RCC_OscConfig+0x478>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fb16 	bl	8000cf4 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016cc:	f7ff fb12 	bl	8000cf4 <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e045      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016de:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <HAL_RCC_OscConfig+0x470>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x444>
 80016ea:	e03d      	b.n	8001768 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d107      	bne.n	8001704 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e038      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40007000 	.word	0x40007000
 8001700:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001704:	4b1b      	ldr	r3, [pc, #108]	@ (8001774 <HAL_RCC_OscConfig+0x4ec>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d028      	beq.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d121      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172a:	429a      	cmp	r2, r3
 800172c:	d11a      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001734:	4013      	ands	r3, r2
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800173c:	4293      	cmp	r3, r2
 800173e:	d111      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174a:	085b      	lsrs	r3, r3, #1
 800174c:	3b01      	subs	r3, #1
 800174e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001760:	429a      	cmp	r2, r3
 8001762:	d001      	beq.n	8001768 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	e000      	b.n	800176a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0cc      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b68      	ldr	r3, [pc, #416]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d90c      	bls.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b65      	ldr	r3, [pc, #404]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800179c:	683a      	ldr	r2, [r7, #0]
 800179e:	b2d2      	uxtb	r2, r2
 80017a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a2:	4b63      	ldr	r3, [pc, #396]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	683a      	ldr	r2, [r7, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e0b8      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0302 	and.w	r3, r3, #2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0304 	and.w	r3, r3, #4
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d005      	beq.n	80017d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017cc:	4b59      	ldr	r3, [pc, #356]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	4a58      	ldr	r2, [pc, #352]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d005      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e4:	4b53      	ldr	r3, [pc, #332]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f0:	4b50      	ldr	r3, [pc, #320]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	494d      	ldr	r1, [pc, #308]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	4313      	orrs	r3, r2
 8001800:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d044      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d107      	bne.n	8001826 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001816:	4b47      	ldr	r3, [pc, #284]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800181e:	2b00      	cmp	r3, #0
 8001820:	d119      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e07f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d003      	beq.n	8001836 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001832:	2b03      	cmp	r3, #3
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b3f      	ldr	r3, [pc, #252]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e06f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3b      	ldr	r3, [pc, #236]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e067      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b37      	ldr	r3, [pc, #220]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4934      	ldr	r1, [pc, #208]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001864:	4313      	orrs	r3, r2
 8001866:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fa44 	bl	8000cf4 <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fa40 	bl	8000cf4 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e04f      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2b      	ldr	r3, [pc, #172]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b25      	ldr	r3, [pc, #148]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d20c      	bcs.n	80018c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b22      	ldr	r3, [pc, #136]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018a8:	683a      	ldr	r2, [r7, #0]
 80018aa:	b2d2      	uxtb	r2, r2
 80018ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ae:	4b20      	ldr	r3, [pc, #128]	@ (8001930 <HAL_RCC_ClockConfig+0x1b8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0307 	and.w	r3, r3, #7
 80018b6:	683a      	ldr	r2, [r7, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d001      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e032      	b.n	8001926 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 0304 	and.w	r3, r3, #4
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d008      	beq.n	80018de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018cc:	4b19      	ldr	r3, [pc, #100]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4916      	ldr	r1, [pc, #88]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0308 	and.w	r3, r3, #8
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d009      	beq.n	80018fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ea:	4b12      	ldr	r3, [pc, #72]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	490e      	ldr	r1, [pc, #56]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018fe:	f000 f821 	bl	8001944 <HAL_RCC_GetSysClockFreq>
 8001902:	4602      	mov	r2, r0
 8001904:	4b0b      	ldr	r3, [pc, #44]	@ (8001934 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	091b      	lsrs	r3, r3, #4
 800190a:	f003 030f 	and.w	r3, r3, #15
 800190e:	490a      	ldr	r1, [pc, #40]	@ (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 8001910:	5ccb      	ldrb	r3, [r1, r3]
 8001912:	fa22 f303 	lsr.w	r3, r2, r3
 8001916:	4a09      	ldr	r2, [pc, #36]	@ (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001918:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff f8d4 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3710      	adds	r7, #16
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00
 8001934:	40023800 	.word	0x40023800
 8001938:	08005514 	.word	0x08005514
 800193c:	20000000 	.word	0x20000000
 8001940:	20000004 	.word	0x20000004

08001944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001944:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001948:	b094      	sub	sp, #80	@ 0x50
 800194a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800194c:	2300      	movs	r3, #0
 800194e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001954:	2300      	movs	r3, #0
 8001956:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001958:	2300      	movs	r3, #0
 800195a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800195c:	4b79      	ldr	r3, [pc, #484]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	f003 030c 	and.w	r3, r3, #12
 8001964:	2b08      	cmp	r3, #8
 8001966:	d00d      	beq.n	8001984 <HAL_RCC_GetSysClockFreq+0x40>
 8001968:	2b08      	cmp	r3, #8
 800196a:	f200 80e1 	bhi.w	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
 800196e:	2b00      	cmp	r3, #0
 8001970:	d002      	beq.n	8001978 <HAL_RCC_GetSysClockFreq+0x34>
 8001972:	2b04      	cmp	r3, #4
 8001974:	d003      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x3a>
 8001976:	e0db      	b.n	8001b30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001978:	4b73      	ldr	r3, [pc, #460]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 800197a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800197c:	e0db      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800197e:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x208>)
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001982:	e0d8      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001984:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800198c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800198e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d063      	beq.n	8001a62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	099b      	lsrs	r3, r3, #6
 80019a0:	2200      	movs	r2, #0
 80019a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	f04f 0000 	mov.w	r0, #0
 80019be:	f04f 0100 	mov.w	r1, #0
 80019c2:	0159      	lsls	r1, r3, #5
 80019c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c8:	0150      	lsls	r0, r2, #5
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4621      	mov	r1, r4
 80019d0:	1a51      	subs	r1, r2, r1
 80019d2:	6139      	str	r1, [r7, #16]
 80019d4:	4629      	mov	r1, r5
 80019d6:	eb63 0301 	sbc.w	r3, r3, r1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019e8:	4659      	mov	r1, fp
 80019ea:	018b      	lsls	r3, r1, #6
 80019ec:	4651      	mov	r1, sl
 80019ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f2:	4651      	mov	r1, sl
 80019f4:	018a      	lsls	r2, r1, #6
 80019f6:	4651      	mov	r1, sl
 80019f8:	ebb2 0801 	subs.w	r8, r2, r1
 80019fc:	4659      	mov	r1, fp
 80019fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	f04f 0300 	mov.w	r3, #0
 8001a0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a16:	4690      	mov	r8, r2
 8001a18:	4699      	mov	r9, r3
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	eb18 0303 	adds.w	r3, r8, r3
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	462b      	mov	r3, r5
 8001a24:	eb49 0303 	adc.w	r3, r9, r3
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a36:	4629      	mov	r1, r5
 8001a38:	024b      	lsls	r3, r1, #9
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a40:	4621      	mov	r1, r4
 8001a42:	024a      	lsls	r2, r1, #9
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a54:	f7fe fc0e 	bl	8000274 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a60:	e058      	b.n	8001b14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a62:	4b38      	ldr	r3, [pc, #224]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	099b      	lsrs	r3, r3, #6
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	4611      	mov	r1, r2
 8001a6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	2300      	movs	r3, #0
 8001a76:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a7c:	4642      	mov	r2, r8
 8001a7e:	464b      	mov	r3, r9
 8001a80:	f04f 0000 	mov.w	r0, #0
 8001a84:	f04f 0100 	mov.w	r1, #0
 8001a88:	0159      	lsls	r1, r3, #5
 8001a8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a8e:	0150      	lsls	r0, r2, #5
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4641      	mov	r1, r8
 8001a96:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9a:	4649      	mov	r1, r9
 8001a9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001aac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab4:	ebb2 040a 	subs.w	r4, r2, sl
 8001ab8:	eb63 050b 	sbc.w	r5, r3, fp
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	f04f 0300 	mov.w	r3, #0
 8001ac4:	00eb      	lsls	r3, r5, #3
 8001ac6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aca:	00e2      	lsls	r2, r4, #3
 8001acc:	4614      	mov	r4, r2
 8001ace:	461d      	mov	r5, r3
 8001ad0:	4643      	mov	r3, r8
 8001ad2:	18e3      	adds	r3, r4, r3
 8001ad4:	603b      	str	r3, [r7, #0]
 8001ad6:	464b      	mov	r3, r9
 8001ad8:	eb45 0303 	adc.w	r3, r5, r3
 8001adc:	607b      	str	r3, [r7, #4]
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aea:	4629      	mov	r1, r5
 8001aec:	028b      	lsls	r3, r1, #10
 8001aee:	4621      	mov	r1, r4
 8001af0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af4:	4621      	mov	r1, r4
 8001af6:	028a      	lsls	r2, r1, #10
 8001af8:	4610      	mov	r0, r2
 8001afa:	4619      	mov	r1, r3
 8001afc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001afe:	2200      	movs	r2, #0
 8001b00:	61bb      	str	r3, [r7, #24]
 8001b02:	61fa      	str	r2, [r7, #28]
 8001b04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b08:	f7fe fbb4 	bl	8000274 <__aeabi_uldivmod>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4613      	mov	r3, r2
 8001b12:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b14:	4b0b      	ldr	r3, [pc, #44]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	0c1b      	lsrs	r3, r3, #16
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	3301      	adds	r3, #1
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001b24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2e:	e002      	b.n	8001b36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b30:	4b05      	ldr	r3, [pc, #20]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b32:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	3750      	adds	r7, #80	@ 0x50
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b42:	bf00      	nop
 8001b44:	40023800 	.word	0x40023800
 8001b48:	00f42400 	.word	0x00f42400
 8001b4c:	007a1200 	.word	0x007a1200

08001b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b54:	4b03      	ldr	r3, [pc, #12]	@ (8001b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000000 	.word	0x20000000

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff0 	bl	8001b50 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	0a9b      	lsrs	r3, r3, #10
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	08005524 	.word	0x08005524

08001b90 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	220f      	movs	r2, #15
 8001b9e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f003 0203 	and.w	r2, r3, #3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bac:	4b0f      	ldr	r3, [pc, #60]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	08db      	lsrs	r3, r3, #3
 8001bca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x60>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0207 	and.w	r2, r3, #7
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	601a      	str	r2, [r3, #0]
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40023800 	.word	0x40023800
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f839 	bl	8001c92 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f9b2 	bl	8001f9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d001      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e044      	b.n	8001d4a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0201 	orr.w	r2, r2, #1
 8001cd6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8001d58 <HAL_TIM_Base_Start_IT+0xb0>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cea:	d013      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a1a      	ldr	r2, [pc, #104]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a19      	ldr	r2, [pc, #100]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a17      	ldr	r2, [pc, #92]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a16      	ldr	r2, [pc, #88]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xc0>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d111      	bne.n	8001d38 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b06      	cmp	r3, #6
 8001d24:	d010      	beq.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d36:	e007      	b.n	8001d48 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f042 0201 	orr.w	r2, r2, #1
 8001d46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40010000 	.word	0x40010000
 8001d5c:	40000400 	.word	0x40000400
 8001d60:	40000800 	.word	0x40000800
 8001d64:	40000c00 	.word	0x40000c00
 8001d68:	40014000 	.word	0x40014000

08001d6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68db      	ldr	r3, [r3, #12]
 8001d7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d020      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d01b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f06f 0202 	mvn.w	r2, #2
 8001da0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f8d2 	bl	8001f60 <HAL_TIM_IC_CaptureCallback>
 8001dbc:	e005      	b.n	8001dca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 f8c4 	bl	8001f4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f8d5 	bl	8001f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d020      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d01b      	beq.n	8001e1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f06f 0204 	mvn.w	r2, #4
 8001dec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2202      	movs	r2, #2
 8001df2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f000 f8ac 	bl	8001f60 <HAL_TIM_IC_CaptureCallback>
 8001e08:	e005      	b.n	8001e16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0a:	6878      	ldr	r0, [r7, #4]
 8001e0c:	f000 f89e 	bl	8001f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f000 f8af 	bl	8001f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d020      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f003 0308 	and.w	r3, r3, #8
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d01b      	beq.n	8001e68 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f06f 0208 	mvn.w	r2, #8
 8001e38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2204      	movs	r2, #4
 8001e3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f886 	bl	8001f60 <HAL_TIM_IC_CaptureCallback>
 8001e54:	e005      	b.n	8001e62 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f878 	bl	8001f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 f889 	bl	8001f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f003 0310 	and.w	r3, r3, #16
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d020      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f003 0310 	and.w	r3, r3, #16
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01b      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f06f 0210 	mvn.w	r2, #16
 8001e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2208      	movs	r2, #8
 8001e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f860 	bl	8001f60 <HAL_TIM_IC_CaptureCallback>
 8001ea0:	e005      	b.n	8001eae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f000 f852 	bl	8001f4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f000 f863 	bl	8001f74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0201 	mvn.w	r2, #1
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7fe fdba 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8e6 	bl	80020c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d00c      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d007      	beq.n	8001f20 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f834 	bl	8001f88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	f003 0320 	and.w	r3, r3, #32
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00c      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f003 0320 	and.w	r3, r3, #32
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d007      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f06f 0220 	mvn.w	r2, #32
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8b8 	bl	80020b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f44:	bf00      	nop
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f54:	bf00      	nop
 8001f56:	370c      	adds	r7, #12
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr

08001f60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr

08001f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f7c:	bf00      	nop
 8001f7e:	370c      	adds	r7, #12
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f90:	bf00      	nop
 8001f92:	370c      	adds	r7, #12
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr

08001f9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3a      	ldr	r2, [pc, #232]	@ (8002098 <TIM_Base_SetConfig+0xfc>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d00f      	beq.n	8001fd4 <TIM_Base_SetConfig+0x38>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fba:	d00b      	beq.n	8001fd4 <TIM_Base_SetConfig+0x38>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a37      	ldr	r2, [pc, #220]	@ (800209c <TIM_Base_SetConfig+0x100>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <TIM_Base_SetConfig+0x38>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <TIM_Base_SetConfig+0x104>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d003      	beq.n	8001fd4 <TIM_Base_SetConfig+0x38>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a35      	ldr	r2, [pc, #212]	@ (80020a4 <TIM_Base_SetConfig+0x108>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d108      	bne.n	8001fe6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	@ (8002098 <TIM_Base_SetConfig+0xfc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01b      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff4:	d017      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a28      	ldr	r2, [pc, #160]	@ (800209c <TIM_Base_SetConfig+0x100>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d013      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a27      	ldr	r2, [pc, #156]	@ (80020a0 <TIM_Base_SetConfig+0x104>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d00f      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a26      	ldr	r2, [pc, #152]	@ (80020a4 <TIM_Base_SetConfig+0x108>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00b      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a25      	ldr	r2, [pc, #148]	@ (80020a8 <TIM_Base_SetConfig+0x10c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a24      	ldr	r2, [pc, #144]	@ (80020ac <TIM_Base_SetConfig+0x110>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0x8a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a23      	ldr	r2, [pc, #140]	@ (80020b0 <TIM_Base_SetConfig+0x114>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d108      	bne.n	8002038 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800202c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	4313      	orrs	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	695b      	ldr	r3, [r3, #20]
 8002042:	4313      	orrs	r3, r2
 8002044:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a0e      	ldr	r2, [pc, #56]	@ (8002098 <TIM_Base_SetConfig+0xfc>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d103      	bne.n	800206c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	691a      	ldr	r2, [r3, #16]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	d105      	bne.n	800208a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	f023 0201 	bic.w	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	611a      	str	r2, [r3, #16]
  }
}
 800208a:	bf00      	nop
 800208c:	3714      	adds	r7, #20
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	40010000 	.word	0x40010000
 800209c:	40000400 	.word	0x40000400
 80020a0:	40000800 	.word	0x40000800
 80020a4:	40000c00 	.word	0x40000c00
 80020a8:	40014000 	.word	0x40014000
 80020ac:	40014400 	.word	0x40014400
 80020b0:	40014800 	.word	0x40014800

080020b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020bc:	bf00      	nop
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f103 0208 	add.w	r2, r3, #8
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f04f 32ff 	mov.w	r2, #4294967295
 80020f4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f103 0208 	add.w	r2, r3, #8
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f103 0208 	add.w	r2, r3, #8
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002110:	f240 1019 	movw	r0, #281	@ 0x119
 8002114:	f002 fe64 	bl	8004de0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002118:	bf00      	nop
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 800212e:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002132:	f002 fe55 	bl	8004de0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002136:	bf00      	nop
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800213e:	b580      	push	{r7, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	691b      	ldr	r3, [r3, #16]
 800214a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6892      	ldr	r2, [r2, #8]
 8002154:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6852      	ldr	r2, [r2, #4]
 800215e:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d103      	bne.n	8002172 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689a      	ldr	r2, [r3, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2200      	movs	r2, #0
 8002176:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	1e5a      	subs	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4619      	mov	r1, r3
 8002188:	f240 101d 	movw	r0, #285	@ 0x11d
 800218c:	f002 fe64 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 800219c:	b580      	push	{r7, lr}
 800219e:	b08e      	sub	sp, #56	@ 0x38
 80021a0:	af04      	add	r7, sp, #16
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
 80021a8:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80021aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <prvCreateStaticTask+0x2c>
    __asm volatile
 80021b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b4:	f383 8811 	msr	BASEPRI, r3
 80021b8:	f3bf 8f6f 	isb	sy
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	623b      	str	r3, [r7, #32]
}
 80021c2:	bf00      	nop
 80021c4:	bf00      	nop
 80021c6:	e7fd      	b.n	80021c4 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80021c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d10b      	bne.n	80021e6 <prvCreateStaticTask+0x4a>
    __asm volatile
 80021ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	61fb      	str	r3, [r7, #28]
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	e7fd      	b.n	80021e2 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80021e6:	2358      	movs	r3, #88	@ 0x58
 80021e8:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	2b58      	cmp	r3, #88	@ 0x58
 80021ee:	d00b      	beq.n	8002208 <prvCreateStaticTask+0x6c>
    __asm volatile
 80021f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f4:	f383 8811 	msr	BASEPRI, r3
 80021f8:	f3bf 8f6f 	isb	sy
 80021fc:	f3bf 8f4f 	dsb	sy
 8002200:	61bb      	str	r3, [r7, #24]
}
 8002202:	bf00      	nop
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002208:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800220a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800220c:	2b00      	cmp	r3, #0
 800220e:	d01f      	beq.n	8002250 <prvCreateStaticTask+0xb4>
 8002210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002212:	2b00      	cmp	r3, #0
 8002214:	d01c      	beq.n	8002250 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002218:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800221a:	2258      	movs	r2, #88	@ 0x58
 800221c:	2100      	movs	r1, #0
 800221e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002220:	f003 f8b6 	bl	8005390 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002228:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800222a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002232:	2300      	movs	r3, #0
 8002234:	9303      	str	r3, [sp, #12]
 8002236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002238:	9302      	str	r3, [sp, #8]
 800223a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	687a      	ldr	r2, [r7, #4]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	68f8      	ldr	r0, [r7, #12]
 800224a:	f000 f89d 	bl	8002388 <prvInitialiseNewTask>
 800224e:	e001      	b.n	8002254 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002250:	2300      	movs	r3, #0
 8002252:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002256:	4618      	mov	r0, r3
 8002258:	3728      	adds	r7, #40	@ 0x28
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800225e:	b580      	push	{r7, lr}
 8002260:	b08a      	sub	sp, #40	@ 0x28
 8002262:	af04      	add	r7, sp, #16
 8002264:	60f8      	str	r0, [r7, #12]
 8002266:	60b9      	str	r1, [r7, #8]
 8002268:	607a      	str	r2, [r7, #4]
 800226a:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 800226c:	2300      	movs	r3, #0
 800226e:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	9303      	str	r3, [sp, #12]
 8002276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002278:	9302      	str	r3, [sp, #8]
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	9301      	str	r3, [sp, #4]
 800227e:	6a3b      	ldr	r3, [r7, #32]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68b9      	ldr	r1, [r7, #8]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f7ff ff87 	bl	800219c <prvCreateStaticTask>
 800228e:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002296:	6978      	ldr	r0, [r7, #20]
 8002298:	f000 f906 	bl	80024a8 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4618      	mov	r0, r3
 80022a0:	f002 ff14 	bl	80050cc <SEGGER_SYSVIEW_ShrinkId>
 80022a4:	4603      	mov	r3, r0
 80022a6:	4619      	mov	r1, r3
 80022a8:	20bf      	movs	r0, #191	@ 0xbf
 80022aa:	f002 fdd5 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80022ae:	693b      	ldr	r3, [r7, #16]
    }
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af04      	add	r7, sp, #16
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4618      	mov	r0, r3
 80022cc:	f001 f940 	bl	8003550 <pvPortMalloc>
 80022d0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d013      	beq.n	8002300 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022d8:	2058      	movs	r0, #88	@ 0x58
 80022da:	f001 f939 	bl	8003550 <pvPortMalloc>
 80022de:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d008      	beq.n	80022f8 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022e6:	2258      	movs	r2, #88	@ 0x58
 80022e8:	2100      	movs	r1, #0
 80022ea:	6978      	ldr	r0, [r7, #20]
 80022ec:	f003 f850 	bl	8005390 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30
 80022f6:	e005      	b.n	8002304 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022f8:	6938      	ldr	r0, [r7, #16]
 80022fa:	f001 fa5b 	bl	80037b4 <vPortFree>
 80022fe:	e001      	b.n	8002304 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d011      	beq.n	800232e <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2200      	movs	r2, #0
 800230e:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002312:	2300      	movs	r3, #0
 8002314:	9303      	str	r3, [sp, #12]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	9302      	str	r3, [sp, #8]
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	9301      	str	r3, [sp, #4]
 800231e:	6a3b      	ldr	r3, [r7, #32]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	68b9      	ldr	r1, [r7, #8]
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 f82d 	bl	8002388 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800232e:	697b      	ldr	r3, [r7, #20]
    }
 8002330:	4618      	mov	r0, r3
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002338:	b580      	push	{r7, lr}
 800233a:	b088      	sub	sp, #32
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ffaf 	bl	80022b8 <prvCreateTask>
 800235a:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d005      	beq.n	800236e <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002362:	6938      	ldr	r0, [r7, #16]
 8002364:	f000 f8a0 	bl	80024a8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002368:	2301      	movs	r3, #1
 800236a:	617b      	str	r3, [r7, #20]
 800236c:	e002      	b.n	8002374 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	4619      	mov	r1, r3
 8002378:	20c2      	movs	r0, #194	@ 0xc2
 800237a:	f002 fd6d 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800237e:	697b      	ldr	r3, [r7, #20]
    }
 8002380:	4618      	mov	r0, r3
 8002382:	3718      	adds	r7, #24
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b088      	sub	sp, #32
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
 8002394:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002398:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	461a      	mov	r2, r3
 80023a0:	21a5      	movs	r1, #165	@ 0xa5
 80023a2:	f002 fff5 	bl	8005390 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80023a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023b0:	3b01      	subs	r3, #1
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	4413      	add	r3, r2
 80023b6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f023 0307 	bic.w	r3, r3, #7
 80023be:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00b      	beq.n	80023e2 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80023ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ce:	f383 8811 	msr	BASEPRI, r3
 80023d2:	f3bf 8f6f 	isb	sy
 80023d6:	f3bf 8f4f 	dsb	sy
 80023da:	617b      	str	r3, [r7, #20]
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d01e      	beq.n	8002426 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023e8:	2300      	movs	r3, #0
 80023ea:	61fb      	str	r3, [r7, #28]
 80023ec:	e012      	b.n	8002414 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	4413      	add	r3, r2
 80023f4:	7819      	ldrb	r1, [r3, #0]
 80023f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	4413      	add	r3, r2
 80023fc:	3334      	adds	r3, #52	@ 0x34
 80023fe:	460a      	mov	r2, r1
 8002400:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	4413      	add	r3, r2
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d006      	beq.n	800241c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	3301      	adds	r3, #1
 8002412:	61fb      	str	r3, [r7, #28]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	2b09      	cmp	r3, #9
 8002418:	d9e9      	bls.n	80023ee <prvInitialiseNewTask+0x66>
 800241a:	e000      	b.n	800241e <prvInitialiseNewTask+0x96>
            {
                break;
 800241c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800241e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002420:	2200      	movs	r2, #0
 8002422:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	2b04      	cmp	r3, #4
 800242a:	d90b      	bls.n	8002444 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800242c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002430:	f383 8811 	msr	BASEPRI, r3
 8002434:	f3bf 8f6f 	isb	sy
 8002438:	f3bf 8f4f 	dsb	sy
 800243c:	613b      	str	r3, [r7, #16]
}
 800243e:	bf00      	nop
 8002440:	bf00      	nop
 8002442:	e7fd      	b.n	8002440 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002446:	2b04      	cmp	r3, #4
 8002448:	d901      	bls.n	800244e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800244a:	2304      	movs	r3, #4
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800244e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002450:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002452:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002458:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245c:	3304      	adds	r3, #4
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fe5e 	bl	8002120 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002466:	3318      	adds	r3, #24
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff fe59 	bl	8002120 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800246e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002472:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002476:	f1c3 0205 	rsb	r2, r3, #5
 800247a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	68f9      	ldr	r1, [r7, #12]
 8002488:	69b8      	ldr	r0, [r7, #24]
 800248a:	f000 fd37 	bl	8002efc <pxPortInitialiseStack>
 800248e:	4602      	mov	r2, r0
 8002490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002492:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	2b00      	cmp	r3, #0
 8002498:	d002      	beq.n	80024a0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800249a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800249e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024a0:	bf00      	nop
 80024a2:	3720      	adds	r7, #32
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80024a8:	b5b0      	push	{r4, r5, r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af02      	add	r7, sp, #8
 80024ae:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80024b0:	f000 ff20 	bl	80032f4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80024b4:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <prvAddNewTaskToReadyList+0x150>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	3301      	adds	r3, #1
 80024ba:	4a4f      	ldr	r2, [pc, #316]	@ (80025f8 <prvAddNewTaskToReadyList+0x150>)
 80024bc:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80024be:	4b4f      	ldr	r3, [pc, #316]	@ (80025fc <prvAddNewTaskToReadyList+0x154>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80024c6:	4a4d      	ldr	r2, [pc, #308]	@ (80025fc <prvAddNewTaskToReadyList+0x154>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024cc:	4b4a      	ldr	r3, [pc, #296]	@ (80025f8 <prvAddNewTaskToReadyList+0x150>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d110      	bne.n	80024f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024d4:	f000 fc3e 	bl	8002d54 <prvInitialiseTaskLists>
 80024d8:	e00d      	b.n	80024f6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024da:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <prvAddNewTaskToReadyList+0x158>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024e2:	4b46      	ldr	r3, [pc, #280]	@ (80025fc <prvAddNewTaskToReadyList+0x154>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d802      	bhi.n	80024f6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024f0:	4a42      	ldr	r2, [pc, #264]	@ (80025fc <prvAddNewTaskToReadyList+0x154>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024f6:	4b43      	ldr	r3, [pc, #268]	@ (8002604 <prvAddNewTaskToReadyList+0x15c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3301      	adds	r3, #1
 80024fc:	4a41      	ldr	r2, [pc, #260]	@ (8002604 <prvAddNewTaskToReadyList+0x15c>)
 80024fe:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002500:	4b40      	ldr	r3, [pc, #256]	@ (8002604 <prvAddNewTaskToReadyList+0x15c>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d016      	beq.n	800253c <prvAddNewTaskToReadyList+0x94>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4618      	mov	r0, r3
 8002512:	f002 fd15 	bl	8004f40 <SEGGER_SYSVIEW_OnTaskCreate>
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002526:	461d      	mov	r5, r3
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	461c      	mov	r4, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002532:	1ae3      	subs	r3, r4, r3
 8002534:	9300      	str	r3, [sp, #0]
 8002536:	462b      	mov	r3, r5
 8002538:	f001 fb3a 	bl	8003bb0 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4618      	mov	r0, r3
 8002540:	f002 fd82 	bl	8005048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002548:	2201      	movs	r2, #1
 800254a:	409a      	lsls	r2, r3
 800254c:	4b2e      	ldr	r3, [pc, #184]	@ (8002608 <prvAddNewTaskToReadyList+0x160>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4313      	orrs	r3, r2
 8002552:	4a2d      	ldr	r2, [pc, #180]	@ (8002608 <prvAddNewTaskToReadyList+0x160>)
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800255a:	492c      	ldr	r1, [pc, #176]	@ (800260c <prvAddNewTaskToReadyList+0x164>)
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	3304      	adds	r3, #4
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	68fa      	ldr	r2, [r7, #12]
 8002570:	609a      	str	r2, [r3, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	3204      	adds	r2, #4
 8002582:	605a      	str	r2, [r3, #4]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	1d1a      	adds	r2, r3, #4
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002590:	4613      	mov	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <prvAddNewTaskToReadyList+0x164>)
 800259a:	441a      	add	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	615a      	str	r2, [r3, #20]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a4:	4919      	ldr	r1, [pc, #100]	@ (800260c <prvAddNewTaskToReadyList+0x164>)
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	440b      	add	r3, r1
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025b6:	1c59      	adds	r1, r3, #1
 80025b8:	4814      	ldr	r0, [pc, #80]	@ (800260c <prvAddNewTaskToReadyList+0x164>)
 80025ba:	4613      	mov	r3, r2
 80025bc:	009b      	lsls	r3, r3, #2
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4403      	add	r3, r0
 80025c4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80025c6:	f000 fec7 	bl	8003358 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <prvAddNewTaskToReadyList+0x158>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00e      	beq.n	80025f0 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80025d2:	4b0a      	ldr	r3, [pc, #40]	@ (80025fc <prvAddNewTaskToReadyList+0x154>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	429a      	cmp	r2, r3
 80025de:	d207      	bcs.n	80025f0 <prvAddNewTaskToReadyList+0x148>
 80025e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002610 <prvAddNewTaskToReadyList+0x168>)
 80025e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025e6:	601a      	str	r2, [r3, #0]
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025f0:	bf00      	nop
 80025f2:	3710      	adds	r7, #16
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bdb0      	pop	{r4, r5, r7, pc}
 80025f8:	20000154 	.word	0x20000154
 80025fc:	2000007c 	.word	0x2000007c
 8002600:	20000160 	.word	0x20000160
 8002604:	20000170 	.word	0x20000170
 8002608:	2000015c 	.word	0x2000015c
 800260c:	20000080 	.word	0x20000080
 8002610:	e000ed04 	.word	0xe000ed04

08002614 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b08e      	sub	sp, #56	@ 0x38
 8002618:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 800261a:	2301      	movs	r3, #1
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
 8002626:	e013      	b.n	8002650 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002628:	4a2b      	ldr	r2, [pc, #172]	@ (80026d8 <prvCreateIdleTasks+0xc4>)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	4413      	add	r3, r2
 800262e:	7819      	ldrb	r1, [r3, #0]
 8002630:	f107 020c 	add.w	r2, r7, #12
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	4413      	add	r3, r2
 8002638:	460a      	mov	r2, r1
 800263a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800263c:	f107 020c 	add.w	r2, r7, #12
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	4413      	add	r3, r2
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	3301      	adds	r3, #1
 800264e:	61fb      	str	r3, [r7, #28]
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	2b09      	cmp	r3, #9
 8002654:	dde8      	ble.n	8002628 <prvCreateIdleTasks+0x14>
 8002656:	e000      	b.n	800265a <prvCreateIdleTasks+0x46>
        {
            break;
 8002658:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800265a:	2300      	movs	r3, #0
 800265c:	623b      	str	r3, [r7, #32]
 800265e:	e030      	b.n	80026c2 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <prvCreateIdleTasks+0xc8>)
 8002662:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002664:	2300      	movs	r3, #0
 8002666:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002668:	2300      	movs	r3, #0
 800266a:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800266c:	463a      	mov	r2, r7
 800266e:	1d39      	adds	r1, r7, #4
 8002670:	f107 0308 	add.w	r3, r7, #8
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fc27 	bl	8002ec8 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800267a:	6838      	ldr	r0, [r7, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68ba      	ldr	r2, [r7, #8]
 8002680:	f107 010c 	add.w	r1, r7, #12
 8002684:	9202      	str	r2, [sp, #8]
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	2300      	movs	r3, #0
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	2300      	movs	r3, #0
 800268e:	4602      	mov	r2, r0
 8002690:	69b8      	ldr	r0, [r7, #24]
 8002692:	f7ff fde4 	bl	800225e <xTaskCreateStatic>
 8002696:	4602      	mov	r2, r0
 8002698:	4911      	ldr	r1, [pc, #68]	@ (80026e0 <prvCreateIdleTasks+0xcc>)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80026a0:	4a0f      	ldr	r2, [pc, #60]	@ (80026e0 <prvCreateIdleTasks+0xcc>)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 80026ac:	2301      	movs	r3, #1
 80026ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80026b0:	e001      	b.n	80026b6 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d006      	beq.n	80026ca <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	3301      	adds	r3, #1
 80026c0:	623b      	str	r3, [r7, #32]
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	ddcb      	ble.n	8002660 <prvCreateIdleTasks+0x4c>
 80026c8:	e000      	b.n	80026cc <prvCreateIdleTasks+0xb8>
        {
            break;
 80026ca:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	0800544c 	.word	0x0800544c
 80026dc:	08002d25 	.word	0x08002d25
 80026e0:	20000178 	.word	0x20000178

080026e4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80026ea:	f7ff ff93 	bl	8002614 <prvCreateIdleTasks>
 80026ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d129      	bne.n	800274a <vTaskStartScheduler+0x66>
    __asm volatile
 80026f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026fa:	f383 8811 	msr	BASEPRI, r3
 80026fe:	f3bf 8f6f 	isb	sy
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	60bb      	str	r3, [r7, #8]
}
 8002708:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800270a:	4b1c      	ldr	r3, [pc, #112]	@ (800277c <vTaskStartScheduler+0x98>)
 800270c:	f04f 32ff 	mov.w	r2, #4294967295
 8002710:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002712:	4b1b      	ldr	r3, [pc, #108]	@ (8002780 <vTaskStartScheduler+0x9c>)
 8002714:	2201      	movs	r2, #1
 8002716:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002718:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <vTaskStartScheduler+0xa0>)
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800271e:	4b1a      	ldr	r3, [pc, #104]	@ (8002788 <vTaskStartScheduler+0xa4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3334      	adds	r3, #52	@ 0x34
 8002724:	2205      	movs	r2, #5
 8002726:	4919      	ldr	r1, [pc, #100]	@ (800278c <vTaskStartScheduler+0xa8>)
 8002728:	4618      	mov	r0, r3
 800272a:	f002 fe21 	bl	8005370 <memcmp>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d005      	beq.n	8002740 <vTaskStartScheduler+0x5c>
 8002734:	4b14      	ldr	r3, [pc, #80]	@ (8002788 <vTaskStartScheduler+0xa4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f002 fc43 	bl	8004fc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 800273e:	e001      	b.n	8002744 <vTaskStartScheduler+0x60>
 8002740:	f002 fbe2 	bl	8004f08 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002744:	f000 fc66 	bl	8003014 <xPortStartScheduler>
 8002748:	e00f      	b.n	800276a <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d10b      	bne.n	800276a <vTaskStartScheduler+0x86>
    __asm volatile
 8002752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002756:	f383 8811 	msr	BASEPRI, r3
 800275a:	f3bf 8f6f 	isb	sy
 800275e:	f3bf 8f4f 	dsb	sy
 8002762:	607b      	str	r3, [r7, #4]
}
 8002764:	bf00      	nop
 8002766:	bf00      	nop
 8002768:	e7fd      	b.n	8002766 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <vTaskStartScheduler+0xac>)
 800276c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800276e:	20cd      	movs	r0, #205	@ 0xcd
 8002770:	f002 fb36 	bl	8004de0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002774:	bf00      	nop
 8002776:	3710      	adds	r7, #16
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	20000174 	.word	0x20000174
 8002780:	20000160 	.word	0x20000160
 8002784:	20000158 	.word	0x20000158
 8002788:	2000007c 	.word	0x2000007c
 800278c:	0800544c 	.word	0x0800544c
 8002790:	2000000c 	.word	0x2000000c

08002794 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002798:	4b04      	ldr	r3, [pc, #16]	@ (80027ac <vTaskSuspendAll+0x18>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	3301      	adds	r3, #1
 800279e:	4a03      	ldr	r2, [pc, #12]	@ (80027ac <vTaskSuspendAll+0x18>)
 80027a0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 80027a2:	20cf      	movs	r0, #207	@ 0xcf
 80027a4:	f002 fb1c 	bl	8004de0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80027a8:	bf00      	nop
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000017c 	.word	0x2000017c

080027b0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 80027be:	f000 fd99 	bl	80032f4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80027c2:	2300      	movs	r3, #0
 80027c4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80027c6:	4b7a      	ldr	r3, [pc, #488]	@ (80029b0 <xTaskResumeAll+0x200>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <xTaskResumeAll+0x36>
    __asm volatile
 80027ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d2:	f383 8811 	msr	BASEPRI, r3
 80027d6:	f3bf 8f6f 	isb	sy
 80027da:	f3bf 8f4f 	dsb	sy
 80027de:	603b      	str	r3, [r7, #0]
}
 80027e0:	bf00      	nop
 80027e2:	bf00      	nop
 80027e4:	e7fd      	b.n	80027e2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80027e6:	4b72      	ldr	r3, [pc, #456]	@ (80029b0 <xTaskResumeAll+0x200>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3b01      	subs	r3, #1
 80027ec:	4a70      	ldr	r2, [pc, #448]	@ (80029b0 <xTaskResumeAll+0x200>)
 80027ee:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80027f0:	4b6f      	ldr	r3, [pc, #444]	@ (80029b0 <xTaskResumeAll+0x200>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f040 80ce 	bne.w	8002996 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027fa:	4b6e      	ldr	r3, [pc, #440]	@ (80029b4 <xTaskResumeAll+0x204>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f000 80c9 	beq.w	8002996 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002804:	e092      	b.n	800292c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002806:	4b6c      	ldr	r3, [pc, #432]	@ (80029b8 <xTaskResumeAll+0x208>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800280e:	69fb      	ldr	r3, [r7, #28]
 8002810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	69db      	ldr	r3, [r3, #28]
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	6a12      	ldr	r2, [r2, #32]
 800281c:	609a      	str	r2, [r3, #8]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	6a1b      	ldr	r3, [r3, #32]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	69d2      	ldr	r2, [r2, #28]
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	3318      	adds	r3, #24
 8002830:	429a      	cmp	r2, r3
 8002832:	d103      	bne.n	800283c <xTaskResumeAll+0x8c>
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	6a1a      	ldr	r2, [r3, #32]
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	605a      	str	r2, [r3, #4]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	2200      	movs	r2, #0
 8002840:	629a      	str	r2, [r3, #40]	@ 0x28
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	1e5a      	subs	r2, r3, #1
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	695b      	ldr	r3, [r3, #20]
 8002850:	60bb      	str	r3, [r7, #8]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	68d2      	ldr	r2, [r2, #12]
 800285a:	609a      	str	r2, [r3, #8]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	6892      	ldr	r2, [r2, #8]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3304      	adds	r3, #4
 800286e:	429a      	cmp	r2, r3
 8002870:	d103      	bne.n	800287a <xTaskResumeAll+0xca>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	68bb      	ldr	r3, [r7, #8]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2200      	movs	r2, #0
 800287e:	615a      	str	r2, [r3, #20]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	1e5a      	subs	r2, r3, #1
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fbdb 	bl	8005048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002896:	2201      	movs	r2, #1
 8002898:	409a      	lsls	r2, r3
 800289a:	4b48      	ldr	r3, [pc, #288]	@ (80029bc <xTaskResumeAll+0x20c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4313      	orrs	r3, r2
 80028a0:	4a46      	ldr	r2, [pc, #280]	@ (80029bc <xTaskResumeAll+0x20c>)
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028a8:	4945      	ldr	r1, [pc, #276]	@ (80029c0 <xTaskResumeAll+0x210>)
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	3304      	adds	r3, #4
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	607b      	str	r3, [r7, #4]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	60da      	str	r2, [r3, #12]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	69fa      	ldr	r2, [r7, #28]
 80028ce:	3204      	adds	r2, #4
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	1d1a      	adds	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	609a      	str	r2, [r3, #8]
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	4a36      	ldr	r2, [pc, #216]	@ (80029c0 <xTaskResumeAll+0x210>)
 80028e8:	441a      	add	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	615a      	str	r2, [r3, #20]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f2:	4933      	ldr	r1, [pc, #204]	@ (80029c0 <xTaskResumeAll+0x210>)
 80028f4:	4613      	mov	r3, r2
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	4413      	add	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002904:	1c59      	adds	r1, r3, #1
 8002906:	482e      	ldr	r0, [pc, #184]	@ (80029c0 <xTaskResumeAll+0x210>)
 8002908:	4613      	mov	r3, r2
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4403      	add	r3, r0
 8002912:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002918:	4b2a      	ldr	r3, [pc, #168]	@ (80029c4 <xTaskResumeAll+0x214>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800291e:	429a      	cmp	r2, r3
 8002920:	d904      	bls.n	800292c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002922:	4a29      	ldr	r2, [pc, #164]	@ (80029c8 <xTaskResumeAll+0x218>)
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	2101      	movs	r1, #1
 8002928:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800292c:	4b22      	ldr	r3, [pc, #136]	@ (80029b8 <xTaskResumeAll+0x208>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f af68 	bne.w	8002806 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d001      	beq.n	8002940 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800293c:	f000 faa8 	bl	8002e90 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002940:	4b22      	ldr	r3, [pc, #136]	@ (80029cc <xTaskResumeAll+0x21c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800294c:	f000 f858 	bl	8002a00 <xTaskIncrementTick>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002956:	4a1c      	ldr	r2, [pc, #112]	@ (80029c8 <xTaskResumeAll+0x218>)
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2101      	movs	r1, #1
 800295c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3b01      	subs	r3, #1
 8002964:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1ef      	bne.n	800294c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800296c:	4b17      	ldr	r3, [pc, #92]	@ (80029cc <xTaskResumeAll+0x21c>)
 800296e:	2200      	movs	r2, #0
 8002970:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002972:	4a15      	ldr	r2, [pc, #84]	@ (80029c8 <xTaskResumeAll+0x218>)
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d00b      	beq.n	8002996 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800297e:	2301      	movs	r3, #1
 8002980:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002982:	4b10      	ldr	r3, [pc, #64]	@ (80029c4 <xTaskResumeAll+0x214>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4b12      	ldr	r3, [pc, #72]	@ (80029d0 <xTaskResumeAll+0x220>)
 8002988:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002996:	f000 fcdf 	bl	8003358 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	4619      	mov	r1, r3
 800299e:	20d0      	movs	r0, #208	@ 0xd0
 80029a0:	f002 fa5a 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 80029a4:	69bb      	ldr	r3, [r7, #24]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3720      	adds	r7, #32
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	2000017c 	.word	0x2000017c
 80029b4:	20000154 	.word	0x20000154
 80029b8:	20000114 	.word	0x20000114
 80029bc:	2000015c 	.word	0x2000015c
 80029c0:	20000080 	.word	0x20000080
 80029c4:	2000007c 	.word	0x2000007c
 80029c8:	20000168 	.word	0x20000168
 80029cc:	20000164 	.word	0x20000164
 80029d0:	e000ed04 	.word	0xe000ed04

080029d4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029da:	f000 fd77 	bl	80034cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80029de:	2300      	movs	r3, #0
 80029e0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029e2:	4b06      	ldr	r3, [pc, #24]	@ (80029fc <xTaskGetTickCountFromISR+0x28>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80029e8:	6839      	ldr	r1, [r7, #0]
 80029ea:	20d2      	movs	r0, #210	@ 0xd2
 80029ec:	f002 fa34 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80029f0:	683b      	ldr	r3, [r7, #0]
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3708      	adds	r7, #8
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000158 	.word	0x20000158

08002a00 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08a      	sub	sp, #40	@ 0x28
 8002a04:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002a06:	2300      	movs	r3, #0
 8002a08:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002a0a:	4b83      	ldr	r3, [pc, #524]	@ (8002c18 <xTaskIncrementTick+0x218>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f040 80f3 	bne.w	8002bfa <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002a14:	4b81      	ldr	r3, [pc, #516]	@ (8002c1c <xTaskIncrementTick+0x21c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3301      	adds	r3, #1
 8002a1a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002a1c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c1c <xTaskIncrementTick+0x21c>)
 8002a1e:	6a3b      	ldr	r3, [r7, #32]
 8002a20:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002a22:	6a3b      	ldr	r3, [r7, #32]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d121      	bne.n	8002a6c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002a28:	4b7d      	ldr	r3, [pc, #500]	@ (8002c20 <xTaskIncrementTick+0x220>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00b      	beq.n	8002a4a <xTaskIncrementTick+0x4a>
    __asm volatile
 8002a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	607b      	str	r3, [r7, #4]
}
 8002a44:	bf00      	nop
 8002a46:	bf00      	nop
 8002a48:	e7fd      	b.n	8002a46 <xTaskIncrementTick+0x46>
 8002a4a:	4b75      	ldr	r3, [pc, #468]	@ (8002c20 <xTaskIncrementTick+0x220>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	61fb      	str	r3, [r7, #28]
 8002a50:	4b74      	ldr	r3, [pc, #464]	@ (8002c24 <xTaskIncrementTick+0x224>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a72      	ldr	r2, [pc, #456]	@ (8002c20 <xTaskIncrementTick+0x220>)
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	4a72      	ldr	r2, [pc, #456]	@ (8002c24 <xTaskIncrementTick+0x224>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	4b72      	ldr	r3, [pc, #456]	@ (8002c28 <xTaskIncrementTick+0x228>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3301      	adds	r3, #1
 8002a64:	4a70      	ldr	r2, [pc, #448]	@ (8002c28 <xTaskIncrementTick+0x228>)
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	f000 fa12 	bl	8002e90 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a6c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c2c <xTaskIncrementTick+0x22c>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6a3a      	ldr	r2, [r7, #32]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	f0c0 80ac 	bcc.w	8002bd0 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a78:	4b69      	ldr	r3, [pc, #420]	@ (8002c20 <xTaskIncrementTick+0x220>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d104      	bne.n	8002a8c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002a82:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <xTaskIncrementTick+0x22c>)
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	601a      	str	r2, [r3, #0]
                    break;
 8002a8a:	e0a1      	b.n	8002bd0 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a8c:	4b64      	ldr	r3, [pc, #400]	@ (8002c20 <xTaskIncrementTick+0x220>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d203      	bcs.n	8002aac <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002aa4:	4a61      	ldr	r2, [pc, #388]	@ (8002c2c <xTaskIncrementTick+0x22c>)
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	6013      	str	r3, [r2, #0]
                        break;
 8002aaa:	e091      	b.n	8002bd0 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	695b      	ldr	r3, [r3, #20]
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	68d2      	ldr	r2, [r2, #12]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	6892      	ldr	r2, [r2, #8]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	3304      	adds	r3, #4
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d103      	bne.n	8002ada <xTaskIncrementTick+0xda>
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	605a      	str	r2, [r3, #4]
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	1e5a      	subs	r2, r3, #1
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d01e      	beq.n	8002b30 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	69db      	ldr	r3, [r3, #28]
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	6a12      	ldr	r2, [r2, #32]
 8002b00:	609a      	str	r2, [r3, #8]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	69d2      	ldr	r2, [r2, #28]
 8002b0a:	605a      	str	r2, [r3, #4]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	3318      	adds	r3, #24
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d103      	bne.n	8002b20 <xTaskIncrementTick+0x120>
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	6a1a      	ldr	r2, [r3, #32]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	2200      	movs	r2, #0
 8002b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1e5a      	subs	r2, r3, #1
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f002 fa88 	bl	8005048 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	409a      	lsls	r2, r3
 8002b40:	4b3b      	ldr	r3, [pc, #236]	@ (8002c30 <xTaskIncrementTick+0x230>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	4a3a      	ldr	r2, [pc, #232]	@ (8002c30 <xTaskIncrementTick+0x230>)
 8002b48:	6013      	str	r3, [r2, #0]
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b4e:	4939      	ldr	r1, [pc, #228]	@ (8002c34 <xTaskIncrementTick+0x234>)
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	3304      	adds	r3, #4
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	689a      	ldr	r2, [r3, #8]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	60da      	str	r2, [r3, #12]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	3204      	adds	r2, #4
 8002b76:	605a      	str	r2, [r3, #4]
 8002b78:	69bb      	ldr	r3, [r7, #24]
 8002b7a:	1d1a      	adds	r2, r3, #4
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4a29      	ldr	r2, [pc, #164]	@ (8002c34 <xTaskIncrementTick+0x234>)
 8002b8e:	441a      	add	r2, r3
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	615a      	str	r2, [r3, #20]
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b98:	4926      	ldr	r1, [pc, #152]	@ (8002c34 <xTaskIncrementTick+0x234>)
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	440b      	add	r3, r1
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002baa:	1c59      	adds	r1, r3, #1
 8002bac:	4821      	ldr	r0, [pc, #132]	@ (8002c34 <xTaskIncrementTick+0x234>)
 8002bae:	4613      	mov	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4403      	add	r3, r0
 8002bb8:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	4b1e      	ldr	r3, [pc, #120]	@ (8002c38 <xTaskIncrementTick+0x238>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	f67f af57 	bls.w	8002a78 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002bce:	e753      	b.n	8002a78 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002bd0:	4b19      	ldr	r3, [pc, #100]	@ (8002c38 <xTaskIncrementTick+0x238>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	4917      	ldr	r1, [pc, #92]	@ (8002c34 <xTaskIncrementTick+0x234>)
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d901      	bls.n	8002bec <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002bec:	4b13      	ldr	r3, [pc, #76]	@ (8002c3c <xTaskIncrementTick+0x23c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	e004      	b.n	8002c04 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002bfa:	4b11      	ldr	r3, [pc, #68]	@ (8002c40 <xTaskIncrementTick+0x240>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	3301      	adds	r3, #1
 8002c00:	4a0f      	ldr	r2, [pc, #60]	@ (8002c40 <xTaskIncrementTick+0x240>)
 8002c02:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c06:	4619      	mov	r1, r3
 8002c08:	20db      	movs	r0, #219	@ 0xdb
 8002c0a:	f002 f925 	bl	8004e58 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3728      	adds	r7, #40	@ 0x28
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	2000017c 	.word	0x2000017c
 8002c1c:	20000158 	.word	0x20000158
 8002c20:	2000010c 	.word	0x2000010c
 8002c24:	20000110 	.word	0x20000110
 8002c28:	2000016c 	.word	0x2000016c
 8002c2c:	20000174 	.word	0x20000174
 8002c30:	2000015c 	.word	0x2000015c
 8002c34:	20000080 	.word	0x20000080
 8002c38:	2000007c 	.word	0x2000007c
 8002c3c:	20000168 	.word	0x20000168
 8002c40:	20000164 	.word	0x20000164

08002c44 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002c4a:	4b30      	ldr	r3, [pc, #192]	@ (8002d0c <vTaskSwitchContext+0xc8>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d003      	beq.n	8002c5a <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002c52:	4b2f      	ldr	r3, [pc, #188]	@ (8002d10 <vTaskSwitchContext+0xcc>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002c58:	e054      	b.n	8002d04 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 8002c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d10 <vTaskSwitchContext+0xcc>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002c60:	4b2c      	ldr	r3, [pc, #176]	@ (8002d14 <vTaskSwitchContext+0xd0>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	fab3 f383 	clz	r3, r3
 8002c6c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002c6e:	7afb      	ldrb	r3, [r7, #11]
 8002c70:	f1c3 031f 	rsb	r3, r3, #31
 8002c74:	617b      	str	r3, [r7, #20]
 8002c76:	4928      	ldr	r1, [pc, #160]	@ (8002d18 <vTaskSwitchContext+0xd4>)
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	440b      	add	r3, r1
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10b      	bne.n	8002ca2 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	607b      	str	r3, [r7, #4]
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	e7fd      	b.n	8002c9e <vTaskSwitchContext+0x5a>
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	4a1a      	ldr	r2, [pc, #104]	@ (8002d18 <vTaskSwitchContext+0xd4>)
 8002cae:	4413      	add	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	605a      	str	r2, [r3, #4]
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	3308      	adds	r3, #8
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d103      	bne.n	8002cd0 <vTaskSwitchContext+0x8c>
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	68da      	ldr	r2, [r3, #12]
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	605a      	str	r2, [r3, #4]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	4a11      	ldr	r2, [pc, #68]	@ (8002d1c <vTaskSwitchContext+0xd8>)
 8002cd8:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002cda:	4b10      	ldr	r3, [pc, #64]	@ (8002d1c <vTaskSwitchContext+0xd8>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	3334      	adds	r3, #52	@ 0x34
 8002ce0:	2205      	movs	r2, #5
 8002ce2:	490f      	ldr	r1, [pc, #60]	@ (8002d20 <vTaskSwitchContext+0xdc>)
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f002 fb43 	bl	8005370 <memcmp>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <vTaskSwitchContext+0xb8>
 8002cf0:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <vTaskSwitchContext+0xd8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f002 f965 	bl	8004fc4 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002cfa:	e001      	b.n	8002d00 <vTaskSwitchContext+0xbc>
 8002cfc:	f002 f904 	bl	8004f08 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002d00:	4b06      	ldr	r3, [pc, #24]	@ (8002d1c <vTaskSwitchContext+0xd8>)
 8002d02:	681b      	ldr	r3, [r3, #0]
    }
 8002d04:	bf00      	nop
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	2000017c 	.word	0x2000017c
 8002d10:	20000168 	.word	0x20000168
 8002d14:	2000015c 	.word	0x2000015c
 8002d18:	20000080 	.word	0x20000080
 8002d1c:	2000007c 	.word	0x2000007c
 8002d20:	0800544c 	.word	0x0800544c

08002d24 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002d2c:	f000 f852 	bl	8002dd4 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002d30:	4b06      	ldr	r3, [pc, #24]	@ (8002d4c <prvIdleTask+0x28>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d9f9      	bls.n	8002d2c <prvIdleTask+0x8>
            {
                taskYIELD();
 8002d38:	4b05      	ldr	r3, [pc, #20]	@ (8002d50 <prvIdleTask+0x2c>)
 8002d3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	f3bf 8f4f 	dsb	sy
 8002d44:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002d48:	e7f0      	b.n	8002d2c <prvIdleTask+0x8>
 8002d4a:	bf00      	nop
 8002d4c:	20000080 	.word	0x20000080
 8002d50:	e000ed04 	.word	0xe000ed04

08002d54 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	607b      	str	r3, [r7, #4]
 8002d5e:	e00c      	b.n	8002d7a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002d60:	687a      	ldr	r2, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4a12      	ldr	r2, [pc, #72]	@ (8002db4 <prvInitialiseTaskLists+0x60>)
 8002d6c:	4413      	add	r3, r2
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff f9b4 	bl	80020dc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	3301      	adds	r3, #1
 8002d78:	607b      	str	r3, [r7, #4]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d9ef      	bls.n	8002d60 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002d80:	480d      	ldr	r0, [pc, #52]	@ (8002db8 <prvInitialiseTaskLists+0x64>)
 8002d82:	f7ff f9ab 	bl	80020dc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002d86:	480d      	ldr	r0, [pc, #52]	@ (8002dbc <prvInitialiseTaskLists+0x68>)
 8002d88:	f7ff f9a8 	bl	80020dc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002d8c:	480c      	ldr	r0, [pc, #48]	@ (8002dc0 <prvInitialiseTaskLists+0x6c>)
 8002d8e:	f7ff f9a5 	bl	80020dc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d92:	480c      	ldr	r0, [pc, #48]	@ (8002dc4 <prvInitialiseTaskLists+0x70>)
 8002d94:	f7ff f9a2 	bl	80020dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d98:	480b      	ldr	r0, [pc, #44]	@ (8002dc8 <prvInitialiseTaskLists+0x74>)
 8002d9a:	f7ff f99f 	bl	80020dc <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <prvInitialiseTaskLists+0x78>)
 8002da0:	4a05      	ldr	r2, [pc, #20]	@ (8002db8 <prvInitialiseTaskLists+0x64>)
 8002da2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <prvInitialiseTaskLists+0x7c>)
 8002da6:	4a05      	ldr	r2, [pc, #20]	@ (8002dbc <prvInitialiseTaskLists+0x68>)
 8002da8:	601a      	str	r2, [r3, #0]
}
 8002daa:	bf00      	nop
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	20000080 	.word	0x20000080
 8002db8:	200000e4 	.word	0x200000e4
 8002dbc:	200000f8 	.word	0x200000f8
 8002dc0:	20000114 	.word	0x20000114
 8002dc4:	20000128 	.word	0x20000128
 8002dc8:	20000140 	.word	0x20000140
 8002dcc:	2000010c 	.word	0x2000010c
 8002dd0:	20000110 	.word	0x20000110

08002dd4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002dda:	e019      	b.n	8002e10 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002ddc:	f000 fa8a 	bl	80032f4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002de0:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <prvCheckTasksWaitingTermination+0x50>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3304      	adds	r3, #4
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff f9a6 	bl	800213e <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002df2:	4b0d      	ldr	r3, [pc, #52]	@ (8002e28 <prvCheckTasksWaitingTermination+0x54>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	3b01      	subs	r3, #1
 8002df8:	4a0b      	ldr	r2, [pc, #44]	@ (8002e28 <prvCheckTasksWaitingTermination+0x54>)
 8002dfa:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8002e2c <prvCheckTasksWaitingTermination+0x58>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4a0a      	ldr	r2, [pc, #40]	@ (8002e2c <prvCheckTasksWaitingTermination+0x58>)
 8002e04:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002e06:	f000 faa7 	bl	8003358 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f810 	bl	8002e30 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <prvCheckTasksWaitingTermination+0x58>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d1e1      	bne.n	8002ddc <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002e18:	bf00      	nop
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	20000128 	.word	0x20000128
 8002e28:	20000154 	.word	0x20000154
 8002e2c:	2000013c 	.word	0x2000013c

08002e30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b084      	sub	sp, #16
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d108      	bne.n	8002e54 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e46:	4618      	mov	r0, r3
 8002e48:	f000 fcb4 	bl	80037b4 <vPortFree>
                vPortFree( pxTCB );
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fcb1 	bl	80037b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002e52:	e019      	b.n	8002e88 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d103      	bne.n	8002e66 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fca8 	bl	80037b4 <vPortFree>
    }
 8002e64:	e010      	b.n	8002e88 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d00b      	beq.n	8002e88 <prvDeleteTCB+0x58>
    __asm volatile
 8002e70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e74:	f383 8811 	msr	BASEPRI, r3
 8002e78:	f3bf 8f6f 	isb	sy
 8002e7c:	f3bf 8f4f 	dsb	sy
 8002e80:	60fb      	str	r3, [r7, #12]
}
 8002e82:	bf00      	nop
 8002e84:	bf00      	nop
 8002e86:	e7fd      	b.n	8002e84 <prvDeleteTCB+0x54>
    }
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e94:	4b0a      	ldr	r3, [pc, #40]	@ (8002ec0 <prvResetNextTaskUnblockTime+0x30>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e9e:	4b09      	ldr	r3, [pc, #36]	@ (8002ec4 <prvResetNextTaskUnblockTime+0x34>)
 8002ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002ea6:	e005      	b.n	8002eb4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002ea8:	4b05      	ldr	r3, [pc, #20]	@ (8002ec0 <prvResetNextTaskUnblockTime+0x30>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <prvResetNextTaskUnblockTime+0x34>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	2000010c 	.word	0x2000010c
 8002ec4:	20000174 	.word	0x20000174

08002ec8 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8002ec8:	b480      	push	{r7}
 8002eca:	b085      	sub	sp, #20
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ed8:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	4a06      	ldr	r2, [pc, #24]	@ (8002ef8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ede:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2282      	movs	r2, #130	@ 0x82
 8002ee4:	601a      	str	r2, [r3, #0]
    }
 8002ee6:	bf00      	nop
 8002ee8:	3714      	adds	r7, #20
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000180 	.word	0x20000180
 8002ef8:	200001d8 	.word	0x200001d8

08002efc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002efc:	b480      	push	{r7}
 8002efe:	b085      	sub	sp, #20
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	60f8      	str	r0, [r7, #12]
 8002f04:	60b9      	str	r1, [r7, #8]
 8002f06:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	3b04      	subs	r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002f14:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3b04      	subs	r3, #4
 8002f1a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f023 0201 	bic.w	r2, r3, #1
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	3b04      	subs	r3, #4
 8002f2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002f2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002f60 <pxPortInitialiseStack+0x64>)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	3b14      	subs	r3, #20
 8002f36:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3b04      	subs	r3, #4
 8002f42:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f06f 0202 	mvn.w	r2, #2
 8002f4a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	3b20      	subs	r3, #32
 8002f50:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002f52:	68fb      	ldr	r3, [r7, #12]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	08002f65 	.word	0x08002f65

08002f64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002f64:	b480      	push	{r7}
 8002f66:	b085      	sub	sp, #20
 8002f68:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002f6e:	4b13      	ldr	r3, [pc, #76]	@ (8002fbc <prvTaskExitError+0x58>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f76:	d00b      	beq.n	8002f90 <prvTaskExitError+0x2c>
    __asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <prvTaskExitError+0x28>
    __asm volatile
 8002f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f94:	f383 8811 	msr	BASEPRI, r3
 8002f98:	f3bf 8f6f 	isb	sy
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	60bb      	str	r3, [r7, #8]
}
 8002fa2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002fa4:	bf00      	nop
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0fc      	beq.n	8002fa6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002fac:	bf00      	nop
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000010 	.word	0x20000010

08002fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002fc0:	4b07      	ldr	r3, [pc, #28]	@ (8002fe0 <pxCurrentTCBConst2>)
 8002fc2:	6819      	ldr	r1, [r3, #0]
 8002fc4:	6808      	ldr	r0, [r1, #0]
 8002fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002fca:	f380 8809 	msr	PSP, r0
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f04f 0000 	mov.w	r0, #0
 8002fd6:	f380 8811 	msr	BASEPRI, r0
 8002fda:	4770      	bx	lr
 8002fdc:	f3af 8000 	nop.w

08002fe0 <pxCurrentTCBConst2>:
 8002fe0:	2000007c 	.word	0x2000007c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002fe4:	bf00      	nop
 8002fe6:	bf00      	nop

08002fe8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002fe8:	4808      	ldr	r0, [pc, #32]	@ (800300c <prvPortStartFirstTask+0x24>)
 8002fea:	6800      	ldr	r0, [r0, #0]
 8002fec:	6800      	ldr	r0, [r0, #0]
 8002fee:	f380 8808 	msr	MSP, r0
 8002ff2:	f04f 0000 	mov.w	r0, #0
 8002ff6:	f380 8814 	msr	CONTROL, r0
 8002ffa:	b662      	cpsie	i
 8002ffc:	b661      	cpsie	f
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	f3bf 8f6f 	isb	sy
 8003006:	df00      	svc	0
 8003008:	bf00      	nop
 800300a:	0000      	.short	0x0000
 800300c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop

08003014 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b08c      	sub	sp, #48	@ 0x30
 8003018:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800301a:	4b69      	ldr	r3, [pc, #420]	@ (80031c0 <xPortStartScheduler+0x1ac>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a69      	ldr	r2, [pc, #420]	@ (80031c4 <xPortStartScheduler+0x1b0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10b      	bne.n	800303c <xPortStartScheduler+0x28>
    __asm volatile
 8003024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003028:	f383 8811 	msr	BASEPRI, r3
 800302c:	f3bf 8f6f 	isb	sy
 8003030:	f3bf 8f4f 	dsb	sy
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003036:	bf00      	nop
 8003038:	bf00      	nop
 800303a:	e7fd      	b.n	8003038 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800303c:	4b60      	ldr	r3, [pc, #384]	@ (80031c0 <xPortStartScheduler+0x1ac>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a61      	ldr	r2, [pc, #388]	@ (80031c8 <xPortStartScheduler+0x1b4>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d10b      	bne.n	800305e <xPortStartScheduler+0x4a>
    __asm volatile
 8003046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800304a:	f383 8811 	msr	BASEPRI, r3
 800304e:	f3bf 8f6f 	isb	sy
 8003052:	f3bf 8f4f 	dsb	sy
 8003056:	623b      	str	r3, [r7, #32]
}
 8003058:	bf00      	nop
 800305a:	bf00      	nop
 800305c:	e7fd      	b.n	800305a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800305e:	4b5b      	ldr	r3, [pc, #364]	@ (80031cc <xPortStartScheduler+0x1b8>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003066:	332c      	adds	r3, #44	@ 0x2c
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a59      	ldr	r2, [pc, #356]	@ (80031d0 <xPortStartScheduler+0x1bc>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d00b      	beq.n	8003088 <xPortStartScheduler+0x74>
    __asm volatile
 8003070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003074:	f383 8811 	msr	BASEPRI, r3
 8003078:	f3bf 8f6f 	isb	sy
 800307c:	f3bf 8f4f 	dsb	sy
 8003080:	61fb      	str	r3, [r7, #28]
}
 8003082:	bf00      	nop
 8003084:	bf00      	nop
 8003086:	e7fd      	b.n	8003084 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308a:	3338      	adds	r3, #56	@ 0x38
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a51      	ldr	r2, [pc, #324]	@ (80031d4 <xPortStartScheduler+0x1c0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00b      	beq.n	80030ac <xPortStartScheduler+0x98>
    __asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	61bb      	str	r3, [r7, #24]
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80030b0:	4b49      	ldr	r3, [pc, #292]	@ (80031d8 <xPortStartScheduler+0x1c4>)
 80030b2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80030b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	22ff      	movs	r2, #255	@ 0xff
 80030c0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80030c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80030ca:	79fb      	ldrb	r3, [r7, #7]
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030d2:	b2da      	uxtb	r2, r3
 80030d4:	4b41      	ldr	r3, [pc, #260]	@ (80031dc <xPortStartScheduler+0x1c8>)
 80030d6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80030d8:	4b40      	ldr	r3, [pc, #256]	@ (80031dc <xPortStartScheduler+0x1c8>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10b      	bne.n	80030f8 <xPortStartScheduler+0xe4>
    __asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	617b      	str	r3, [r7, #20]
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003102:	2b00      	cmp	r3, #0
 8003104:	d013      	beq.n	800312e <xPortStartScheduler+0x11a>
    __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	613b      	str	r3, [r7, #16]
}
 8003118:	bf00      	nop
 800311a:	bf00      	nop
 800311c:	e7fd      	b.n	800311a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	3301      	adds	r3, #1
 8003122:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003124:	79fb      	ldrb	r3, [r7, #7]
 8003126:	b2db      	uxtb	r3, r3
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	b2db      	uxtb	r3, r3
 800312c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800312e:	79fb      	ldrb	r3, [r7, #7]
 8003130:	b2db      	uxtb	r3, r3
 8003132:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003136:	2b80      	cmp	r3, #128	@ 0x80
 8003138:	d0f1      	beq.n	800311e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d103      	bne.n	8003148 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003140:	4b27      	ldr	r3, [pc, #156]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 8003142:	2200      	movs	r2, #0
 8003144:	601a      	str	r2, [r3, #0]
 8003146:	e004      	b.n	8003152 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f1c3 0307 	rsb	r3, r3, #7
 800314e:	4a24      	ldr	r2, [pc, #144]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 8003150:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003152:	4b23      	ldr	r3, [pc, #140]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	4a21      	ldr	r2, [pc, #132]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 800315a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800315c:	4b20      	ldr	r3, [pc, #128]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003164:	4a1e      	ldr	r2, [pc, #120]	@ (80031e0 <xPortStartScheduler+0x1cc>)
 8003166:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003168:	7bfb      	ldrb	r3, [r7, #15]
 800316a:	b2da      	uxtb	r2, r3
 800316c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800316e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003170:	4b1c      	ldr	r3, [pc, #112]	@ (80031e4 <xPortStartScheduler+0x1d0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1b      	ldr	r2, [pc, #108]	@ (80031e4 <xPortStartScheduler+0x1d0>)
 8003176:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800317a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800317c:	4b19      	ldr	r3, [pc, #100]	@ (80031e4 <xPortStartScheduler+0x1d0>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a18      	ldr	r2, [pc, #96]	@ (80031e4 <xPortStartScheduler+0x1d0>)
 8003182:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003186:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003188:	4b17      	ldr	r3, [pc, #92]	@ (80031e8 <xPortStartScheduler+0x1d4>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800318e:	f000 f96d 	bl	800346c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003192:	4b16      	ldr	r3, [pc, #88]	@ (80031ec <xPortStartScheduler+0x1d8>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003198:	f000 f98c 	bl	80034b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800319c:	4b14      	ldr	r3, [pc, #80]	@ (80031f0 <xPortStartScheduler+0x1dc>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a13      	ldr	r2, [pc, #76]	@ (80031f0 <xPortStartScheduler+0x1dc>)
 80031a2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80031a6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80031a8:	f7ff ff1e 	bl	8002fe8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80031ac:	f7ff fd4a 	bl	8002c44 <vTaskSwitchContext>
    prvTaskExitError();
 80031b0:	f7ff fed8 	bl	8002f64 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3730      	adds	r7, #48	@ 0x30
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	e000ed00 	.word	0xe000ed00
 80031c4:	410fc271 	.word	0x410fc271
 80031c8:	410fc270 	.word	0x410fc270
 80031cc:	e000ed08 	.word	0xe000ed08
 80031d0:	08002fc1 	.word	0x08002fc1
 80031d4:	080033b1 	.word	0x080033b1
 80031d8:	e000e400 	.word	0xe000e400
 80031dc:	200003e0 	.word	0x200003e0
 80031e0:	200003e4 	.word	0x200003e4
 80031e4:	e000ed20 	.word	0xe000ed20
 80031e8:	e000ed1c 	.word	0xe000ed1c
 80031ec:	20000010 	.word	0x20000010
 80031f0:	e000ef34 	.word	0xe000ef34

080031f4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031fa:	4b38      	ldr	r3, [pc, #224]	@ (80032dc <vInitPrioGroupValue+0xe8>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a38      	ldr	r2, [pc, #224]	@ (80032e0 <vInitPrioGroupValue+0xec>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d10b      	bne.n	800321c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	613b      	str	r3, [r7, #16]
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800321c:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <vInitPrioGroupValue+0xe8>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a30      	ldr	r2, [pc, #192]	@ (80032e4 <vInitPrioGroupValue+0xf0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d10b      	bne.n	800323e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60fb      	str	r3, [r7, #12]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800323e:	4b2a      	ldr	r3, [pc, #168]	@ (80032e8 <vInitPrioGroupValue+0xf4>)
 8003240:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	b2db      	uxtb	r3, r3
 8003248:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	22ff      	movs	r2, #255	@ 0xff
 800324e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	b2db      	uxtb	r3, r3
 8003256:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003258:	78fb      	ldrb	r3, [r7, #3]
 800325a:	b2db      	uxtb	r3, r3
 800325c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003260:	b2da      	uxtb	r2, r3
 8003262:	4b22      	ldr	r3, [pc, #136]	@ (80032ec <vInitPrioGroupValue+0xf8>)
 8003264:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003266:	4b22      	ldr	r3, [pc, #136]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 8003268:	2207      	movs	r2, #7
 800326a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800326c:	e009      	b.n	8003282 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	3b01      	subs	r3, #1
 8003274:	4a1e      	ldr	r2, [pc, #120]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 8003276:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003278:	78fb      	ldrb	r3, [r7, #3]
 800327a:	b2db      	uxtb	r3, r3
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	b2db      	uxtb	r3, r3
 8003280:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800328a:	2b80      	cmp	r3, #128	@ 0x80
 800328c:	d0ef      	beq.n	800326e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800328e:	4b18      	ldr	r3, [pc, #96]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	d00b      	beq.n	80032b2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	60bb      	str	r3, [r7, #8]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80032b2:	4b0f      	ldr	r3, [pc, #60]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	021b      	lsls	r3, r3, #8
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 80032ba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80032bc:	4b0c      	ldr	r3, [pc, #48]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <vInitPrioGroupValue+0xfc>)
 80032c6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80032d0:	bf00      	nop
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032da:	4770      	bx	lr
 80032dc:	e000ed00 	.word	0xe000ed00
 80032e0:	410fc271 	.word	0x410fc271
 80032e4:	410fc270 	.word	0x410fc270
 80032e8:	e000e400 	.word	0xe000e400
 80032ec:	200003e0 	.word	0x200003e0
 80032f0:	200003e4 	.word	0x200003e4

080032f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
    __asm volatile
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	607b      	str	r3, [r7, #4]
}
 800330c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800330e:	4b10      	ldr	r3, [pc, #64]	@ (8003350 <vPortEnterCritical+0x5c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3301      	adds	r3, #1
 8003314:	4a0e      	ldr	r2, [pc, #56]	@ (8003350 <vPortEnterCritical+0x5c>)
 8003316:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003318:	4b0d      	ldr	r3, [pc, #52]	@ (8003350 <vPortEnterCritical+0x5c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2b01      	cmp	r3, #1
 800331e:	d110      	bne.n	8003342 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003320:	4b0c      	ldr	r3, [pc, #48]	@ (8003354 <vPortEnterCritical+0x60>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	b2db      	uxtb	r3, r3
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00b      	beq.n	8003342 <vPortEnterCritical+0x4e>
    __asm volatile
 800332a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800332e:	f383 8811 	msr	BASEPRI, r3
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	f3bf 8f4f 	dsb	sy
 800333a:	603b      	str	r3, [r7, #0]
}
 800333c:	bf00      	nop
 800333e:	bf00      	nop
 8003340:	e7fd      	b.n	800333e <vPortEnterCritical+0x4a>
    }
}
 8003342:	bf00      	nop
 8003344:	370c      	adds	r7, #12
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000010 	.word	0x20000010
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800335e:	4b12      	ldr	r3, [pc, #72]	@ (80033a8 <vPortExitCritical+0x50>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10b      	bne.n	800337e <vPortExitCritical+0x26>
    __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
}
 8003378:	bf00      	nop
 800337a:	bf00      	nop
 800337c:	e7fd      	b.n	800337a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800337e:	4b0a      	ldr	r3, [pc, #40]	@ (80033a8 <vPortExitCritical+0x50>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3b01      	subs	r3, #1
 8003384:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <vPortExitCritical+0x50>)
 8003386:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003388:	4b07      	ldr	r3, [pc, #28]	@ (80033a8 <vPortExitCritical+0x50>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d105      	bne.n	800339c <vPortExitCritical+0x44>
 8003390:	2300      	movs	r3, #0
 8003392:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800339a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr
 80033a8:	20000010 	.word	0x20000010
 80033ac:	00000000 	.word	0x00000000

080033b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80033b0:	f3ef 8009 	mrs	r0, PSP
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	4b15      	ldr	r3, [pc, #84]	@ (8003410 <pxCurrentTCBConst>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	f01e 0f10 	tst.w	lr, #16
 80033c0:	bf08      	it	eq
 80033c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80033c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033ca:	6010      	str	r0, [r2, #0]
 80033cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80033d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80033d4:	f380 8811 	msr	BASEPRI, r0
 80033d8:	f3bf 8f4f 	dsb	sy
 80033dc:	f3bf 8f6f 	isb	sy
 80033e0:	f7ff fc30 	bl	8002c44 <vTaskSwitchContext>
 80033e4:	f04f 0000 	mov.w	r0, #0
 80033e8:	f380 8811 	msr	BASEPRI, r0
 80033ec:	bc09      	pop	{r0, r3}
 80033ee:	6819      	ldr	r1, [r3, #0]
 80033f0:	6808      	ldr	r0, [r1, #0]
 80033f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033f6:	f01e 0f10 	tst.w	lr, #16
 80033fa:	bf08      	it	eq
 80033fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003400:	f380 8809 	msr	PSP, r0
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	f3af 8000 	nop.w

08003410 <pxCurrentTCBConst>:
 8003410:	2000007c 	.word	0x2000007c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003414:	bf00      	nop
 8003416:	bf00      	nop

08003418 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
    __asm volatile
 800341e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003422:	f383 8811 	msr	BASEPRI, r3
 8003426:	f3bf 8f6f 	isb	sy
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	607b      	str	r3, [r7, #4]
}
 8003430:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003432:	f001 fc5b 	bl	8004cec <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003436:	f7ff fae3 	bl	8002a00 <xTaskIncrementTick>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003440:	f001 fcb2 	bl	8004da8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003444:	4b08      	ldr	r3, [pc, #32]	@ (8003468 <SysTick_Handler+0x50>)
 8003446:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e001      	b.n	8003452 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800344e:	f001 fc8f 	bl	8004d70 <SEGGER_SYSVIEW_RecordExitISR>
 8003452:	2300      	movs	r3, #0
 8003454:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	f383 8811 	msr	BASEPRI, r3
}
 800345c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	e000ed04 	.word	0xe000ed04

0800346c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800346c:	b480      	push	{r7}
 800346e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003470:	4b0b      	ldr	r3, [pc, #44]	@ (80034a0 <vPortSetupTimerInterrupt+0x34>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <vPortSetupTimerInterrupt+0x38>)
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800347c:	4b0a      	ldr	r3, [pc, #40]	@ (80034a8 <vPortSetupTimerInterrupt+0x3c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a0a      	ldr	r2, [pc, #40]	@ (80034ac <vPortSetupTimerInterrupt+0x40>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	4a09      	ldr	r2, [pc, #36]	@ (80034b0 <vPortSetupTimerInterrupt+0x44>)
 800348a:	3b01      	subs	r3, #1
 800348c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800348e:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <vPortSetupTimerInterrupt+0x34>)
 8003490:	2207      	movs	r2, #7
 8003492:	601a      	str	r2, [r3, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	e000e010 	.word	0xe000e010
 80034a4:	e000e018 	.word	0xe000e018
 80034a8:	20000000 	.word	0x20000000
 80034ac:	10624dd3 	.word	0x10624dd3
 80034b0:	e000e014 	.word	0xe000e014

080034b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80034b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80034c4 <vPortEnableVFP+0x10>
 80034b8:	6801      	ldr	r1, [r0, #0]
 80034ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80034be:	6001      	str	r1, [r0, #0]
 80034c0:	4770      	bx	lr
 80034c2:	0000      	.short	0x0000
 80034c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80034c8:	bf00      	nop
 80034ca:	bf00      	nop

080034cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80034d2:	f3ef 8305 	mrs	r3, IPSR
 80034d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b0f      	cmp	r3, #15
 80034dc:	d915      	bls.n	800350a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034de:	4a18      	ldr	r2, [pc, #96]	@ (8003540 <vPortValidateInterruptPriority+0x74>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80034e8:	4b16      	ldr	r3, [pc, #88]	@ (8003544 <vPortValidateInterruptPriority+0x78>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	7afa      	ldrb	r2, [r7, #11]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d20b      	bcs.n	800350a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	607b      	str	r3, [r7, #4]
}
 8003504:	bf00      	nop
 8003506:	bf00      	nop
 8003508:	e7fd      	b.n	8003506 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800350a:	4b0f      	ldr	r3, [pc, #60]	@ (8003548 <vPortValidateInterruptPriority+0x7c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003512:	4b0e      	ldr	r3, [pc, #56]	@ (800354c <vPortValidateInterruptPriority+0x80>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d90b      	bls.n	8003532 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800351a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800351e:	f383 8811 	msr	BASEPRI, r3
 8003522:	f3bf 8f6f 	isb	sy
 8003526:	f3bf 8f4f 	dsb	sy
 800352a:	603b      	str	r3, [r7, #0]
}
 800352c:	bf00      	nop
 800352e:	bf00      	nop
 8003530:	e7fd      	b.n	800352e <vPortValidateInterruptPriority+0x62>
    }
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	e000e3f0 	.word	0xe000e3f0
 8003544:	200003e0 	.word	0x200003e0
 8003548:	e000ed0c 	.word	0xe000ed0c
 800354c:	200003e4 	.word	0x200003e4

08003550 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b08e      	sub	sp, #56	@ 0x38
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d022      	beq.n	80035a8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003562:	2308      	movs	r3, #8
 8003564:	43db      	mvns	r3, r3
 8003566:	687a      	ldr	r2, [r7, #4]
 8003568:	429a      	cmp	r2, r3
 800356a:	d81b      	bhi.n	80035a4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800356c:	2208      	movs	r2, #8
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4413      	add	r3, r2
 8003572:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	2b00      	cmp	r3, #0
 800357c:	d014      	beq.n	80035a8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f003 0307 	and.w	r3, r3, #7
 8003584:	f1c3 0308 	rsb	r3, r3, #8
 8003588:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800358a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800358c:	43db      	mvns	r3, r3
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	429a      	cmp	r2, r3
 8003592:	d804      	bhi.n	800359e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003598:	4413      	add	r3, r2
 800359a:	607b      	str	r3, [r7, #4]
 800359c:	e004      	b.n	80035a8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800359e:	2300      	movs	r3, #0
 80035a0:	607b      	str	r3, [r7, #4]
 80035a2:	e001      	b.n	80035a8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80035a8:	f7ff f8f4 	bl	8002794 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80035ac:	4b7a      	ldr	r3, [pc, #488]	@ (8003798 <pvPortMalloc+0x248>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80035b4:	f000 f978 	bl	80038a8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	f2c0 80d3 	blt.w	8003766 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 80cf 	beq.w	8003766 <pvPortMalloc+0x216>
 80035c8:	4b74      	ldr	r3, [pc, #464]	@ (800379c <pvPortMalloc+0x24c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	f200 80c9 	bhi.w	8003766 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80035d4:	4b72      	ldr	r3, [pc, #456]	@ (80037a0 <pvPortMalloc+0x250>)
 80035d6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80035d8:	4b71      	ldr	r3, [pc, #452]	@ (80037a0 <pvPortMalloc+0x250>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80035de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e0:	4a70      	ldr	r2, [pc, #448]	@ (80037a4 <pvPortMalloc+0x254>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d305      	bcc.n	80035f2 <pvPortMalloc+0xa2>
 80035e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e8:	4a6f      	ldr	r2, [pc, #444]	@ (80037a8 <pvPortMalloc+0x258>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d801      	bhi.n	80035f2 <pvPortMalloc+0xa2>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e000      	b.n	80035f4 <pvPortMalloc+0xa4>
 80035f2:	2300      	movs	r3, #0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d129      	bne.n	800364c <pvPortMalloc+0xfc>
    __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	623b      	str	r3, [r7, #32]
}
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003610:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800361a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361c:	4a61      	ldr	r2, [pc, #388]	@ (80037a4 <pvPortMalloc+0x254>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d305      	bcc.n	800362e <pvPortMalloc+0xde>
 8003622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003624:	4a60      	ldr	r2, [pc, #384]	@ (80037a8 <pvPortMalloc+0x258>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d801      	bhi.n	800362e <pvPortMalloc+0xde>
 800362a:	2301      	movs	r3, #1
 800362c:	e000      	b.n	8003630 <pvPortMalloc+0xe0>
 800362e:	2300      	movs	r3, #0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d10b      	bne.n	800364c <pvPortMalloc+0xfc>
    __asm volatile
 8003634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	61fb      	str	r3, [r7, #28]
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	e7fd      	b.n	8003648 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	429a      	cmp	r2, r3
 8003654:	d903      	bls.n	800365e <pvPortMalloc+0x10e>
 8003656:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1d8      	bne.n	8003610 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800365e:	4b4e      	ldr	r3, [pc, #312]	@ (8003798 <pvPortMalloc+0x248>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003664:	429a      	cmp	r2, r3
 8003666:	d07e      	beq.n	8003766 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2208      	movs	r2, #8
 800366e:	4413      	add	r3, r2
 8003670:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003674:	4a4b      	ldr	r2, [pc, #300]	@ (80037a4 <pvPortMalloc+0x254>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d305      	bcc.n	8003686 <pvPortMalloc+0x136>
 800367a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367c:	4a4a      	ldr	r2, [pc, #296]	@ (80037a8 <pvPortMalloc+0x258>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d801      	bhi.n	8003686 <pvPortMalloc+0x136>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <pvPortMalloc+0x138>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <pvPortMalloc+0x154>
    __asm volatile
 800368c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003690:	f383 8811 	msr	BASEPRI, r3
 8003694:	f3bf 8f6f 	isb	sy
 8003698:	f3bf 8f4f 	dsb	sy
 800369c:	61bb      	str	r3, [r7, #24]
}
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	e7fd      	b.n	80036a0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036aa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80036ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d90b      	bls.n	80036ce <pvPortMalloc+0x17e>
    __asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	617b      	str	r3, [r7, #20]
}
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	1ad2      	subs	r2, r2, r3
 80036d6:	2308      	movs	r3, #8
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	429a      	cmp	r2, r3
 80036dc:	d924      	bls.n	8003728 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4413      	add	r3, r2
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036e8:	f003 0307 	and.w	r3, r3, #7
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00b      	beq.n	8003708 <pvPortMalloc+0x1b8>
    __asm volatile
 80036f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036f4:	f383 8811 	msr	BASEPRI, r3
 80036f8:	f3bf 8f6f 	isb	sy
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	613b      	str	r3, [r7, #16]
}
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	e7fd      	b.n	8003704 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800371a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003720:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003724:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003726:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003728:	4b1c      	ldr	r3, [pc, #112]	@ (800379c <pvPortMalloc+0x24c>)
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	4a1a      	ldr	r2, [pc, #104]	@ (800379c <pvPortMalloc+0x24c>)
 8003734:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003736:	4b19      	ldr	r3, [pc, #100]	@ (800379c <pvPortMalloc+0x24c>)
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	4b1c      	ldr	r3, [pc, #112]	@ (80037ac <pvPortMalloc+0x25c>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	429a      	cmp	r2, r3
 8003740:	d203      	bcs.n	800374a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003742:	4b16      	ldr	r3, [pc, #88]	@ (800379c <pvPortMalloc+0x24c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a19      	ldr	r2, [pc, #100]	@ (80037ac <pvPortMalloc+0x25c>)
 8003748:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800374a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003752:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003754:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800375c:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <pvPortMalloc+0x260>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	3301      	adds	r3, #1
 8003762:	4a13      	ldr	r2, [pc, #76]	@ (80037b0 <pvPortMalloc+0x260>)
 8003764:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003766:	f7ff f823 	bl	80027b0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800376a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800376c:	f003 0307 	and.w	r3, r3, #7
 8003770:	2b00      	cmp	r3, #0
 8003772:	d00b      	beq.n	800378c <pvPortMalloc+0x23c>
    __asm volatile
 8003774:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	60fb      	str	r3, [r7, #12]
}
 8003786:	bf00      	nop
 8003788:	bf00      	nop
 800378a:	e7fd      	b.n	8003788 <pvPortMalloc+0x238>
    return pvReturn;
 800378c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800378e:	4618      	mov	r0, r3
 8003790:	3738      	adds	r7, #56	@ 0x38
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	200193f0 	.word	0x200193f0
 800379c:	200193f4 	.word	0x200193f4
 80037a0:	200193e8 	.word	0x200193e8
 80037a4:	200003e8 	.word	0x200003e8
 80037a8:	200193e7 	.word	0x200193e7
 80037ac:	200193f8 	.word	0x200193f8
 80037b0:	200193fc 	.word	0x200193fc

080037b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d064      	beq.n	8003890 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80037c6:	2308      	movs	r3, #8
 80037c8:	425b      	negs	r3, r3
 80037ca:	69fa      	ldr	r2, [r7, #28]
 80037cc:	4413      	add	r3, r2
 80037ce:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	4a30      	ldr	r2, [pc, #192]	@ (8003898 <vPortFree+0xe4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d305      	bcc.n	80037e8 <vPortFree+0x34>
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4a2f      	ldr	r2, [pc, #188]	@ (800389c <vPortFree+0xe8>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d801      	bhi.n	80037e8 <vPortFree+0x34>
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <vPortFree+0x36>
 80037e8:	2300      	movs	r3, #0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10b      	bne.n	8003806 <vPortFree+0x52>
    __asm volatile
 80037ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f2:	f383 8811 	msr	BASEPRI, r3
 80037f6:	f3bf 8f6f 	isb	sy
 80037fa:	f3bf 8f4f 	dsb	sy
 80037fe:	617b      	str	r3, [r7, #20]
}
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	e7fd      	b.n	8003802 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <vPortFree+0x72>
    __asm volatile
 800380e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003812:	f383 8811 	msr	BASEPRI, r3
 8003816:	f3bf 8f6f 	isb	sy
 800381a:	f3bf 8f4f 	dsb	sy
 800381e:	613b      	str	r3, [r7, #16]
}
 8003820:	bf00      	nop
 8003822:	bf00      	nop
 8003824:	e7fd      	b.n	8003822 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00b      	beq.n	8003846 <vPortFree+0x92>
    __asm volatile
 800382e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003832:	f383 8811 	msr	BASEPRI, r3
 8003836:	f3bf 8f6f 	isb	sy
 800383a:	f3bf 8f4f 	dsb	sy
 800383e:	60fb      	str	r3, [r7, #12]
}
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	e7fd      	b.n	8003842 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	0fdb      	lsrs	r3, r3, #31
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d01c      	beq.n	8003890 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800385e:	69bb      	ldr	r3, [r7, #24]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800386a:	f7fe ff93 	bl	8002794 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	4b0b      	ldr	r3, [pc, #44]	@ (80038a0 <vPortFree+0xec>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4413      	add	r3, r2
 8003878:	4a09      	ldr	r2, [pc, #36]	@ (80038a0 <vPortFree+0xec>)
 800387a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800387c:	69b8      	ldr	r0, [r7, #24]
 800387e:	f000 f86d 	bl	800395c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003882:	4b08      	ldr	r3, [pc, #32]	@ (80038a4 <vPortFree+0xf0>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	4a06      	ldr	r2, [pc, #24]	@ (80038a4 <vPortFree+0xf0>)
 800388a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800388c:	f7fe ff90 	bl	80027b0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003890:	bf00      	nop
 8003892:	3720      	adds	r7, #32
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	200003e8 	.word	0x200003e8
 800389c:	200193e7 	.word	0x200193e7
 80038a0:	200193f4 	.word	0x200193f4
 80038a4:	20019400 	.word	0x20019400

080038a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038ae:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80038b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80038b4:	4b24      	ldr	r3, [pc, #144]	@ (8003948 <prvHeapInit+0xa0>)
 80038b6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00c      	beq.n	80038dc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3307      	adds	r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f023 0307 	bic.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003948 <prvHeapInit+0xa0>)
 80038d8:	4413      	add	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <prvHeapInit+0xa4>)
 80038e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80038e2:	4b1a      	ldr	r3, [pc, #104]	@ (800394c <prvHeapInit+0xa4>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4413      	add	r3, r2
 80038ee:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80038f0:	2208      	movs	r2, #8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a13      	ldr	r2, [pc, #76]	@ (8003950 <prvHeapInit+0xa8>)
 8003904:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003906:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <prvHeapInit+0xa8>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2200      	movs	r2, #0
 800390c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800390e:	4b10      	ldr	r3, [pc, #64]	@ (8003950 <prvHeapInit+0xa8>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <prvHeapInit+0xa8>)
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4a08      	ldr	r2, [pc, #32]	@ (8003954 <prvHeapInit+0xac>)
 8003932:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <prvHeapInit+0xb0>)
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	3714      	adds	r7, #20
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr
 8003948:	200003e8 	.word	0x200003e8
 800394c:	200193e8 	.word	0x200193e8
 8003950:	200193f0 	.word	0x200193f0
 8003954:	200193f8 	.word	0x200193f8
 8003958:	200193f4 	.word	0x200193f4

0800395c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800395c:	b480      	push	{r7}
 800395e:	b087      	sub	sp, #28
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003964:	4b36      	ldr	r3, [pc, #216]	@ (8003a40 <prvInsertBlockIntoFreeList+0xe4>)
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e002      	b.n	8003970 <prvInsertBlockIntoFreeList+0x14>
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	617b      	str	r3, [r7, #20]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	429a      	cmp	r2, r3
 8003978:	d8f7      	bhi.n	800396a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	4a30      	ldr	r2, [pc, #192]	@ (8003a40 <prvInsertBlockIntoFreeList+0xe4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d018      	beq.n	80039b4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	4a2f      	ldr	r2, [pc, #188]	@ (8003a44 <prvInsertBlockIntoFreeList+0xe8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d305      	bcc.n	8003996 <prvInsertBlockIntoFreeList+0x3a>
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a48 <prvInsertBlockIntoFreeList+0xec>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d801      	bhi.n	8003996 <prvInsertBlockIntoFreeList+0x3a>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <prvInsertBlockIntoFreeList+0x3c>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d10b      	bne.n	80039b4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800399c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	60fb      	str	r3, [r7, #12]
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	e7fd      	b.n	80039b0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4413      	add	r3, r2
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d108      	bne.n	80039d8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	685a      	ldr	r2, [r3, #4]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	441a      	add	r2, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	441a      	add	r2, r3
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	d118      	bne.n	8003a1e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	4b16      	ldr	r3, [pc, #88]	@ (8003a4c <prvInsertBlockIntoFreeList+0xf0>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d00d      	beq.n	8003a14 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	441a      	add	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e008      	b.n	8003a26 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003a14:	4b0d      	ldr	r3, [pc, #52]	@ (8003a4c <prvInsertBlockIntoFreeList+0xf0>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	e003      	b.n	8003a26 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d002      	beq.n	8003a34 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003a34:	bf00      	nop
 8003a36:	371c      	adds	r7, #28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr
 8003a40:	200193e8 	.word	0x200193e8
 8003a44:	200003e8 	.word	0x200003e8
 8003a48:	200193e7 	.word	0x200193e7
 8003a4c:	200193f0 	.word	0x200193f0

08003a50 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003a54:	4803      	ldr	r0, [pc, #12]	@ (8003a64 <_cbSendSystemDesc+0x14>)
 8003a56:	f001 f8f3 	bl	8004c40 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003a5a:	4803      	ldr	r0, [pc, #12]	@ (8003a68 <_cbSendSystemDesc+0x18>)
 8003a5c:	f001 f8f0 	bl	8004c40 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	08005454 	.word	0x08005454
 8003a68:	08005490 	.word	0x08005490

08003a6c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003a70:	4b06      	ldr	r3, [pc, #24]	@ (8003a8c <SEGGER_SYSVIEW_Conf+0x20>)
 8003a72:	6818      	ldr	r0, [r3, #0]
 8003a74:	4b05      	ldr	r3, [pc, #20]	@ (8003a8c <SEGGER_SYSVIEW_Conf+0x20>)
 8003a76:	6819      	ldr	r1, [r3, #0]
 8003a78:	4b05      	ldr	r3, [pc, #20]	@ (8003a90 <SEGGER_SYSVIEW_Conf+0x24>)
 8003a7a:	4a06      	ldr	r2, [pc, #24]	@ (8003a94 <SEGGER_SYSVIEW_Conf+0x28>)
 8003a7c:	f000 fd66 	bl	800454c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003a80:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003a84:	f000 fda6 	bl	80045d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003a88:	bf00      	nop
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	20000000 	.word	0x20000000
 8003a90:	08003a51 	.word	0x08003a51
 8003a94:	0800552c 	.word	0x0800552c

08003a98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003a98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	607b      	str	r3, [r7, #4]
 8003aa2:	e033      	b.n	8003b0c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003aa4:	491e      	ldr	r1, [pc, #120]	@ (8003b20 <_cbSendTaskList+0x88>)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	6818      	ldr	r0, [r3, #0]
 8003ab4:	491a      	ldr	r1, [pc, #104]	@ (8003b20 <_cbSendTaskList+0x88>)
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	6819      	ldr	r1, [r3, #0]
 8003ac6:	4c16      	ldr	r4, [pc, #88]	@ (8003b20 <_cbSendTaskList+0x88>)
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4423      	add	r3, r4
 8003ad4:	3308      	adds	r3, #8
 8003ad6:	681c      	ldr	r4, [r3, #0]
 8003ad8:	4d11      	ldr	r5, [pc, #68]	@ (8003b20 <_cbSendTaskList+0x88>)
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	442b      	add	r3, r5
 8003ae6:	330c      	adds	r3, #12
 8003ae8:	681d      	ldr	r5, [r3, #0]
 8003aea:	4e0d      	ldr	r6, [pc, #52]	@ (8003b20 <_cbSendTaskList+0x88>)
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	4433      	add	r3, r6
 8003af8:	3310      	adds	r3, #16
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	9300      	str	r3, [sp, #0]
 8003afe:	462b      	mov	r3, r5
 8003b00:	4622      	mov	r2, r4
 8003b02:	f000 f8bd 	bl	8003c80 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3301      	adds	r3, #1
 8003b0a:	607b      	str	r3, [r7, #4]
 8003b0c:	4b05      	ldr	r3, [pc, #20]	@ (8003b24 <_cbSendTaskList+0x8c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d3c6      	bcc.n	8003aa4 <_cbSendTaskList+0xc>
  }
}
 8003b16:	bf00      	nop
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b20:	20019404 	.word	0x20019404
 8003b24:	200194a4 	.word	0x200194a4

08003b28 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003b28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b2c:	b082      	sub	sp, #8
 8003b2e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003b30:	f7fe ff50 	bl	80029d4 <xTaskGetTickCountFromISR>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2200      	movs	r2, #0
 8003b38:	469a      	mov	sl, r3
 8003b3a:	4693      	mov	fp, r2
 8003b3c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003b40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	f04f 0a00 	mov.w	sl, #0
 8003b4c:	f04f 0b00 	mov.w	fp, #0
 8003b50:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003b54:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003b58:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003b5c:	4652      	mov	r2, sl
 8003b5e:	465b      	mov	r3, fp
 8003b60:	1a14      	subs	r4, r2, r0
 8003b62:	eb63 0501 	sbc.w	r5, r3, r1
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	00ab      	lsls	r3, r5, #2
 8003b70:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003b74:	00a2      	lsls	r2, r4, #2
 8003b76:	4614      	mov	r4, r2
 8003b78:	461d      	mov	r5, r3
 8003b7a:	eb14 0800 	adds.w	r8, r4, r0
 8003b7e:	eb45 0901 	adc.w	r9, r5, r1
 8003b82:	f04f 0200 	mov.w	r2, #0
 8003b86:	f04f 0300 	mov.w	r3, #0
 8003b8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b96:	4690      	mov	r8, r2
 8003b98:	4699      	mov	r9, r3
 8003b9a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003b9e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003ba2:	4610      	mov	r0, r2
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	3708      	adds	r7, #8
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003bb0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003bbe:	2205      	movs	r2, #5
 8003bc0:	492b      	ldr	r1, [pc, #172]	@ (8003c70 <SYSVIEW_AddTask+0xc0>)
 8003bc2:	68b8      	ldr	r0, [r7, #8]
 8003bc4:	f001 fbd4 	bl	8005370 <memcmp>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d04b      	beq.n	8003c66 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003bce:	4b29      	ldr	r3, [pc, #164]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b07      	cmp	r3, #7
 8003bd4:	d903      	bls.n	8003bde <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003bd6:	4828      	ldr	r0, [pc, #160]	@ (8003c78 <SYSVIEW_AddTask+0xc8>)
 8003bd8:	f001 fb6e 	bl	80052b8 <SEGGER_SYSVIEW_Warn>
    return;
 8003bdc:	e044      	b.n	8003c68 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003bde:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	4926      	ldr	r1, [pc, #152]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	4921      	ldr	r1, [pc, #132]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3304      	adds	r3, #4
 8003c04:	68ba      	ldr	r2, [r7, #8]
 8003c06:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003c08:	4b1a      	ldr	r3, [pc, #104]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c0a:	681a      	ldr	r2, [r3, #0]
 8003c0c:	491b      	ldr	r1, [pc, #108]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	3308      	adds	r3, #8
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003c1e:	4b15      	ldr	r3, [pc, #84]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4916      	ldr	r1, [pc, #88]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	330c      	adds	r3, #12
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003c34:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	4910      	ldr	r1, [pc, #64]	@ (8003c7c <SYSVIEW_AddTask+0xcc>)
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3310      	adds	r3, #16
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	4a08      	ldr	r2, [pc, #32]	@ (8003c74 <SYSVIEW_AddTask+0xc4>)
 8003c52:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f80e 	bl	8003c80 <SYSVIEW_SendTaskInfo>
 8003c64:	e000      	b.n	8003c68 <SYSVIEW_AddTask+0xb8>
    return;
 8003c66:	bf00      	nop

}
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	080054a0 	.word	0x080054a0
 8003c74:	200194a4 	.word	0x200194a4
 8003c78:	080054a8 	.word	0x080054a8
 8003c7c:	20019404 	.word	0x20019404

08003c80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b08a      	sub	sp, #40	@ 0x28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003c8e:	f107 0310 	add.w	r3, r7, #16
 8003c92:	2218      	movs	r2, #24
 8003c94:	2100      	movs	r1, #0
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 fb7a 	bl	8005390 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003cb0:	f107 0310 	add.w	r3, r7, #16
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fecb 	bl	8004a50 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003cba:	bf00      	nop
 8003cbc:	3728      	adds	r7, #40	@ 0x28
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
	...

08003cc4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003cca:	4b26      	ldr	r3, [pc, #152]	@ (8003d64 <_DoInit+0xa0>)
 8003ccc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003cce:	22a8      	movs	r2, #168	@ 0xa8
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	6838      	ldr	r0, [r7, #0]
 8003cd4:	f001 fb5c 	bl	8005390 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	2203      	movs	r2, #3
 8003cdc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	2203      	movs	r2, #3
 8003ce2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	4a20      	ldr	r2, [pc, #128]	@ (8003d68 <_DoInit+0xa4>)
 8003ce8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	4a1f      	ldr	r2, [pc, #124]	@ (8003d6c <_DoInit+0xa8>)
 8003cee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003cf6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	2200      	movs	r2, #0
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	2200      	movs	r2, #0
 8003d08:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	@ (8003d68 <_DoInit+0xa4>)
 8003d0e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	4a17      	ldr	r2, [pc, #92]	@ (8003d70 <_DoInit+0xac>)
 8003d14:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d2e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d32:	2300      	movs	r3, #0
 8003d34:	607b      	str	r3, [r7, #4]
 8003d36:	e00c      	b.n	8003d52 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f1c3 030f 	rsb	r3, r3, #15
 8003d3e:	4a0d      	ldr	r2, [pc, #52]	@ (8003d74 <_DoInit+0xb0>)
 8003d40:	5cd1      	ldrb	r1, [r2, r3]
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	460a      	mov	r2, r1
 8003d4a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	607b      	str	r3, [r7, #4]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	d9ef      	bls.n	8003d38 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003d58:	f3bf 8f5f 	dmb	sy
}
 8003d5c:	bf00      	nop
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200194a8 	.word	0x200194a8
 8003d68:	080054f8 	.word	0x080054f8
 8003d6c:	20019550 	.word	0x20019550
 8003d70:	20019950 	.word	0x20019950
 8003d74:	08005534 	.word	0x08005534

08003d78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08c      	sub	sp, #48	@ 0x30
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003d84:	4b3e      	ldr	r3, [pc, #248]	@ (8003e80 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d86:	623b      	str	r3, [r7, #32]
 8003d88:	6a3b      	ldr	r3, [r7, #32]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b53      	cmp	r3, #83	@ 0x53
 8003d90:	d001      	beq.n	8003d96 <SEGGER_RTT_ReadNoLock+0x1e>
 8003d92:	f7ff ff97 	bl	8003cc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	4613      	mov	r3, r2
 8003d9a:	005b      	lsls	r3, r3, #1
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	3360      	adds	r3, #96	@ 0x60
 8003da2:	4a37      	ldr	r2, [pc, #220]	@ (8003e80 <SEGGER_RTT_ReadNoLock+0x108>)
 8003da4:	4413      	add	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	68db      	ldr	r3, [r3, #12]
 8003db6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003db8:	2300      	movs	r3, #0
 8003dba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003dbc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d92b      	bls.n	8003e1c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	bf28      	it	cs
 8003dd6:	4613      	movcs	r3, r2
 8003dd8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	4413      	add	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003de4:	697a      	ldr	r2, [r7, #20]
 8003de6:	6939      	ldr	r1, [r7, #16]
 8003de8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003dea:	f001 fafd 	bl	80053e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	4413      	add	r3, r2
 8003df4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003df6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d101      	bne.n	8003e1c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	bf28      	it	cs
 8003e2c:	4613      	movcs	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d019      	beq.n	8003e6a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	685a      	ldr	r2, [r3, #4]
 8003e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e3c:	4413      	add	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	6939      	ldr	r1, [r7, #16]
 8003e44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003e46:	f001 facf 	bl	80053e8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003e4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	4413      	add	r3, r2
 8003e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	4413      	add	r3, r2
 8003e58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003e62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4413      	add	r3, r2
 8003e68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d002      	beq.n	8003e76 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003e74:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3730      	adds	r7, #48	@ 0x30
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}
 8003e80:	200194a8 	.word	0x200194a8

08003e84 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b088      	sub	sp, #32
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
 8003e90:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e92:	4b3d      	ldr	r3, [pc, #244]	@ (8003f88 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e94:	61bb      	str	r3, [r7, #24]
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	2b53      	cmp	r3, #83	@ 0x53
 8003e9e:	d001      	beq.n	8003ea4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003ea0:	f7ff ff10 	bl	8003cc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8003ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea8:	f04f 0120 	mov.w	r1, #32
 8003eac:	f381 8811 	msr	BASEPRI, r1
 8003eb0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003eb2:	4b35      	ldr	r3, [pc, #212]	@ (8003f88 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003eb4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003eba:	6939      	ldr	r1, [r7, #16]
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	1c5a      	adds	r2, r3, #1
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	00db      	lsls	r3, r3, #3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3304      	adds	r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d008      	beq.n	8003ee4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	691b      	ldr	r3, [r3, #16]
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	dbeb      	blt.n	8003eba <SEGGER_RTT_AllocUpBuffer+0x36>
 8003ee2:	e000      	b.n	8003ee6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003ee4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	69fa      	ldr	r2, [r7, #28]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	da3f      	bge.n	8003f70 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003ef0:	6939      	ldr	r1, [r7, #16]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	005b      	lsls	r3, r3, #1
 8003efa:	4413      	add	r3, r2
 8003efc:	00db      	lsls	r3, r3, #3
 8003efe:	440b      	add	r3, r1
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003f04:	6939      	ldr	r1, [r7, #16]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	4413      	add	r3, r2
 8003f10:	00db      	lsls	r3, r3, #3
 8003f12:	440b      	add	r3, r1
 8003f14:	3304      	adds	r3, #4
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003f1a:	6939      	ldr	r1, [r7, #16]
 8003f1c:	69fa      	ldr	r2, [r7, #28]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	4413      	add	r3, r2
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	440b      	add	r3, r1
 8003f28:	3320      	adds	r3, #32
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003f2e:	6939      	ldr	r1, [r7, #16]
 8003f30:	69fa      	ldr	r2, [r7, #28]
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	440b      	add	r3, r1
 8003f3c:	3328      	adds	r3, #40	@ 0x28
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003f42:	6939      	ldr	r1, [r7, #16]
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	4613      	mov	r3, r2
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	4413      	add	r3, r2
 8003f4c:	00db      	lsls	r3, r3, #3
 8003f4e:	440b      	add	r3, r1
 8003f50:	3324      	adds	r3, #36	@ 0x24
 8003f52:	2200      	movs	r2, #0
 8003f54:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003f56:	6939      	ldr	r1, [r7, #16]
 8003f58:	69fa      	ldr	r2, [r7, #28]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	440b      	add	r3, r1
 8003f64:	332c      	adds	r3, #44	@ 0x2c
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f6a:	f3bf 8f5f 	dmb	sy
 8003f6e:	e002      	b.n	8003f76 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003f70:	f04f 33ff 	mov.w	r3, #4294967295
 8003f74:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3720      	adds	r7, #32
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200194a8 	.word	0x200194a8

08003f8c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b08a      	sub	sp, #40	@ 0x28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f9a:	4b21      	ldr	r3, [pc, #132]	@ (8004020 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f9c:	623b      	str	r3, [r7, #32]
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b53      	cmp	r3, #83	@ 0x53
 8003fa6:	d001      	beq.n	8003fac <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003fa8:	f7ff fe8c 	bl	8003cc4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003fac:	4b1c      	ldr	r3, [pc, #112]	@ (8004020 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003fae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b02      	cmp	r3, #2
 8003fb4:	d82c      	bhi.n	8004010 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003fb6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fba:	f04f 0120 	mov.w	r1, #32
 8003fbe:	f381 8811 	msr	BASEPRI, r1
 8003fc2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003fc4:	68fa      	ldr	r2, [r7, #12]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	4413      	add	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	3360      	adds	r3, #96	@ 0x60
 8003fd0:	69fa      	ldr	r2, [r7, #28]
 8003fd2:	4413      	add	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d00e      	beq.n	8003ffa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	68ba      	ldr	r2, [r7, #8]
 8003fe0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	683a      	ldr	r2, [r7, #0]
 8003fec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ffe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004000:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800400a:	2300      	movs	r3, #0
 800400c:	627b      	str	r3, [r7, #36]	@ 0x24
 800400e:	e002      	b.n	8004016 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004010:	f04f 33ff 	mov.w	r3, #4294967295
 8004014:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004018:	4618      	mov	r0, r3
 800401a:	3728      	adds	r7, #40	@ 0x28
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	200194a8 	.word	0x200194a8

08004024 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	60fa      	str	r2, [r7, #12]
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	e022      	b.n	8004088 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	60fa      	str	r2, [r7, #12]
 800404c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b80      	cmp	r3, #128	@ 0x80
 8004052:	d90a      	bls.n	800406a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004054:	2380      	movs	r3, #128	@ 0x80
 8004056:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004058:	e007      	b.n	800406a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	1c53      	adds	r3, r2, #1
 800405e:	60bb      	str	r3, [r7, #8]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	1c59      	adds	r1, r3, #1
 8004064:	60f9      	str	r1, [r7, #12]
 8004066:	7812      	ldrb	r2, [r2, #0]
 8004068:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d003      	beq.n	800407c <_EncodeStr+0x58>
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1ee      	bne.n	800405a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b2da      	uxtb	r2, r3
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004088:	68fb      	ldr	r3, [r7, #12]
}
 800408a:	4618      	mov	r0, r3
 800408c:	371c      	adds	r7, #28
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr

08004096 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004096:	b480      	push	{r7}
 8004098:	b083      	sub	sp, #12
 800409a:	af00      	add	r7, sp, #0
 800409c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	3307      	adds	r3, #7
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	370c      	adds	r7, #12
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
	...

080040b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040b6:	4b34      	ldr	r3, [pc, #208]	@ (8004188 <_HandleIncomingPacket+0xd8>)
 80040b8:	7e1b      	ldrb	r3, [r3, #24]
 80040ba:	4618      	mov	r0, r3
 80040bc:	1cfb      	adds	r3, r7, #3
 80040be:	2201      	movs	r2, #1
 80040c0:	4619      	mov	r1, r3
 80040c2:	f7ff fe59 	bl	8003d78 <SEGGER_RTT_ReadNoLock>
 80040c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d057      	beq.n	800417e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	2b80      	cmp	r3, #128	@ 0x80
 80040d2:	d031      	beq.n	8004138 <_HandleIncomingPacket+0x88>
 80040d4:	2b80      	cmp	r3, #128	@ 0x80
 80040d6:	dc40      	bgt.n	800415a <_HandleIncomingPacket+0xaa>
 80040d8:	2b07      	cmp	r3, #7
 80040da:	dc15      	bgt.n	8004108 <_HandleIncomingPacket+0x58>
 80040dc:	2b00      	cmp	r3, #0
 80040de:	dd3c      	ble.n	800415a <_HandleIncomingPacket+0xaa>
 80040e0:	3b01      	subs	r3, #1
 80040e2:	2b06      	cmp	r3, #6
 80040e4:	d839      	bhi.n	800415a <_HandleIncomingPacket+0xaa>
 80040e6:	a201      	add	r2, pc, #4	@ (adr r2, 80040ec <_HandleIncomingPacket+0x3c>)
 80040e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040ec:	0800410f 	.word	0x0800410f
 80040f0:	08004115 	.word	0x08004115
 80040f4:	0800411b 	.word	0x0800411b
 80040f8:	08004121 	.word	0x08004121
 80040fc:	08004127 	.word	0x08004127
 8004100:	0800412d 	.word	0x0800412d
 8004104:	08004133 	.word	0x08004133
 8004108:	2b7f      	cmp	r3, #127	@ 0x7f
 800410a:	d033      	beq.n	8004174 <_HandleIncomingPacket+0xc4>
 800410c:	e025      	b.n	800415a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800410e:	f000 fb25 	bl	800475c <SEGGER_SYSVIEW_Start>
      break;
 8004112:	e034      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004114:	f000 fbdc 	bl	80048d0 <SEGGER_SYSVIEW_Stop>
      break;
 8004118:	e031      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800411a:	f000 fdb5 	bl	8004c88 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800411e:	e02e      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004120:	f000 fd7a 	bl	8004c18 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004124:	e02b      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004126:	f000 fbf9 	bl	800491c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800412a:	e028      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800412c:	f001 f886 	bl	800523c <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004130:	e025      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004132:	f001 f865 	bl	8005200 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004136:	e022      	b.n	800417e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004138:	4b13      	ldr	r3, [pc, #76]	@ (8004188 <_HandleIncomingPacket+0xd8>)
 800413a:	7e1b      	ldrb	r3, [r3, #24]
 800413c:	4618      	mov	r0, r3
 800413e:	1cfb      	adds	r3, r7, #3
 8004140:	2201      	movs	r2, #1
 8004142:	4619      	mov	r1, r3
 8004144:	f7ff fe18 	bl	8003d78 <SEGGER_RTT_ReadNoLock>
 8004148:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d013      	beq.n	8004178 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 ffca 	bl	80050ec <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004158:	e00e      	b.n	8004178 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800415a:	78fb      	ldrb	r3, [r7, #3]
 800415c:	b25b      	sxtb	r3, r3
 800415e:	2b00      	cmp	r3, #0
 8004160:	da0c      	bge.n	800417c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <_HandleIncomingPacket+0xd8>)
 8004164:	7e1b      	ldrb	r3, [r3, #24]
 8004166:	4618      	mov	r0, r3
 8004168:	1cfb      	adds	r3, r7, #3
 800416a:	2201      	movs	r2, #1
 800416c:	4619      	mov	r1, r3
 800416e:	f7ff fe03 	bl	8003d78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004172:	e003      	b.n	800417c <_HandleIncomingPacket+0xcc>
      break;
 8004174:	bf00      	nop
 8004176:	e002      	b.n	800417e <_HandleIncomingPacket+0xce>
      break;
 8004178:	bf00      	nop
 800417a:	e000      	b.n	800417e <_HandleIncomingPacket+0xce>
      break;
 800417c:	bf00      	nop
    }
  }
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	2001a968 	.word	0x2001a968

0800418c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b08c      	sub	sp, #48	@ 0x30
 8004190:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004192:	2301      	movs	r3, #1
 8004194:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004196:	1d3b      	adds	r3, r7, #4
 8004198:	3301      	adds	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80041a0:	4b31      	ldr	r3, [pc, #196]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041a6:	e00b      	b.n	80041c0 <_TrySendOverflowPacket+0x34>
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ae:	1c59      	adds	r1, r3, #1
 80041b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80041b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	09db      	lsrs	r3, r3, #7
 80041be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80041c4:	d8f0      	bhi.n	80041a8 <_TrySendOverflowPacket+0x1c>
 80041c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80041cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	701a      	strb	r2, [r3, #0]
 80041d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80041d6:	4b25      	ldr	r3, [pc, #148]	@ (800426c <_TrySendOverflowPacket+0xe0>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80041dc:	4b22      	ldr	r3, [pc, #136]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	69ba      	ldr	r2, [r7, #24]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	623b      	str	r3, [r7, #32]
 80041ee:	e00b      	b.n	8004208 <_TrySendOverflowPacket+0x7c>
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f6:	1c59      	adds	r1, r3, #1
 80041f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80041fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	09db      	lsrs	r3, r3, #7
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	2b7f      	cmp	r3, #127	@ 0x7f
 800420c:	d8f0      	bhi.n	80041f0 <_TrySendOverflowPacket+0x64>
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	627a      	str	r2, [r7, #36]	@ 0x24
 8004214:	6a3a      	ldr	r2, [r7, #32]
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	701a      	strb	r2, [r3, #0]
 800421a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800421c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800421e:	4b12      	ldr	r3, [pc, #72]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 8004220:	785b      	ldrb	r3, [r3, #1]
 8004222:	4618      	mov	r0, r3
 8004224:	1d3b      	adds	r3, r7, #4
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	461a      	mov	r2, r3
 800422c:	1d3b      	adds	r3, r7, #4
 800422e:	4619      	mov	r1, r3
 8004230:	f7fb ffd6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004234:	4603      	mov	r3, r0
 8004236:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800423e:	4a0a      	ldr	r2, [pc, #40]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004244:	4b08      	ldr	r3, [pc, #32]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	b2da      	uxtb	r2, r3
 800424c:	4b06      	ldr	r3, [pc, #24]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	e004      	b.n	800425c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004252:	4b05      	ldr	r3, [pc, #20]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	3301      	adds	r3, #1
 8004258:	4a03      	ldr	r2, [pc, #12]	@ (8004268 <_TrySendOverflowPacket+0xdc>)
 800425a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800425c:	693b      	ldr	r3, [r7, #16]
}
 800425e:	4618      	mov	r0, r3
 8004260:	3730      	adds	r7, #48	@ 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	2001a968 	.word	0x2001a968
 800426c:	e0001004 	.word	0xe0001004

08004270 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	@ 0x28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800427c:	4b98      	ldr	r3, [pc, #608]	@ (80044e0 <_SendPacket+0x270>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d010      	beq.n	80042a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004284:	4b96      	ldr	r3, [pc, #600]	@ (80044e0 <_SendPacket+0x270>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 812d 	beq.w	80044e8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800428e:	4b94      	ldr	r3, [pc, #592]	@ (80044e0 <_SendPacket+0x270>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b02      	cmp	r3, #2
 8004294:	d109      	bne.n	80042aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004296:	f7ff ff79 	bl	800418c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800429a:	4b91      	ldr	r3, [pc, #580]	@ (80044e0 <_SendPacket+0x270>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	f040 8124 	bne.w	80044ec <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80042a4:	e001      	b.n	80042aa <_SendPacket+0x3a>
    goto Send;
 80042a6:	bf00      	nop
 80042a8:	e000      	b.n	80042ac <_SendPacket+0x3c>
Send:
 80042aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b1f      	cmp	r3, #31
 80042b0:	d809      	bhi.n	80042c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80042b2:	4b8b      	ldr	r3, [pc, #556]	@ (80044e0 <_SendPacket+0x270>)
 80042b4:	69da      	ldr	r2, [r3, #28]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	fa22 f303 	lsr.w	r3, r2, r3
 80042bc:	f003 0301 	and.w	r3, r3, #1
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f040 8115 	bne.w	80044f0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b17      	cmp	r3, #23
 80042ca:	d807      	bhi.n	80042dc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e0c4      	b.n	8004466 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80042dc:	68ba      	ldr	r2, [r7, #8]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e8:	d912      	bls.n	8004310 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	09da      	lsrs	r2, r3, #7
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	60fb      	str	r3, [r7, #12]
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	68fa      	ldr	r2, [r7, #12]
 8004300:	3a01      	subs	r2, #1
 8004302:	60fa      	str	r2, [r7, #12]
 8004304:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004308:	b2da      	uxtb	r2, r3
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	701a      	strb	r2, [r3, #0]
 800430e:	e006      	b.n	800431e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	3b01      	subs	r3, #1
 8004314:	60fb      	str	r3, [r7, #12]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	b2da      	uxtb	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b7e      	cmp	r3, #126	@ 0x7e
 8004322:	d807      	bhi.n	8004334 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3b01      	subs	r3, #1
 8004328:	60fb      	str	r3, [r7, #12]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	b2da      	uxtb	r2, r3
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	701a      	strb	r2, [r3, #0]
 8004332:	e098      	b.n	8004466 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800433a:	d212      	bcs.n	8004362 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	09da      	lsrs	r2, r3, #7
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3b01      	subs	r3, #1
 8004344:	60fb      	str	r3, [r7, #12]
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	b2db      	uxtb	r3, r3
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	3a01      	subs	r2, #1
 8004354:	60fa      	str	r2, [r7, #12]
 8004356:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e081      	b.n	8004466 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004368:	d21d      	bcs.n	80043a6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	0b9a      	lsrs	r2, r3, #14
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	3b01      	subs	r3, #1
 8004372:	60fb      	str	r3, [r7, #12]
 8004374:	b2d2      	uxtb	r2, r2
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	b2db      	uxtb	r3, r3
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	3a01      	subs	r2, #1
 8004384:	60fa      	str	r2, [r7, #12]
 8004386:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800438a:	b2da      	uxtb	r2, r3
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	b2db      	uxtb	r3, r3
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	3a01      	subs	r2, #1
 8004398:	60fa      	str	r2, [r7, #12]
 800439a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800439e:	b2da      	uxtb	r2, r3
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e05f      	b.n	8004466 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80043ac:	d228      	bcs.n	8004400 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	0d5a      	lsrs	r2, r3, #21
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b01      	subs	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	b2d2      	uxtb	r2, r2
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	0b9b      	lsrs	r3, r3, #14
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	68fa      	ldr	r2, [r7, #12]
 80043c6:	3a01      	subs	r2, #1
 80043c8:	60fa      	str	r2, [r7, #12]
 80043ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	09db      	lsrs	r3, r3, #7
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	3a01      	subs	r2, #1
 80043de:	60fa      	str	r2, [r7, #12]
 80043e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	3a01      	subs	r2, #1
 80043f2:	60fa      	str	r2, [r7, #12]
 80043f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	701a      	strb	r2, [r3, #0]
 80043fe:	e032      	b.n	8004466 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0f1a      	lsrs	r2, r3, #28
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3b01      	subs	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0d5b      	lsrs	r3, r3, #21
 8004414:	b2db      	uxtb	r3, r3
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	3a01      	subs	r2, #1
 800441a:	60fa      	str	r2, [r7, #12]
 800441c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004420:	b2da      	uxtb	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0b9b      	lsrs	r3, r3, #14
 800442a:	b2db      	uxtb	r3, r3
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	3a01      	subs	r2, #1
 8004430:	60fa      	str	r2, [r7, #12]
 8004432:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004436:	b2da      	uxtb	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	09db      	lsrs	r3, r3, #7
 8004440:	b2db      	uxtb	r3, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	3a01      	subs	r2, #1
 8004446:	60fa      	str	r2, [r7, #12]
 8004448:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	b2db      	uxtb	r3, r3
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	3a01      	subs	r2, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004460:	b2da      	uxtb	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004466:	4b1f      	ldr	r3, [pc, #124]	@ (80044e4 <_SendPacket+0x274>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800446c:	4b1c      	ldr	r3, [pc, #112]	@ (80044e0 <_SendPacket+0x270>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	627b      	str	r3, [r7, #36]	@ 0x24
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	623b      	str	r3, [r7, #32]
 800447e:	e00b      	b.n	8004498 <_SendPacket+0x228>
 8004480:	6a3b      	ldr	r3, [r7, #32]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004486:	1c59      	adds	r1, r3, #1
 8004488:	6279      	str	r1, [r7, #36]	@ 0x24
 800448a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	701a      	strb	r2, [r3, #0]
 8004492:	6a3b      	ldr	r3, [r7, #32]
 8004494:	09db      	lsrs	r3, r3, #7
 8004496:	623b      	str	r3, [r7, #32]
 8004498:	6a3b      	ldr	r3, [r7, #32]
 800449a:	2b7f      	cmp	r3, #127	@ 0x7f
 800449c:	d8f0      	bhi.n	8004480 <_SendPacket+0x210>
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	b2d2      	uxtb	r2, r2
 80044a8:	701a      	strb	r2, [r3, #0]
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80044ae:	4b0c      	ldr	r3, [pc, #48]	@ (80044e0 <_SendPacket+0x270>)
 80044b0:	785b      	ldrb	r3, [r3, #1]
 80044b2:	4618      	mov	r0, r3
 80044b4:	68ba      	ldr	r2, [r7, #8]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	461a      	mov	r2, r3
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	f7fb fe8f 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80044c2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80044ca:	4a05      	ldr	r2, [pc, #20]	@ (80044e0 <_SendPacket+0x270>)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	60d3      	str	r3, [r2, #12]
 80044d0:	e00f      	b.n	80044f2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80044d2:	4b03      	ldr	r3, [pc, #12]	@ (80044e0 <_SendPacket+0x270>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	3301      	adds	r3, #1
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	4b01      	ldr	r3, [pc, #4]	@ (80044e0 <_SendPacket+0x270>)
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	e008      	b.n	80044f2 <_SendPacket+0x282>
 80044e0:	2001a968 	.word	0x2001a968
 80044e4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <_SendPacket+0x282>
      goto SendDone;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <_SendPacket+0x282>
      goto SendDone;
 80044f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80044f2:	4b14      	ldr	r3, [pc, #80]	@ (8004544 <_SendPacket+0x2d4>)
 80044f4:	7e1b      	ldrb	r3, [r3, #24]
 80044f6:	4619      	mov	r1, r3
 80044f8:	4a13      	ldr	r2, [pc, #76]	@ (8004548 <_SendPacket+0x2d8>)
 80044fa:	460b      	mov	r3, r1
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	440b      	add	r3, r1
 8004500:	00db      	lsls	r3, r3, #3
 8004502:	4413      	add	r3, r2
 8004504:	336c      	adds	r3, #108	@ 0x6c
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	4b0e      	ldr	r3, [pc, #56]	@ (8004544 <_SendPacket+0x2d4>)
 800450a:	7e1b      	ldrb	r3, [r3, #24]
 800450c:	4618      	mov	r0, r3
 800450e:	490e      	ldr	r1, [pc, #56]	@ (8004548 <_SendPacket+0x2d8>)
 8004510:	4603      	mov	r3, r0
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	4403      	add	r3, r0
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	440b      	add	r3, r1
 800451a:	3370      	adds	r3, #112	@ 0x70
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d00b      	beq.n	800453a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004522:	4b08      	ldr	r3, [pc, #32]	@ (8004544 <_SendPacket+0x2d4>)
 8004524:	789b      	ldrb	r3, [r3, #2]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d107      	bne.n	800453a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800452a:	4b06      	ldr	r3, [pc, #24]	@ (8004544 <_SendPacket+0x2d4>)
 800452c:	2201      	movs	r2, #1
 800452e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004530:	f7ff fdbe 	bl	80040b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004534:	4b03      	ldr	r3, [pc, #12]	@ (8004544 <_SendPacket+0x2d4>)
 8004536:	2200      	movs	r2, #0
 8004538:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800453a:	bf00      	nop
 800453c:	3728      	adds	r7, #40	@ 0x28
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
 8004542:	bf00      	nop
 8004544:	2001a968 	.word	0x2001a968
 8004548:	200194a8 	.word	0x200194a8

0800454c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
 8004558:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800455a:	2300      	movs	r3, #0
 800455c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004560:	4917      	ldr	r1, [pc, #92]	@ (80045c0 <SEGGER_SYSVIEW_Init+0x74>)
 8004562:	4818      	ldr	r0, [pc, #96]	@ (80045c4 <SEGGER_SYSVIEW_Init+0x78>)
 8004564:	f7ff fc8e 	bl	8003e84 <SEGGER_RTT_AllocUpBuffer>
 8004568:	4603      	mov	r3, r0
 800456a:	b2da      	uxtb	r2, r3
 800456c:	4b16      	ldr	r3, [pc, #88]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800456e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004570:	4b15      	ldr	r3, [pc, #84]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004572:	785a      	ldrb	r2, [r3, #1]
 8004574:	4b14      	ldr	r3, [pc, #80]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004576:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004578:	4b13      	ldr	r3, [pc, #76]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800457a:	7e1b      	ldrb	r3, [r3, #24]
 800457c:	4618      	mov	r0, r3
 800457e:	2300      	movs	r3, #0
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	2308      	movs	r3, #8
 8004584:	4a11      	ldr	r2, [pc, #68]	@ (80045cc <SEGGER_SYSVIEW_Init+0x80>)
 8004586:	490f      	ldr	r1, [pc, #60]	@ (80045c4 <SEGGER_SYSVIEW_Init+0x78>)
 8004588:	f7ff fd00 	bl	8003f8c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800458c:	4b0e      	ldr	r3, [pc, #56]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800458e:	2200      	movs	r2, #0
 8004590:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004592:	4b0f      	ldr	r3, [pc, #60]	@ (80045d0 <SEGGER_SYSVIEW_Init+0x84>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a0c      	ldr	r2, [pc, #48]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8004598:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800459a:	4a0b      	ldr	r2, [pc, #44]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80045a0:	4a09      	ldr	r2, [pc, #36]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80045a6:	4a08      	ldr	r2, [pc, #32]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80045ac:	4a06      	ldr	r2, [pc, #24]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80045b2:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80045b4:	2200      	movs	r2, #0
 80045b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80045b8:	bf00      	nop
 80045ba:	3710      	adds	r7, #16
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20019960 	.word	0x20019960
 80045c4:	0800550c 	.word	0x0800550c
 80045c8:	2001a968 	.word	0x2001a968
 80045cc:	2001a960 	.word	0x2001a960
 80045d0:	e0001004 	.word	0xe0001004

080045d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80045dc:	4a04      	ldr	r2, [pc, #16]	@ (80045f0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6113      	str	r3, [r2, #16]
}
 80045e2:	bf00      	nop
 80045e4:	370c      	adds	r7, #12
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	2001a968 	.word	0x2001a968

080045f4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b084      	sub	sp, #16
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80045fc:	f3ef 8311 	mrs	r3, BASEPRI
 8004600:	f04f 0120 	mov.w	r1, #32
 8004604:	f381 8811 	msr	BASEPRI, r1
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4808      	ldr	r0, [pc, #32]	@ (800462c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800460c:	f7ff fd43 	bl	8004096 <_PreparePacket>
 8004610:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f7ff fe2a 	bl	8004270 <_SendPacket>
  RECORD_END();
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f383 8811 	msr	BASEPRI, r3
}
 8004622:	bf00      	nop
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	2001a998 	.word	0x2001a998

08004630 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800463a:	f3ef 8311 	mrs	r3, BASEPRI
 800463e:	f04f 0120 	mov.w	r1, #32
 8004642:	f381 8811 	msr	BASEPRI, r1
 8004646:	617b      	str	r3, [r7, #20]
 8004648:	4816      	ldr	r0, [pc, #88]	@ (80046a4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800464a:	f7ff fd24 	bl	8004096 <_PreparePacket>
 800464e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	61fb      	str	r3, [r7, #28]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	61bb      	str	r3, [r7, #24]
 800465c:	e00b      	b.n	8004676 <SEGGER_SYSVIEW_RecordU32+0x46>
 800465e:	69bb      	ldr	r3, [r7, #24]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	1c59      	adds	r1, r3, #1
 8004666:	61f9      	str	r1, [r7, #28]
 8004668:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800466c:	b2d2      	uxtb	r2, r2
 800466e:	701a      	strb	r2, [r3, #0]
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	09db      	lsrs	r3, r3, #7
 8004674:	61bb      	str	r3, [r7, #24]
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b7f      	cmp	r3, #127	@ 0x7f
 800467a:	d8f0      	bhi.n	800465e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	1c5a      	adds	r2, r3, #1
 8004680:	61fa      	str	r2, [r7, #28]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	b2d2      	uxtb	r2, r2
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	69fb      	ldr	r3, [r7, #28]
 800468a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	6938      	ldr	r0, [r7, #16]
 8004692:	f7ff fded 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f383 8811 	msr	BASEPRI, r3
}
 800469c:	bf00      	nop
 800469e:	3720      	adds	r7, #32
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	2001a998 	.word	0x2001a998

080046a8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08c      	sub	sp, #48	@ 0x30
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80046b4:	f3ef 8311 	mrs	r3, BASEPRI
 80046b8:	f04f 0120 	mov.w	r1, #32
 80046bc:	f381 8811 	msr	BASEPRI, r1
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	4825      	ldr	r0, [pc, #148]	@ (8004758 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80046c4:	f7ff fce7 	bl	8004096 <_PreparePacket>
 80046c8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046d6:	e00b      	b.n	80046f0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80046d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	1c59      	adds	r1, r3, #1
 80046e0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80046e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046e6:	b2d2      	uxtb	r2, r2
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ec:	09db      	lsrs	r3, r3, #7
 80046ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f4:	d8f0      	bhi.n	80046d8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80046f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	627b      	str	r3, [r7, #36]	@ 0x24
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	623b      	str	r3, [r7, #32]
 800470e:	e00b      	b.n	8004728 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004710:	6a3b      	ldr	r3, [r7, #32]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004716:	1c59      	adds	r1, r3, #1
 8004718:	6279      	str	r1, [r7, #36]	@ 0x24
 800471a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800471e:	b2d2      	uxtb	r2, r2
 8004720:	701a      	strb	r2, [r3, #0]
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	09db      	lsrs	r3, r3, #7
 8004726:	623b      	str	r3, [r7, #32]
 8004728:	6a3b      	ldr	r3, [r7, #32]
 800472a:	2b7f      	cmp	r3, #127	@ 0x7f
 800472c:	d8f0      	bhi.n	8004710 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	1c5a      	adds	r2, r3, #1
 8004732:	627a      	str	r2, [r7, #36]	@ 0x24
 8004734:	6a3a      	ldr	r2, [r7, #32]
 8004736:	b2d2      	uxtb	r2, r2
 8004738:	701a      	strb	r2, [r3, #0]
 800473a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800473c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	6979      	ldr	r1, [r7, #20]
 8004742:	69b8      	ldr	r0, [r7, #24]
 8004744:	f7ff fd94 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f383 8811 	msr	BASEPRI, r3
}
 800474e:	bf00      	nop
 8004750:	3730      	adds	r7, #48	@ 0x30
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	2001a998 	.word	0x2001a998

0800475c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b08c      	sub	sp, #48	@ 0x30
 8004760:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004762:	4b58      	ldr	r3, [pc, #352]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004768:	f3ef 8311 	mrs	r3, BASEPRI
 800476c:	f04f 0120 	mov.w	r1, #32
 8004770:	f381 8811 	msr	BASEPRI, r1
 8004774:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004776:	4b53      	ldr	r3, [pc, #332]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	220a      	movs	r2, #10
 800477c:	4952      	ldr	r1, [pc, #328]	@ (80048c8 <SEGGER_SYSVIEW_Start+0x16c>)
 800477e:	4618      	mov	r0, r3
 8004780:	f7fb fd2e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800478a:	200a      	movs	r0, #10
 800478c:	f7ff ff32 	bl	80045f4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004790:	f3ef 8311 	mrs	r3, BASEPRI
 8004794:	f04f 0120 	mov.w	r1, #32
 8004798:	f381 8811 	msr	BASEPRI, r1
 800479c:	60bb      	str	r3, [r7, #8]
 800479e:	484b      	ldr	r0, [pc, #300]	@ (80048cc <SEGGER_SYSVIEW_Start+0x170>)
 80047a0:	f7ff fc79 	bl	8004096 <_PreparePacket>
 80047a4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047ae:	4b45      	ldr	r3, [pc, #276]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047b4:	e00b      	b.n	80047ce <SEGGER_SYSVIEW_Start+0x72>
 80047b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b8:	b2da      	uxtb	r2, r3
 80047ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047bc:	1c59      	adds	r1, r3, #1
 80047be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80047c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047c4:	b2d2      	uxtb	r2, r2
 80047c6:	701a      	strb	r2, [r3, #0]
 80047c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ca:	09db      	lsrs	r3, r3, #7
 80047cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80047ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80047d2:	d8f0      	bhi.n	80047b6 <SEGGER_SYSVIEW_Start+0x5a>
 80047d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80047e8:	4b36      	ldr	r3, [pc, #216]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	623b      	str	r3, [r7, #32]
 80047ee:	e00b      	b.n	8004808 <SEGGER_SYSVIEW_Start+0xac>
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	b2da      	uxtb	r2, r3
 80047f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f6:	1c59      	adds	r1, r3, #1
 80047f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80047fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047fe:	b2d2      	uxtb	r2, r2
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	6a3b      	ldr	r3, [r7, #32]
 8004804:	09db      	lsrs	r3, r3, #7
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2b7f      	cmp	r3, #127	@ 0x7f
 800480c:	d8f0      	bhi.n	80047f0 <SEGGER_SYSVIEW_Start+0x94>
 800480e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	627a      	str	r2, [r7, #36]	@ 0x24
 8004814:	6a3a      	ldr	r2, [r7, #32]
 8004816:	b2d2      	uxtb	r2, r2
 8004818:	701a      	strb	r2, [r3, #0]
 800481a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	61fb      	str	r3, [r7, #28]
 8004822:	4b28      	ldr	r3, [pc, #160]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	e00b      	b.n	8004842 <SEGGER_SYSVIEW_Start+0xe6>
 800482a:	69bb      	ldr	r3, [r7, #24]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	1c59      	adds	r1, r3, #1
 8004832:	61f9      	str	r1, [r7, #28]
 8004834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004838:	b2d2      	uxtb	r2, r2
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	69bb      	ldr	r3, [r7, #24]
 800483e:	09db      	lsrs	r3, r3, #7
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b7f      	cmp	r3, #127	@ 0x7f
 8004846:	d8f0      	bhi.n	800482a <SEGGER_SYSVIEW_Start+0xce>
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	1c5a      	adds	r2, r3, #1
 800484c:	61fa      	str	r2, [r7, #28]
 800484e:	69ba      	ldr	r2, [r7, #24]
 8004850:	b2d2      	uxtb	r2, r2
 8004852:	701a      	strb	r2, [r3, #0]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	2300      	movs	r3, #0
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	e00b      	b.n	800487a <SEGGER_SYSVIEW_Start+0x11e>
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	b2da      	uxtb	r2, r3
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	1c59      	adds	r1, r3, #1
 800486a:	6179      	str	r1, [r7, #20]
 800486c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004870:	b2d2      	uxtb	r2, r2
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	613b      	str	r3, [r7, #16]
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	2b7f      	cmp	r3, #127	@ 0x7f
 800487e:	d8f0      	bhi.n	8004862 <SEGGER_SYSVIEW_Start+0x106>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	617a      	str	r2, [r7, #20]
 8004886:	693a      	ldr	r2, [r7, #16]
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	701a      	strb	r2, [r3, #0]
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004890:	2218      	movs	r2, #24
 8004892:	6839      	ldr	r1, [r7, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f7ff fceb 	bl	8004270 <_SendPacket>
      RECORD_END();
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80048a0:	4b08      	ldr	r3, [pc, #32]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 80048a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d002      	beq.n	80048ae <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80048a8:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <SEGGER_SYSVIEW_Start+0x168>)
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80048ae:	f000 f9eb 	bl	8004c88 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80048b2:	f000 f9b1 	bl	8004c18 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80048b6:	f000 fcc1 	bl	800523c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80048ba:	bf00      	nop
 80048bc:	3730      	adds	r7, #48	@ 0x30
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	2001a968 	.word	0x2001a968
 80048c8:	08005548 	.word	0x08005548
 80048cc:	2001a998 	.word	0x2001a998

080048d0 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80048d6:	f3ef 8311 	mrs	r3, BASEPRI
 80048da:	f04f 0120 	mov.w	r1, #32
 80048de:	f381 8811 	msr	BASEPRI, r1
 80048e2:	607b      	str	r3, [r7, #4]
 80048e4:	480b      	ldr	r0, [pc, #44]	@ (8004914 <SEGGER_SYSVIEW_Stop+0x44>)
 80048e6:	f7ff fbd6 	bl	8004096 <_PreparePacket>
 80048ea:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <SEGGER_SYSVIEW_Stop+0x48>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d007      	beq.n	8004904 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80048f4:	220b      	movs	r2, #11
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6838      	ldr	r0, [r7, #0]
 80048fa:	f7ff fcb9 	bl	8004270 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80048fe:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <SEGGER_SYSVIEW_Stop+0x48>)
 8004900:	2200      	movs	r2, #0
 8004902:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f383 8811 	msr	BASEPRI, r3
}
 800490a:	bf00      	nop
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	2001a998 	.word	0x2001a998
 8004918:	2001a968 	.word	0x2001a968

0800491c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004922:	f3ef 8311 	mrs	r3, BASEPRI
 8004926:	f04f 0120 	mov.w	r1, #32
 800492a:	f381 8811 	msr	BASEPRI, r1
 800492e:	60fb      	str	r3, [r7, #12]
 8004930:	4845      	ldr	r0, [pc, #276]	@ (8004a48 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004932:	f7ff fbb0 	bl	8004096 <_PreparePacket>
 8004936:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004940:	4b42      	ldr	r3, [pc, #264]	@ (8004a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004946:	e00b      	b.n	8004960 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	b2da      	uxtb	r2, r3
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	1c59      	adds	r1, r3, #1
 8004950:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004952:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004956:	b2d2      	uxtb	r2, r2
 8004958:	701a      	strb	r2, [r3, #0]
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	09db      	lsrs	r3, r3, #7
 800495e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004962:	2b7f      	cmp	r3, #127	@ 0x7f
 8004964:	d8f0      	bhi.n	8004948 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004966:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800496c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004974:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	627b      	str	r3, [r7, #36]	@ 0x24
 800497a:	4b34      	ldr	r3, [pc, #208]	@ (8004a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	623b      	str	r3, [r7, #32]
 8004980:	e00b      	b.n	800499a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004982:	6a3b      	ldr	r3, [r7, #32]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	1c59      	adds	r1, r3, #1
 800498a:	6279      	str	r1, [r7, #36]	@ 0x24
 800498c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004990:	b2d2      	uxtb	r2, r2
 8004992:	701a      	strb	r2, [r3, #0]
 8004994:	6a3b      	ldr	r3, [r7, #32]
 8004996:	09db      	lsrs	r3, r3, #7
 8004998:	623b      	str	r3, [r7, #32]
 800499a:	6a3b      	ldr	r3, [r7, #32]
 800499c:	2b7f      	cmp	r3, #127	@ 0x7f
 800499e:	d8f0      	bhi.n	8004982 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80049a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80049a6:	6a3a      	ldr	r2, [r7, #32]
 80049a8:	b2d2      	uxtb	r2, r2
 80049aa:	701a      	strb	r2, [r3, #0]
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	61fb      	str	r3, [r7, #28]
 80049b4:	4b25      	ldr	r3, [pc, #148]	@ (8004a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	61bb      	str	r3, [r7, #24]
 80049ba:	e00b      	b.n	80049d4 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	b2da      	uxtb	r2, r3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	1c59      	adds	r1, r3, #1
 80049c4:	61f9      	str	r1, [r7, #28]
 80049c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	09db      	lsrs	r3, r3, #7
 80049d2:	61bb      	str	r3, [r7, #24]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80049d8:	d8f0      	bhi.n	80049bc <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	1c5a      	adds	r2, r3, #1
 80049de:	61fa      	str	r2, [r7, #28]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	b2d2      	uxtb	r2, r2
 80049e4:	701a      	strb	r2, [r3, #0]
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	617b      	str	r3, [r7, #20]
 80049ee:	2300      	movs	r3, #0
 80049f0:	613b      	str	r3, [r7, #16]
 80049f2:	e00b      	b.n	8004a0c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	1c59      	adds	r1, r3, #1
 80049fc:	6179      	str	r1, [r7, #20]
 80049fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	701a      	strb	r2, [r3, #0]
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	09db      	lsrs	r3, r3, #7
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a10:	d8f0      	bhi.n	80049f4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	617a      	str	r2, [r7, #20]
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a22:	2218      	movs	r2, #24
 8004a24:	6879      	ldr	r1, [r7, #4]
 8004a26:	68b8      	ldr	r0, [r7, #8]
 8004a28:	f7ff fc22 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a32:	4b06      	ldr	r3, [pc, #24]	@ (8004a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004a3a:	4b04      	ldr	r3, [pc, #16]	@ (8004a4c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a3e:	4798      	blx	r3
  }
}
 8004a40:	bf00      	nop
 8004a42:	3730      	adds	r7, #48	@ 0x30
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	2001a998 	.word	0x2001a998
 8004a4c:	2001a968 	.word	0x2001a968

08004a50 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b092      	sub	sp, #72	@ 0x48
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004a58:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5c:	f04f 0120 	mov.w	r1, #32
 8004a60:	f381 8811 	msr	BASEPRI, r1
 8004a64:	617b      	str	r3, [r7, #20]
 8004a66:	486a      	ldr	r0, [pc, #424]	@ (8004c10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004a68:	f7ff fb15 	bl	8004096 <_PreparePacket>
 8004a6c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	4b66      	ldr	r3, [pc, #408]	@ (8004c14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	1ad3      	subs	r3, r2, r3
 8004a80:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a82:	e00b      	b.n	8004a9c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004a84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a8a:	1c59      	adds	r1, r3, #1
 8004a8c:	6479      	str	r1, [r7, #68]	@ 0x44
 8004a8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a98:	09db      	lsrs	r3, r3, #7
 8004a9a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004aa0:	d8f0      	bhi.n	8004a84 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	647a      	str	r2, [r7, #68]	@ 0x44
 8004aa8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004aaa:	b2d2      	uxtb	r2, r2
 8004aac:	701a      	strb	r2, [r3, #0]
 8004aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004abc:	e00b      	b.n	8004ad6 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004abe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac4:	1c59      	adds	r1, r3, #1
 8004ac6:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004ac8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004acc:	b2d2      	uxtb	r2, r2
 8004ace:	701a      	strb	r2, [r3, #0]
 8004ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad2:	09db      	lsrs	r3, r3, #7
 8004ad4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ada:	d8f0      	bhi.n	8004abe <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004adc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ae2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ae4:	b2d2      	uxtb	r2, r2
 8004ae6:	701a      	strb	r2, [r3, #0]
 8004ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aea:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	2220      	movs	r2, #32
 8004af2:	4619      	mov	r1, r3
 8004af4:	68f8      	ldr	r0, [r7, #12]
 8004af6:	f7ff fa95 	bl	8004024 <_EncodeStr>
 8004afa:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004afc:	2209      	movs	r2, #9
 8004afe:	68f9      	ldr	r1, [r7, #12]
 8004b00:	6938      	ldr	r0, [r7, #16]
 8004b02:	f7ff fbb5 	bl	8004270 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	4b40      	ldr	r3, [pc, #256]	@ (8004c14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b1a:	e00b      	b.n	8004b34 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b1e:	b2da      	uxtb	r2, r3
 8004b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	6379      	str	r1, [r7, #52]	@ 0x34
 8004b26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b2a:	b2d2      	uxtb	r2, r2
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	09db      	lsrs	r3, r3, #7
 8004b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b38:	d8f0      	bhi.n	8004b1c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	637a      	str	r2, [r7, #52]	@ 0x34
 8004b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	701a      	strb	r2, [r3, #0]
 8004b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b54:	e00b      	b.n	8004b6e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b5c:	1c59      	adds	r1, r3, #1
 8004b5e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b64:	b2d2      	uxtb	r2, r2
 8004b66:	701a      	strb	r2, [r3, #0]
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	09db      	lsrs	r3, r3, #7
 8004b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b72:	d8f0      	bhi.n	8004b56 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b76:	1c5a      	adds	r2, r3, #1
 8004b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	701a      	strb	r2, [r3, #0]
 8004b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b82:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	623b      	str	r3, [r7, #32]
 8004b8e:	e00b      	b.n	8004ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004b90:	6a3b      	ldr	r3, [r7, #32]
 8004b92:	b2da      	uxtb	r2, r3
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	1c59      	adds	r1, r3, #1
 8004b98:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	09db      	lsrs	r3, r3, #7
 8004ba6:	623b      	str	r3, [r7, #32]
 8004ba8:	6a3b      	ldr	r3, [r7, #32]
 8004baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bac:	d8f0      	bhi.n	8004b90 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bb4:	6a3a      	ldr	r2, [r7, #32]
 8004bb6:	b2d2      	uxtb	r2, r2
 8004bb8:	701a      	strb	r2, [r3, #0]
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	695b      	ldr	r3, [r3, #20]
 8004bc6:	61bb      	str	r3, [r7, #24]
 8004bc8:	e00b      	b.n	8004be2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	69fb      	ldr	r3, [r7, #28]
 8004bd0:	1c59      	adds	r1, r3, #1
 8004bd2:	61f9      	str	r1, [r7, #28]
 8004bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bd8:	b2d2      	uxtb	r2, r2
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	09db      	lsrs	r3, r3, #7
 8004be0:	61bb      	str	r3, [r7, #24]
 8004be2:	69bb      	ldr	r3, [r7, #24]
 8004be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004be6:	d8f0      	bhi.n	8004bca <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	1c5a      	adds	r2, r3, #1
 8004bec:	61fa      	str	r2, [r7, #28]
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	b2d2      	uxtb	r2, r2
 8004bf2:	701a      	strb	r2, [r3, #0]
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004bf8:	2215      	movs	r2, #21
 8004bfa:	68f9      	ldr	r1, [r7, #12]
 8004bfc:	6938      	ldr	r0, [r7, #16]
 8004bfe:	f7ff fb37 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	f383 8811 	msr	BASEPRI, r3
}
 8004c08:	bf00      	nop
 8004c0a:	3748      	adds	r7, #72	@ 0x48
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	2001a998 	.word	0x2001a998
 8004c14:	2001a968 	.word	0x2001a968

08004c18 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004c1c:	4b07      	ldr	r3, [pc, #28]	@ (8004c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c1e:	6a1b      	ldr	r3, [r3, #32]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004c24:	4b05      	ldr	r3, [pc, #20]	@ (8004c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004c2e:	4b03      	ldr	r3, [pc, #12]	@ (8004c3c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	4798      	blx	r3
  }
}
 8004c36:	bf00      	nop
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	2001a968 	.word	0x2001a968

08004c40 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c48:	f3ef 8311 	mrs	r3, BASEPRI
 8004c4c:	f04f 0120 	mov.w	r1, #32
 8004c50:	f381 8811 	msr	BASEPRI, r1
 8004c54:	617b      	str	r3, [r7, #20]
 8004c56:	480b      	ldr	r0, [pc, #44]	@ (8004c84 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004c58:	f7ff fa1d 	bl	8004096 <_PreparePacket>
 8004c5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c5e:	2280      	movs	r2, #128	@ 0x80
 8004c60:	6879      	ldr	r1, [r7, #4]
 8004c62:	6938      	ldr	r0, [r7, #16]
 8004c64:	f7ff f9de 	bl	8004024 <_EncodeStr>
 8004c68:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004c6a:	220e      	movs	r2, #14
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	6938      	ldr	r0, [r7, #16]
 8004c70:	f7ff fafe 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f383 8811 	msr	BASEPRI, r3
}
 8004c7a:	bf00      	nop
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	2001a998 	.word	0x2001a998

08004c88 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004c88:	b590      	push	{r4, r7, lr}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004c8e:	4b15      	ldr	r3, [pc, #84]	@ (8004ce4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c90:	6a1b      	ldr	r3, [r3, #32]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d01a      	beq.n	8004ccc <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004c96:	4b13      	ldr	r3, [pc, #76]	@ (8004ce4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d015      	beq.n	8004ccc <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004ca2:	6a1b      	ldr	r3, [r3, #32]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4798      	blx	r3
 8004ca8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cac:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004cae:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004cb2:	f04f 0200 	mov.w	r2, #0
 8004cb6:	f04f 0300 	mov.w	r3, #0
 8004cba:	000a      	movs	r2, r1
 8004cbc:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4621      	mov	r1, r4
 8004cc4:	200d      	movs	r0, #13
 8004cc6:	f7ff fcef 	bl	80046a8 <SEGGER_SYSVIEW_RecordU32x2>
 8004cca:	e006      	b.n	8004cda <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004ccc:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	200c      	movs	r0, #12
 8004cd4:	f7ff fcac 	bl	8004630 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004cd8:	bf00      	nop
 8004cda:	bf00      	nop
 8004cdc:	370c      	adds	r7, #12
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd90      	pop	{r4, r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2001a968 	.word	0x2001a968
 8004ce8:	e0001004 	.word	0xe0001004

08004cec <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cf2:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf6:	f04f 0120 	mov.w	r1, #32
 8004cfa:	f381 8811 	msr	BASEPRI, r1
 8004cfe:	60fb      	str	r3, [r7, #12]
 8004d00:	4819      	ldr	r0, [pc, #100]	@ (8004d68 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004d02:	f7ff f9c8 	bl	8004096 <_PreparePacket>
 8004d06:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004d0c:	4b17      	ldr	r3, [pc, #92]	@ (8004d6c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d14:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	613b      	str	r3, [r7, #16]
 8004d1e:	e00b      	b.n	8004d38 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	1c59      	adds	r1, r3, #1
 8004d28:	6179      	str	r1, [r7, #20]
 8004d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d2e:	b2d2      	uxtb	r2, r2
 8004d30:	701a      	strb	r2, [r3, #0]
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	09db      	lsrs	r3, r3, #7
 8004d36:	613b      	str	r3, [r7, #16]
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d3c:	d8f0      	bhi.n	8004d20 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	617a      	str	r2, [r7, #20]
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	b2d2      	uxtb	r2, r2
 8004d48:	701a      	strb	r2, [r3, #0]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004d4e:	2202      	movs	r2, #2
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	68b8      	ldr	r0, [r7, #8]
 8004d54:	f7ff fa8c 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f383 8811 	msr	BASEPRI, r3
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	2001a998 	.word	0x2001a998
 8004d6c:	e000ed04 	.word	0xe000ed04

08004d70 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004d76:	f3ef 8311 	mrs	r3, BASEPRI
 8004d7a:	f04f 0120 	mov.w	r1, #32
 8004d7e:	f381 8811 	msr	BASEPRI, r1
 8004d82:	607b      	str	r3, [r7, #4]
 8004d84:	4807      	ldr	r0, [pc, #28]	@ (8004da4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004d86:	f7ff f986 	bl	8004096 <_PreparePacket>
 8004d8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004d8c:	2203      	movs	r2, #3
 8004d8e:	6839      	ldr	r1, [r7, #0]
 8004d90:	6838      	ldr	r0, [r7, #0]
 8004d92:	f7ff fa6d 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f383 8811 	msr	BASEPRI, r3
}
 8004d9c:	bf00      	nop
 8004d9e:	3708      	adds	r7, #8
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}
 8004da4:	2001a998 	.word	0x2001a998

08004da8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004dae:	f3ef 8311 	mrs	r3, BASEPRI
 8004db2:	f04f 0120 	mov.w	r1, #32
 8004db6:	f381 8811 	msr	BASEPRI, r1
 8004dba:	607b      	str	r3, [r7, #4]
 8004dbc:	4807      	ldr	r0, [pc, #28]	@ (8004ddc <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004dbe:	f7ff f96a 	bl	8004096 <_PreparePacket>
 8004dc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004dc4:	2212      	movs	r2, #18
 8004dc6:	6839      	ldr	r1, [r7, #0]
 8004dc8:	6838      	ldr	r0, [r7, #0]
 8004dca:	f7ff fa51 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f383 8811 	msr	BASEPRI, r3
}
 8004dd4:	bf00      	nop
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	2001a998 	.word	0x2001a998

08004de0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004de8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dec:	f04f 0120 	mov.w	r1, #32
 8004df0:	f381 8811 	msr	BASEPRI, r1
 8004df4:	617b      	str	r3, [r7, #20]
 8004df6:	4817      	ldr	r0, [pc, #92]	@ (8004e54 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8004df8:	f7ff f94d 	bl	8004096 <_PreparePacket>
 8004dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	61bb      	str	r3, [r7, #24]
 8004e0a:	e00b      	b.n	8004e24 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	1c59      	adds	r1, r3, #1
 8004e14:	61f9      	str	r1, [r7, #28]
 8004e16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e1a:	b2d2      	uxtb	r2, r2
 8004e1c:	701a      	strb	r2, [r3, #0]
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	09db      	lsrs	r3, r3, #7
 8004e22:	61bb      	str	r3, [r7, #24]
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e28:	d8f0      	bhi.n	8004e0c <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	1c5a      	adds	r2, r3, #1
 8004e2e:	61fa      	str	r2, [r7, #28]
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	b2d2      	uxtb	r2, r2
 8004e34:	701a      	strb	r2, [r3, #0]
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004e3a:	221c      	movs	r2, #28
 8004e3c:	68f9      	ldr	r1, [r7, #12]
 8004e3e:	6938      	ldr	r0, [r7, #16]
 8004e40:	f7ff fa16 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f383 8811 	msr	BASEPRI, r3
}
 8004e4a:	bf00      	nop
 8004e4c:	3720      	adds	r7, #32
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	2001a998 	.word	0x2001a998

08004e58 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	@ 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
 8004e60:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e62:	f3ef 8311 	mrs	r3, BASEPRI
 8004e66:	f04f 0120 	mov.w	r1, #32
 8004e6a:	f381 8811 	msr	BASEPRI, r1
 8004e6e:	617b      	str	r3, [r7, #20]
 8004e70:	4824      	ldr	r0, [pc, #144]	@ (8004f04 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8004e72:	f7ff f910 	bl	8004096 <_PreparePacket>
 8004e76:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	623b      	str	r3, [r7, #32]
 8004e84:	e00b      	b.n	8004e9e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	b2da      	uxtb	r2, r3
 8004e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e8c:	1c59      	adds	r1, r3, #1
 8004e8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	09db      	lsrs	r3, r3, #7
 8004e9c:	623b      	str	r3, [r7, #32]
 8004e9e:	6a3b      	ldr	r3, [r7, #32]
 8004ea0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ea2:	d8f0      	bhi.n	8004e86 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eaa:	6a3a      	ldr	r2, [r7, #32]
 8004eac:	b2d2      	uxtb	r2, r2
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	61bb      	str	r3, [r7, #24]
 8004ebc:	e00b      	b.n	8004ed6 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	1c59      	adds	r1, r3, #1
 8004ec6:	61f9      	str	r1, [r7, #28]
 8004ec8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ecc:	b2d2      	uxtb	r2, r2
 8004ece:	701a      	strb	r2, [r3, #0]
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	09db      	lsrs	r3, r3, #7
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004eda:	d8f0      	bhi.n	8004ebe <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	1c5a      	adds	r2, r3, #1
 8004ee0:	61fa      	str	r2, [r7, #28]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	b2d2      	uxtb	r2, r2
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004eec:	221c      	movs	r2, #28
 8004eee:	68f9      	ldr	r1, [r7, #12]
 8004ef0:	6938      	ldr	r0, [r7, #16]
 8004ef2:	f7ff f9bd 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f383 8811 	msr	BASEPRI, r3
}
 8004efc:	bf00      	nop
 8004efe:	3728      	adds	r7, #40	@ 0x28
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}
 8004f04:	2001a998 	.word	0x2001a998

08004f08 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f0e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f12:	f04f 0120 	mov.w	r1, #32
 8004f16:	f381 8811 	msr	BASEPRI, r1
 8004f1a:	607b      	str	r3, [r7, #4]
 8004f1c:	4807      	ldr	r0, [pc, #28]	@ (8004f3c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004f1e:	f7ff f8ba 	bl	8004096 <_PreparePacket>
 8004f22:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004f24:	2211      	movs	r2, #17
 8004f26:	6839      	ldr	r1, [r7, #0]
 8004f28:	6838      	ldr	r0, [r7, #0]
 8004f2a:	f7ff f9a1 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f383 8811 	msr	BASEPRI, r3
}
 8004f34:	bf00      	nop
 8004f36:	3708      	adds	r7, #8
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	2001a998 	.word	0x2001a998

08004f40 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b088      	sub	sp, #32
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004f48:	f3ef 8311 	mrs	r3, BASEPRI
 8004f4c:	f04f 0120 	mov.w	r1, #32
 8004f50:	f381 8811 	msr	BASEPRI, r1
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	4819      	ldr	r0, [pc, #100]	@ (8004fbc <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8004f58:	f7ff f89d 	bl	8004096 <_PreparePacket>
 8004f5c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004f62:	4b17      	ldr	r3, [pc, #92]	@ (8004fc0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	61fb      	str	r3, [r7, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	61bb      	str	r3, [r7, #24]
 8004f74:	e00b      	b.n	8004f8e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	1c59      	adds	r1, r3, #1
 8004f7e:	61f9      	str	r1, [r7, #28]
 8004f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	69bb      	ldr	r3, [r7, #24]
 8004f8a:	09db      	lsrs	r3, r3, #7
 8004f8c:	61bb      	str	r3, [r7, #24]
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f92:	d8f0      	bhi.n	8004f76 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	61fa      	str	r2, [r7, #28]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	69fb      	ldr	r3, [r7, #28]
 8004fa2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	68f9      	ldr	r1, [r7, #12]
 8004fa8:	6938      	ldr	r0, [r7, #16]
 8004faa:	f7ff f961 	bl	8004270 <_SendPacket>
  RECORD_END();
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f383 8811 	msr	BASEPRI, r3
}
 8004fb4:	bf00      	nop
 8004fb6:	3720      	adds	r7, #32
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	2001a998 	.word	0x2001a998
 8004fc0:	2001a968 	.word	0x2001a968

08004fc4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b088      	sub	sp, #32
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fcc:	f3ef 8311 	mrs	r3, BASEPRI
 8004fd0:	f04f 0120 	mov.w	r1, #32
 8004fd4:	f381 8811 	msr	BASEPRI, r1
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	4819      	ldr	r0, [pc, #100]	@ (8005040 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004fdc:	f7ff f85b 	bl	8004096 <_PreparePacket>
 8004fe0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004fe6:	4b17      	ldr	r3, [pc, #92]	@ (8005044 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	61fb      	str	r3, [r7, #28]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	61bb      	str	r3, [r7, #24]
 8004ff8:	e00b      	b.n	8005012 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	b2da      	uxtb	r2, r3
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	1c59      	adds	r1, r3, #1
 8005002:	61f9      	str	r1, [r7, #28]
 8005004:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005008:	b2d2      	uxtb	r2, r2
 800500a:	701a      	strb	r2, [r3, #0]
 800500c:	69bb      	ldr	r3, [r7, #24]
 800500e:	09db      	lsrs	r3, r3, #7
 8005010:	61bb      	str	r3, [r7, #24]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	2b7f      	cmp	r3, #127	@ 0x7f
 8005016:	d8f0      	bhi.n	8004ffa <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	61fa      	str	r2, [r7, #28]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	b2d2      	uxtb	r2, r2
 8005022:	701a      	strb	r2, [r3, #0]
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005028:	2204      	movs	r2, #4
 800502a:	68f9      	ldr	r1, [r7, #12]
 800502c:	6938      	ldr	r0, [r7, #16]
 800502e:	f7ff f91f 	bl	8004270 <_SendPacket>
  RECORD_END();
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f383 8811 	msr	BASEPRI, r3
}
 8005038:	bf00      	nop
 800503a:	3720      	adds	r7, #32
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2001a998 	.word	0x2001a998
 8005044:	2001a968 	.word	0x2001a968

08005048 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005048:	b580      	push	{r7, lr}
 800504a:	b088      	sub	sp, #32
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005050:	f3ef 8311 	mrs	r3, BASEPRI
 8005054:	f04f 0120 	mov.w	r1, #32
 8005058:	f381 8811 	msr	BASEPRI, r1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	4819      	ldr	r0, [pc, #100]	@ (80050c4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005060:	f7ff f819 	bl	8004096 <_PreparePacket>
 8005064:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800506a:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	61f9      	str	r1, [r7, #28]
 8005088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b7f      	cmp	r3, #127	@ 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80050ac:	2206      	movs	r2, #6
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6938      	ldr	r0, [r7, #16]
 80050b2:	f7ff f8dd 	bl	8004270 <_SendPacket>
  RECORD_END();
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
 80050be:	3720      	adds	r7, #32
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	2001a998 	.word	0x2001a998
 80050c8:	2001a968 	.word	0x2001a968

080050cc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80050d4:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	687a      	ldr	r2, [r7, #4]
 80050da:	1ad3      	subs	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr
 80050e8:	2001a968 	.word	0x2001a968

080050ec <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b08c      	sub	sp, #48	@ 0x30
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	4603      	mov	r3, r0
 80050f4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80050f6:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d077      	beq.n	80051ee <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80050fe:	4b3e      	ldr	r3, [pc, #248]	@ (80051f8 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005104:	2300      	movs	r3, #0
 8005106:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005108:	e008      	b.n	800511c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800510a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005110:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005118:	3301      	adds	r3, #1
 800511a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800511c:	79fb      	ldrb	r3, [r7, #7]
 800511e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005120:	429a      	cmp	r2, r3
 8005122:	d3f2      	bcc.n	800510a <SEGGER_SYSVIEW_SendModule+0x1e>
 8005124:	e000      	b.n	8005128 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005126:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d055      	beq.n	80051da <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800512e:	f3ef 8311 	mrs	r3, BASEPRI
 8005132:	f04f 0120 	mov.w	r1, #32
 8005136:	f381 8811 	msr	BASEPRI, r1
 800513a:	617b      	str	r3, [r7, #20]
 800513c:	482f      	ldr	r0, [pc, #188]	@ (80051fc <SEGGER_SYSVIEW_SendModule+0x110>)
 800513e:	f7fe ffaa 	bl	8004096 <_PreparePacket>
 8005142:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	627b      	str	r3, [r7, #36]	@ 0x24
 800514c:	79fb      	ldrb	r3, [r7, #7]
 800514e:	623b      	str	r3, [r7, #32]
 8005150:	e00b      	b.n	800516a <SEGGER_SYSVIEW_SendModule+0x7e>
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	b2da      	uxtb	r2, r3
 8005156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005158:	1c59      	adds	r1, r3, #1
 800515a:	6279      	str	r1, [r7, #36]	@ 0x24
 800515c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	701a      	strb	r2, [r3, #0]
 8005164:	6a3b      	ldr	r3, [r7, #32]
 8005166:	09db      	lsrs	r3, r3, #7
 8005168:	623b      	str	r3, [r7, #32]
 800516a:	6a3b      	ldr	r3, [r7, #32]
 800516c:	2b7f      	cmp	r3, #127	@ 0x7f
 800516e:	d8f0      	bhi.n	8005152 <SEGGER_SYSVIEW_SendModule+0x66>
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	1c5a      	adds	r2, r3, #1
 8005174:	627a      	str	r2, [r7, #36]	@ 0x24
 8005176:	6a3a      	ldr	r2, [r7, #32]
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]
 800517c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	61fb      	str	r3, [r7, #28]
 8005184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e00b      	b.n	80051a4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	b2da      	uxtb	r2, r3
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	1c59      	adds	r1, r3, #1
 8005194:	61f9      	str	r1, [r7, #28]
 8005196:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800519a:	b2d2      	uxtb	r2, r2
 800519c:	701a      	strb	r2, [r3, #0]
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	09db      	lsrs	r3, r3, #7
 80051a2:	61bb      	str	r3, [r7, #24]
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80051a8:	d8f0      	bhi.n	800518c <SEGGER_SYSVIEW_SendModule+0xa0>
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	61fa      	str	r2, [r7, #28]
 80051b0:	69ba      	ldr	r2, [r7, #24]
 80051b2:	b2d2      	uxtb	r2, r2
 80051b4:	701a      	strb	r2, [r3, #0]
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2280      	movs	r2, #128	@ 0x80
 80051c0:	4619      	mov	r1, r3
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f7fe ff2e 	bl	8004024 <_EncodeStr>
 80051c8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80051ca:	2216      	movs	r2, #22
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	6938      	ldr	r0, [r7, #16]
 80051d0:	f7ff f84e 	bl	8004270 <_SendPacket>
      RECORD_END();
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80051da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d006      	beq.n	80051ee <SEGGER_SYSVIEW_SendModule+0x102>
 80051e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80051e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	4798      	blx	r3
    }
  }
}
 80051ee:	bf00      	nop
 80051f0:	3730      	adds	r7, #48	@ 0x30
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	2001a990 	.word	0x2001a990
 80051fc:	2001a998 	.word	0x2001a998

08005200 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005206:	4b0c      	ldr	r3, [pc, #48]	@ (8005238 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00f      	beq.n	800522e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800520e:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68db      	ldr	r3, [r3, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f2      	bne.n	8005214 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800522e:	bf00      	nop
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	2001a990 	.word	0x2001a990

0800523c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005242:	f3ef 8311 	mrs	r3, BASEPRI
 8005246:	f04f 0120 	mov.w	r1, #32
 800524a:	f381 8811 	msr	BASEPRI, r1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	4817      	ldr	r0, [pc, #92]	@ (80052b0 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005252:	f7fe ff20 	bl	8004096 <_PreparePacket>
 8005256:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	4b14      	ldr	r3, [pc, #80]	@ (80052b4 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	613b      	str	r3, [r7, #16]
 8005266:	e00b      	b.n	8005280 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	b2da      	uxtb	r2, r3
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	6179      	str	r1, [r7, #20]
 8005272:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005276:	b2d2      	uxtb	r2, r2
 8005278:	701a      	strb	r2, [r3, #0]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	09db      	lsrs	r3, r3, #7
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b7f      	cmp	r3, #127	@ 0x7f
 8005284:	d8f0      	bhi.n	8005268 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	1c5a      	adds	r2, r3, #1
 800528a:	617a      	str	r2, [r7, #20]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	b2d2      	uxtb	r2, r2
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005296:	221b      	movs	r2, #27
 8005298:	6879      	ldr	r1, [r7, #4]
 800529a:	68b8      	ldr	r0, [r7, #8]
 800529c:	f7fe ffe8 	bl	8004270 <_SendPacket>
  RECORD_END();
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f383 8811 	msr	BASEPRI, r3
}
 80052a6:	bf00      	nop
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
 80052ae:	bf00      	nop
 80052b0:	2001a998 	.word	0x2001a998
 80052b4:	2001a994 	.word	0x2001a994

080052b8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b08a      	sub	sp, #40	@ 0x28
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052c0:	f3ef 8311 	mrs	r3, BASEPRI
 80052c4:	f04f 0120 	mov.w	r1, #32
 80052c8:	f381 8811 	msr	BASEPRI, r1
 80052cc:	617b      	str	r3, [r7, #20]
 80052ce:	4827      	ldr	r0, [pc, #156]	@ (800536c <SEGGER_SYSVIEW_Warn+0xb4>)
 80052d0:	f7fe fee1 	bl	8004096 <_PreparePacket>
 80052d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80052d6:	2280      	movs	r2, #128	@ 0x80
 80052d8:	6879      	ldr	r1, [r7, #4]
 80052da:	6938      	ldr	r0, [r7, #16]
 80052dc:	f7fe fea2 	bl	8004024 <_EncodeStr>
 80052e0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e6:	2301      	movs	r3, #1
 80052e8:	623b      	str	r3, [r7, #32]
 80052ea:	e00b      	b.n	8005304 <SEGGER_SYSVIEW_Warn+0x4c>
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f2:	1c59      	adds	r1, r3, #1
 80052f4:	6279      	str	r1, [r7, #36]	@ 0x24
 80052f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	09db      	lsrs	r3, r3, #7
 8005302:	623b      	str	r3, [r7, #32]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	2b7f      	cmp	r3, #127	@ 0x7f
 8005308:	d8f0      	bhi.n	80052ec <SEGGER_SYSVIEW_Warn+0x34>
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005310:	6a3a      	ldr	r2, [r7, #32]
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	701a      	strb	r2, [r3, #0]
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	61fb      	str	r3, [r7, #28]
 800531e:	2300      	movs	r3, #0
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e00b      	b.n	800533c <SEGGER_SYSVIEW_Warn+0x84>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	69fb      	ldr	r3, [r7, #28]
 800532a:	1c59      	adds	r1, r3, #1
 800532c:	61f9      	str	r1, [r7, #28]
 800532e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	09db      	lsrs	r3, r3, #7
 800533a:	61bb      	str	r3, [r7, #24]
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005340:	d8f0      	bhi.n	8005324 <SEGGER_SYSVIEW_Warn+0x6c>
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	61fa      	str	r2, [r7, #28]
 8005348:	69ba      	ldr	r2, [r7, #24]
 800534a:	b2d2      	uxtb	r2, r2
 800534c:	701a      	strb	r2, [r3, #0]
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005352:	221a      	movs	r2, #26
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f7fe ff8a 	bl	8004270 <_SendPacket>
  RECORD_END();
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	f383 8811 	msr	BASEPRI, r3
}
 8005362:	bf00      	nop
 8005364:	3728      	adds	r7, #40	@ 0x28
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	2001a998 	.word	0x2001a998

08005370 <memcmp>:
 8005370:	b510      	push	{r4, lr}
 8005372:	3901      	subs	r1, #1
 8005374:	4402      	add	r2, r0
 8005376:	4290      	cmp	r0, r2
 8005378:	d101      	bne.n	800537e <memcmp+0xe>
 800537a:	2000      	movs	r0, #0
 800537c:	e005      	b.n	800538a <memcmp+0x1a>
 800537e:	7803      	ldrb	r3, [r0, #0]
 8005380:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005384:	42a3      	cmp	r3, r4
 8005386:	d001      	beq.n	800538c <memcmp+0x1c>
 8005388:	1b18      	subs	r0, r3, r4
 800538a:	bd10      	pop	{r4, pc}
 800538c:	3001      	adds	r0, #1
 800538e:	e7f2      	b.n	8005376 <memcmp+0x6>

08005390 <memset>:
 8005390:	4402      	add	r2, r0
 8005392:	4603      	mov	r3, r0
 8005394:	4293      	cmp	r3, r2
 8005396:	d100      	bne.n	800539a <memset+0xa>
 8005398:	4770      	bx	lr
 800539a:	f803 1b01 	strb.w	r1, [r3], #1
 800539e:	e7f9      	b.n	8005394 <memset+0x4>

080053a0 <__libc_init_array>:
 80053a0:	b570      	push	{r4, r5, r6, lr}
 80053a2:	4d0d      	ldr	r5, [pc, #52]	@ (80053d8 <__libc_init_array+0x38>)
 80053a4:	4c0d      	ldr	r4, [pc, #52]	@ (80053dc <__libc_init_array+0x3c>)
 80053a6:	1b64      	subs	r4, r4, r5
 80053a8:	10a4      	asrs	r4, r4, #2
 80053aa:	2600      	movs	r6, #0
 80053ac:	42a6      	cmp	r6, r4
 80053ae:	d109      	bne.n	80053c4 <__libc_init_array+0x24>
 80053b0:	4d0b      	ldr	r5, [pc, #44]	@ (80053e0 <__libc_init_array+0x40>)
 80053b2:	4c0c      	ldr	r4, [pc, #48]	@ (80053e4 <__libc_init_array+0x44>)
 80053b4:	f000 f826 	bl	8005404 <_init>
 80053b8:	1b64      	subs	r4, r4, r5
 80053ba:	10a4      	asrs	r4, r4, #2
 80053bc:	2600      	movs	r6, #0
 80053be:	42a6      	cmp	r6, r4
 80053c0:	d105      	bne.n	80053ce <__libc_init_array+0x2e>
 80053c2:	bd70      	pop	{r4, r5, r6, pc}
 80053c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80053c8:	4798      	blx	r3
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7ee      	b.n	80053ac <__libc_init_array+0xc>
 80053ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d2:	4798      	blx	r3
 80053d4:	3601      	adds	r6, #1
 80053d6:	e7f2      	b.n	80053be <__libc_init_array+0x1e>
 80053d8:	0800555c 	.word	0x0800555c
 80053dc:	0800555c 	.word	0x0800555c
 80053e0:	0800555c 	.word	0x0800555c
 80053e4:	08005560 	.word	0x08005560

080053e8 <memcpy>:
 80053e8:	440a      	add	r2, r1
 80053ea:	4291      	cmp	r1, r2
 80053ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80053f0:	d100      	bne.n	80053f4 <memcpy+0xc>
 80053f2:	4770      	bx	lr
 80053f4:	b510      	push	{r4, lr}
 80053f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053fe:	4291      	cmp	r1, r2
 8005400:	d1f9      	bne.n	80053f6 <memcpy+0xe>
 8005402:	bd10      	pop	{r4, pc}

08005404 <_init>:
 8005404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005406:	bf00      	nop
 8005408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800540a:	bc08      	pop	{r3}
 800540c:	469e      	mov	lr, r3
 800540e:	4770      	bx	lr

08005410 <_fini>:
 8005410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005412:	bf00      	nop
 8005414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005416:	bc08      	pop	{r3}
 8005418:	469e      	mov	lr, r3
 800541a:	4770      	bx	lr
