
006Task_Priority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e38  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005fd8  08005fd8  00006fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006128  08006128  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006128  08006128  00007128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006130  08006130  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006130  08006130  00007130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006134  08006134  00007134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006138  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c678  20000014  0800614c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c68c  0800614c  0000868c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012a14  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f5  00000000  00000000  0001aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001d450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db0  00000000  00000000  0001e610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001f3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ec  00000000  00000000  00038568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab5c  00000000  00000000  0004c754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f72b0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a1c  00000000  00000000  000f72f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  000fbd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005fc0 	.word	0x08005fc0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005fc0 	.word	0x08005fc0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194b8 	.word	0x200194b8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fbcf 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f857 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8bf 	bl	80006f4 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 8000576:	4b23      	ldr	r3, [pc, #140]	@ (8000604 <main+0xa0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a22      	ldr	r2, [pc, #136]	@ (8000604 <main+0xa0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000582:	f003 fc0b 	bl	8003d9c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 8000586:	f004 feb3 	bl	80052f0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED-Green-Task", 200, NULL, 2, &led_green_h);
 800058a:	4b1f      	ldr	r3, [pc, #124]	@ (8000608 <main+0xa4>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	491d      	ldr	r1, [pc, #116]	@ (800060c <main+0xa8>)
 8000598:	481d      	ldr	r0, [pc, #116]	@ (8000610 <main+0xac>)
 800059a:	f001 ff33 	bl	8002404 <xTaskCreate>
 800059e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	60bb      	str	r3, [r7, #8]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>

  next_task_handle = led_green_h;
 80005be:	4b12      	ldr	r3, [pc, #72]	@ (8000608 <main+0xa4>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <main+0xb0>)
 80005c4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED-Green-Task", 200, NULL, 3, &led_orange_h);
 80005c6:	4b14      	ldr	r3, [pc, #80]	@ (8000618 <main+0xb4>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2303      	movs	r3, #3
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	490e      	ldr	r1, [pc, #56]	@ (800060c <main+0xa8>)
 80005d4:	4811      	ldr	r0, [pc, #68]	@ (800061c <main+0xb8>)
 80005d6:	f001 ff15 	bl	8002404 <xTaskCreate>
 80005da:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
    __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	607b      	str	r3, [r7, #4]
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  vTaskStartScheduler();
 80005fa:	f002 f9ef 	bl	80029dc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005fe:	bf00      	nop
 8000600:	e7fd      	b.n	80005fe <main+0x9a>
 8000602:	bf00      	nop
 8000604:	e0001000 	.word	0xe0001000
 8000608:	20000030 	.word	0x20000030
 800060c:	08005fd8 	.word	0x08005fd8
 8000610:	080009c1 	.word	0x080009c1
 8000614:	20000038 	.word	0x20000038
 8000618:	20000034 	.word	0x20000034
 800061c:	080009f1 	.word	0x080009f1

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	@ 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 0320 	add.w	r3, r7, #32
 800062a:	2230      	movs	r2, #48	@ 0x30
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f005 fc8c 	bl	8005f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	4b28      	ldr	r3, [pc, #160]	@ (80006ec <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800064c:	4a27      	ldr	r2, [pc, #156]	@ (80006ec <SystemClock_Config+0xcc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	@ 0x40
 8000654:	4b25      	ldr	r3, [pc, #148]	@ (80006ec <SystemClock_Config+0xcc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800065c:	60bb      	str	r3, [r7, #8]
 800065e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	4b22      	ldr	r3, [pc, #136]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a21      	ldr	r2, [pc, #132]	@ (80006f0 <SystemClock_Config+0xd0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b1f      	ldr	r3, [pc, #124]	@ (80006f0 <SystemClock_Config+0xd0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000678:	607b      	str	r3, [r7, #4]
 800067a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000694:	2360      	movs	r3, #96	@ 0x60
 8000696:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800069c:	2308      	movs	r3, #8
 800069e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a0:	f107 0320 	add.w	r3, r7, #32
 80006a4:	4618      	mov	r0, r3
 80006a6:	f000 fe55 	bl	8001354 <HAL_RCC_OscConfig>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006b0:	f000 fa1c 	bl	8000aec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006b4:	230f      	movs	r3, #15
 80006b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006b8:	2302      	movs	r3, #2
 80006ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006bc:	2300      	movs	r3, #0
 80006be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	2103      	movs	r1, #3
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f8b6 	bl	8001844 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006de:	f000 fa05 	bl	8000aec <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3750      	adds	r7, #80	@ 0x50
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40007000 	.word	0x40007000

080006f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006fa:	f107 031c 	add.w	r3, r7, #28
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
 8000708:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	61bb      	str	r3, [r7, #24]
 800070e:	4ba6      	ldr	r3, [pc, #664]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4aa5      	ldr	r2, [pc, #660]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4ba3      	ldr	r3, [pc, #652]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	61bb      	str	r3, [r7, #24]
 8000724:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	4b9f      	ldr	r3, [pc, #636]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a9e      	ldr	r2, [pc, #632]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000730:	f043 0304 	orr.w	r3, r3, #4
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b9c      	ldr	r3, [pc, #624]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0304 	and.w	r3, r3, #4
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	613b      	str	r3, [r7, #16]
 8000746:	4b98      	ldr	r3, [pc, #608]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	4a97      	ldr	r2, [pc, #604]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 800074c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000750:	6313      	str	r3, [r2, #48]	@ 0x30
 8000752:	4b95      	ldr	r3, [pc, #596]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800075a:	613b      	str	r3, [r7, #16]
 800075c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	4b91      	ldr	r3, [pc, #580]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	4a90      	ldr	r2, [pc, #576]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6313      	str	r3, [r2, #48]	@ 0x30
 800076e:	4b8e      	ldr	r3, [pc, #568]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60fb      	str	r3, [r7, #12]
 8000778:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	4b8a      	ldr	r3, [pc, #552]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000782:	4a89      	ldr	r2, [pc, #548]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	@ 0x30
 800078a:	4b87      	ldr	r3, [pc, #540]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	607b      	str	r3, [r7, #4]
 800079a:	4b83      	ldr	r3, [pc, #524]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a82      	ldr	r2, [pc, #520]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 80007a0:	f043 0308 	orr.w	r3, r3, #8
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b80      	ldr	r3, [pc, #512]	@ (80009a8 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0308 	and.w	r3, r3, #8
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2108      	movs	r1, #8
 80007b6:	487d      	ldr	r0, [pc, #500]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 80007b8:	f000 fd74 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2101      	movs	r1, #1
 80007c0:	487b      	ldr	r0, [pc, #492]	@ (80009b0 <MX_GPIO_Init+0x2bc>)
 80007c2:	f000 fd6f 	bl	80012a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007c6:	2200      	movs	r2, #0
 80007c8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007cc:	4879      	ldr	r0, [pc, #484]	@ (80009b4 <MX_GPIO_Init+0x2c0>)
 80007ce:	f000 fd69 	bl	80012a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007d2:	2304      	movs	r3, #4
 80007d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d6:	2300      	movs	r3, #0
 80007d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007de:	f107 031c 	add.w	r3, r7, #28
 80007e2:	4619      	mov	r1, r3
 80007e4:	4871      	ldr	r0, [pc, #452]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 80007e6:	f000 fbd9 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80007ea:	2308      	movs	r3, #8
 80007ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ee:	2301      	movs	r3, #1
 80007f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f6:	2300      	movs	r3, #0
 80007f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80007fa:	f107 031c 	add.w	r3, r7, #28
 80007fe:	4619      	mov	r1, r3
 8000800:	486a      	ldr	r0, [pc, #424]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 8000802:	f000 fbcb 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000806:	2332      	movs	r3, #50	@ 0x32
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800080a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800080e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	4864      	ldr	r0, [pc, #400]	@ (80009ac <MX_GPIO_Init+0x2b8>)
 800081c:	f000 fbbe 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000820:	2301      	movs	r3, #1
 8000822:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000830:	f107 031c 	add.w	r3, r7, #28
 8000834:	4619      	mov	r1, r3
 8000836:	485e      	ldr	r0, [pc, #376]	@ (80009b0 <MX_GPIO_Init+0x2bc>)
 8000838:	f000 fbb0 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800083c:	2308      	movs	r3, #8
 800083e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800084c:	2305      	movs	r3, #5
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 031c 	add.w	r3, r7, #28
 8000854:	4619      	mov	r1, r3
 8000856:	4856      	ldr	r0, [pc, #344]	@ (80009b0 <MX_GPIO_Init+0x2bc>)
 8000858:	f000 fba0 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085c:	2301      	movs	r3, #1
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000860:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000864:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	4619      	mov	r1, r3
 8000870:	4851      	ldr	r0, [pc, #324]	@ (80009b8 <MX_GPIO_Init+0x2c4>)
 8000872:	f000 fb93 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000876:	2310      	movs	r3, #16
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087a:	2302      	movs	r3, #2
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000882:	2300      	movs	r3, #0
 8000884:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000886:	2306      	movs	r3, #6
 8000888:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	4619      	mov	r1, r3
 8000890:	4849      	ldr	r0, [pc, #292]	@ (80009b8 <MX_GPIO_Init+0x2c4>)
 8000892:	f000 fb83 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000896:	23e0      	movs	r3, #224	@ 0xe0
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a2:	2303      	movs	r3, #3
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008a6:	2305      	movs	r3, #5
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	4619      	mov	r1, r3
 80008b0:	4841      	ldr	r0, [pc, #260]	@ (80009b8 <MX_GPIO_Init+0x2c4>)
 80008b2:	f000 fb73 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008b6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c8:	2305      	movs	r3, #5
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	483a      	ldr	r0, [pc, #232]	@ (80009bc <MX_GPIO_Init+0x2c8>)
 80008d4:	f000 fb62 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008d8:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80008dc:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008de:	2301      	movs	r3, #1
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	4619      	mov	r1, r3
 80008f0:	4830      	ldr	r0, [pc, #192]	@ (80009b4 <MX_GPIO_Init+0x2c0>)
 80008f2:	f000 fb53 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80008f6:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80008fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000908:	2306      	movs	r3, #6
 800090a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4619      	mov	r1, r3
 8000912:	4827      	ldr	r0, [pc, #156]	@ (80009b0 <MX_GPIO_Init+0x2bc>)
 8000914:	f000 fb42 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000918:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4822      	ldr	r0, [pc, #136]	@ (80009b8 <MX_GPIO_Init+0x2c4>)
 800092e:	f000 fb35 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000932:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000944:	230a      	movs	r3, #10
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481a      	ldr	r0, [pc, #104]	@ (80009b8 <MX_GPIO_Init+0x2c4>)
 8000950:	f000 fb24 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000954:	2320      	movs	r3, #32
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <MX_GPIO_Init+0x2c0>)
 8000968:	f000 fb18 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800096c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000972:	2312      	movs	r3, #18
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800097e:	2304      	movs	r3, #4
 8000980:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	480c      	ldr	r0, [pc, #48]	@ (80009bc <MX_GPIO_Init+0x2c8>)
 800098a:	f000 fb07 	bl	8000f9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2106      	movs	r1, #6
 8000992:	2006      	movs	r0, #6
 8000994:	f000 fad8 	bl	8000f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000998:	2006      	movs	r0, #6
 800099a:	f000 faf1 	bl	8000f80 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800099e:	bf00      	nop
 80009a0:	3730      	adds	r7, #48	@ 0x30
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	40023800 	.word	0x40023800
 80009ac:	40021000 	.word	0x40021000
 80009b0:	40020800 	.word	0x40020800
 80009b4:	40020c00 	.word	0x40020c00
 80009b8:	40020000 	.word	0x40020000
 80009bc:	40020400 	.word	0x40020400

080009c0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009c8:	4807      	ldr	r0, [pc, #28]	@ (80009e8 <led_green_handler+0x28>)
 80009ca:	f005 fa3f 	bl	8005e4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009ce:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009d2:	4806      	ldr	r0, [pc, #24]	@ (80009ec <led_green_handler+0x2c>)
 80009d4:	f000 fc7f 	bl	80012d6 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80009d8:	2064      	movs	r0, #100	@ 0x64
 80009da:	f000 f9d9 	bl	8000d90 <HAL_Delay>
		switch_priority();
 80009de:	f000 f82d 	bl	8000a3c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e2:	bf00      	nop
 80009e4:	e7f0      	b.n	80009c8 <led_green_handler+0x8>
 80009e6:	bf00      	nop
 80009e8:	08005fe8 	.word	0x08005fe8
 80009ec:	40020c00 	.word	0x40020c00

080009f0 <led_orange_handler>:
	}

}

static void led_orange_handler(void *parameters)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80009f8:	4807      	ldr	r0, [pc, #28]	@ (8000a18 <led_orange_handler+0x28>)
 80009fa:	f005 fa27 	bl	8005e4c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80009fe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a02:	4806      	ldr	r0, [pc, #24]	@ (8000a1c <led_orange_handler+0x2c>)
 8000a04:	f000 fc67 	bl	80012d6 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 8000a08:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a0c:	f000 f9c0 	bl	8000d90 <HAL_Delay>
		switch_priority();
 8000a10:	f000 f814 	bl	8000a3c <switch_priority>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a14:	bf00      	nop
 8000a16:	e7ef      	b.n	80009f8 <led_orange_handler+0x8>
 8000a18:	08005ffc 	.word	0x08005ffc
 8000a1c:	40020c00 	.word	0x40020c00

08000a20 <button_interrupt_handler>:

}


void button_interrupt_handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

	traceISR_ENTER(); // To trace ISR with SEGGER
 8000a24:	f004 ff2c 	bl	8005880 <SEGGER_SYSVIEW_RecordEnterISR>
	status_button = 1;
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <button_interrupt_handler+0x18>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	601a      	str	r2, [r3, #0]
	traceISR_EXIT();
 8000a2e:	f004 ff69 	bl	8005904 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	2000003c 	.word	0x2000003c

08000a3c <switch_priority>:


void switch_priority(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af00      	add	r7, sp, #0
	UBaseType_t p2;
	xTaskHandle t1;
	xTaskHandle t2;
	xTaskHandle curr;

	BaseType_t switch_priority = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]

	portENTER_CRITICAL();
 8000a46:	f002 fded 	bl	8003624 <vPortEnterCritical>
	if(status_button)
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <switch_priority+0x80>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d004      	beq.n	8000a5c <switch_priority+0x20>
	{

		status_button = 0;
 8000a52:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <switch_priority+0x80>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
		switch_priority = 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]

	}
	portEXIT_CRITICAL();
 8000a5c:	f002 fe14 	bl	8003688 <vPortExitCritical>

	if(switch_priority)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d025      	beq.n	8000ab2 <switch_priority+0x76>
	{

		t1 = led_green_h;
 8000a66:	4b16      	ldr	r3, [pc, #88]	@ (8000ac0 <switch_priority+0x84>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	613b      	str	r3, [r7, #16]
		t2 = led_orange_h;
 8000a6c:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <switch_priority+0x88>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]

		p1 = uxTaskPriorityGet(t1);
 8000a72:	6938      	ldr	r0, [r7, #16]
 8000a74:	f001 fe34 	bl	80026e0 <uxTaskPriorityGet>
 8000a78:	60b8      	str	r0, [r7, #8]
		p2 = uxTaskPriorityGet(t2);
 8000a7a:	68f8      	ldr	r0, [r7, #12]
 8000a7c:	f001 fe30 	bl	80026e0 <uxTaskPriorityGet>
 8000a80:	6078      	str	r0, [r7, #4]

		curr = xTaskGetCurrentTaskHandle();
 8000a82:	f002 fb9d 	bl	80031c0 <xTaskGetCurrentTaskHandle>
 8000a86:	6038      	str	r0, [r7, #0]

		if(curr == t1)
 8000a88:	683a      	ldr	r2, [r7, #0]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d108      	bne.n	8000aa2 <switch_priority+0x66>
		{

			vTaskPrioritySet(t1, p2);
 8000a90:	6879      	ldr	r1, [r7, #4]
 8000a92:	6938      	ldr	r0, [r7, #16]
 8000a94:	f001 fe42 	bl	800271c <vTaskPrioritySet>
			vTaskPrioritySet(t2, p1);
 8000a98:	68b9      	ldr	r1, [r7, #8]
 8000a9a:	68f8      	ldr	r0, [r7, #12]
 8000a9c:	f001 fe3e 	bl	800271c <vTaskPrioritySet>

		}

	}

}
 8000aa0:	e007      	b.n	8000ab2 <switch_priority+0x76>
			vTaskPrioritySet(t2, p1);
 8000aa2:	68b9      	ldr	r1, [r7, #8]
 8000aa4:	68f8      	ldr	r0, [r7, #12]
 8000aa6:	f001 fe39 	bl	800271c <vTaskPrioritySet>
			vTaskPrioritySet(t1, p2);
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	6938      	ldr	r0, [r7, #16]
 8000aae:	f001 fe35 	bl	800271c <vTaskPrioritySet>
}
 8000ab2:	bf00      	nop
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2000003c 	.word	0x2000003c
 8000ac0:	20000030 	.word	0x20000030
 8000ac4:	20000034 	.word	0x20000034

08000ac8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a04      	ldr	r2, [pc, #16]	@ (8000ae8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d101      	bne.n	8000ade <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ada:	f000 f939 	bl	8000d50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40000c00 	.word	0x40000c00

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <Error_Handler+0x8>

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b36:	f002 fcf5 	bl	8003524 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08e      	sub	sp, #56	@ 0x38
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
 8000b5c:	4b33      	ldr	r3, [pc, #204]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b60:	4a32      	ldr	r2, [pc, #200]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b62:	f043 0308 	orr.w	r3, r3, #8
 8000b66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b68:	4b30      	ldr	r3, [pc, #192]	@ (8000c2c <HAL_InitTick+0xe4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	f003 0308 	and.w	r3, r3, #8
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 f86c 	bl	8001c5c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b84:	6a3b      	ldr	r3, [r7, #32]
 8000b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d103      	bne.n	8000b96 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b8e:	f001 f851 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000b92:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b94:	e004      	b.n	8000ba0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b96:	f001 f84d 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	005b      	lsls	r3, r3, #1
 8000b9e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <HAL_InitTick+0xe8>)
 8000ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ba8:	0c9b      	lsrs	r3, r3, #18
 8000baa:	3b01      	subs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bae:	4b21      	ldr	r3, [pc, #132]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb0:	4a21      	ldr	r2, [pc, #132]	@ (8000c38 <HAL_InitTick+0xf0>)
 8000bb2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bb6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bba:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bce:	4b19      	ldr	r3, [pc, #100]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bd4:	4817      	ldr	r0, [pc, #92]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bd6:	f001 f873 	bl	8001cc0 <HAL_TIM_Base_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d11b      	bne.n	8000c20 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000be8:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <HAL_InitTick+0xec>)
 8000bea:	f001 f8c3 	bl	8001d74 <HAL_TIM_Base_Start_IT>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d111      	bne.n	8000c20 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000bfc:	2032      	movs	r0, #50	@ 0x32
 8000bfe:	f000 f9bf 	bl	8000f80 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	2b0f      	cmp	r3, #15
 8000c06:	d808      	bhi.n	8000c1a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	6879      	ldr	r1, [r7, #4]
 8000c0c:	2032      	movs	r0, #50	@ 0x32
 8000c0e:	f000 f99b 	bl	8000f48 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <HAL_InitTick+0xf4>)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	e002      	b.n	8000c20 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3738      	adds	r7, #56	@ 0x38
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	431bde83 	.word	0x431bde83
 8000c34:	20000040 	.word	0x20000040
 8000c38:	40000c00 	.word	0x40000c00
 8000c3c:	20000004 	.word	0x20000004

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <NMI_Handler+0x4>

08000c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <HardFault_Handler+0x4>

08000c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <MemManage_Handler+0x4>

08000c58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <BusFault_Handler+0x4>

08000c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c64:	bf00      	nop
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr

08000c6e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  button_interrupt_handler();
 8000c72:	f7ff fed5 	bl	8000a20 <button_interrupt_handler>

  // Clear EXTI 0 pending bit from pending register
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c76:	2001      	movs	r0, #1
 8000c78:	f000 fb48 	bl	800130c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c84:	4802      	ldr	r0, [pc, #8]	@ (8000c90 <TIM5_IRQHandler+0x10>)
 8000c86:	f001 f8d7 	bl	8001e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000040 	.word	0x20000040

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <SystemInit+0x20>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9e:	4a05      	ldr	r2, [pc, #20]	@ (8000cb4 <SystemInit+0x20>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cf0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cbc:	f7ff ffea 	bl	8000c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	@ (8000cf4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cfc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	@ (8000d04 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f005 f939 	bl	8005f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc3b 	bl	8000564 <main>
  bx  lr    
 8000cee:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cfc:	08006138 	.word	0x08006138
  ldr r2, =_sbss
 8000d00:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d04:	2001c68c 	.word	0x2001c68c

08000d08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d10:	4b0e      	ldr	r3, [pc, #56]	@ (8000d4c <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0d      	ldr	r2, [pc, #52]	@ (8000d4c <HAL_Init+0x40>)
 8000d16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d4c <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <HAL_Init+0x40>)
 8000d22:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d28:	4b08      	ldr	r3, [pc, #32]	@ (8000d4c <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a07      	ldr	r2, [pc, #28]	@ (8000d4c <HAL_Init+0x40>)
 8000d2e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d34:	2003      	movs	r0, #3
 8000d36:	f000 f8fc 	bl	8000f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d3a:	2000      	movs	r0, #0
 8000d3c:	f7ff ff04 	bl	8000b48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d40:	f7ff feda 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d44:	2300      	movs	r3, #0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023c00 	.word	0x40023c00

08000d50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b06      	ldr	r3, [pc, #24]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a04      	ldr	r2, [pc, #16]	@ (8000d74 <HAL_IncTick+0x24>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	20000008 	.word	0x20000008
 8000d74:	20000088 	.word	0x20000088

08000d78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <HAL_GetTick+0x14>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
 8000d8a:	bf00      	nop
 8000d8c:	20000088 	.word	0x20000088

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff ffee 	bl	8000d78 <HAL_GetTick>
 8000d9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd4 <HAL_Delay+0x44>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	461a      	mov	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	4413      	add	r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	bf00      	nop
 8000db8:	f7ff ffde 	bl	8000d78 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	bf00      	nop
 8000dca:	bf00      	nop
 8000dcc:	3710      	adds	r7, #16
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dee:	68ba      	ldr	r2, [r7, #8]
 8000df0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000df4:	4013      	ands	r3, r2
 8000df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e00:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e04:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e0a:	4a04      	ldr	r2, [pc, #16]	@ (8000e1c <__NVIC_SetPriorityGrouping+0x44>)
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	60d3      	str	r3, [r2, #12]
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr
 8000e1c:	e000ed00 	.word	0xe000ed00

08000e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e24:	4b04      	ldr	r3, [pc, #16]	@ (8000e38 <__NVIC_GetPriorityGrouping+0x18>)
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	0a1b      	lsrs	r3, r3, #8
 8000e2a:	f003 0307 	and.w	r3, r3, #7
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	db0b      	blt.n	8000e66 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e4e:	79fb      	ldrb	r3, [r7, #7]
 8000e50:	f003 021f 	and.w	r2, r3, #31
 8000e54:	4907      	ldr	r1, [pc, #28]	@ (8000e74 <__NVIC_EnableIRQ+0x38>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	095b      	lsrs	r3, r3, #5
 8000e5c:	2001      	movs	r0, #1
 8000e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8000e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e66:	bf00      	nop
 8000e68:	370c      	adds	r7, #12
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	e000e100 	.word	0xe000e100

08000e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	4603      	mov	r3, r0
 8000e80:	6039      	str	r1, [r7, #0]
 8000e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	db0a      	blt.n	8000ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	490c      	ldr	r1, [pc, #48]	@ (8000ec4 <__NVIC_SetPriority+0x4c>)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	0112      	lsls	r2, r2, #4
 8000e98:	b2d2      	uxtb	r2, r2
 8000e9a:	440b      	add	r3, r1
 8000e9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ea0:	e00a      	b.n	8000eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	b2da      	uxtb	r2, r3
 8000ea6:	4908      	ldr	r1, [pc, #32]	@ (8000ec8 <__NVIC_SetPriority+0x50>)
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	f003 030f 	and.w	r3, r3, #15
 8000eae:	3b04      	subs	r3, #4
 8000eb0:	0112      	lsls	r2, r2, #4
 8000eb2:	b2d2      	uxtb	r2, r2
 8000eb4:	440b      	add	r3, r1
 8000eb6:	761a      	strb	r2, [r3, #24]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr
 8000ec4:	e000e100 	.word	0xe000e100
 8000ec8:	e000ed00 	.word	0xe000ed00

08000ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b089      	sub	sp, #36	@ 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	60b9      	str	r1, [r7, #8]
 8000ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	f1c3 0307 	rsb	r3, r3, #7
 8000ee6:	2b04      	cmp	r3, #4
 8000ee8:	bf28      	it	cs
 8000eea:	2304      	movcs	r3, #4
 8000eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	2b06      	cmp	r3, #6
 8000ef4:	d902      	bls.n	8000efc <NVIC_EncodePriority+0x30>
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	3b03      	subs	r3, #3
 8000efa:	e000      	b.n	8000efe <NVIC_EncodePriority+0x32>
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	f04f 32ff 	mov.w	r2, #4294967295
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	401a      	ands	r2, r3
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	43d9      	mvns	r1, r3
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f24:	4313      	orrs	r3, r2
         );
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3724      	adds	r7, #36	@ 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff4c 	bl	8000dd8 <__NVIC_SetPriorityGrouping>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
 8000f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f5a:	f7ff ff61 	bl	8000e20 <__NVIC_GetPriorityGrouping>
 8000f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff ffb1 	bl	8000ecc <NVIC_EncodePriority>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f70:	4611      	mov	r1, r2
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff ff80 	bl	8000e78 <__NVIC_SetPriority>
}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff54 	bl	8000e3c <__NVIC_EnableIRQ>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	@ 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]
 8000fb6:	e159      	b.n	800126c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fb8:	2201      	movs	r2, #1
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	697a      	ldr	r2, [r7, #20]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	f040 8148 	bne.w	8001266 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f003 0303 	and.w	r3, r3, #3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d005      	beq.n	8000fee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d130      	bne.n	8001050 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	2203      	movs	r2, #3
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	43db      	mvns	r3, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4013      	ands	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	68da      	ldr	r2, [r3, #12]
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001024:	2201      	movs	r2, #1
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4013      	ands	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	091b      	lsrs	r3, r3, #4
 800103a:	f003 0201 	and.w	r2, r3, #1
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b03      	cmp	r3, #3
 800105a:	d017      	beq.n	800108c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f003 0303 	and.w	r3, r3, #3
 8001094:	2b02      	cmp	r3, #2
 8001096:	d123      	bne.n	80010e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	08da      	lsrs	r2, r3, #3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3208      	adds	r2, #8
 80010a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	220f      	movs	r2, #15
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	691a      	ldr	r2, [r3, #16]
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f003 0307 	and.w	r3, r3, #7
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	08da      	lsrs	r2, r3, #3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	3208      	adds	r2, #8
 80010da:	69b9      	ldr	r1, [r7, #24]
 80010dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	2203      	movs	r2, #3
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 0203 	and.w	r2, r3, #3
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	fa02 f303 	lsl.w	r3, r2, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4313      	orrs	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800111c:	2b00      	cmp	r3, #0
 800111e:	f000 80a2 	beq.w	8001266 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b57      	ldr	r3, [pc, #348]	@ (8001284 <HAL_GPIO_Init+0x2e8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112a:	4a56      	ldr	r2, [pc, #344]	@ (8001284 <HAL_GPIO_Init+0x2e8>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001130:	6453      	str	r3, [r2, #68]	@ 0x44
 8001132:	4b54      	ldr	r3, [pc, #336]	@ (8001284 <HAL_GPIO_Init+0x2e8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800113e:	4a52      	ldr	r2, [pc, #328]	@ (8001288 <HAL_GPIO_Init+0x2ec>)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3302      	adds	r3, #2
 8001146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	f003 0303 	and.w	r3, r3, #3
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	220f      	movs	r2, #15
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	43db      	mvns	r3, r3
 800115c:	69ba      	ldr	r2, [r7, #24]
 800115e:	4013      	ands	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a49      	ldr	r2, [pc, #292]	@ (800128c <HAL_GPIO_Init+0x2f0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d019      	beq.n	800119e <HAL_GPIO_Init+0x202>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a48      	ldr	r2, [pc, #288]	@ (8001290 <HAL_GPIO_Init+0x2f4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d013      	beq.n	800119a <HAL_GPIO_Init+0x1fe>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a47      	ldr	r2, [pc, #284]	@ (8001294 <HAL_GPIO_Init+0x2f8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d00d      	beq.n	8001196 <HAL_GPIO_Init+0x1fa>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a46      	ldr	r2, [pc, #280]	@ (8001298 <HAL_GPIO_Init+0x2fc>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d007      	beq.n	8001192 <HAL_GPIO_Init+0x1f6>
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4a45      	ldr	r2, [pc, #276]	@ (800129c <HAL_GPIO_Init+0x300>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d101      	bne.n	800118e <HAL_GPIO_Init+0x1f2>
 800118a:	2304      	movs	r3, #4
 800118c:	e008      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800118e:	2307      	movs	r3, #7
 8001190:	e006      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 8001192:	2303      	movs	r3, #3
 8001194:	e004      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 8001196:	2302      	movs	r3, #2
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800119a:	2301      	movs	r3, #1
 800119c:	e000      	b.n	80011a0 <HAL_GPIO_Init+0x204>
 800119e:	2300      	movs	r3, #0
 80011a0:	69fa      	ldr	r2, [r7, #28]
 80011a2:	f002 0203 	and.w	r2, r2, #3
 80011a6:	0092      	lsls	r2, r2, #2
 80011a8:	4093      	lsls	r3, r2
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011b0:	4935      	ldr	r1, [pc, #212]	@ (8001288 <HAL_GPIO_Init+0x2ec>)
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	089b      	lsrs	r3, r3, #2
 80011b6:	3302      	adds	r3, #2
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011be:	4b38      	ldr	r3, [pc, #224]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	43db      	mvns	r3, r3
 80011c8:	69ba      	ldr	r2, [r7, #24]
 80011ca:	4013      	ands	r3, r2
 80011cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	4313      	orrs	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011e2:	4a2f      	ldr	r2, [pc, #188]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 80011e4:	69bb      	ldr	r3, [r7, #24]
 80011e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011e8:	4b2d      	ldr	r3, [pc, #180]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	69ba      	ldr	r2, [r7, #24]
 80011f4:	4013      	ands	r3, r2
 80011f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800120c:	4a24      	ldr	r2, [pc, #144]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001212:	4b23      	ldr	r3, [pc, #140]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	43db      	mvns	r3, r3
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	4013      	ands	r3, r2
 8001220:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	693b      	ldr	r3, [r7, #16]
 8001232:	4313      	orrs	r3, r2
 8001234:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001236:	4a1a      	ldr	r2, [pc, #104]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123c:	4b18      	ldr	r3, [pc, #96]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	43db      	mvns	r3, r3
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4013      	ands	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001258:	69ba      	ldr	r2, [r7, #24]
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	4313      	orrs	r3, r2
 800125e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001260:	4a0f      	ldr	r2, [pc, #60]	@ (80012a0 <HAL_GPIO_Init+0x304>)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	3301      	adds	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	2b0f      	cmp	r3, #15
 8001270:	f67f aea2 	bls.w	8000fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3724      	adds	r7, #36	@ 0x24
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800
 8001288:	40013800 	.word	0x40013800
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	40020800 	.word	0x40020800
 8001298:	40020c00 	.word	0x40020c00
 800129c:	40021000 	.word	0x40021000
 80012a0:	40013c00 	.word	0x40013c00

080012a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
 80012ac:	460b      	mov	r3, r1
 80012ae:	807b      	strh	r3, [r7, #2]
 80012b0:	4613      	mov	r3, r2
 80012b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b4:	787b      	ldrb	r3, [r7, #1]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ba:	887a      	ldrh	r2, [r7, #2]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012c0:	e003      	b.n	80012ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012c2:	887b      	ldrh	r3, [r7, #2]
 80012c4:	041a      	lsls	r2, r3, #16
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	619a      	str	r2, [r3, #24]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b085      	sub	sp, #20
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	460b      	mov	r3, r1
 80012e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012e8:	887a      	ldrh	r2, [r7, #2]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	4013      	ands	r3, r2
 80012ee:	041a      	lsls	r2, r3, #16
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	887b      	ldrh	r3, [r7, #2]
 80012f6:	400b      	ands	r3, r1
 80012f8:	431a      	orrs	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001316:	4b08      	ldr	r3, [pc, #32]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001318:	695a      	ldr	r2, [r3, #20]
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d006      	beq.n	8001330 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001322:	4a05      	ldr	r2, [pc, #20]	@ (8001338 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001324:	88fb      	ldrh	r3, [r7, #6]
 8001326:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001328:	88fb      	ldrh	r3, [r7, #6]
 800132a:	4618      	mov	r0, r3
 800132c:	f000 f806 	bl	800133c <HAL_GPIO_EXTI_Callback>
  }
}
 8001330:	bf00      	nop
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40013c00 	.word	0x40013c00

0800133c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001346:	bf00      	nop
 8001348:	370c      	adds	r7, #12
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
	...

08001354 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d101      	bne.n	8001366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e267      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d075      	beq.n	800145e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001372:	4b88      	ldr	r3, [pc, #544]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001374:	689b      	ldr	r3, [r3, #8]
 8001376:	f003 030c 	and.w	r3, r3, #12
 800137a:	2b04      	cmp	r3, #4
 800137c:	d00c      	beq.n	8001398 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800137e:	4b85      	ldr	r3, [pc, #532]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001386:	2b08      	cmp	r3, #8
 8001388:	d112      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138a:	4b82      	ldr	r3, [pc, #520]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001392:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001396:	d10b      	bne.n	80013b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	4b7e      	ldr	r3, [pc, #504]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d05b      	beq.n	800145c <HAL_RCC_OscConfig+0x108>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d157      	bne.n	800145c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e242      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013b8:	d106      	bne.n	80013c8 <HAL_RCC_OscConfig+0x74>
 80013ba:	4b76      	ldr	r3, [pc, #472]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a75      	ldr	r2, [pc, #468]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c4:	6013      	str	r3, [r2, #0]
 80013c6:	e01d      	b.n	8001404 <HAL_RCC_OscConfig+0xb0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d0:	d10c      	bne.n	80013ec <HAL_RCC_OscConfig+0x98>
 80013d2:	4b70      	ldr	r3, [pc, #448]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6f      	ldr	r2, [pc, #444]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	4b6d      	ldr	r3, [pc, #436]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a6c      	ldr	r2, [pc, #432]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013e8:	6013      	str	r3, [r2, #0]
 80013ea:	e00b      	b.n	8001404 <HAL_RCC_OscConfig+0xb0>
 80013ec:	4b69      	ldr	r3, [pc, #420]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a68      	ldr	r2, [pc, #416]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b66      	ldr	r3, [pc, #408]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a65      	ldr	r2, [pc, #404]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80013fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d013      	beq.n	8001434 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140c:	f7ff fcb4 	bl	8000d78 <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001414:	f7ff fcb0 	bl	8000d78 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b64      	cmp	r3, #100	@ 0x64
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e207      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001426:	4b5b      	ldr	r3, [pc, #364]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0xc0>
 8001432:	e014      	b.n	800145e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001434:	f7ff fca0 	bl	8000d78 <HAL_GetTick>
 8001438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143a:	e008      	b.n	800144e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800143c:	f7ff fc9c 	bl	8000d78 <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	2b64      	cmp	r3, #100	@ 0x64
 8001448:	d901      	bls.n	800144e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e1f3      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800144e:	4b51      	ldr	r3, [pc, #324]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d1f0      	bne.n	800143c <HAL_RCC_OscConfig+0xe8>
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d063      	beq.n	8001532 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800146a:	4b4a      	ldr	r3, [pc, #296]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00b      	beq.n	800148e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001476:	4b47      	ldr	r3, [pc, #284]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800147e:	2b08      	cmp	r3, #8
 8001480:	d11c      	bne.n	80014bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001482:	4b44      	ldr	r3, [pc, #272]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d116      	bne.n	80014bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800148e:	4b41      	ldr	r3, [pc, #260]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d005      	beq.n	80014a6 <HAL_RCC_OscConfig+0x152>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d001      	beq.n	80014a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
 80014a4:	e1c7      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b3b      	ldr	r3, [pc, #236]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	4937      	ldr	r1, [pc, #220]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ba:	e03a      	b.n	8001532 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d020      	beq.n	8001506 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c4:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_RCC_OscConfig+0x244>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ca:	f7ff fc55 	bl	8000d78 <HAL_GetTick>
 80014ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d0:	e008      	b.n	80014e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d2:	f7ff fc51 	bl	8000d78 <HAL_GetTick>
 80014d6:	4602      	mov	r2, r0
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	2b02      	cmp	r3, #2
 80014de:	d901      	bls.n	80014e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e0:	2303      	movs	r3, #3
 80014e2:	e1a8      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	4b2b      	ldr	r3, [pc, #172]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0302 	and.w	r3, r3, #2
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0f0      	beq.n	80014d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f0:	4b28      	ldr	r3, [pc, #160]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	4925      	ldr	r1, [pc, #148]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]
 8001504:	e015      	b.n	8001532 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001506:	4b24      	ldr	r3, [pc, #144]	@ (8001598 <HAL_RCC_OscConfig+0x244>)
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150c:	f7ff fc34 	bl	8000d78 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001514:	f7ff fc30 	bl	8000d78 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b02      	cmp	r3, #2
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e187      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1f0      	bne.n	8001514 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d036      	beq.n	80015ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	695b      	ldr	r3, [r3, #20]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d016      	beq.n	8001574 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001546:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x248>)
 8001548:	2201      	movs	r2, #1
 800154a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154c:	f7ff fc14 	bl	8000d78 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001554:	f7ff fc10 	bl	8000d78 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e167      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001566:	4b0b      	ldr	r3, [pc, #44]	@ (8001594 <HAL_RCC_OscConfig+0x240>)
 8001568:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0x200>
 8001572:	e01b      	b.n	80015ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_RCC_OscConfig+0x248>)
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157a:	f7ff fbfd 	bl	8000d78 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001580:	e00e      	b.n	80015a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff fbf9 	bl	8000d78 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d907      	bls.n	80015a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e150      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
 8001594:	40023800 	.word	0x40023800
 8001598:	42470000 	.word	0x42470000
 800159c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a0:	4b88      	ldr	r3, [pc, #544]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a4:	f003 0302 	and.w	r3, r3, #2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d1ea      	bne.n	8001582 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0304 	and.w	r3, r3, #4
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 8097 	beq.w	80016e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015be:	4b81      	ldr	r3, [pc, #516]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d10f      	bne.n	80015ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b7d      	ldr	r3, [pc, #500]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	4a7c      	ldr	r2, [pc, #496]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80015da:	4b7a      	ldr	r3, [pc, #488]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015e6:	2301      	movs	r3, #1
 80015e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ea:	4b77      	ldr	r3, [pc, #476]	@ (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d118      	bne.n	8001628 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015f6:	4b74      	ldr	r3, [pc, #464]	@ (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a73      	ldr	r2, [pc, #460]	@ (80017c8 <HAL_RCC_OscConfig+0x474>)
 80015fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001602:	f7ff fbb9 	bl	8000d78 <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001608:	e008      	b.n	800161c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160a:	f7ff fbb5 	bl	8000d78 <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d901      	bls.n	800161c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001618:	2303      	movs	r3, #3
 800161a:	e10c      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800161c:	4b6a      	ldr	r3, [pc, #424]	@ (80017c8 <HAL_RCC_OscConfig+0x474>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d0f0      	beq.n	800160a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	2b01      	cmp	r3, #1
 800162e:	d106      	bne.n	800163e <HAL_RCC_OscConfig+0x2ea>
 8001630:	4b64      	ldr	r3, [pc, #400]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001634:	4a63      	ldr	r2, [pc, #396]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6713      	str	r3, [r2, #112]	@ 0x70
 800163c:	e01c      	b.n	8001678 <HAL_RCC_OscConfig+0x324>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	2b05      	cmp	r3, #5
 8001644:	d10c      	bne.n	8001660 <HAL_RCC_OscConfig+0x30c>
 8001646:	4b5f      	ldr	r3, [pc, #380]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001648:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164a:	4a5e      	ldr	r2, [pc, #376]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 800164c:	f043 0304 	orr.w	r3, r3, #4
 8001650:	6713      	str	r3, [r2, #112]	@ 0x70
 8001652:	4b5c      	ldr	r3, [pc, #368]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001656:	4a5b      	ldr	r2, [pc, #364]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6713      	str	r3, [r2, #112]	@ 0x70
 800165e:	e00b      	b.n	8001678 <HAL_RCC_OscConfig+0x324>
 8001660:	4b58      	ldr	r3, [pc, #352]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001662:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001664:	4a57      	ldr	r2, [pc, #348]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001666:	f023 0301 	bic.w	r3, r3, #1
 800166a:	6713      	str	r3, [r2, #112]	@ 0x70
 800166c:	4b55      	ldr	r3, [pc, #340]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 800166e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001670:	4a54      	ldr	r2, [pc, #336]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001672:	f023 0304 	bic.w	r3, r3, #4
 8001676:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d015      	beq.n	80016ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb7a 	bl	8000d78 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001686:	e00a      	b.n	800169e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001688:	f7ff fb76 	bl	8000d78 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001696:	4293      	cmp	r3, r2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0cb      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800169e:	4b49      	ldr	r3, [pc, #292]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a2:	f003 0302 	and.w	r3, r3, #2
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0ee      	beq.n	8001688 <HAL_RCC_OscConfig+0x334>
 80016aa:	e014      	b.n	80016d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016ac:	f7ff fb64 	bl	8000d78 <HAL_GetTick>
 80016b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b2:	e00a      	b.n	80016ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b4:	f7ff fb60 	bl	8000d78 <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e0b5      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ca:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d1ee      	bne.n	80016b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016d6:	7dfb      	ldrb	r3, [r7, #23]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016dc:	4b39      	ldr	r3, [pc, #228]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e0:	4a38      	ldr	r2, [pc, #224]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80a1 	beq.w	8001834 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f2:	4b34      	ldr	r3, [pc, #208]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d05c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b02      	cmp	r3, #2
 8001704:	d141      	bne.n	800178a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001706:	4b31      	ldr	r3, [pc, #196]	@ (80017cc <HAL_RCC_OscConfig+0x478>)
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170c:	f7ff fb34 	bl	8000d78 <HAL_GetTick>
 8001710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001714:	f7ff fb30 	bl	8000d78 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e087      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001726:	4b27      	ldr	r3, [pc, #156]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f0      	bne.n	8001714 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001740:	019b      	lsls	r3, r3, #6
 8001742:	431a      	orrs	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	085b      	lsrs	r3, r3, #1
 800174a:	3b01      	subs	r3, #1
 800174c:	041b      	lsls	r3, r3, #16
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001754:	061b      	lsls	r3, r3, #24
 8001756:	491b      	ldr	r1, [pc, #108]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 8001758:	4313      	orrs	r3, r2
 800175a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800175c:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_RCC_OscConfig+0x478>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001762:	f7ff fb09 	bl	8000d78 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176a:	f7ff fb05 	bl	8000d78 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e05c      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177c:	4b11      	ldr	r3, [pc, #68]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x416>
 8001788:	e054      	b.n	8001834 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178a:	4b10      	ldr	r3, [pc, #64]	@ (80017cc <HAL_RCC_OscConfig+0x478>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001790:	f7ff faf2 	bl	8000d78 <HAL_GetTick>
 8001794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001796:	e008      	b.n	80017aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001798:	f7ff faee 	bl	8000d78 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e045      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f0      	bne.n	8001798 <HAL_RCC_OscConfig+0x444>
 80017b6:	e03d      	b.n	8001834 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e038      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40007000 	.word	0x40007000
 80017cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d0:	4b1b      	ldr	r3, [pc, #108]	@ (8001840 <HAL_RCC_OscConfig+0x4ec>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d028      	beq.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d121      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d11a      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001806:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001808:	4293      	cmp	r3, r2
 800180a:	d111      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001816:	085b      	lsrs	r3, r3, #1
 8001818:	3b01      	subs	r3, #1
 800181a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800181c:	429a      	cmp	r2, r3
 800181e:	d107      	bne.n	8001830 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800182c:	429a      	cmp	r2, r3
 800182e:	d001      	beq.n	8001834 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3718      	adds	r7, #24
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800

08001844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e0cc      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001858:	4b68      	ldr	r3, [pc, #416]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0307 	and.w	r3, r3, #7
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d90c      	bls.n	8001880 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001866:	4b65      	ldr	r3, [pc, #404]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b63      	ldr	r3, [pc, #396]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e0b8      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d020      	beq.n	80018ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	d005      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001898:	4b59      	ldr	r3, [pc, #356]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	4a58      	ldr	r2, [pc, #352]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0308 	and.w	r3, r3, #8
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d005      	beq.n	80018bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b0:	4b53      	ldr	r3, [pc, #332]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	4a52      	ldr	r2, [pc, #328]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	494d      	ldr	r1, [pc, #308]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018ca:	4313      	orrs	r3, r2
 80018cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d044      	beq.n	8001964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b47      	ldr	r3, [pc, #284]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d119      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e07f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d003      	beq.n	8001902 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d107      	bne.n	8001912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001902:	4b3f      	ldr	r3, [pc, #252]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d109      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e06f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001912:	4b3b      	ldr	r3, [pc, #236]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e067      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001922:	4b37      	ldr	r3, [pc, #220]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f023 0203 	bic.w	r2, r3, #3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	4934      	ldr	r1, [pc, #208]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001934:	f7ff fa20 	bl	8000d78 <HAL_GetTick>
 8001938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193a:	e00a      	b.n	8001952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800193c:	f7ff fa1c 	bl	8000d78 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194a:	4293      	cmp	r3, r2
 800194c:	d901      	bls.n	8001952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800194e:	2303      	movs	r3, #3
 8001950:	e04f      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001952:	4b2b      	ldr	r3, [pc, #172]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f003 020c 	and.w	r2, r3, #12
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	429a      	cmp	r2, r3
 8001962:	d1eb      	bne.n	800193c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001964:	4b25      	ldr	r3, [pc, #148]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d20c      	bcs.n	800198c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b22      	ldr	r3, [pc, #136]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b20      	ldr	r3, [pc, #128]	@ (80019fc <HAL_RCC_ClockConfig+0x1b8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e032      	b.n	80019f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b19      	ldr	r3, [pc, #100]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4916      	ldr	r1, [pc, #88]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b12      	ldr	r3, [pc, #72]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490e      	ldr	r1, [pc, #56]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f821 	bl	8001a10 <HAL_RCC_GetSysClockFreq>
 80019ce:	4602      	mov	r2, r0
 80019d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a00 <HAL_RCC_ClockConfig+0x1bc>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	490a      	ldr	r1, [pc, #40]	@ (8001a04 <HAL_RCC_ClockConfig+0x1c0>)
 80019dc:	5ccb      	ldrb	r3, [r1, r3]
 80019de:	fa22 f303 	lsr.w	r3, r2, r3
 80019e2:	4a09      	ldr	r2, [pc, #36]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019e6:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f8ac 	bl	8000b48 <HAL_InitTick>

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40023c00 	.word	0x40023c00
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080060d8 	.word	0x080060d8
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	20000004 	.word	0x20000004

08001a10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a14:	b094      	sub	sp, #80	@ 0x50
 8001a16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a28:	4b79      	ldr	r3, [pc, #484]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	f003 030c 	and.w	r3, r3, #12
 8001a30:	2b08      	cmp	r3, #8
 8001a32:	d00d      	beq.n	8001a50 <HAL_RCC_GetSysClockFreq+0x40>
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	f200 80e1 	bhi.w	8001bfc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x34>
 8001a3e:	2b04      	cmp	r3, #4
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001a42:	e0db      	b.n	8001bfc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a44:	4b73      	ldr	r3, [pc, #460]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a46:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a48:	e0db      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4a:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x208>)
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a4e:	e0d8      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a50:	4b6f      	ldr	r3, [pc, #444]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a58:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5a:	4b6d      	ldr	r3, [pc, #436]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d063      	beq.n	8001b2e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b6a      	ldr	r3, [pc, #424]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a70:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a7e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a82:	4622      	mov	r2, r4
 8001a84:	462b      	mov	r3, r5
 8001a86:	f04f 0000 	mov.w	r0, #0
 8001a8a:	f04f 0100 	mov.w	r1, #0
 8001a8e:	0159      	lsls	r1, r3, #5
 8001a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a94:	0150      	lsls	r0, r2, #5
 8001a96:	4602      	mov	r2, r0
 8001a98:	460b      	mov	r3, r1
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	1a51      	subs	r1, r2, r1
 8001a9e:	6139      	str	r1, [r7, #16]
 8001aa0:	4629      	mov	r1, r5
 8001aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 0300 	mov.w	r3, #0
 8001ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab4:	4659      	mov	r1, fp
 8001ab6:	018b      	lsls	r3, r1, #6
 8001ab8:	4651      	mov	r1, sl
 8001aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001abe:	4651      	mov	r1, sl
 8001ac0:	018a      	lsls	r2, r1, #6
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ac8:	4659      	mov	r1, fp
 8001aca:	eb63 0901 	sbc.w	r9, r3, r1
 8001ace:	f04f 0200 	mov.w	r2, #0
 8001ad2:	f04f 0300 	mov.w	r3, #0
 8001ad6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ada:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ade:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae2:	4690      	mov	r8, r2
 8001ae4:	4699      	mov	r9, r3
 8001ae6:	4623      	mov	r3, r4
 8001ae8:	eb18 0303 	adds.w	r3, r8, r3
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	462b      	mov	r3, r5
 8001af0:	eb49 0303 	adc.w	r3, r9, r3
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	f04f 0200 	mov.w	r2, #0
 8001afa:	f04f 0300 	mov.w	r3, #0
 8001afe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b02:	4629      	mov	r1, r5
 8001b04:	024b      	lsls	r3, r1, #9
 8001b06:	4621      	mov	r1, r4
 8001b08:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b0c:	4621      	mov	r1, r4
 8001b0e:	024a      	lsls	r2, r1, #9
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b16:	2200      	movs	r2, #0
 8001b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b1a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b1c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b20:	f7fe fba8 	bl	8000274 <__aeabi_uldivmod>
 8001b24:	4602      	mov	r2, r0
 8001b26:	460b      	mov	r3, r1
 8001b28:	4613      	mov	r3, r2
 8001b2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b2c:	e058      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b2e:	4b38      	ldr	r3, [pc, #224]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	099b      	lsrs	r3, r3, #6
 8001b34:	2200      	movs	r2, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	4611      	mov	r1, r2
 8001b3a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b3e:	623b      	str	r3, [r7, #32]
 8001b40:	2300      	movs	r3, #0
 8001b42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b44:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b48:	4642      	mov	r2, r8
 8001b4a:	464b      	mov	r3, r9
 8001b4c:	f04f 0000 	mov.w	r0, #0
 8001b50:	f04f 0100 	mov.w	r1, #0
 8001b54:	0159      	lsls	r1, r3, #5
 8001b56:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5a:	0150      	lsls	r0, r2, #5
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4641      	mov	r1, r8
 8001b62:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b66:	4649      	mov	r1, r9
 8001b68:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b6c:	f04f 0200 	mov.w	r2, #0
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b78:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b7c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b80:	ebb2 040a 	subs.w	r4, r2, sl
 8001b84:	eb63 050b 	sbc.w	r5, r3, fp
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	00eb      	lsls	r3, r5, #3
 8001b92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b96:	00e2      	lsls	r2, r4, #3
 8001b98:	4614      	mov	r4, r2
 8001b9a:	461d      	mov	r5, r3
 8001b9c:	4643      	mov	r3, r8
 8001b9e:	18e3      	adds	r3, r4, r3
 8001ba0:	603b      	str	r3, [r7, #0]
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	eb45 0303 	adc.w	r3, r5, r3
 8001ba8:	607b      	str	r3, [r7, #4]
 8001baa:	f04f 0200 	mov.w	r2, #0
 8001bae:	f04f 0300 	mov.w	r3, #0
 8001bb2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	028b      	lsls	r3, r1, #10
 8001bba:	4621      	mov	r1, r4
 8001bbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc0:	4621      	mov	r1, r4
 8001bc2:	028a      	lsls	r2, r1, #10
 8001bc4:	4610      	mov	r0, r2
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bca:	2200      	movs	r2, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	61fa      	str	r2, [r7, #28]
 8001bd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd4:	f7fe fb4e 	bl	8000274 <__aeabi_uldivmod>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4613      	mov	r3, r2
 8001bde:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001be0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c10 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	3301      	adds	r3, #1
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bf0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bfa:	e002      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001bfc:	4b05      	ldr	r3, [pc, #20]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x204>)
 8001bfe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c04:	4618      	mov	r0, r3
 8001c06:	3750      	adds	r7, #80	@ 0x50
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c0e:	bf00      	nop
 8001c10:	40023800 	.word	0x40023800
 8001c14:	00f42400 	.word	0x00f42400
 8001c18:	007a1200 	.word	0x007a1200

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000000 	.word	0x20000000

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080060e8 	.word	0x080060e8

08001c5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	220f      	movs	r2, #15
 8001c6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c6c:	4b12      	ldr	r3, [pc, #72]	@ (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c6e:	689b      	ldr	r3, [r3, #8]
 8001c70:	f003 0203 	and.w	r2, r3, #3
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c78:	4b0f      	ldr	r3, [pc, #60]	@ (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c84:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c90:	4b09      	ldr	r3, [pc, #36]	@ (8001cb8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	08db      	lsrs	r3, r3, #3
 8001c96:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c9e:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <HAL_RCC_GetClockConfig+0x60>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0207 	and.w	r2, r3, #7
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	601a      	str	r2, [r3, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40023800 	.word	0x40023800
 8001cbc:	40023c00 	.word	0x40023c00

08001cc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e041      	b.n	8001d56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 f839 	bl	8001d5e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3304      	adds	r3, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4610      	mov	r0, r2
 8001d00:	f000 f9b2 	bl	8002068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d54:	2300      	movs	r3, #0
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3708      	adds	r7, #8
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e044      	b.n	8001e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d018      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db6:	d013      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d00e      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d009      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a17      	ldr	r2, [pc, #92]	@ (8001e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d004      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x6c>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a16      	ldr	r2, [pc, #88]	@ (8001e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d111      	bne.n	8001e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d010      	beq.n	8001e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	681a      	ldr	r2, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f042 0201 	orr.w	r2, r2, #1
 8001e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e02:	e007      	b.n	8001e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f042 0201 	orr.w	r2, r2, #1
 8001e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40010000 	.word	0x40010000
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40000800 	.word	0x40000800
 8001e30:	40000c00 	.word	0x40000c00
 8001e34:	40014000 	.word	0x40014000

08001e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b084      	sub	sp, #16
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0302 	and.w	r3, r3, #2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0202 	mvn.w	r2, #2
 8001e6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2201      	movs	r2, #1
 8001e72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8d2 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f8c4 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8d5 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0304 	and.w	r3, r3, #4
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0204 	mvn.w	r2, #4
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	699b      	ldr	r3, [r3, #24]
 8001ec6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f8ac 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f89e 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f8af 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0308 	and.w	r3, r3, #8
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0208 	mvn.w	r2, #8
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2204      	movs	r2, #4
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f886 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f878 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f889 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d020      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0310 	and.w	r3, r3, #16
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d01b      	beq.n	8001f80 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0210 	mvn.w	r2, #16
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2208      	movs	r2, #8
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	69db      	ldr	r3, [r3, #28]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 f860 	bl	800202c <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 f852 	bl	8002018 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f863 	bl	8002040 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00c      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0201 	mvn.w	r2, #1
 8001f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe fd92 	bl	8000ac8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d007      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8e6 	bl	8002194 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00c      	beq.n	8001fec <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f834 	bl	8002054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	f003 0320 	and.w	r3, r3, #32
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00c      	beq.n	8002010 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	f003 0320 	and.w	r3, r3, #32
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d007      	beq.n	8002010 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f06f 0220 	mvn.w	r2, #32
 8002008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8b8 	bl	8002180 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002010:	bf00      	nop
 8002012:	3710      	adds	r7, #16
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr

08002068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3a      	ldr	r2, [pc, #232]	@ (8002164 <TIM_Base_SetConfig+0xfc>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d00f      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002086:	d00b      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a37      	ldr	r2, [pc, #220]	@ (8002168 <TIM_Base_SetConfig+0x100>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d007      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a36      	ldr	r2, [pc, #216]	@ (800216c <TIM_Base_SetConfig+0x104>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d003      	beq.n	80020a0 <TIM_Base_SetConfig+0x38>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a35      	ldr	r2, [pc, #212]	@ (8002170 <TIM_Base_SetConfig+0x108>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d108      	bne.n	80020b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	68fa      	ldr	r2, [r7, #12]
 80020ae:	4313      	orrs	r3, r2
 80020b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	@ (8002164 <TIM_Base_SetConfig+0xfc>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c0:	d017      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a28      	ldr	r2, [pc, #160]	@ (8002168 <TIM_Base_SetConfig+0x100>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a27      	ldr	r2, [pc, #156]	@ (800216c <TIM_Base_SetConfig+0x104>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00f      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a26      	ldr	r2, [pc, #152]	@ (8002170 <TIM_Base_SetConfig+0x108>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00b      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a25      	ldr	r2, [pc, #148]	@ (8002174 <TIM_Base_SetConfig+0x10c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d007      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a24      	ldr	r2, [pc, #144]	@ (8002178 <TIM_Base_SetConfig+0x110>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d003      	beq.n	80020f2 <TIM_Base_SetConfig+0x8a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a23      	ldr	r2, [pc, #140]	@ (800217c <TIM_Base_SetConfig+0x114>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d108      	bne.n	8002104 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	68fa      	ldr	r2, [r7, #12]
 8002100:	4313      	orrs	r3, r2
 8002102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68fa      	ldr	r2, [r7, #12]
 8002116:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0e      	ldr	r2, [pc, #56]	@ (8002164 <TIM_Base_SetConfig+0xfc>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2201      	movs	r2, #1
 800213c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d105      	bne.n	8002156 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	f023 0201 	bic.w	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	611a      	str	r2, [r3, #16]
  }
}
 8002156:	bf00      	nop
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40010000 	.word	0x40010000
 8002168:	40000400 	.word	0x40000400
 800216c:	40000800 	.word	0x40000800
 8002170:	40000c00 	.word	0x40000c00
 8002174:	40014000 	.word	0x40014000
 8002178:	40014400 	.word	0x40014400
 800217c:	40014800 	.word	0x40014800

08002180 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800219c:	bf00      	nop
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f103 0208 	add.w	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f04f 32ff 	mov.w	r2, #4294967295
 80021c0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f103 0208 	add.w	r2, r3, #8
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f103 0208 	add.w	r2, r3, #8
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80021dc:	f240 1019 	movw	r0, #281	@ 0x119
 80021e0:	f003 fbc8 	bl	8005974 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021e4:	bf00      	nop
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80021fa:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80021fe:	f003 fbb9 	bl	8005974 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6892      	ldr	r2, [r2, #8]
 8002220:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	6852      	ldr	r2, [r2, #4]
 800222a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	429a      	cmp	r2, r3
 8002234:	d103      	bne.n	800223e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	1e5a      	subs	r2, r3, #1
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4619      	mov	r1, r3
 8002254:	f240 101d 	movw	r0, #285	@ 0x11d
 8002258:	f003 fbc8 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002268:	b580      	push	{r7, lr}
 800226a:	b08e      	sub	sp, #56	@ 0x38
 800226c:	af04      	add	r7, sp, #16
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002278:	2b00      	cmp	r3, #0
 800227a:	d10b      	bne.n	8002294 <prvCreateStaticTask+0x2c>
    __asm volatile
 800227c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002280:	f383 8811 	msr	BASEPRI, r3
 8002284:	f3bf 8f6f 	isb	sy
 8002288:	f3bf 8f4f 	dsb	sy
 800228c:	623b      	str	r3, [r7, #32]
}
 800228e:	bf00      	nop
 8002290:	bf00      	nop
 8002292:	e7fd      	b.n	8002290 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8002294:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10b      	bne.n	80022b2 <prvCreateStaticTask+0x4a>
    __asm volatile
 800229a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800229e:	f383 8811 	msr	BASEPRI, r3
 80022a2:	f3bf 8f6f 	isb	sy
 80022a6:	f3bf 8f4f 	dsb	sy
 80022aa:	61fb      	str	r3, [r7, #28]
}
 80022ac:	bf00      	nop
 80022ae:	bf00      	nop
 80022b0:	e7fd      	b.n	80022ae <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80022b2:	2358      	movs	r3, #88	@ 0x58
 80022b4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	2b58      	cmp	r3, #88	@ 0x58
 80022ba:	d00b      	beq.n	80022d4 <prvCreateStaticTask+0x6c>
    __asm volatile
 80022bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	61bb      	str	r3, [r7, #24]
}
 80022ce:	bf00      	nop
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80022d4:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80022d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01f      	beq.n	800231c <prvCreateStaticTask+0xb4>
 80022dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d01c      	beq.n	800231c <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80022e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022e6:	2258      	movs	r2, #88	@ 0x58
 80022e8:	2100      	movs	r1, #0
 80022ea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80022ec:	f003 fe2e 	bl	8005f4c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	2202      	movs	r2, #2
 80022fa:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80022fe:	2300      	movs	r3, #0
 8002300:	9303      	str	r3, [sp, #12]
 8002302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002304:	9302      	str	r3, [sp, #8]
 8002306:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002308:	9301      	str	r3, [sp, #4]
 800230a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800230c:	9300      	str	r3, [sp, #0]
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	68b9      	ldr	r1, [r7, #8]
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 f89d 	bl	8002454 <prvInitialiseNewTask>
 800231a:	e001      	b.n	8002320 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 800231c:	2300      	movs	r3, #0
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002322:	4618      	mov	r0, r3
 8002324:	3728      	adds	r7, #40	@ 0x28
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800232a:	b580      	push	{r7, lr}
 800232c:	b08a      	sub	sp, #40	@ 0x28
 800232e:	af04      	add	r7, sp, #16
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
 8002336:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002338:	2300      	movs	r3, #0
 800233a:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800233c:	f107 0310 	add.w	r3, r7, #16
 8002340:	9303      	str	r3, [sp, #12]
 8002342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002344:	9302      	str	r3, [sp, #8]
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	6a3b      	ldr	r3, [r7, #32]
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	68b9      	ldr	r1, [r7, #8]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f7ff ff87 	bl	8002268 <prvCreateStaticTask>
 800235a:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002362:	6978      	ldr	r0, [r7, #20]
 8002364:	f000 f906 	bl	8002574 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4618      	mov	r0, r3
 800236c:	f003 fc78 	bl	8005c60 <SEGGER_SYSVIEW_ShrinkId>
 8002370:	4603      	mov	r3, r0
 8002372:	4619      	mov	r1, r3
 8002374:	20bf      	movs	r0, #191	@ 0xbf
 8002376:	f003 fb39 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800237a:	693b      	ldr	r3, [r7, #16]
    }
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002384:	b580      	push	{r7, lr}
 8002386:	b08a      	sub	sp, #40	@ 0x28
 8002388:	af04      	add	r7, sp, #16
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	4618      	mov	r0, r3
 8002398:	f001 fa72 	bl	8003880 <pvPortMalloc>
 800239c:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80023a4:	2058      	movs	r0, #88	@ 0x58
 80023a6:	f001 fa6b 	bl	8003880 <pvPortMalloc>
 80023aa:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d008      	beq.n	80023c4 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80023b2:	2258      	movs	r2, #88	@ 0x58
 80023b4:	2100      	movs	r1, #0
 80023b6:	6978      	ldr	r0, [r7, #20]
 80023b8:	f003 fdc8 	bl	8005f4c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80023c2:	e005      	b.n	80023d0 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80023c4:	6938      	ldr	r0, [r7, #16]
 80023c6:	f001 fb8d 	bl	8003ae4 <vPortFree>
 80023ca:	e001      	b.n	80023d0 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d011      	beq.n	80023fa <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2200      	movs	r2, #0
 80023da:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023de:	2300      	movs	r3, #0
 80023e0:	9303      	str	r3, [sp, #12]
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	6a3b      	ldr	r3, [r7, #32]
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68b9      	ldr	r1, [r7, #8]
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 f82d 	bl	8002454 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80023fa:	697b      	ldr	r3, [r7, #20]
    }
 80023fc:	4618      	mov	r0, r3
 80023fe:	3718      	adds	r7, #24
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002404:	b580      	push	{r7, lr}
 8002406:	b088      	sub	sp, #32
 8002408:	af02      	add	r7, sp, #8
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
 8002410:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	9301      	str	r3, [sp, #4]
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f7ff ffaf 	bl	8002384 <prvCreateTask>
 8002426:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800242e:	6938      	ldr	r0, [r7, #16]
 8002430:	f000 f8a0 	bl	8002574 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002434:	2301      	movs	r3, #1
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e002      	b.n	8002440 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800243a:	f04f 33ff 	mov.w	r3, #4294967295
 800243e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4619      	mov	r1, r3
 8002444:	20c2      	movs	r0, #194	@ 0xc2
 8002446:	f003 fad1 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800244a:	697b      	ldr	r3, [r7, #20]
    }
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
 8002460:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002462:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002464:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	461a      	mov	r2, r3
 800246c:	21a5      	movs	r1, #165	@ 0xa5
 800246e:	f003 fd6d 	bl	8005f4c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800247c:	3b01      	subs	r3, #1
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	f023 0307 	bic.w	r3, r3, #7
 800248a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00b      	beq.n	80024ae <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	617b      	str	r3, [r7, #20]
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	e7fd      	b.n	80024aa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d01e      	beq.n	80024f2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024b4:	2300      	movs	r3, #0
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	e012      	b.n	80024e0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	4413      	add	r3, r2
 80024c0:	7819      	ldrb	r1, [r3, #0]
 80024c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	4413      	add	r3, r2
 80024c8:	3334      	adds	r3, #52	@ 0x34
 80024ca:	460a      	mov	r2, r1
 80024cc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d006      	beq.n	80024e8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3301      	adds	r3, #1
 80024de:	61fb      	str	r3, [r7, #28]
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d9e9      	bls.n	80024ba <prvInitialiseNewTask+0x66>
 80024e6:	e000      	b.n	80024ea <prvInitialiseNewTask+0x96>
            {
                break;
 80024e8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80024ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ec:	2200      	movs	r2, #0
 80024ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80024f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f4:	2b04      	cmp	r3, #4
 80024f6:	d90b      	bls.n	8002510 <prvInitialiseNewTask+0xbc>
    __asm volatile
 80024f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024fc:	f383 8811 	msr	BASEPRI, r3
 8002500:	f3bf 8f6f 	isb	sy
 8002504:	f3bf 8f4f 	dsb	sy
 8002508:	613b      	str	r3, [r7, #16]
}
 800250a:	bf00      	nop
 800250c:	bf00      	nop
 800250e:	e7fd      	b.n	800250c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	2b04      	cmp	r3, #4
 8002514:	d901      	bls.n	800251a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002516:	2304      	movs	r3, #4
 8002518:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800251a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002524:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002528:	3304      	adds	r3, #4
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fe5e 	bl	80021ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002532:	3318      	adds	r3, #24
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fe59 	bl	80021ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800253a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800253c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800253e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002542:	f1c3 0205 	rsb	r2, r3, #5
 8002546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002548:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800254a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800254c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800254e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	68f9      	ldr	r1, [r7, #12]
 8002554:	69b8      	ldr	r0, [r7, #24]
 8002556:	f000 fe63 	bl	8003220 <pxPortInitialiseStack>
 800255a:	4602      	mov	r2, r0
 800255c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800255e:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d002      	beq.n	800256c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002568:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800256a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800256c:	bf00      	nop
 800256e:	3720      	adds	r7, #32
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002574:	b5b0      	push	{r4, r5, r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af02      	add	r7, sp, #8
 800257a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 800257c:	f001 f852 	bl	8003624 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002580:	4b50      	ldr	r3, [pc, #320]	@ (80026c4 <prvAddNewTaskToReadyList+0x150>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	3301      	adds	r3, #1
 8002586:	4a4f      	ldr	r2, [pc, #316]	@ (80026c4 <prvAddNewTaskToReadyList+0x150>)
 8002588:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800258a:	4b4f      	ldr	r3, [pc, #316]	@ (80026c8 <prvAddNewTaskToReadyList+0x154>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d109      	bne.n	80025a6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002592:	4a4d      	ldr	r2, [pc, #308]	@ (80026c8 <prvAddNewTaskToReadyList+0x154>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002598:	4b4a      	ldr	r3, [pc, #296]	@ (80026c4 <prvAddNewTaskToReadyList+0x150>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d110      	bne.n	80025c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80025a0:	f000 fd54 	bl	800304c <prvInitialiseTaskLists>
 80025a4:	e00d      	b.n	80025c2 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80025a6:	4b49      	ldr	r3, [pc, #292]	@ (80026cc <prvAddNewTaskToReadyList+0x158>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d109      	bne.n	80025c2 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025ae:	4b46      	ldr	r3, [pc, #280]	@ (80026c8 <prvAddNewTaskToReadyList+0x154>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d802      	bhi.n	80025c2 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80025bc:	4a42      	ldr	r2, [pc, #264]	@ (80026c8 <prvAddNewTaskToReadyList+0x154>)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80025c2:	4b43      	ldr	r3, [pc, #268]	@ (80026d0 <prvAddNewTaskToReadyList+0x15c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	3301      	adds	r3, #1
 80025c8:	4a41      	ldr	r2, [pc, #260]	@ (80026d0 <prvAddNewTaskToReadyList+0x15c>)
 80025ca:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80025cc:	4b40      	ldr	r3, [pc, #256]	@ (80026d0 <prvAddNewTaskToReadyList+0x15c>)
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d016      	beq.n	8002608 <prvAddNewTaskToReadyList+0x94>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4618      	mov	r0, r3
 80025de:	f003 fa79 	bl	8005ad4 <SEGGER_SYSVIEW_OnTaskCreate>
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f2:	461d      	mov	r5, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	461c      	mov	r4, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	1ae3      	subs	r3, r4, r3
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	462b      	mov	r3, r5
 8002604:	f001 fc6c 	bl	8003ee0 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4618      	mov	r0, r3
 800260c:	f003 fae6 	bl	8005bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002614:	2201      	movs	r2, #1
 8002616:	409a      	lsls	r2, r3
 8002618:	4b2e      	ldr	r3, [pc, #184]	@ (80026d4 <prvAddNewTaskToReadyList+0x160>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4313      	orrs	r3, r2
 800261e:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <prvAddNewTaskToReadyList+0x160>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002626:	492c      	ldr	r1, [pc, #176]	@ (80026d8 <prvAddNewTaskToReadyList+0x164>)
 8002628:	4613      	mov	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	3304      	adds	r3, #4
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	60fb      	str	r3, [r7, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	609a      	str	r2, [r3, #8]
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	689a      	ldr	r2, [r3, #8]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	60da      	str	r2, [r3, #12]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	687a      	ldr	r2, [r7, #4]
 800264c:	3204      	adds	r2, #4
 800264e:	605a      	str	r2, [r3, #4]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	1d1a      	adds	r2, r3, #4
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800265c:	4613      	mov	r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4413      	add	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4a1c      	ldr	r2, [pc, #112]	@ (80026d8 <prvAddNewTaskToReadyList+0x164>)
 8002666:	441a      	add	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002670:	4919      	ldr	r1, [pc, #100]	@ (80026d8 <prvAddNewTaskToReadyList+0x164>)
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	440b      	add	r3, r1
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002682:	1c59      	adds	r1, r3, #1
 8002684:	4814      	ldr	r0, [pc, #80]	@ (80026d8 <prvAddNewTaskToReadyList+0x164>)
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4403      	add	r3, r0
 8002690:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002692:	f000 fff9 	bl	8003688 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002696:	4b0d      	ldr	r3, [pc, #52]	@ (80026cc <prvAddNewTaskToReadyList+0x158>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00e      	beq.n	80026bc <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800269e:	4b0a      	ldr	r3, [pc, #40]	@ (80026c8 <prvAddNewTaskToReadyList+0x154>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d207      	bcs.n	80026bc <prvAddNewTaskToReadyList+0x148>
 80026ac:	4b0b      	ldr	r3, [pc, #44]	@ (80026dc <prvAddNewTaskToReadyList+0x168>)
 80026ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026b2:	601a      	str	r2, [r3, #0]
 80026b4:	f3bf 8f4f 	dsb	sy
 80026b8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bdb0      	pop	{r4, r5, r7, pc}
 80026c4:	20000164 	.word	0x20000164
 80026c8:	2000008c 	.word	0x2000008c
 80026cc:	20000170 	.word	0x20000170
 80026d0:	20000180 	.word	0x20000180
 80026d4:	2000016c 	.word	0x2000016c
 80026d8:	20000090 	.word	0x20000090
 80026dc:	e000ed04 	.word	0xe000ed04

080026e0 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

    UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
    {
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
        TCB_t const * pxTCB;
        UBaseType_t uxReturn;

        traceENTER_uxTaskPriorityGet( xTask );

        taskENTER_CRITICAL();
 80026e8:	f000 ff9c 	bl	8003624 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the task
             * that called uxTaskPriorityGet() that is being queried. */
            pxTCB = prvGetTCBFromHandle( xTask );
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d102      	bne.n	80026f8 <uxTaskPriorityGet+0x18>
 80026f2:	4b09      	ldr	r3, [pc, #36]	@ (8002718 <uxTaskPriorityGet+0x38>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	e000      	b.n	80026fa <uxTaskPriorityGet+0x1a>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60fb      	str	r3, [r7, #12]
            uxReturn = pxTCB->uxPriority;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002700:	60bb      	str	r3, [r7, #8]
        }
        taskEXIT_CRITICAL();
 8002702:	f000 ffc1 	bl	8003688 <vPortExitCritical>

        traceRETURN_uxTaskPriorityGet( uxReturn );
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	20c7      	movs	r0, #199	@ 0xc7
 800270a:	f003 f96f 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

        return uxReturn;
 800270e:	68bb      	ldr	r3, [r7, #8]
    }
 8002710:	4618      	mov	r0, r3
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	2000008c 	.word	0x2000008c

0800271c <vTaskPrioritySet>:

#if ( INCLUDE_vTaskPrioritySet == 1 )

    void vTaskPrioritySet( TaskHandle_t xTask,
                           UBaseType_t uxNewPriority )
    {
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	@ 0x28
 8002720:	af02      	add	r7, sp, #8
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
        TCB_t * pxTCB;
        UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
        BaseType_t xYieldRequired = pdFALSE;
 8002726:	2300      	movs	r3, #0
 8002728:	61fb      	str	r3, [r7, #28]
            BaseType_t xYieldForTask = pdFALSE;
        #endif

        traceENTER_vTaskPrioritySet( xTask, uxNewPriority );

        configASSERT( uxNewPriority < configMAX_PRIORITIES );
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	2b04      	cmp	r3, #4
 800272e:	d90b      	bls.n	8002748 <vTaskPrioritySet+0x2c>
    __asm volatile
 8002730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	60bb      	str	r3, [r7, #8]
}
 8002742:	bf00      	nop
 8002744:	bf00      	nop
 8002746:	e7fd      	b.n	8002744 <vTaskPrioritySet+0x28>

        /* Ensure the new priority is valid. */
        if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	2b04      	cmp	r3, #4
 800274c:	d901      	bls.n	8002752 <vTaskPrioritySet+0x36>
        {
            uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800274e:	2304      	movs	r3, #4
 8002750:	603b      	str	r3, [r7, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8002752:	f000 ff67 	bl	8003624 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the priority of the calling
             * task that is being changed. */
            pxTCB = prvGetTCBFromHandle( xTask );
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d102      	bne.n	8002762 <vTaskPrioritySet+0x46>
 800275c:	4b67      	ldr	r3, [pc, #412]	@ (80028fc <vTaskPrioritySet+0x1e0>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	e000      	b.n	8002764 <vTaskPrioritySet+0x48>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	61bb      	str	r3, [r7, #24]

            traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4618      	mov	r0, r3
 800276a:	f003 fa79 	bl	8005c60 <SEGGER_SYSVIEW_ShrinkId>
 800276e:	4603      	mov	r3, r0
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	4619      	mov	r1, r3
 8002774:	20c9      	movs	r0, #201	@ 0xc9
 8002776:	f002 fd61 	bl	800523c <SEGGER_SYSVIEW_RecordU32x2>
 800277a:	69b8      	ldr	r0, [r7, #24]
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002786:	461a      	mov	r2, r3
 8002788:	2300      	movs	r3, #0
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	4613      	mov	r3, r2
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	f001 fc0e 	bl	8003fb0 <SYSVIEW_UpdateTask>

            #if ( configUSE_MUTEXES == 1 )
            {
                uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002798:	617b      	str	r3, [r7, #20]
            {
                uxCurrentBasePriority = pxTCB->uxPriority;
            }
            #endif

            if( uxCurrentBasePriority != uxNewPriority )
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	429a      	cmp	r2, r3
 80027a0:	f000 80a3 	beq.w	80028ea <vTaskPrioritySet+0x1ce>
            {
                /* The priority change may have readied a task of higher
                 * priority than a running task. */
                if( uxNewPriority > uxCurrentBasePriority )
 80027a4:	683a      	ldr	r2, [r7, #0]
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d90d      	bls.n	80027c8 <vTaskPrioritySet+0xac>
                {
                    #if ( configNUMBER_OF_CORES == 1 )
                    {
                        if( pxTCB != pxCurrentTCB )
 80027ac:	4b53      	ldr	r3, [pc, #332]	@ (80028fc <vTaskPrioritySet+0x1e0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d00f      	beq.n	80027d6 <vTaskPrioritySet+0xba>
                        {
                            /* The priority of a task other than the currently
                             * running task is being raised.  Is the priority being
                             * raised above that of the running task? */
                            if( uxNewPriority > pxCurrentTCB->uxPriority )
 80027b6:	4b51      	ldr	r3, [pc, #324]	@ (80028fc <vTaskPrioritySet+0x1e0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d909      	bls.n	80027d6 <vTaskPrioritySet+0xba>
                            {
                                xYieldRequired = pdTRUE;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
 80027c6:	e006      	b.n	80027d6 <vTaskPrioritySet+0xba>
                         * perform a yield for this task later. */
                        xYieldForTask = pdTRUE;
                    }
                    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                }
                else if( taskTASK_IS_RUNNING( pxTCB ) == pdTRUE )
 80027c8:	4b4c      	ldr	r3, [pc, #304]	@ (80028fc <vTaskPrioritySet+0x1e0>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d101      	bne.n	80027d6 <vTaskPrioritySet+0xba>
                     * is ready to execute. */
                    #if ( configUSE_TASK_PREEMPTION_DISABLE == 1 )
                        if( pxTCB->xPreemptionDisable == pdFALSE )
                    #endif
                    {
                        xYieldRequired = pdTRUE;
 80027d2:	2301      	movs	r3, #1
 80027d4:	61fb      	str	r3, [r7, #28]
                }

                /* Remember the ready list the task might be referenced from
                 * before its uxPriority member is changed so the
                 * taskRESET_READY_PRIORITY() macro can function correctly. */
                uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	613b      	str	r3, [r7, #16]
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* Only change the priority being used if the task is not
                     * currently using an inherited priority or the new priority
                     * is bigger than the inherited priority. */
                    if( ( pxTCB->uxBasePriority == pxTCB->uxPriority ) || ( uxNewPriority > pxTCB->uxPriority ) )
 80027dc:	69bb      	ldr	r3, [r7, #24]
 80027de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d004      	beq.n	80027f2 <vTaskPrioritySet+0xd6>
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	683a      	ldr	r2, [r7, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d902      	bls.n	80027f8 <vTaskPrioritySet+0xdc>
                    {
                        pxTCB->uxPriority = uxNewPriority;
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	62da      	str	r2, [r3, #44]	@ 0x2c
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The base priority gets set whatever. */
                    pxTCB->uxBasePriority = uxNewPriority;
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	649a      	str	r2, [r3, #72]	@ 0x48
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                /* Only reset the event list item value if the value is not
                 * being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	db04      	blt.n	8002810 <vTaskPrioritySet+0xf4>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) );
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	f1c3 0205 	rsb	r2, r3, #5
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	619a      	str	r2, [r3, #24]

                /* If the task is in the blocked or suspended list we need do
                 * nothing more than change its priority variable. However, if
                 * the task is in a ready list it needs to be removed and placed
                 * in the list appropriate to its new priority. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	6959      	ldr	r1, [r3, #20]
 8002814:	693a      	ldr	r2, [r7, #16]
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4a38      	ldr	r2, [pc, #224]	@ (8002900 <vTaskPrioritySet+0x1e4>)
 8002820:	4413      	add	r3, r2
 8002822:	4299      	cmp	r1, r3
 8002824:	d156      	bne.n	80028d4 <vTaskPrioritySet+0x1b8>
                {
                    /* The task is currently in its ready list - remove before
                     * adding it to its new ready list.  As we are in a critical
                     * section we can do this even if the scheduler is suspended. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	3304      	adds	r3, #4
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff fced 	bl	800220a <uxListRemove>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d109      	bne.n	800284a <vTaskPrioritySet+0x12e>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 8002836:	2201      	movs	r2, #1
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	43da      	mvns	r2, r3
 8002840:	4b30      	ldr	r3, [pc, #192]	@ (8002904 <vTaskPrioritySet+0x1e8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4013      	ands	r3, r2
 8002846:	4a2f      	ldr	r2, [pc, #188]	@ (8002904 <vTaskPrioritySet+0x1e8>)
 8002848:	6013      	str	r3, [r2, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    prvAddTaskToReadyList( pxTCB );
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	4618      	mov	r0, r3
 800284e:	f003 f9c5 	bl	8005bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002856:	2201      	movs	r2, #1
 8002858:	409a      	lsls	r2, r3
 800285a:	4b2a      	ldr	r3, [pc, #168]	@ (8002904 <vTaskPrioritySet+0x1e8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4313      	orrs	r3, r2
 8002860:	4a28      	ldr	r2, [pc, #160]	@ (8002904 <vTaskPrioritySet+0x1e8>)
 8002862:	6013      	str	r3, [r2, #0]
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002868:	4925      	ldr	r1, [pc, #148]	@ (8002900 <vTaskPrioritySet+0x1e4>)
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3304      	adds	r3, #4
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	609a      	str	r2, [r3, #8]
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689a      	ldr	r2, [r3, #8]
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	3204      	adds	r2, #4
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1d1a      	adds	r2, r3, #4
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	609a      	str	r2, [r3, #8]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4a16      	ldr	r2, [pc, #88]	@ (8002900 <vTaskPrioritySet+0x1e4>)
 80028a8:	441a      	add	r2, r3
 80028aa:	69bb      	ldr	r3, [r7, #24]
 80028ac:	615a      	str	r2, [r3, #20]
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b2:	4913      	ldr	r1, [pc, #76]	@ (8002900 <vTaskPrioritySet+0x1e4>)
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028c4:	1c59      	adds	r1, r3, #1
 80028c6:	480e      	ldr	r0, [pc, #56]	@ (8002900 <vTaskPrioritySet+0x1e4>)
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	6019      	str	r1, [r3, #0]
                        xYieldForTask = pdFALSE;
                    }
                    #endif
                }

                if( xYieldRequired != pdFALSE )
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d007      	beq.n	80028ea <vTaskPrioritySet+0x1ce>
                {
                    /* The running task priority is set down. Request the task to yield. */
                    taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxTCB );
 80028da:	4b0b      	ldr	r3, [pc, #44]	@ (8002908 <vTaskPrioritySet+0x1ec>)
 80028dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028e0:	601a      	str	r2, [r3, #0]
 80028e2:	f3bf 8f4f 	dsb	sy
 80028e6:	f3bf 8f6f 	isb	sy
                /* Remove compiler warning about unused variables when the port
                 * optimised task selection is not being used. */
                ( void ) uxPriorityUsedOnEntry;
            }
        }
        taskEXIT_CRITICAL();
 80028ea:	f000 fecd 	bl	8003688 <vPortExitCritical>

        traceRETURN_vTaskPrioritySet();
 80028ee:	20c9      	movs	r0, #201	@ 0xc9
 80028f0:	f003 f840 	bl	8005974 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80028f4:	bf00      	nop
 80028f6:	3720      	adds	r7, #32
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	2000008c 	.word	0x2000008c
 8002900:	20000090 	.word	0x20000090
 8002904:	2000016c 	.word	0x2000016c
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	@ 0x38
 8002910:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002912:	2301      	movs	r3, #1
 8002914:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002916:	2300      	movs	r3, #0
 8002918:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	e013      	b.n	8002948 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002920:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <prvCreateIdleTasks+0xc4>)
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	4413      	add	r3, r2
 8002926:	7819      	ldrb	r1, [r3, #0]
 8002928:	f107 020c 	add.w	r2, r7, #12
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	4413      	add	r3, r2
 8002930:	460a      	mov	r2, r1
 8002932:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002934:	f107 020c 	add.w	r2, r7, #12
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	4413      	add	r3, r2
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d006      	beq.n	8002950 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3301      	adds	r3, #1
 8002946:	61fb      	str	r3, [r7, #28]
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	2b09      	cmp	r3, #9
 800294c:	dde8      	ble.n	8002920 <prvCreateIdleTasks+0x14>
 800294e:	e000      	b.n	8002952 <prvCreateIdleTasks+0x46>
        {
            break;
 8002950:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002952:	2300      	movs	r3, #0
 8002954:	623b      	str	r3, [r7, #32]
 8002956:	e030      	b.n	80029ba <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002958:	4b1e      	ldr	r3, [pc, #120]	@ (80029d4 <prvCreateIdleTasks+0xc8>)
 800295a:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002964:	463a      	mov	r2, r7
 8002966:	1d39      	adds	r1, r7, #4
 8002968:	f107 0308 	add.w	r3, r7, #8
 800296c:	4618      	mov	r0, r3
 800296e:	f000 fc3d 	bl	80031ec <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002972:	6838      	ldr	r0, [r7, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	f107 010c 	add.w	r1, r7, #12
 800297c:	9202      	str	r2, [sp, #8]
 800297e:	9301      	str	r3, [sp, #4]
 8002980:	2300      	movs	r3, #0
 8002982:	9300      	str	r3, [sp, #0]
 8002984:	2300      	movs	r3, #0
 8002986:	4602      	mov	r2, r0
 8002988:	69b8      	ldr	r0, [r7, #24]
 800298a:	f7ff fcce 	bl	800232a <xTaskCreateStatic>
 800298e:	4602      	mov	r2, r0
 8002990:	4911      	ldr	r1, [pc, #68]	@ (80029d8 <prvCreateIdleTasks+0xcc>)
 8002992:	6a3b      	ldr	r3, [r7, #32]
 8002994:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002998:	4a0f      	ldr	r2, [pc, #60]	@ (80029d8 <prvCreateIdleTasks+0xcc>)
 800299a:	6a3b      	ldr	r3, [r7, #32]
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 80029a4:	2301      	movs	r3, #1
 80029a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a8:	e001      	b.n	80029ae <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 80029aa:	2300      	movs	r3, #0
 80029ac:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80029ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d006      	beq.n	80029c2 <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80029b4:	6a3b      	ldr	r3, [r7, #32]
 80029b6:	3301      	adds	r3, #1
 80029b8:	623b      	str	r3, [r7, #32]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	ddcb      	ble.n	8002958 <prvCreateIdleTasks+0x4c>
 80029c0:	e000      	b.n	80029c4 <prvCreateIdleTasks+0xb8>
        {
            break;
 80029c2:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3728      	adds	r7, #40	@ 0x28
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	08006010 	.word	0x08006010
 80029d4:	0800301d 	.word	0x0800301d
 80029d8:	20000188 	.word	0x20000188

080029dc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80029e2:	f7ff ff93 	bl	800290c <prvCreateIdleTasks>
 80029e6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d129      	bne.n	8002a42 <vTaskStartScheduler+0x66>
    __asm volatile
 80029ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f2:	f383 8811 	msr	BASEPRI, r3
 80029f6:	f3bf 8f6f 	isb	sy
 80029fa:	f3bf 8f4f 	dsb	sy
 80029fe:	60bb      	str	r3, [r7, #8]
}
 8002a00:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a02:	4b1c      	ldr	r3, [pc, #112]	@ (8002a74 <vTaskStartScheduler+0x98>)
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	@ (8002a78 <vTaskStartScheduler+0x9c>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a10:	4b1a      	ldr	r3, [pc, #104]	@ (8002a7c <vTaskStartScheduler+0xa0>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a16:	4b1a      	ldr	r3, [pc, #104]	@ (8002a80 <vTaskStartScheduler+0xa4>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3334      	adds	r3, #52	@ 0x34
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	4919      	ldr	r1, [pc, #100]	@ (8002a84 <vTaskStartScheduler+0xa8>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	f003 fa83 	bl	8005f2c <memcmp>
 8002a26:	4603      	mov	r3, r0
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d005      	beq.n	8002a38 <vTaskStartScheduler+0x5c>
 8002a2c:	4b14      	ldr	r3, [pc, #80]	@ (8002a80 <vTaskStartScheduler+0xa4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4618      	mov	r0, r3
 8002a32:	f003 f891 	bl	8005b58 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002a36:	e001      	b.n	8002a3c <vTaskStartScheduler+0x60>
 8002a38:	f003 f830 	bl	8005a9c <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002a3c:	f000 fc82 	bl	8003344 <xPortStartScheduler>
 8002a40:	e00f      	b.n	8002a62 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a48:	d10b      	bne.n	8002a62 <vTaskStartScheduler+0x86>
    __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	607b      	str	r3, [r7, #4]
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a62:	4b09      	ldr	r3, [pc, #36]	@ (8002a88 <vTaskStartScheduler+0xac>)
 8002a64:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002a66:	20cd      	movs	r0, #205	@ 0xcd
 8002a68:	f002 ff84 	bl	8005974 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002a6c:	bf00      	nop
 8002a6e:	3710      	adds	r7, #16
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000184 	.word	0x20000184
 8002a78:	20000170 	.word	0x20000170
 8002a7c:	20000168 	.word	0x20000168
 8002a80:	2000008c 	.word	0x2000008c
 8002a84:	08006010 	.word	0x08006010
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002a90:	4b04      	ldr	r3, [pc, #16]	@ (8002aa4 <vTaskSuspendAll+0x18>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	4a03      	ldr	r2, [pc, #12]	@ (8002aa4 <vTaskSuspendAll+0x18>)
 8002a98:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002a9a:	20cf      	movs	r0, #207	@ 0xcf
 8002a9c:	f002 ff6a 	bl	8005974 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002aa0:	bf00      	nop
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	2000018c 	.word	0x2000018c

08002aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002ab6:	f000 fdb5 	bl	8003624 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002aba:	2300      	movs	r3, #0
 8002abc:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002abe:	4b7a      	ldr	r3, [pc, #488]	@ (8002ca8 <xTaskResumeAll+0x200>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <xTaskResumeAll+0x36>
    __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	603b      	str	r3, [r7, #0]
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	e7fd      	b.n	8002ada <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002ade:	4b72      	ldr	r3, [pc, #456]	@ (8002ca8 <xTaskResumeAll+0x200>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	4a70      	ldr	r2, [pc, #448]	@ (8002ca8 <xTaskResumeAll+0x200>)
 8002ae6:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ca8 <xTaskResumeAll+0x200>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f040 80ce 	bne.w	8002c8e <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002af2:	4b6e      	ldr	r3, [pc, #440]	@ (8002cac <xTaskResumeAll+0x204>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80c9 	beq.w	8002c8e <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002afc:	e092      	b.n	8002c24 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002afe:	4b6c      	ldr	r3, [pc, #432]	@ (8002cb0 <xTaskResumeAll+0x208>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	69db      	ldr	r3, [r3, #28]
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	6a12      	ldr	r2, [r2, #32]
 8002b14:	609a      	str	r2, [r3, #8]
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	69fa      	ldr	r2, [r7, #28]
 8002b1c:	69d2      	ldr	r2, [r2, #28]
 8002b1e:	605a      	str	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	3318      	adds	r3, #24
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d103      	bne.n	8002b34 <xTaskResumeAll+0x8c>
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	605a      	str	r2, [r3, #4]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2200      	movs	r2, #0
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	1e5a      	subs	r2, r3, #1
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	60bb      	str	r3, [r7, #8]
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	69fa      	ldr	r2, [r7, #28]
 8002b50:	68d2      	ldr	r2, [r2, #12]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	6892      	ldr	r2, [r2, #8]
 8002b5c:	605a      	str	r2, [r3, #4]
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3304      	adds	r3, #4
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d103      	bne.n	8002b72 <xTaskResumeAll+0xca>
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2200      	movs	r2, #0
 8002b76:	615a      	str	r2, [r3, #20]
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	1e5a      	subs	r2, r3, #1
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f003 f829 	bl	8005bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8e:	2201      	movs	r2, #1
 8002b90:	409a      	lsls	r2, r3
 8002b92:	4b48      	ldr	r3, [pc, #288]	@ (8002cb4 <xTaskResumeAll+0x20c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	4a46      	ldr	r2, [pc, #280]	@ (8002cb4 <xTaskResumeAll+0x20c>)
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba0:	4945      	ldr	r1, [pc, #276]	@ (8002cb8 <xTaskResumeAll+0x210>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3304      	adds	r3, #4
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	607b      	str	r3, [r7, #4]
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689a      	ldr	r2, [r3, #8]
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	60da      	str	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	69fa      	ldr	r2, [r7, #28]
 8002bc6:	3204      	adds	r2, #4
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	1d1a      	adds	r2, r3, #4
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	609a      	str	r2, [r3, #8]
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	4413      	add	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4a36      	ldr	r2, [pc, #216]	@ (8002cb8 <xTaskResumeAll+0x210>)
 8002be0:	441a      	add	r2, r3
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	615a      	str	r2, [r3, #20]
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bea:	4933      	ldr	r1, [pc, #204]	@ (8002cb8 <xTaskResumeAll+0x210>)
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002bfc:	1c59      	adds	r1, r3, #1
 8002bfe:	482e      	ldr	r0, [pc, #184]	@ (8002cb8 <xTaskResumeAll+0x210>)
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	4403      	add	r3, r0
 8002c0a:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c10:	4b2a      	ldr	r3, [pc, #168]	@ (8002cbc <xTaskResumeAll+0x214>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d904      	bls.n	8002c24 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002c1a:	4a29      	ldr	r2, [pc, #164]	@ (8002cc0 <xTaskResumeAll+0x218>)
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2101      	movs	r1, #1
 8002c20:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c24:	4b22      	ldr	r3, [pc, #136]	@ (8002cb0 <xTaskResumeAll+0x208>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f af68 	bne.w	8002afe <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d001      	beq.n	8002c38 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002c34:	f000 faa8 	bl	8003188 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c38:	4b22      	ldr	r3, [pc, #136]	@ (8002cc4 <xTaskResumeAll+0x21c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d012      	beq.n	8002c6a <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002c44:	f000 f858 	bl	8002cf8 <xTaskIncrementTick>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d004      	beq.n	8002c58 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cc0 <xTaskResumeAll+0x218>)
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	2101      	movs	r1, #1
 8002c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ef      	bne.n	8002c44 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002c64:	4b17      	ldr	r3, [pc, #92]	@ (8002cc4 <xTaskResumeAll+0x21c>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002c6a:	4a15      	ldr	r2, [pc, #84]	@ (8002cc0 <xTaskResumeAll+0x218>)
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002c76:	2301      	movs	r3, #1
 8002c78:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002c7a:	4b10      	ldr	r3, [pc, #64]	@ (8002cbc <xTaskResumeAll+0x214>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <xTaskResumeAll+0x220>)
 8002c80:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c84:	601a      	str	r2, [r3, #0]
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002c8e:	f000 fcfb 	bl	8003688 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	4619      	mov	r1, r3
 8002c96:	20d0      	movs	r0, #208	@ 0xd0
 8002c98:	f002 fea8 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002c9c:	69bb      	ldr	r3, [r7, #24]
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3720      	adds	r7, #32
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	2000018c 	.word	0x2000018c
 8002cac:	20000164 	.word	0x20000164
 8002cb0:	20000124 	.word	0x20000124
 8002cb4:	2000016c 	.word	0x2000016c
 8002cb8:	20000090 	.word	0x20000090
 8002cbc:	2000008c 	.word	0x2000008c
 8002cc0:	20000178 	.word	0x20000178
 8002cc4:	20000174 	.word	0x20000174
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cd2:	f000 fd93 	bl	80037fc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <xTaskGetTickCountFromISR+0x28>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	20d2      	movs	r0, #210	@ 0xd2
 8002ce4:	f002 fe82 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002ce8:	683b      	ldr	r3, [r7, #0]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000168 	.word	0x20000168

08002cf8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b08a      	sub	sp, #40	@ 0x28
 8002cfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002d02:	4b83      	ldr	r3, [pc, #524]	@ (8002f10 <xTaskIncrementTick+0x218>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	f040 80f3 	bne.w	8002ef2 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d0c:	4b81      	ldr	r3, [pc, #516]	@ (8002f14 <xTaskIncrementTick+0x21c>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	3301      	adds	r3, #1
 8002d12:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d14:	4a7f      	ldr	r2, [pc, #508]	@ (8002f14 <xTaskIncrementTick+0x21c>)
 8002d16:	6a3b      	ldr	r3, [r7, #32]
 8002d18:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d121      	bne.n	8002d64 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d20:	4b7d      	ldr	r3, [pc, #500]	@ (8002f18 <xTaskIncrementTick+0x220>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00b      	beq.n	8002d42 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <xTaskIncrementTick+0x46>
 8002d42:	4b75      	ldr	r3, [pc, #468]	@ (8002f18 <xTaskIncrementTick+0x220>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	61fb      	str	r3, [r7, #28]
 8002d48:	4b74      	ldr	r3, [pc, #464]	@ (8002f1c <xTaskIncrementTick+0x224>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a72      	ldr	r2, [pc, #456]	@ (8002f18 <xTaskIncrementTick+0x220>)
 8002d4e:	6013      	str	r3, [r2, #0]
 8002d50:	4a72      	ldr	r2, [pc, #456]	@ (8002f1c <xTaskIncrementTick+0x224>)
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	4b72      	ldr	r3, [pc, #456]	@ (8002f20 <xTaskIncrementTick+0x228>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	4a70      	ldr	r2, [pc, #448]	@ (8002f20 <xTaskIncrementTick+0x228>)
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	f000 fa12 	bl	8003188 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d64:	4b6f      	ldr	r3, [pc, #444]	@ (8002f24 <xTaskIncrementTick+0x22c>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6a3a      	ldr	r2, [r7, #32]
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	f0c0 80ac 	bcc.w	8002ec8 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d70:	4b69      	ldr	r3, [pc, #420]	@ (8002f18 <xTaskIncrementTick+0x220>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d104      	bne.n	8002d84 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002d7a:	4b6a      	ldr	r3, [pc, #424]	@ (8002f24 <xTaskIncrementTick+0x22c>)
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	601a      	str	r2, [r3, #0]
                    break;
 8002d82:	e0a1      	b.n	8002ec8 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d84:	4b64      	ldr	r3, [pc, #400]	@ (8002f18 <xTaskIncrementTick+0x220>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d203      	bcs.n	8002da4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d9c:	4a61      	ldr	r2, [pc, #388]	@ (8002f24 <xTaskIncrementTick+0x22c>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	6013      	str	r3, [r2, #0]
                        break;
 8002da2:	e091      	b.n	8002ec8 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	613b      	str	r3, [r7, #16]
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	68d2      	ldr	r2, [r2, #12]
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	6892      	ldr	r2, [r2, #8]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	685a      	ldr	r2, [r3, #4]
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d103      	bne.n	8002dd2 <xTaskIncrementTick+0xda>
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	605a      	str	r2, [r3, #4]
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	615a      	str	r2, [r3, #20]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	1e5a      	subs	r2, r3, #1
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d01e      	beq.n	8002e28 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	69db      	ldr	r3, [r3, #28]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	6a12      	ldr	r2, [r2, #32]
 8002df8:	609a      	str	r2, [r3, #8]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	69d2      	ldr	r2, [r2, #28]
 8002e02:	605a      	str	r2, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	3318      	adds	r3, #24
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d103      	bne.n	8002e18 <xTaskIncrementTick+0x120>
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	6a1a      	ldr	r2, [r3, #32]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	605a      	str	r2, [r3, #4]
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	1e5a      	subs	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f002 fed6 	bl	8005bdc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e34:	2201      	movs	r2, #1
 8002e36:	409a      	lsls	r2, r3
 8002e38:	4b3b      	ldr	r3, [pc, #236]	@ (8002f28 <xTaskIncrementTick+0x230>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	4a3a      	ldr	r2, [pc, #232]	@ (8002f28 <xTaskIncrementTick+0x230>)
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e46:	4939      	ldr	r1, [pc, #228]	@ (8002f2c <xTaskIncrementTick+0x234>)
 8002e48:	4613      	mov	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	4413      	add	r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3304      	adds	r3, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	68ba      	ldr	r2, [r7, #8]
 8002e5c:	609a      	str	r2, [r3, #8]
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	3204      	adds	r2, #4
 8002e6e:	605a      	str	r2, [r3, #4]
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	1d1a      	adds	r2, r3, #4
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	609a      	str	r2, [r3, #8]
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4a29      	ldr	r2, [pc, #164]	@ (8002f2c <xTaskIncrementTick+0x234>)
 8002e86:	441a      	add	r2, r3
 8002e88:	69bb      	ldr	r3, [r7, #24]
 8002e8a:	615a      	str	r2, [r3, #20]
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e90:	4926      	ldr	r1, [pc, #152]	@ (8002f2c <xTaskIncrementTick+0x234>)
 8002e92:	4613      	mov	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4413      	add	r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ea2:	1c59      	adds	r1, r3, #1
 8002ea4:	4821      	ldr	r0, [pc, #132]	@ (8002f2c <xTaskIncrementTick+0x234>)
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4403      	add	r3, r0
 8002eb0:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002f30 <xTaskIncrementTick+0x238>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f67f af57 	bls.w	8002d70 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec6:	e753      	b.n	8002d70 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002ec8:	4b19      	ldr	r3, [pc, #100]	@ (8002f30 <xTaskIncrementTick+0x238>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ece:	4917      	ldr	r1, [pc, #92]	@ (8002f2c <xTaskIncrementTick+0x234>)
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	4413      	add	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d901      	bls.n	8002ee4 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002ee4:	4b13      	ldr	r3, [pc, #76]	@ (8002f34 <xTaskIncrementTick+0x23c>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d007      	beq.n	8002efc <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef0:	e004      	b.n	8002efc <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	@ (8002f38 <xTaskIncrementTick+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a0f      	ldr	r2, [pc, #60]	@ (8002f38 <xTaskIncrementTick+0x240>)
 8002efa:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002efe:	4619      	mov	r1, r3
 8002f00:	20db      	movs	r0, #219	@ 0xdb
 8002f02:	f002 fd73 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3728      	adds	r7, #40	@ 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	2000018c 	.word	0x2000018c
 8002f14:	20000168 	.word	0x20000168
 8002f18:	2000011c 	.word	0x2000011c
 8002f1c:	20000120 	.word	0x20000120
 8002f20:	2000017c 	.word	0x2000017c
 8002f24:	20000184 	.word	0x20000184
 8002f28:	2000016c 	.word	0x2000016c
 8002f2c:	20000090 	.word	0x20000090
 8002f30:	2000008c 	.word	0x2000008c
 8002f34:	20000178 	.word	0x20000178
 8002f38:	20000174 	.word	0x20000174

08002f3c <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002f42:	4b30      	ldr	r3, [pc, #192]	@ (8003004 <vTaskSwitchContext+0xc8>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003008 <vTaskSwitchContext+0xcc>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002f50:	e054      	b.n	8002ffc <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 8002f52:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <vTaskSwitchContext+0xcc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002f58:	4b2c      	ldr	r3, [pc, #176]	@ (800300c <vTaskSwitchContext+0xd0>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002f66:	7afb      	ldrb	r3, [r7, #11]
 8002f68:	f1c3 031f 	rsb	r3, r3, #31
 8002f6c:	617b      	str	r3, [r7, #20]
 8002f6e:	4928      	ldr	r1, [pc, #160]	@ (8003010 <vTaskSwitchContext+0xd4>)
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	440b      	add	r3, r1
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10b      	bne.n	8002f9a <vTaskSwitchContext+0x5e>
    __asm volatile
 8002f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	607b      	str	r3, [r7, #4]
}
 8002f94:	bf00      	nop
 8002f96:	bf00      	nop
 8002f98:	e7fd      	b.n	8002f96 <vTaskSwitchContext+0x5a>
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8003010 <vTaskSwitchContext+0xd4>)
 8002fa6:	4413      	add	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	605a      	str	r2, [r3, #4]
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	3308      	adds	r3, #8
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d103      	bne.n	8002fc8 <vTaskSwitchContext+0x8c>
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	68da      	ldr	r2, [r3, #12]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	605a      	str	r2, [r3, #4]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	4a11      	ldr	r2, [pc, #68]	@ (8003014 <vTaskSwitchContext+0xd8>)
 8002fd0:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002fd2:	4b10      	ldr	r3, [pc, #64]	@ (8003014 <vTaskSwitchContext+0xd8>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3334      	adds	r3, #52	@ 0x34
 8002fd8:	2205      	movs	r2, #5
 8002fda:	490f      	ldr	r1, [pc, #60]	@ (8003018 <vTaskSwitchContext+0xdc>)
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f002 ffa5 	bl	8005f2c <memcmp>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d005      	beq.n	8002ff4 <vTaskSwitchContext+0xb8>
 8002fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8003014 <vTaskSwitchContext+0xd8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f002 fdb3 	bl	8005b58 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002ff2:	e001      	b.n	8002ff8 <vTaskSwitchContext+0xbc>
 8002ff4:	f002 fd52 	bl	8005a9c <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002ff8:	4b06      	ldr	r3, [pc, #24]	@ (8003014 <vTaskSwitchContext+0xd8>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
    }
 8002ffc:	bf00      	nop
 8002ffe:	3718      	adds	r7, #24
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000018c 	.word	0x2000018c
 8003008:	20000178 	.word	0x20000178
 800300c:	2000016c 	.word	0x2000016c
 8003010:	20000090 	.word	0x20000090
 8003014:	2000008c 	.word	0x2000008c
 8003018:	08006010 	.word	0x08006010

0800301c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b082      	sub	sp, #8
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003024:	f000 f852 	bl	80030cc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <prvIdleTask+0x28>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d9f9      	bls.n	8003024 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003030:	4b05      	ldr	r3, [pc, #20]	@ (8003048 <prvIdleTask+0x2c>)
 8003032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	f3bf 8f4f 	dsb	sy
 800303c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003040:	e7f0      	b.n	8003024 <prvIdleTask+0x8>
 8003042:	bf00      	nop
 8003044:	20000090 	.word	0x20000090
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003052:	2300      	movs	r3, #0
 8003054:	607b      	str	r3, [r7, #4]
 8003056:	e00c      	b.n	8003072 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4a12      	ldr	r2, [pc, #72]	@ (80030ac <prvInitialiseTaskLists+0x60>)
 8003064:	4413      	add	r3, r2
 8003066:	4618      	mov	r0, r3
 8003068:	f7ff f89e 	bl	80021a8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3301      	adds	r3, #1
 8003070:	607b      	str	r3, [r7, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2b04      	cmp	r3, #4
 8003076:	d9ef      	bls.n	8003058 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003078:	480d      	ldr	r0, [pc, #52]	@ (80030b0 <prvInitialiseTaskLists+0x64>)
 800307a:	f7ff f895 	bl	80021a8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800307e:	480d      	ldr	r0, [pc, #52]	@ (80030b4 <prvInitialiseTaskLists+0x68>)
 8003080:	f7ff f892 	bl	80021a8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003084:	480c      	ldr	r0, [pc, #48]	@ (80030b8 <prvInitialiseTaskLists+0x6c>)
 8003086:	f7ff f88f 	bl	80021a8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800308a:	480c      	ldr	r0, [pc, #48]	@ (80030bc <prvInitialiseTaskLists+0x70>)
 800308c:	f7ff f88c 	bl	80021a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003090:	480b      	ldr	r0, [pc, #44]	@ (80030c0 <prvInitialiseTaskLists+0x74>)
 8003092:	f7ff f889 	bl	80021a8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003096:	4b0b      	ldr	r3, [pc, #44]	@ (80030c4 <prvInitialiseTaskLists+0x78>)
 8003098:	4a05      	ldr	r2, [pc, #20]	@ (80030b0 <prvInitialiseTaskLists+0x64>)
 800309a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800309c:	4b0a      	ldr	r3, [pc, #40]	@ (80030c8 <prvInitialiseTaskLists+0x7c>)
 800309e:	4a05      	ldr	r2, [pc, #20]	@ (80030b4 <prvInitialiseTaskLists+0x68>)
 80030a0:	601a      	str	r2, [r3, #0]
}
 80030a2:	bf00      	nop
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}
 80030aa:	bf00      	nop
 80030ac:	20000090 	.word	0x20000090
 80030b0:	200000f4 	.word	0x200000f4
 80030b4:	20000108 	.word	0x20000108
 80030b8:	20000124 	.word	0x20000124
 80030bc:	20000138 	.word	0x20000138
 80030c0:	20000150 	.word	0x20000150
 80030c4:	2000011c 	.word	0x2000011c
 80030c8:	20000120 	.word	0x20000120

080030cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80030d2:	e019      	b.n	8003108 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80030d4:	f000 faa6 	bl	8003624 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80030d8:	4b10      	ldr	r3, [pc, #64]	@ (800311c <prvCheckTasksWaitingTermination+0x50>)
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff f890 	bl	800220a <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80030ea:	4b0d      	ldr	r3, [pc, #52]	@ (8003120 <prvCheckTasksWaitingTermination+0x54>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	4a0b      	ldr	r2, [pc, #44]	@ (8003120 <prvCheckTasksWaitingTermination+0x54>)
 80030f2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80030f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <prvCheckTasksWaitingTermination+0x58>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	3b01      	subs	r3, #1
 80030fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003124 <prvCheckTasksWaitingTermination+0x58>)
 80030fc:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80030fe:	f000 fac3 	bl	8003688 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f810 	bl	8003128 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003108:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <prvCheckTasksWaitingTermination+0x58>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e1      	bne.n	80030d4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	20000138 	.word	0x20000138
 8003120:	20000164 	.word	0x20000164
 8003124:	2000014c 	.word	0x2000014c

08003128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fcd0 	bl	8003ae4 <vPortFree>
                vPortFree( pxTCB );
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fccd 	bl	8003ae4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800314a:	e019      	b.n	8003180 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003152:	2b01      	cmp	r3, #1
 8003154:	d103      	bne.n	800315e <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fcc4 	bl	8003ae4 <vPortFree>
    }
 800315c:	e010      	b.n	8003180 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003164:	2b02      	cmp	r3, #2
 8003166:	d00b      	beq.n	8003180 <prvDeleteTCB+0x58>
    __asm volatile
 8003168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800316c:	f383 8811 	msr	BASEPRI, r3
 8003170:	f3bf 8f6f 	isb	sy
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	60fb      	str	r3, [r7, #12]
}
 800317a:	bf00      	nop
 800317c:	bf00      	nop
 800317e:	e7fd      	b.n	800317c <prvDeleteTCB+0x54>
    }
 8003180:	bf00      	nop
 8003182:	3710      	adds	r7, #16
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800318c:	4b0a      	ldr	r3, [pc, #40]	@ (80031b8 <prvResetNextTaskUnblockTime+0x30>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d104      	bne.n	80031a0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003196:	4b09      	ldr	r3, [pc, #36]	@ (80031bc <prvResetNextTaskUnblockTime+0x34>)
 8003198:	f04f 32ff 	mov.w	r2, #4294967295
 800319c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800319e:	e005      	b.n	80031ac <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80031a0:	4b05      	ldr	r3, [pc, #20]	@ (80031b8 <prvResetNextTaskUnblockTime+0x30>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a04      	ldr	r2, [pc, #16]	@ (80031bc <prvResetNextTaskUnblockTime+0x34>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2000011c 	.word	0x2000011c
 80031bc:	20000184 	.word	0x20000184

080031c0 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b082      	sub	sp, #8
 80031c4:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 80031c6:	4b08      	ldr	r3, [pc, #32]	@ (80031e8 <xTaskGetCurrentTaskHandle+0x28>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f002 fd46 	bl	8005c60 <SEGGER_SYSVIEW_ShrinkId>
 80031d4:	4603      	mov	r3, r0
 80031d6:	4619      	mov	r1, r3
 80031d8:	20f4      	movs	r0, #244	@ 0xf4
 80031da:	f002 fc07 	bl	80059ec <SEGGER_SYSVIEW_RecordEndCallU32>

            return xReturn;
 80031de:	687b      	ldr	r3, [r7, #4]
        }
 80031e0:	4618      	mov	r0, r3
 80031e2:	3708      	adds	r7, #8
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}
 80031e8:	2000008c 	.word	0x2000008c

080031ec <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4a07      	ldr	r2, [pc, #28]	@ (8003218 <vApplicationGetIdleTaskMemory+0x2c>)
 80031fc:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	4a06      	ldr	r2, [pc, #24]	@ (800321c <vApplicationGetIdleTaskMemory+0x30>)
 8003202:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2282      	movs	r2, #130	@ 0x82
 8003208:	601a      	str	r2, [r3, #0]
    }
 800320a:	bf00      	nop
 800320c:	3714      	adds	r7, #20
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	20000190 	.word	0x20000190
 800321c:	200001e8 	.word	0x200001e8

08003220 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003220:	b480      	push	{r7}
 8003222:	b085      	sub	sp, #20
 8003224:	af00      	add	r7, sp, #0
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	60b9      	str	r1, [r7, #8]
 800322a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	3b04      	subs	r3, #4
 8003230:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003238:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	3b04      	subs	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f023 0201 	bic.w	r2, r3, #1
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	3b04      	subs	r3, #4
 800324e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003250:	4a0c      	ldr	r2, [pc, #48]	@ (8003284 <pxPortInitialiseStack+0x64>)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b14      	subs	r3, #20
 800325a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b04      	subs	r3, #4
 8003266:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f06f 0202 	mvn.w	r2, #2
 800326e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3b20      	subs	r3, #32
 8003274:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003276:	68fb      	ldr	r3, [r7, #12]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	08003289 	.word	0x08003289

08003288 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003292:	4b13      	ldr	r3, [pc, #76]	@ (80032e0 <prvTaskExitError+0x58>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329a:	d00b      	beq.n	80032b4 <prvTaskExitError+0x2c>
    __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60fb      	str	r3, [r7, #12]
}
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <prvTaskExitError+0x28>
    __asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	60bb      	str	r3, [r7, #8]
}
 80032c6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80032c8:	bf00      	nop
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0fc      	beq.n	80032ca <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80032d0:	bf00      	nop
 80032d2:	bf00      	nop
 80032d4:	3714      	adds	r7, #20
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000010 	.word	0x20000010
	...

080032f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80032f0:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <pxCurrentTCBConst2>)
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	6808      	ldr	r0, [r1, #0]
 80032f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fa:	f380 8809 	msr	PSP, r0
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f380 8811 	msr	BASEPRI, r0
 800330a:	4770      	bx	lr
 800330c:	f3af 8000 	nop.w

08003310 <pxCurrentTCBConst2>:
 8003310:	2000008c 	.word	0x2000008c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop

08003318 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003318:	4808      	ldr	r0, [pc, #32]	@ (800333c <prvPortStartFirstTask+0x24>)
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f380 8808 	msr	MSP, r0
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8814 	msr	CONTROL, r0
 800332a:	b662      	cpsie	i
 800332c:	b661      	cpsie	f
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	df00      	svc	0
 8003338:	bf00      	nop
 800333a:	0000      	.short	0x0000
 800333c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003340:	bf00      	nop
 8003342:	bf00      	nop

08003344 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b08c      	sub	sp, #48	@ 0x30
 8003348:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800334a:	4b69      	ldr	r3, [pc, #420]	@ (80034f0 <xPortStartScheduler+0x1ac>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a69      	ldr	r2, [pc, #420]	@ (80034f4 <xPortStartScheduler+0x1b0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10b      	bne.n	800336c <xPortStartScheduler+0x28>
    __asm volatile
 8003354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003358:	f383 8811 	msr	BASEPRI, r3
 800335c:	f3bf 8f6f 	isb	sy
 8003360:	f3bf 8f4f 	dsb	sy
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003366:	bf00      	nop
 8003368:	bf00      	nop
 800336a:	e7fd      	b.n	8003368 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800336c:	4b60      	ldr	r3, [pc, #384]	@ (80034f0 <xPortStartScheduler+0x1ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a61      	ldr	r2, [pc, #388]	@ (80034f8 <xPortStartScheduler+0x1b4>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d10b      	bne.n	800338e <xPortStartScheduler+0x4a>
    __asm volatile
 8003376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337a:	f383 8811 	msr	BASEPRI, r3
 800337e:	f3bf 8f6f 	isb	sy
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	623b      	str	r3, [r7, #32]
}
 8003388:	bf00      	nop
 800338a:	bf00      	nop
 800338c:	e7fd      	b.n	800338a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800338e:	4b5b      	ldr	r3, [pc, #364]	@ (80034fc <xPortStartScheduler+0x1b8>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003396:	332c      	adds	r3, #44	@ 0x2c
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a59      	ldr	r2, [pc, #356]	@ (8003500 <xPortStartScheduler+0x1bc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00b      	beq.n	80033b8 <xPortStartScheduler+0x74>
    __asm volatile
 80033a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033a4:	f383 8811 	msr	BASEPRI, r3
 80033a8:	f3bf 8f6f 	isb	sy
 80033ac:	f3bf 8f4f 	dsb	sy
 80033b0:	61fb      	str	r3, [r7, #28]
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	e7fd      	b.n	80033b4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 80033b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033ba:	3338      	adds	r3, #56	@ 0x38
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a51      	ldr	r2, [pc, #324]	@ (8003504 <xPortStartScheduler+0x1c0>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d00b      	beq.n	80033dc <xPortStartScheduler+0x98>
    __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	61bb      	str	r3, [r7, #24]
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80033dc:	2300      	movs	r3, #0
 80033de:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033e0:	4b49      	ldr	r3, [pc, #292]	@ (8003508 <xPortStartScheduler+0x1c4>)
 80033e2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80033e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80033ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ee:	22ff      	movs	r2, #255	@ 0xff
 80033f0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80033f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033fa:	79fb      	ldrb	r3, [r7, #7]
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b41      	ldr	r3, [pc, #260]	@ (800350c <xPortStartScheduler+0x1c8>)
 8003406:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003408:	4b40      	ldr	r3, [pc, #256]	@ (800350c <xPortStartScheduler+0x1c8>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d10b      	bne.n	8003428 <xPortStartScheduler+0xe4>
    __asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	617b      	str	r3, [r7, #20]
}
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003428:	79fb      	ldrb	r3, [r7, #7]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	43db      	mvns	r3, r3
 800342e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003432:	2b00      	cmp	r3, #0
 8003434:	d013      	beq.n	800345e <xPortStartScheduler+0x11a>
    __asm volatile
 8003436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	613b      	str	r3, [r7, #16]
}
 8003448:	bf00      	nop
 800344a:	bf00      	nop
 800344c:	e7fd      	b.n	800344a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3301      	adds	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	b2db      	uxtb	r3, r3
 800345c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800345e:	79fb      	ldrb	r3, [r7, #7]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003466:	2b80      	cmp	r3, #128	@ 0x80
 8003468:	d0f1      	beq.n	800344e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b08      	cmp	r3, #8
 800346e:	d103      	bne.n	8003478 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003470:	4b27      	ldr	r3, [pc, #156]	@ (8003510 <xPortStartScheduler+0x1cc>)
 8003472:	2200      	movs	r2, #0
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	e004      	b.n	8003482 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	4a24      	ldr	r2, [pc, #144]	@ (8003510 <xPortStartScheduler+0x1cc>)
 8003480:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003482:	4b23      	ldr	r3, [pc, #140]	@ (8003510 <xPortStartScheduler+0x1cc>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	021b      	lsls	r3, r3, #8
 8003488:	4a21      	ldr	r2, [pc, #132]	@ (8003510 <xPortStartScheduler+0x1cc>)
 800348a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800348c:	4b20      	ldr	r3, [pc, #128]	@ (8003510 <xPortStartScheduler+0x1cc>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003494:	4a1e      	ldr	r2, [pc, #120]	@ (8003510 <xPortStartScheduler+0x1cc>)
 8003496:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	b2da      	uxtb	r2, r3
 800349c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800349e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80034a0:	4b1c      	ldr	r3, [pc, #112]	@ (8003514 <xPortStartScheduler+0x1d0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003514 <xPortStartScheduler+0x1d0>)
 80034a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80034aa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <xPortStartScheduler+0x1d0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	@ (8003514 <xPortStartScheduler+0x1d0>)
 80034b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80034b6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80034b8:	4b17      	ldr	r3, [pc, #92]	@ (8003518 <xPortStartScheduler+0x1d4>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80034be:	f000 f96d 	bl	800379c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80034c2:	4b16      	ldr	r3, [pc, #88]	@ (800351c <xPortStartScheduler+0x1d8>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80034c8:	f000 f98c 	bl	80037e4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80034cc:	4b14      	ldr	r3, [pc, #80]	@ (8003520 <xPortStartScheduler+0x1dc>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a13      	ldr	r2, [pc, #76]	@ (8003520 <xPortStartScheduler+0x1dc>)
 80034d2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80034d6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80034d8:	f7ff ff1e 	bl	8003318 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80034dc:	f7ff fd2e 	bl	8002f3c <vTaskSwitchContext>
    prvTaskExitError();
 80034e0:	f7ff fed2 	bl	8003288 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3730      	adds	r7, #48	@ 0x30
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	e000ed00 	.word	0xe000ed00
 80034f4:	410fc271 	.word	0x410fc271
 80034f8:	410fc270 	.word	0x410fc270
 80034fc:	e000ed08 	.word	0xe000ed08
 8003500:	080032f1 	.word	0x080032f1
 8003504:	080036e1 	.word	0x080036e1
 8003508:	e000e400 	.word	0xe000e400
 800350c:	200003f0 	.word	0x200003f0
 8003510:	200003f4 	.word	0x200003f4
 8003514:	e000ed20 	.word	0xe000ed20
 8003518:	e000ed1c 	.word	0xe000ed1c
 800351c:	20000010 	.word	0x20000010
 8003520:	e000ef34 	.word	0xe000ef34

08003524 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003524:	b480      	push	{r7}
 8003526:	b087      	sub	sp, #28
 8003528:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800352a:	4b38      	ldr	r3, [pc, #224]	@ (800360c <vInitPrioGroupValue+0xe8>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a38      	ldr	r2, [pc, #224]	@ (8003610 <vInitPrioGroupValue+0xec>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d10b      	bne.n	800354c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	613b      	str	r3, [r7, #16]
}
 8003546:	bf00      	nop
 8003548:	bf00      	nop
 800354a:	e7fd      	b.n	8003548 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800354c:	4b2f      	ldr	r3, [pc, #188]	@ (800360c <vInitPrioGroupValue+0xe8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a30      	ldr	r2, [pc, #192]	@ (8003614 <vInitPrioGroupValue+0xf0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d10b      	bne.n	800356e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	60fb      	str	r3, [r7, #12]
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	e7fd      	b.n	800356a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800356e:	4b2a      	ldr	r3, [pc, #168]	@ (8003618 <vInitPrioGroupValue+0xf4>)
 8003570:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	b2db      	uxtb	r3, r3
 8003578:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	22ff      	movs	r2, #255	@ 0xff
 800357e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003588:	78fb      	ldrb	r3, [r7, #3]
 800358a:	b2db      	uxtb	r3, r3
 800358c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003590:	b2da      	uxtb	r2, r3
 8003592:	4b22      	ldr	r3, [pc, #136]	@ (800361c <vInitPrioGroupValue+0xf8>)
 8003594:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003596:	4b22      	ldr	r3, [pc, #136]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 8003598:	2207      	movs	r2, #7
 800359a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800359c:	e009      	b.n	80035b2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800359e:	4b20      	ldr	r3, [pc, #128]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	4a1e      	ldr	r2, [pc, #120]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035a6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	005b      	lsls	r3, r3, #1
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80035b2:	78fb      	ldrb	r3, [r7, #3]
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035ba:	2b80      	cmp	r3, #128	@ 0x80
 80035bc:	d0ef      	beq.n	800359e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f1c3 0307 	rsb	r3, r3, #7
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00b      	beq.n	80035e2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 80035ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035ce:	f383 8811 	msr	BASEPRI, r3
 80035d2:	f3bf 8f6f 	isb	sy
 80035d6:	f3bf 8f4f 	dsb	sy
 80035da:	60bb      	str	r3, [r7, #8]
}
 80035dc:	bf00      	nop
 80035de:	bf00      	nop
 80035e0:	e7fd      	b.n	80035de <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80035e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	021b      	lsls	r3, r3, #8
 80035e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035ea:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80035ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <vInitPrioGroupValue+0xfc>)
 80035f6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003600:	bf00      	nop
 8003602:	371c      	adds	r7, #28
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	e000ed00 	.word	0xe000ed00
 8003610:	410fc271 	.word	0x410fc271
 8003614:	410fc270 	.word	0x410fc270
 8003618:	e000e400 	.word	0xe000e400
 800361c:	200003f0 	.word	0x200003f0
 8003620:	200003f4 	.word	0x200003f4

08003624 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
    __asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	607b      	str	r3, [r7, #4]
}
 800363c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800363e:	4b10      	ldr	r3, [pc, #64]	@ (8003680 <vPortEnterCritical+0x5c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a0e      	ldr	r2, [pc, #56]	@ (8003680 <vPortEnterCritical+0x5c>)
 8003646:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003648:	4b0d      	ldr	r3, [pc, #52]	@ (8003680 <vPortEnterCritical+0x5c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b01      	cmp	r3, #1
 800364e:	d110      	bne.n	8003672 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003650:	4b0c      	ldr	r3, [pc, #48]	@ (8003684 <vPortEnterCritical+0x60>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00b      	beq.n	8003672 <vPortEnterCritical+0x4e>
    __asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	603b      	str	r3, [r7, #0]
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <vPortEnterCritical+0x4a>
    }
}
 8003672:	bf00      	nop
 8003674:	370c      	adds	r7, #12
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000010 	.word	0x20000010
 8003684:	e000ed04 	.word	0xe000ed04

08003688 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800368e:	4b12      	ldr	r3, [pc, #72]	@ (80036d8 <vPortExitCritical+0x50>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10b      	bne.n	80036ae <vPortExitCritical+0x26>
    __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	607b      	str	r3, [r7, #4]
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	e7fd      	b.n	80036aa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80036ae:	4b0a      	ldr	r3, [pc, #40]	@ (80036d8 <vPortExitCritical+0x50>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	4a08      	ldr	r2, [pc, #32]	@ (80036d8 <vPortExitCritical+0x50>)
 80036b6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80036b8:	4b07      	ldr	r3, [pc, #28]	@ (80036d8 <vPortExitCritical+0x50>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d105      	bne.n	80036cc <vPortExitCritical+0x44>
 80036c0:	2300      	movs	r3, #0
 80036c2:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80036ca:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80036cc:	bf00      	nop
 80036ce:	370c      	adds	r7, #12
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	20000010 	.word	0x20000010
 80036dc:	00000000 	.word	0x00000000

080036e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80036e0:	f3ef 8009 	mrs	r0, PSP
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	4b15      	ldr	r3, [pc, #84]	@ (8003740 <pxCurrentTCBConst>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	f01e 0f10 	tst.w	lr, #16
 80036f0:	bf08      	it	eq
 80036f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80036f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036fa:	6010      	str	r0, [r2, #0]
 80036fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003700:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003704:	f380 8811 	msr	BASEPRI, r0
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	f3bf 8f6f 	isb	sy
 8003710:	f7ff fc14 	bl	8002f3c <vTaskSwitchContext>
 8003714:	f04f 0000 	mov.w	r0, #0
 8003718:	f380 8811 	msr	BASEPRI, r0
 800371c:	bc09      	pop	{r0, r3}
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	6808      	ldr	r0, [r1, #0]
 8003722:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003726:	f01e 0f10 	tst.w	lr, #16
 800372a:	bf08      	it	eq
 800372c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003730:	f380 8809 	msr	PSP, r0
 8003734:	f3bf 8f6f 	isb	sy
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	f3af 8000 	nop.w

08003740 <pxCurrentTCBConst>:
 8003740:	2000008c 	.word	0x2000008c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003744:	bf00      	nop
 8003746:	bf00      	nop

08003748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
    __asm volatile
 800374e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003752:	f383 8811 	msr	BASEPRI, r3
 8003756:	f3bf 8f6f 	isb	sy
 800375a:	f3bf 8f4f 	dsb	sy
 800375e:	607b      	str	r3, [r7, #4]
}
 8003760:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003762:	f002 f88d 	bl	8005880 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003766:	f7ff fac7 	bl	8002cf8 <xTaskIncrementTick>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d006      	beq.n	800377e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003770:	f002 f8e4 	bl	800593c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003774:	4b08      	ldr	r3, [pc, #32]	@ (8003798 <SysTick_Handler+0x50>)
 8003776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	e001      	b.n	8003782 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800377e:	f002 f8c1 	bl	8005904 <SEGGER_SYSVIEW_RecordExitISR>
 8003782:	2300      	movs	r3, #0
 8003784:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	f383 8811 	msr	BASEPRI, r3
}
 800378c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	e000ed04 	.word	0xe000ed04

0800379c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <vPortSetupTimerInterrupt+0x34>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80037a6:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <vPortSetupTimerInterrupt+0x38>)
 80037a8:	2200      	movs	r2, #0
 80037aa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80037ac:	4b0a      	ldr	r3, [pc, #40]	@ (80037d8 <vPortSetupTimerInterrupt+0x3c>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a0a      	ldr	r2, [pc, #40]	@ (80037dc <vPortSetupTimerInterrupt+0x40>)
 80037b2:	fba2 2303 	umull	r2, r3, r2, r3
 80037b6:	099b      	lsrs	r3, r3, #6
 80037b8:	4a09      	ldr	r2, [pc, #36]	@ (80037e0 <vPortSetupTimerInterrupt+0x44>)
 80037ba:	3b01      	subs	r3, #1
 80037bc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80037be:	4b04      	ldr	r3, [pc, #16]	@ (80037d0 <vPortSetupTimerInterrupt+0x34>)
 80037c0:	2207      	movs	r2, #7
 80037c2:	601a      	str	r2, [r3, #0]
}
 80037c4:	bf00      	nop
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000e010 	.word	0xe000e010
 80037d4:	e000e018 	.word	0xe000e018
 80037d8:	20000000 	.word	0x20000000
 80037dc:	10624dd3 	.word	0x10624dd3
 80037e0:	e000e014 	.word	0xe000e014

080037e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80037e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80037f4 <vPortEnableVFP+0x10>
 80037e8:	6801      	ldr	r1, [r0, #0]
 80037ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80037ee:	6001      	str	r1, [r0, #0]
 80037f0:	4770      	bx	lr
 80037f2:	0000      	.short	0x0000
 80037f4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop

080037fc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80037fc:	b480      	push	{r7}
 80037fe:	b085      	sub	sp, #20
 8003800:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003802:	f3ef 8305 	mrs	r3, IPSR
 8003806:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2b0f      	cmp	r3, #15
 800380c:	d915      	bls.n	800383a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800380e:	4a18      	ldr	r2, [pc, #96]	@ (8003870 <vPortValidateInterruptPriority+0x74>)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4413      	add	r3, r2
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003818:	4b16      	ldr	r3, [pc, #88]	@ (8003874 <vPortValidateInterruptPriority+0x78>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	7afa      	ldrb	r2, [r7, #11]
 800381e:	429a      	cmp	r2, r3
 8003820:	d20b      	bcs.n	800383a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003826:	f383 8811 	msr	BASEPRI, r3
 800382a:	f3bf 8f6f 	isb	sy
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	607b      	str	r3, [r7, #4]
}
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	e7fd      	b.n	8003836 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800383a:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <vPortValidateInterruptPriority+0x7c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003842:	4b0e      	ldr	r3, [pc, #56]	@ (800387c <vPortValidateInterruptPriority+0x80>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	429a      	cmp	r2, r3
 8003848:	d90b      	bls.n	8003862 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800384a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800384e:	f383 8811 	msr	BASEPRI, r3
 8003852:	f3bf 8f6f 	isb	sy
 8003856:	f3bf 8f4f 	dsb	sy
 800385a:	603b      	str	r3, [r7, #0]
}
 800385c:	bf00      	nop
 800385e:	bf00      	nop
 8003860:	e7fd      	b.n	800385e <vPortValidateInterruptPriority+0x62>
    }
 8003862:	bf00      	nop
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e3f0 	.word	0xe000e3f0
 8003874:	200003f0 	.word	0x200003f0
 8003878:	e000ed0c 	.word	0xe000ed0c
 800387c:	200003f4 	.word	0x200003f4

08003880 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08e      	sub	sp, #56	@ 0x38
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d022      	beq.n	80038d8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003892:	2308      	movs	r3, #8
 8003894:	43db      	mvns	r3, r3
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	429a      	cmp	r2, r3
 800389a:	d81b      	bhi.n	80038d4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800389c:	2208      	movs	r2, #8
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f003 0307 	and.w	r3, r3, #7
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d014      	beq.n	80038d8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	f1c3 0308 	rsb	r3, r3, #8
 80038b8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80038ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038bc:	43db      	mvns	r3, r3
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d804      	bhi.n	80038ce <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038c8:	4413      	add	r3, r2
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e004      	b.n	80038d8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
 80038d2:	e001      	b.n	80038d8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80038d4:	2300      	movs	r3, #0
 80038d6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80038d8:	f7ff f8d8 	bl	8002a8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80038dc:	4b7a      	ldr	r3, [pc, #488]	@ (8003ac8 <pvPortMalloc+0x248>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80038e4:	f000 f978 	bl	8003bd8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	f2c0 80d3 	blt.w	8003a96 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80cf 	beq.w	8003a96 <pvPortMalloc+0x216>
 80038f8:	4b74      	ldr	r3, [pc, #464]	@ (8003acc <pvPortMalloc+0x24c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	f200 80c9 	bhi.w	8003a96 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003904:	4b72      	ldr	r3, [pc, #456]	@ (8003ad0 <pvPortMalloc+0x250>)
 8003906:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003908:	4b71      	ldr	r3, [pc, #452]	@ (8003ad0 <pvPortMalloc+0x250>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800390e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003910:	4a70      	ldr	r2, [pc, #448]	@ (8003ad4 <pvPortMalloc+0x254>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d305      	bcc.n	8003922 <pvPortMalloc+0xa2>
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	4a6f      	ldr	r2, [pc, #444]	@ (8003ad8 <pvPortMalloc+0x258>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d801      	bhi.n	8003922 <pvPortMalloc+0xa2>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <pvPortMalloc+0xa4>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d129      	bne.n	800397c <pvPortMalloc+0xfc>
    __asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	623b      	str	r3, [r7, #32]
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003942:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800394a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800394c:	4a61      	ldr	r2, [pc, #388]	@ (8003ad4 <pvPortMalloc+0x254>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d305      	bcc.n	800395e <pvPortMalloc+0xde>
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	4a60      	ldr	r2, [pc, #384]	@ (8003ad8 <pvPortMalloc+0x258>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d801      	bhi.n	800395e <pvPortMalloc+0xde>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <pvPortMalloc+0xe0>
 800395e:	2300      	movs	r3, #0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10b      	bne.n	800397c <pvPortMalloc+0xfc>
    __asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	61fb      	str	r3, [r7, #28]
}
 8003976:	bf00      	nop
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800397c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	429a      	cmp	r2, r3
 8003984:	d903      	bls.n	800398e <pvPortMalloc+0x10e>
 8003986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1d8      	bne.n	8003940 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800398e:	4b4e      	ldr	r3, [pc, #312]	@ (8003ac8 <pvPortMalloc+0x248>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003994:	429a      	cmp	r2, r3
 8003996:	d07e      	beq.n	8003a96 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2208      	movs	r2, #8
 800399e:	4413      	add	r3, r2
 80039a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80039a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a4:	4a4b      	ldr	r2, [pc, #300]	@ (8003ad4 <pvPortMalloc+0x254>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d305      	bcc.n	80039b6 <pvPortMalloc+0x136>
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	4a4a      	ldr	r2, [pc, #296]	@ (8003ad8 <pvPortMalloc+0x258>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d801      	bhi.n	80039b6 <pvPortMalloc+0x136>
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <pvPortMalloc+0x138>
 80039b6:	2300      	movs	r3, #0
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <pvPortMalloc+0x154>
    __asm volatile
 80039bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c0:	f383 8811 	msr	BASEPRI, r3
 80039c4:	f3bf 8f6f 	isb	sy
 80039c8:	f3bf 8f4f 	dsb	sy
 80039cc:	61bb      	str	r3, [r7, #24]
}
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
 80039d2:	e7fd      	b.n	80039d0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80039d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039da:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80039dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d90b      	bls.n	80039fe <pvPortMalloc+0x17e>
    __asm volatile
 80039e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
 80039f2:	f3bf 8f4f 	dsb	sy
 80039f6:	617b      	str	r3, [r7, #20]
}
 80039f8:	bf00      	nop
 80039fa:	bf00      	nop
 80039fc:	e7fd      	b.n	80039fa <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80039fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a00:	685a      	ldr	r2, [r3, #4]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	1ad2      	subs	r2, r2, r3
 8003a06:	2308      	movs	r3, #8
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d924      	bls.n	8003a58 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003a0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4413      	add	r3, r2
 8003a14:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a18:	f003 0307 	and.w	r3, r3, #7
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00b      	beq.n	8003a38 <pvPortMalloc+0x1b8>
    __asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	613b      	str	r3, [r7, #16]
}
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003a38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	1ad2      	subs	r2, r2, r3
 8003a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a42:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8003a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a56:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	@ (8003acc <pvPortMalloc+0x24c>)
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	4a1a      	ldr	r2, [pc, #104]	@ (8003acc <pvPortMalloc+0x24c>)
 8003a64:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003a66:	4b19      	ldr	r3, [pc, #100]	@ (8003acc <pvPortMalloc+0x24c>)
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <pvPortMalloc+0x25c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d203      	bcs.n	8003a7a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003a72:	4b16      	ldr	r3, [pc, #88]	@ (8003acc <pvPortMalloc+0x24c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a19      	ldr	r2, [pc, #100]	@ (8003adc <pvPortMalloc+0x25c>)
 8003a78:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003a82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a84:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003a86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <pvPortMalloc+0x260>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3301      	adds	r3, #1
 8003a92:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <pvPortMalloc+0x260>)
 8003a94:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003a96:	f7ff f807 	bl	8002aa8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003a9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a9c:	f003 0307 	and.w	r3, r3, #7
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00b      	beq.n	8003abc <pvPortMalloc+0x23c>
    __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	60fb      	str	r3, [r7, #12]
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <pvPortMalloc+0x238>
    return pvReturn;
 8003abc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3738      	adds	r7, #56	@ 0x38
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20019400 	.word	0x20019400
 8003acc:	20019404 	.word	0x20019404
 8003ad0:	200193f8 	.word	0x200193f8
 8003ad4:	200003f8 	.word	0x200003f8
 8003ad8:	200193f7 	.word	0x200193f7
 8003adc:	20019408 	.word	0x20019408
 8003ae0:	2001940c 	.word	0x2001940c

08003ae4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d064      	beq.n	8003bc0 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003af6:	2308      	movs	r3, #8
 8003af8:	425b      	negs	r3, r3
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003b00:	69fb      	ldr	r3, [r7, #28]
 8003b02:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4a30      	ldr	r2, [pc, #192]	@ (8003bc8 <vPortFree+0xe4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d305      	bcc.n	8003b18 <vPortFree+0x34>
 8003b0c:	69bb      	ldr	r3, [r7, #24]
 8003b0e:	4a2f      	ldr	r2, [pc, #188]	@ (8003bcc <vPortFree+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d801      	bhi.n	8003b18 <vPortFree+0x34>
 8003b14:	2301      	movs	r3, #1
 8003b16:	e000      	b.n	8003b1a <vPortFree+0x36>
 8003b18:	2300      	movs	r3, #0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10b      	bne.n	8003b36 <vPortFree+0x52>
    __asm volatile
 8003b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b22:	f383 8811 	msr	BASEPRI, r3
 8003b26:	f3bf 8f6f 	isb	sy
 8003b2a:	f3bf 8f4f 	dsb	sy
 8003b2e:	617b      	str	r3, [r7, #20]
}
 8003b30:	bf00      	nop
 8003b32:	bf00      	nop
 8003b34:	e7fd      	b.n	8003b32 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	db0b      	blt.n	8003b56 <vPortFree+0x72>
    __asm volatile
 8003b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b42:	f383 8811 	msr	BASEPRI, r3
 8003b46:	f3bf 8f6f 	isb	sy
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	613b      	str	r3, [r7, #16]
}
 8003b50:	bf00      	nop
 8003b52:	bf00      	nop
 8003b54:	e7fd      	b.n	8003b52 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d00b      	beq.n	8003b76 <vPortFree+0x92>
    __asm volatile
 8003b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b62:	f383 8811 	msr	BASEPRI, r3
 8003b66:	f3bf 8f6f 	isb	sy
 8003b6a:	f3bf 8f4f 	dsb	sy
 8003b6e:	60fb      	str	r3, [r7, #12]
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	e7fd      	b.n	8003b72 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	0fdb      	lsrs	r3, r3, #31
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01c      	beq.n	8003bc0 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d118      	bne.n	8003bc0 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003b9a:	f7fe ff77 	bl	8002a8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd0 <vPortFree+0xec>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	4a09      	ldr	r2, [pc, #36]	@ (8003bd0 <vPortFree+0xec>)
 8003baa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003bac:	69b8      	ldr	r0, [r7, #24]
 8003bae:	f000 f86d 	bl	8003c8c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003bb2:	4b08      	ldr	r3, [pc, #32]	@ (8003bd4 <vPortFree+0xf0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	4a06      	ldr	r2, [pc, #24]	@ (8003bd4 <vPortFree+0xf0>)
 8003bba:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003bbc:	f7fe ff74 	bl	8002aa8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003bc0:	bf00      	nop
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200003f8 	.word	0x200003f8
 8003bcc:	200193f7 	.word	0x200193f7
 8003bd0:	20019404 	.word	0x20019404
 8003bd4:	20019410 	.word	0x20019410

08003bd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003bde:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8003be2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003be4:	4b24      	ldr	r3, [pc, #144]	@ (8003c78 <prvHeapInit+0xa0>)
 8003be6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00c      	beq.n	8003c0c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	3307      	adds	r3, #7
 8003bf6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 0307 	bic.w	r3, r3, #7
 8003bfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003c00:	68ba      	ldr	r2, [r7, #8]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	4a1c      	ldr	r2, [pc, #112]	@ (8003c78 <prvHeapInit+0xa0>)
 8003c08:	4413      	add	r3, r2
 8003c0a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c7c <prvHeapInit+0xa4>)
 8003c10:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003c12:	4b1a      	ldr	r3, [pc, #104]	@ (8003c7c <prvHeapInit+0xa4>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003c20:	2208      	movs	r2, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	f023 0307 	bic.w	r3, r3, #7
 8003c2e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	4a13      	ldr	r2, [pc, #76]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c34:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003c36:	4b12      	ldr	r3, [pc, #72]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003c3e:	4b10      	ldr	r3, [pc, #64]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	1ad2      	subs	r2, r2, r3
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003c54:	4b0a      	ldr	r3, [pc, #40]	@ (8003c80 <prvHeapInit+0xa8>)
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a08      	ldr	r2, [pc, #32]	@ (8003c84 <prvHeapInit+0xac>)
 8003c62:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	4a07      	ldr	r2, [pc, #28]	@ (8003c88 <prvHeapInit+0xb0>)
 8003c6a:	6013      	str	r3, [r2, #0]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	200003f8 	.word	0x200003f8
 8003c7c:	200193f8 	.word	0x200193f8
 8003c80:	20019400 	.word	0x20019400
 8003c84:	20019408 	.word	0x20019408
 8003c88:	20019404 	.word	0x20019404

08003c8c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003c94:	4b36      	ldr	r3, [pc, #216]	@ (8003d70 <prvInsertBlockIntoFreeList+0xe4>)
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e002      	b.n	8003ca0 <prvInsertBlockIntoFreeList+0x14>
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d8f7      	bhi.n	8003c9a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	4a30      	ldr	r2, [pc, #192]	@ (8003d70 <prvInsertBlockIntoFreeList+0xe4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d018      	beq.n	8003ce4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	4a2f      	ldr	r2, [pc, #188]	@ (8003d74 <prvInsertBlockIntoFreeList+0xe8>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d305      	bcc.n	8003cc6 <prvInsertBlockIntoFreeList+0x3a>
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	4a2e      	ldr	r2, [pc, #184]	@ (8003d78 <prvInsertBlockIntoFreeList+0xec>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d801      	bhi.n	8003cc6 <prvInsertBlockIntoFreeList+0x3a>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <prvInsertBlockIntoFreeList+0x3c>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	60fb      	str	r3, [r7, #12]
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d108      	bne.n	8003d08 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	441a      	add	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	441a      	add	r2, r3
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d118      	bne.n	8003d4e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	4b16      	ldr	r3, [pc, #88]	@ (8003d7c <prvInsertBlockIntoFreeList+0xf0>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d00d      	beq.n	8003d44 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	441a      	add	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	601a      	str	r2, [r3, #0]
 8003d42:	e008      	b.n	8003d56 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003d44:	4b0d      	ldr	r3, [pc, #52]	@ (8003d7c <prvInsertBlockIntoFreeList+0xf0>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	e003      	b.n	8003d56 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d002      	beq.n	8003d64 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003d64:	bf00      	nop
 8003d66:	371c      	adds	r7, #28
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr
 8003d70:	200193f8 	.word	0x200193f8
 8003d74:	200003f8 	.word	0x200003f8
 8003d78:	200193f7 	.word	0x200193f7
 8003d7c:	20019400 	.word	0x20019400

08003d80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003d80:	b580      	push	{r7, lr}
 8003d82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003d84:	4803      	ldr	r0, [pc, #12]	@ (8003d94 <_cbSendSystemDesc+0x14>)
 8003d86:	f001 fd25 	bl	80057d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003d8a:	4803      	ldr	r0, [pc, #12]	@ (8003d98 <_cbSendSystemDesc+0x18>)
 8003d8c:	f001 fd22 	bl	80057d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	08006018 	.word	0x08006018
 8003d98:	08006054 	.word	0x08006054

08003d9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003da0:	4b06      	ldr	r3, [pc, #24]	@ (8003dbc <SEGGER_SYSVIEW_Conf+0x20>)
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <SEGGER_SYSVIEW_Conf+0x20>)
 8003da6:	6819      	ldr	r1, [r3, #0]
 8003da8:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <SEGGER_SYSVIEW_Conf+0x24>)
 8003daa:	4a06      	ldr	r2, [pc, #24]	@ (8003dc4 <SEGGER_SYSVIEW_Conf+0x28>)
 8003dac:	f001 f998 	bl	80050e0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003db0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003db4:	f001 f9d8 	bl	8005168 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	20000000 	.word	0x20000000
 8003dc0:	08003d81 	.word	0x08003d81
 8003dc4:	080060f0 	.word	0x080060f0

08003dc8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dca:	b085      	sub	sp, #20
 8003dcc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003dce:	2300      	movs	r3, #0
 8003dd0:	607b      	str	r3, [r7, #4]
 8003dd2:	e033      	b.n	8003e3c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003dd4:	491e      	ldr	r1, [pc, #120]	@ (8003e50 <_cbSendTaskList+0x88>)
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	440b      	add	r3, r1
 8003de2:	6818      	ldr	r0, [r3, #0]
 8003de4:	491a      	ldr	r1, [pc, #104]	@ (8003e50 <_cbSendTaskList+0x88>)
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3304      	adds	r3, #4
 8003df4:	6819      	ldr	r1, [r3, #0]
 8003df6:	4c16      	ldr	r4, [pc, #88]	@ (8003e50 <_cbSendTaskList+0x88>)
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4423      	add	r3, r4
 8003e04:	3308      	adds	r3, #8
 8003e06:	681c      	ldr	r4, [r3, #0]
 8003e08:	4d11      	ldr	r5, [pc, #68]	@ (8003e50 <_cbSendTaskList+0x88>)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	442b      	add	r3, r5
 8003e16:	330c      	adds	r3, #12
 8003e18:	681d      	ldr	r5, [r3, #0]
 8003e1a:	4e0d      	ldr	r6, [pc, #52]	@ (8003e50 <_cbSendTaskList+0x88>)
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	4413      	add	r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4433      	add	r3, r6
 8003e28:	3310      	adds	r3, #16
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	9300      	str	r3, [sp, #0]
 8003e2e:	462b      	mov	r3, r5
 8003e30:	4622      	mov	r2, r4
 8003e32:	f000 f92d 	bl	8004090 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	607b      	str	r3, [r7, #4]
 8003e3c:	4b05      	ldr	r3, [pc, #20]	@ (8003e54 <_cbSendTaskList+0x8c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d3c6      	bcc.n	8003dd4 <_cbSendTaskList+0xc>
  }
}
 8003e46:	bf00      	nop
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e50:	20019414 	.word	0x20019414
 8003e54:	200194b4 	.word	0x200194b4

08003e58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003e60:	f7fe ff34 	bl	8002ccc <xTaskGetTickCountFromISR>
 8003e64:	4603      	mov	r3, r0
 8003e66:	2200      	movs	r2, #0
 8003e68:	469a      	mov	sl, r3
 8003e6a:	4693      	mov	fp, r2
 8003e6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003e74:	4602      	mov	r2, r0
 8003e76:	460b      	mov	r3, r1
 8003e78:	f04f 0a00 	mov.w	sl, #0
 8003e7c:	f04f 0b00 	mov.w	fp, #0
 8003e80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003e84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003e88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003e8c:	4652      	mov	r2, sl
 8003e8e:	465b      	mov	r3, fp
 8003e90:	1a14      	subs	r4, r2, r0
 8003e92:	eb63 0501 	sbc.w	r5, r3, r1
 8003e96:	f04f 0200 	mov.w	r2, #0
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	00ab      	lsls	r3, r5, #2
 8003ea0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003ea4:	00a2      	lsls	r2, r4, #2
 8003ea6:	4614      	mov	r4, r2
 8003ea8:	461d      	mov	r5, r3
 8003eaa:	eb14 0800 	adds.w	r8, r4, r0
 8003eae:	eb45 0901 	adc.w	r9, r5, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ec6:	4690      	mov	r8, r2
 8003ec8:	4699      	mov	r9, r3
 8003eca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003ece:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003ed2:	4610      	mov	r0, r2
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003ee0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b086      	sub	sp, #24
 8003ee4:	af02      	add	r7, sp, #8
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
 8003eec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003eee:	2205      	movs	r2, #5
 8003ef0:	492b      	ldr	r1, [pc, #172]	@ (8003fa0 <SYSVIEW_AddTask+0xc0>)
 8003ef2:	68b8      	ldr	r0, [r7, #8]
 8003ef4:	f002 f81a 	bl	8005f2c <memcmp>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d04b      	beq.n	8003f96 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003efe:	4b29      	ldr	r3, [pc, #164]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b07      	cmp	r3, #7
 8003f04:	d903      	bls.n	8003f0e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003f06:	4828      	ldr	r0, [pc, #160]	@ (8003fa8 <SYSVIEW_AddTask+0xc8>)
 8003f08:	f001 ffb4 	bl	8005e74 <SEGGER_SYSVIEW_Warn>
    return;
 8003f0c:	e044      	b.n	8003f98 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003f0e:	4b25      	ldr	r3, [pc, #148]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	4926      	ldr	r1, [pc, #152]	@ (8003fac <SYSVIEW_AddTask+0xcc>)
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	440b      	add	r3, r1
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003f22:	4b20      	ldr	r3, [pc, #128]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4921      	ldr	r1, [pc, #132]	@ (8003fac <SYSVIEW_AddTask+0xcc>)
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	3304      	adds	r3, #4
 8003f34:	68ba      	ldr	r2, [r7, #8]
 8003f36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003f38:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	491b      	ldr	r1, [pc, #108]	@ (8003fac <SYSVIEW_AddTask+0xcc>)
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	440b      	add	r3, r1
 8003f48:	3308      	adds	r3, #8
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003f4e:	4b15      	ldr	r3, [pc, #84]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4916      	ldr	r1, [pc, #88]	@ (8003fac <SYSVIEW_AddTask+0xcc>)
 8003f54:	4613      	mov	r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	009b      	lsls	r3, r3, #2
 8003f5c:	440b      	add	r3, r1
 8003f5e:	330c      	adds	r3, #12
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003f64:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	4910      	ldr	r1, [pc, #64]	@ (8003fac <SYSVIEW_AddTask+0xcc>)
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	3310      	adds	r3, #16
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3301      	adds	r3, #1
 8003f80:	4a08      	ldr	r2, [pc, #32]	@ (8003fa4 <SYSVIEW_AddTask+0xc4>)
 8003f82:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	68b9      	ldr	r1, [r7, #8]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	f000 f87e 	bl	8004090 <SYSVIEW_SendTaskInfo>
 8003f94:	e000      	b.n	8003f98 <SYSVIEW_AddTask+0xb8>
    return;
 8003f96:	bf00      	nop

}
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	08006064 	.word	0x08006064
 8003fa4:	200194b4 	.word	0x200194b4
 8003fa8:	0800606c 	.word	0x0800606c
 8003fac:	20019414 	.word	0x20019414

08003fb0 <SYSVIEW_UpdateTask>:
*       SYSVIEW_UpdateTask()
*
*  Function description
*    Update a task in the internal list and record its information.
*/
void SYSVIEW_UpdateTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32 pxStack, unsigned uStackHighWaterMark) {
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b088      	sub	sp, #32
 8003fb4:	af02      	add	r7, sp, #8
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	603b      	str	r3, [r7, #0]
  unsigned n;
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003fbe:	2205      	movs	r2, #5
 8003fc0:	4930      	ldr	r1, [pc, #192]	@ (8004084 <SYSVIEW_UpdateTask+0xd4>)
 8003fc2:	68b8      	ldr	r0, [r7, #8]
 8003fc4:	f001 ffb2 	bl	8005f2c <memcmp>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d056      	beq.n	800407c <SYSVIEW_UpdateTask+0xcc>
    return;
  }

  for (n = 0; n < _NumTasks; n++) {
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	e00d      	b.n	8003ff0 <SYSVIEW_UpdateTask+0x40>
    if (_aTasks[n].xHandle == xHandle) {
 8003fd4:	492c      	ldr	r1, [pc, #176]	@ (8004088 <SYSVIEW_UpdateTask+0xd8>)
 8003fd6:	697a      	ldr	r2, [r7, #20]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	429a      	cmp	r2, r3
 8003fe8:	d008      	beq.n	8003ffc <SYSVIEW_UpdateTask+0x4c>
  for (n = 0; n < _NumTasks; n++) {
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	3301      	adds	r3, #1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	4b26      	ldr	r3, [pc, #152]	@ (800408c <SYSVIEW_UpdateTask+0xdc>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d3ec      	bcc.n	8003fd4 <SYSVIEW_UpdateTask+0x24>
 8003ffa:	e000      	b.n	8003ffe <SYSVIEW_UpdateTask+0x4e>
      break;
 8003ffc:	bf00      	nop
    }
  }
  if (n < _NumTasks) {
 8003ffe:	4b23      	ldr	r3, [pc, #140]	@ (800408c <SYSVIEW_UpdateTask+0xdc>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	697a      	ldr	r2, [r7, #20]
 8004004:	429a      	cmp	r2, r3
 8004006:	d230      	bcs.n	800406a <SYSVIEW_UpdateTask+0xba>
    _aTasks[n].pcTaskName = pcTaskName;
 8004008:	491f      	ldr	r1, [pc, #124]	@ (8004088 <SYSVIEW_UpdateTask+0xd8>)
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	3304      	adds	r3, #4
 8004018:	68ba      	ldr	r2, [r7, #8]
 800401a:	601a      	str	r2, [r3, #0]
    _aTasks[n].uxCurrentPriority = uxCurrentPriority;
 800401c:	491a      	ldr	r1, [pc, #104]	@ (8004088 <SYSVIEW_UpdateTask+0xd8>)
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4613      	mov	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	3308      	adds	r3, #8
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	601a      	str	r2, [r3, #0]
    _aTasks[n].pxStack = pxStack;
 8004030:	4915      	ldr	r1, [pc, #84]	@ (8004088 <SYSVIEW_UpdateTask+0xd8>)
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4613      	mov	r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	330c      	adds	r3, #12
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	601a      	str	r2, [r3, #0]
    _aTasks[n].uStackHighWaterMark = uStackHighWaterMark;
 8004044:	4910      	ldr	r1, [pc, #64]	@ (8004088 <SYSVIEW_UpdateTask+0xd8>)
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4613      	mov	r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3310      	adds	r3, #16
 8004054:	6a3a      	ldr	r2, [r7, #32]
 8004056:	601a      	str	r2, [r3, #0]

    SYSVIEW_SendTaskInfo(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004058:	6a3b      	ldr	r3, [r7, #32]
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	68b9      	ldr	r1, [r7, #8]
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f000 f814 	bl	8004090 <SYSVIEW_SendTaskInfo>
 8004068:	e009      	b.n	800407e <SYSVIEW_UpdateTask+0xce>
  } else {
    SYSVIEW_AddTask(xHandle, pcTaskName, uxCurrentPriority, pxStack, uStackHighWaterMark);
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	68b9      	ldr	r1, [r7, #8]
 8004074:	68f8      	ldr	r0, [r7, #12]
 8004076:	f7ff ff33 	bl	8003ee0 <SYSVIEW_AddTask>
 800407a:	e000      	b.n	800407e <SYSVIEW_UpdateTask+0xce>
    return;
 800407c:	bf00      	nop
  }
}
 800407e:	3718      	adds	r7, #24
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	08006064 	.word	0x08006064
 8004088:	20019414 	.word	0x20019414
 800408c:	200194b4 	.word	0x200194b4

08004090 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af00      	add	r7, sp, #0
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	607a      	str	r2, [r7, #4]
 800409c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800409e:	f107 0310 	add.w	r3, r7, #16
 80040a2:	2218      	movs	r2, #24
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f001 ff50 	bl	8005f4c <memset>
  TaskInfo.TaskID     = TaskID;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80040bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040be:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80040c0:	f107 0310 	add.w	r3, r7, #16
 80040c4:	4618      	mov	r0, r3
 80040c6:	f001 fa8d 	bl	80055e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80040ca:	bf00      	nop
 80040cc:	3728      	adds	r7, #40	@ 0x28
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
	...

080040d4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b082      	sub	sp, #8
 80040d8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80040da:	4b26      	ldr	r3, [pc, #152]	@ (8004174 <_DoInit+0xa0>)
 80040dc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80040de:	22a8      	movs	r2, #168	@ 0xa8
 80040e0:	2100      	movs	r1, #0
 80040e2:	6838      	ldr	r0, [r7, #0]
 80040e4:	f001 ff32 	bl	8005f4c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	2203      	movs	r2, #3
 80040ec:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2203      	movs	r2, #3
 80040f2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	4a20      	ldr	r2, [pc, #128]	@ (8004178 <_DoInit+0xa4>)
 80040f8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	4a1f      	ldr	r2, [pc, #124]	@ (800417c <_DoInit+0xa8>)
 80040fe:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004106:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2200      	movs	r2, #0
 800410c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2200      	movs	r2, #0
 8004112:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2200      	movs	r2, #0
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	4a16      	ldr	r2, [pc, #88]	@ (8004178 <_DoInit+0xa4>)
 800411e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	4a17      	ldr	r2, [pc, #92]	@ (8004180 <_DoInit+0xac>)
 8004124:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	2210      	movs	r2, #16
 800412a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2200      	movs	r2, #0
 8004136:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2200      	movs	r2, #0
 800413c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800413e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004142:	2300      	movs	r3, #0
 8004144:	607b      	str	r3, [r7, #4]
 8004146:	e00c      	b.n	8004162 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f1c3 030f 	rsb	r3, r3, #15
 800414e:	4a0d      	ldr	r2, [pc, #52]	@ (8004184 <_DoInit+0xb0>)
 8004150:	5cd1      	ldrb	r1, [r2, r3]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4413      	add	r3, r2
 8004158:	460a      	mov	r2, r1
 800415a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	3301      	adds	r3, #1
 8004160:	607b      	str	r3, [r7, #4]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	d9ef      	bls.n	8004148 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004168:	f3bf 8f5f 	dmb	sy
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	200194b8 	.word	0x200194b8
 8004178:	080060bc 	.word	0x080060bc
 800417c:	20019560 	.word	0x20019560
 8004180:	2001b560 	.word	0x2001b560
 8004184:	080060f8 	.word	0x080060f8

08004188 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004188:	b580      	push	{r7, lr}
 800418a:	b08c      	sub	sp, #48	@ 0x30
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004194:	4b3e      	ldr	r3, [pc, #248]	@ (8004290 <SEGGER_RTT_ReadNoLock+0x108>)
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	2b53      	cmp	r3, #83	@ 0x53
 80041a0:	d001      	beq.n	80041a6 <SEGGER_RTT_ReadNoLock+0x1e>
 80041a2:	f7ff ff97 	bl	80040d4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4613      	mov	r3, r2
 80041aa:	005b      	lsls	r3, r3, #1
 80041ac:	4413      	add	r3, r2
 80041ae:	00db      	lsls	r3, r3, #3
 80041b0:	3360      	adds	r3, #96	@ 0x60
 80041b2:	4a37      	ldr	r2, [pc, #220]	@ (8004290 <SEGGER_RTT_ReadNoLock+0x108>)
 80041b4:	4413      	add	r3, r2
 80041b6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80041c8:	2300      	movs	r3, #0
 80041ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80041cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d92b      	bls.n	800422c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4293      	cmp	r3, r2
 80041e4:	bf28      	it	cs
 80041e6:	4613      	movcs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f0:	4413      	add	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	6939      	ldr	r1, [r7, #16]
 80041f8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80041fa:	f001 fed3 	bl	8005fa4 <memcpy>
    NumBytesRead += NumBytesRem;
 80041fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	4413      	add	r3, r2
 8004204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	4413      	add	r3, r2
 800420c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4413      	add	r3, r2
 800421c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004224:	429a      	cmp	r2, r3
 8004226:	d101      	bne.n	800422c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004228:	2300      	movs	r3, #0
 800422a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4293      	cmp	r3, r2
 800423a:	bf28      	it	cs
 800423c:	4613      	movcs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d019      	beq.n	800427a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424c:	4413      	add	r3, r2
 800424e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	6939      	ldr	r1, [r7, #16]
 8004254:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004256:	f001 fea5 	bl	8005fa4 <memcpy>
    NumBytesRead += NumBytesRem;
 800425a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	4413      	add	r3, r2
 8004260:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4413      	add	r3, r2
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004272:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	4413      	add	r3, r2
 8004278:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800427a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800427c:	2b00      	cmp	r3, #0
 800427e:	d002      	beq.n	8004286 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004284:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004288:	4618      	mov	r0, r3
 800428a:	3730      	adds	r7, #48	@ 0x30
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	200194b8 	.word	0x200194b8

08004294 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
 80042a0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80042a2:	4b3d      	ldr	r3, [pc, #244]	@ (8004398 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042a4:	61bb      	str	r3, [r7, #24]
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b53      	cmp	r3, #83	@ 0x53
 80042ae:	d001      	beq.n	80042b4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80042b0:	f7ff ff10 	bl	80040d4 <_DoInit>
  SEGGER_RTT_LOCK();
 80042b4:	f3ef 8311 	mrs	r3, BASEPRI
 80042b8:	f04f 0120 	mov.w	r1, #32
 80042bc:	f381 8811 	msr	BASEPRI, r1
 80042c0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80042c2:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80042c4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	440b      	add	r3, r1
 80042da:	3304      	adds	r3, #4
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d008      	beq.n	80042f4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	3301      	adds	r3, #1
 80042e6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	691b      	ldr	r3, [r3, #16]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	dbeb      	blt.n	80042ca <SEGGER_RTT_AllocUpBuffer+0x36>
 80042f2:	e000      	b.n	80042f6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80042f4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	69fa      	ldr	r2, [r7, #28]
 80042fc:	429a      	cmp	r2, r3
 80042fe:	da3f      	bge.n	8004380 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004300:	6939      	ldr	r1, [r7, #16]
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	4613      	mov	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4413      	add	r3, r2
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	440b      	add	r3, r1
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004314:	6939      	ldr	r1, [r7, #16]
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	00db      	lsls	r3, r3, #3
 8004322:	440b      	add	r3, r1
 8004324:	3304      	adds	r3, #4
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800432a:	6939      	ldr	r1, [r7, #16]
 800432c:	69fa      	ldr	r2, [r7, #28]
 800432e:	4613      	mov	r3, r2
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	4413      	add	r3, r2
 8004334:	00db      	lsls	r3, r3, #3
 8004336:	440b      	add	r3, r1
 8004338:	3320      	adds	r3, #32
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800433e:	6939      	ldr	r1, [r7, #16]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	4613      	mov	r3, r2
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4413      	add	r3, r2
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	440b      	add	r3, r1
 800434c:	3328      	adds	r3, #40	@ 0x28
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004352:	6939      	ldr	r1, [r7, #16]
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	4613      	mov	r3, r2
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	4413      	add	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	440b      	add	r3, r1
 8004360:	3324      	adds	r3, #36	@ 0x24
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004366:	6939      	ldr	r1, [r7, #16]
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	4613      	mov	r3, r2
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	4413      	add	r3, r2
 8004370:	00db      	lsls	r3, r3, #3
 8004372:	440b      	add	r3, r1
 8004374:	332c      	adds	r3, #44	@ 0x2c
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800437a:	f3bf 8f5f 	dmb	sy
 800437e:	e002      	b.n	8004386 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004380:	f04f 33ff 	mov.w	r3, #4294967295
 8004384:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800438c:	69fb      	ldr	r3, [r7, #28]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3720      	adds	r7, #32
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	200194b8 	.word	0x200194b8

0800439c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b08a      	sub	sp, #40	@ 0x28
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
 80043a8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	b2db      	uxtb	r3, r3
 80043b4:	2b53      	cmp	r3, #83	@ 0x53
 80043b6:	d001      	beq.n	80043bc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80043b8:	f7ff fe8c 	bl	80040d4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80043bc:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80043be:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d82c      	bhi.n	8004420 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80043c6:	f3ef 8311 	mrs	r3, BASEPRI
 80043ca:	f04f 0120 	mov.w	r1, #32
 80043ce:	f381 8811 	msr	BASEPRI, r1
 80043d2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4613      	mov	r3, r2
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	3360      	adds	r3, #96	@ 0x60
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	4413      	add	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	2200      	movs	r2, #0
 8004408:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800440e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004410:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800441a:	2300      	movs	r3, #0
 800441c:	627b      	str	r3, [r7, #36]	@ 0x24
 800441e:	e002      	b.n	8004426 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004420:	f04f 33ff 	mov.w	r3, #4294967295
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004428:	4618      	mov	r0, r3
 800442a:	3728      	adds	r7, #40	@ 0x28
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	200194b8 	.word	0x200194b8

08004434 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004434:	b480      	push	{r7}
 8004436:	b087      	sub	sp, #28
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d105      	bne.n	8004452 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	e022      	b.n	8004498 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2b80      	cmp	r3, #128	@ 0x80
 8004462:	d90a      	bls.n	800447a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004464:	2380      	movs	r3, #128	@ 0x80
 8004466:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004468:	e007      	b.n	800447a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	1c53      	adds	r3, r2, #1
 800446e:	60bb      	str	r3, [r7, #8]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	1c59      	adds	r1, r3, #1
 8004474:	60f9      	str	r1, [r7, #12]
 8004476:	7812      	ldrb	r2, [r2, #0]
 8004478:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1e5a      	subs	r2, r3, #1
 800447e:	607a      	str	r2, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d003      	beq.n	800448c <_EncodeStr+0x58>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d1ee      	bne.n	800446a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	b2da      	uxtb	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004498:	68fb      	ldr	r3, [r7, #12]
}
 800449a:	4618      	mov	r0, r3
 800449c:	371c      	adds	r7, #28
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	3307      	adds	r3, #7
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	370c      	adds	r7, #12
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr
	...

080044c0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b082      	sub	sp, #8
 80044c4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80044c6:	4b34      	ldr	r3, [pc, #208]	@ (8004598 <_HandleIncomingPacket+0xd8>)
 80044c8:	7e1b      	ldrb	r3, [r3, #24]
 80044ca:	4618      	mov	r0, r3
 80044cc:	1cfb      	adds	r3, r7, #3
 80044ce:	2201      	movs	r2, #1
 80044d0:	4619      	mov	r1, r3
 80044d2:	f7ff fe59 	bl	8004188 <SEGGER_RTT_ReadNoLock>
 80044d6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d057      	beq.n	800458e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b80      	cmp	r3, #128	@ 0x80
 80044e2:	d031      	beq.n	8004548 <_HandleIncomingPacket+0x88>
 80044e4:	2b80      	cmp	r3, #128	@ 0x80
 80044e6:	dc40      	bgt.n	800456a <_HandleIncomingPacket+0xaa>
 80044e8:	2b07      	cmp	r3, #7
 80044ea:	dc15      	bgt.n	8004518 <_HandleIncomingPacket+0x58>
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd3c      	ble.n	800456a <_HandleIncomingPacket+0xaa>
 80044f0:	3b01      	subs	r3, #1
 80044f2:	2b06      	cmp	r3, #6
 80044f4:	d839      	bhi.n	800456a <_HandleIncomingPacket+0xaa>
 80044f6:	a201      	add	r2, pc, #4	@ (adr r2, 80044fc <_HandleIncomingPacket+0x3c>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800451f 	.word	0x0800451f
 8004500:	08004525 	.word	0x08004525
 8004504:	0800452b 	.word	0x0800452b
 8004508:	08004531 	.word	0x08004531
 800450c:	08004537 	.word	0x08004537
 8004510:	0800453d 	.word	0x0800453d
 8004514:	08004543 	.word	0x08004543
 8004518:	2b7f      	cmp	r3, #127	@ 0x7f
 800451a:	d033      	beq.n	8004584 <_HandleIncomingPacket+0xc4>
 800451c:	e025      	b.n	800456a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800451e:	f000 fee7 	bl	80052f0 <SEGGER_SYSVIEW_Start>
      break;
 8004522:	e034      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004524:	f000 ff9e 	bl	8005464 <SEGGER_SYSVIEW_Stop>
      break;
 8004528:	e031      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800452a:	f001 f977 	bl	800581c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800452e:	e02e      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004530:	f001 f93c 	bl	80057ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004534:	e02b      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004536:	f000 ffbb 	bl	80054b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800453a:	e028      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800453c:	f001 fc48 	bl	8005dd0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004540:	e025      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004542:	f001 fc27 	bl	8005d94 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004546:	e022      	b.n	800458e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004548:	4b13      	ldr	r3, [pc, #76]	@ (8004598 <_HandleIncomingPacket+0xd8>)
 800454a:	7e1b      	ldrb	r3, [r3, #24]
 800454c:	4618      	mov	r0, r3
 800454e:	1cfb      	adds	r3, r7, #3
 8004550:	2201      	movs	r2, #1
 8004552:	4619      	mov	r1, r3
 8004554:	f7ff fe18 	bl	8004188 <SEGGER_RTT_ReadNoLock>
 8004558:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d013      	beq.n	8004588 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004560:	78fb      	ldrb	r3, [r7, #3]
 8004562:	4618      	mov	r0, r3
 8004564:	f001 fb8c 	bl	8005c80 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004568:	e00e      	b.n	8004588 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800456a:	78fb      	ldrb	r3, [r7, #3]
 800456c:	b25b      	sxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	da0c      	bge.n	800458c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004572:	4b09      	ldr	r3, [pc, #36]	@ (8004598 <_HandleIncomingPacket+0xd8>)
 8004574:	7e1b      	ldrb	r3, [r3, #24]
 8004576:	4618      	mov	r0, r3
 8004578:	1cfb      	adds	r3, r7, #3
 800457a:	2201      	movs	r2, #1
 800457c:	4619      	mov	r1, r3
 800457e:	f7ff fe03 	bl	8004188 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004582:	e003      	b.n	800458c <_HandleIncomingPacket+0xcc>
      break;
 8004584:	bf00      	nop
 8004586:	e002      	b.n	800458e <_HandleIncomingPacket+0xce>
      break;
 8004588:	bf00      	nop
 800458a:	e000      	b.n	800458e <_HandleIncomingPacket+0xce>
      break;
 800458c:	bf00      	nop
    }
  }
}
 800458e:	bf00      	nop
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2001c578 	.word	0x2001c578

0800459c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b08c      	sub	sp, #48	@ 0x30
 80045a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80045a2:	2301      	movs	r3, #1
 80045a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80045a6:	1d3b      	adds	r3, r7, #4
 80045a8:	3301      	adds	r3, #1
 80045aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80045ac:	69fb      	ldr	r3, [r7, #28]
 80045ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045b0:	4b31      	ldr	r3, [pc, #196]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 80045b2:	695b      	ldr	r3, [r3, #20]
 80045b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045b6:	e00b      	b.n	80045d0 <_TrySendOverflowPacket+0x34>
 80045b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045be:	1c59      	adds	r1, r3, #1
 80045c0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80045c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	701a      	strb	r2, [r3, #0]
 80045ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045cc:	09db      	lsrs	r3, r3, #7
 80045ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80045d4:	d8f0      	bhi.n	80045b8 <_TrySendOverflowPacket+0x1c>
 80045d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045d8:	1c5a      	adds	r2, r3, #1
 80045da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80045de:	b2d2      	uxtb	r2, r2
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80045e6:	4b25      	ldr	r3, [pc, #148]	@ (800467c <_TrySendOverflowPacket+0xe0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80045ec:	4b22      	ldr	r3, [pc, #136]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	69ba      	ldr	r2, [r7, #24]
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <_TrySendOverflowPacket+0x7c>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	@ 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	@ 0x7f
 800461c:	d8f0      	bhi.n	8004600 <_TrySendOverflowPacket+0x64>
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	@ 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800462c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800462e:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 8004630:	785b      	ldrb	r3, [r3, #1]
 8004632:	4618      	mov	r0, r3
 8004634:	1d3b      	adds	r3, r7, #4
 8004636:	69fa      	ldr	r2, [r7, #28]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	461a      	mov	r2, r3
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	4619      	mov	r1, r3
 8004640:	f7fb fdce 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004644:	4603      	mov	r3, r0
 8004646:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d009      	beq.n	8004662 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800464e:	4a0a      	ldr	r2, [pc, #40]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004654:	4b08      	ldr	r3, [pc, #32]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	3b01      	subs	r3, #1
 800465a:	b2da      	uxtb	r2, r3
 800465c:	4b06      	ldr	r3, [pc, #24]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 800465e:	701a      	strb	r2, [r3, #0]
 8004660:	e004      	b.n	800466c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004662:	4b05      	ldr	r3, [pc, #20]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	4a03      	ldr	r2, [pc, #12]	@ (8004678 <_TrySendOverflowPacket+0xdc>)
 800466a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800466c:	693b      	ldr	r3, [r7, #16]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3730      	adds	r7, #48	@ 0x30
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	2001c578 	.word	0x2001c578
 800467c:	e0001004 	.word	0xe0001004

08004680 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08a      	sub	sp, #40	@ 0x28
 8004684:	af00      	add	r7, sp, #0
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800468c:	4b98      	ldr	r3, [pc, #608]	@ (80048f0 <_SendPacket+0x270>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d010      	beq.n	80046b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004694:	4b96      	ldr	r3, [pc, #600]	@ (80048f0 <_SendPacket+0x270>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	f000 812d 	beq.w	80048f8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800469e:	4b94      	ldr	r3, [pc, #592]	@ (80048f0 <_SendPacket+0x270>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d109      	bne.n	80046ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80046a6:	f7ff ff79 	bl	800459c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80046aa:	4b91      	ldr	r3, [pc, #580]	@ (80048f0 <_SendPacket+0x270>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b01      	cmp	r3, #1
 80046b0:	f040 8124 	bne.w	80048fc <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80046b4:	e001      	b.n	80046ba <_SendPacket+0x3a>
    goto Send;
 80046b6:	bf00      	nop
 80046b8:	e000      	b.n	80046bc <_SendPacket+0x3c>
Send:
 80046ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b1f      	cmp	r3, #31
 80046c0:	d809      	bhi.n	80046d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80046c2:	4b8b      	ldr	r3, [pc, #556]	@ (80048f0 <_SendPacket+0x270>)
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	fa22 f303 	lsr.w	r3, r2, r3
 80046cc:	f003 0301 	and.w	r3, r3, #1
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f040 8115 	bne.w	8004900 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2b17      	cmp	r3, #23
 80046da:	d807      	bhi.n	80046ec <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	3b01      	subs	r3, #1
 80046e0:	60fb      	str	r3, [r7, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	701a      	strb	r2, [r3, #0]
 80046ea:	e0c4      	b.n	8004876 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80046ec:	68ba      	ldr	r2, [r7, #8]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80046f8:	d912      	bls.n	8004720 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	09da      	lsrs	r2, r3, #7
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	3b01      	subs	r3, #1
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	b2d2      	uxtb	r2, r2
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	3a01      	subs	r2, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004718:	b2da      	uxtb	r2, r3
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	701a      	strb	r2, [r3, #0]
 800471e:	e006      	b.n	800472e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	3b01      	subs	r3, #1
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b7e      	cmp	r3, #126	@ 0x7e
 8004732:	d807      	bhi.n	8004744 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	3b01      	subs	r3, #1
 8004738:	60fb      	str	r3, [r7, #12]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	b2da      	uxtb	r2, r3
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	701a      	strb	r2, [r3, #0]
 8004742:	e098      	b.n	8004876 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800474a:	d212      	bcs.n	8004772 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	09da      	lsrs	r2, r3, #7
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	3b01      	subs	r3, #1
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	b2d2      	uxtb	r2, r2
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	3a01      	subs	r2, #1
 8004764:	60fa      	str	r2, [r7, #12]
 8004766:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	701a      	strb	r2, [r3, #0]
 8004770:	e081      	b.n	8004876 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004778:	d21d      	bcs.n	80047b6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	0b9a      	lsrs	r2, r3, #14
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3b01      	subs	r3, #1
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	b2d2      	uxtb	r2, r2
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	09db      	lsrs	r3, r3, #7
 800478e:	b2db      	uxtb	r3, r3
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	3a01      	subs	r2, #1
 8004794:	60fa      	str	r2, [r7, #12]
 8004796:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800479a:	b2da      	uxtb	r2, r3
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	3a01      	subs	r2, #1
 80047a8:	60fa      	str	r2, [r7, #12]
 80047aa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e05f      	b.n	8004876 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80047bc:	d228      	bcs.n	8004810 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0d5a      	lsrs	r2, r3, #21
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	0b9b      	lsrs	r3, r3, #14
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	3a01      	subs	r2, #1
 80047d8:	60fa      	str	r2, [r7, #12]
 80047da:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	09db      	lsrs	r3, r3, #7
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	68fa      	ldr	r2, [r7, #12]
 80047ec:	3a01      	subs	r2, #1
 80047ee:	60fa      	str	r2, [r7, #12]
 80047f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80047f4:	b2da      	uxtb	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	3a01      	subs	r2, #1
 8004802:	60fa      	str	r2, [r7, #12]
 8004804:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004808:	b2da      	uxtb	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	701a      	strb	r2, [r3, #0]
 800480e:	e032      	b.n	8004876 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	0f1a      	lsrs	r2, r3, #28
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	3b01      	subs	r3, #1
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	b2d2      	uxtb	r2, r2
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	b2db      	uxtb	r3, r3
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	3a01      	subs	r2, #1
 800482a:	60fa      	str	r2, [r7, #12]
 800482c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004830:	b2da      	uxtb	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0b9b      	lsrs	r3, r3, #14
 800483a:	b2db      	uxtb	r3, r3
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	3a01      	subs	r2, #1
 8004840:	60fa      	str	r2, [r7, #12]
 8004842:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004846:	b2da      	uxtb	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	09db      	lsrs	r3, r3, #7
 8004850:	b2db      	uxtb	r3, r3
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	3a01      	subs	r2, #1
 8004856:	60fa      	str	r2, [r7, #12]
 8004858:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800485c:	b2da      	uxtb	r2, r3
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	b2db      	uxtb	r3, r3
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	3a01      	subs	r2, #1
 800486a:	60fa      	str	r2, [r7, #12]
 800486c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004876:	4b1f      	ldr	r3, [pc, #124]	@ (80048f4 <_SendPacket+0x274>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800487c:	4b1c      	ldr	r3, [pc, #112]	@ (80048f0 <_SendPacket+0x270>)
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	627b      	str	r3, [r7, #36]	@ 0x24
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e00b      	b.n	80048a8 <_SendPacket+0x228>
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	b2da      	uxtb	r2, r3
 8004894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004896:	1c59      	adds	r1, r3, #1
 8004898:	6279      	str	r1, [r7, #36]	@ 0x24
 800489a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	6a3b      	ldr	r3, [r7, #32]
 80048a4:	09db      	lsrs	r3, r3, #7
 80048a6:	623b      	str	r3, [r7, #32]
 80048a8:	6a3b      	ldr	r3, [r7, #32]
 80048aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ac:	d8f0      	bhi.n	8004890 <_SendPacket+0x210>
 80048ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80048b4:	6a3a      	ldr	r2, [r7, #32]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	701a      	strb	r2, [r3, #0]
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80048be:	4b0c      	ldr	r3, [pc, #48]	@ (80048f0 <_SendPacket+0x270>)
 80048c0:	785b      	ldrb	r3, [r3, #1]
 80048c2:	4618      	mov	r0, r3
 80048c4:	68ba      	ldr	r2, [r7, #8]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	461a      	mov	r2, r3
 80048cc:	68f9      	ldr	r1, [r7, #12]
 80048ce:	f7fb fc87 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80048d2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d003      	beq.n	80048e2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80048da:	4a05      	ldr	r2, [pc, #20]	@ (80048f0 <_SendPacket+0x270>)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	60d3      	str	r3, [r2, #12]
 80048e0:	e00f      	b.n	8004902 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80048e2:	4b03      	ldr	r3, [pc, #12]	@ (80048f0 <_SendPacket+0x270>)
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	3301      	adds	r3, #1
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4b01      	ldr	r3, [pc, #4]	@ (80048f0 <_SendPacket+0x270>)
 80048ec:	701a      	strb	r2, [r3, #0]
 80048ee:	e008      	b.n	8004902 <_SendPacket+0x282>
 80048f0:	2001c578 	.word	0x2001c578
 80048f4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80048f8:	bf00      	nop
 80048fa:	e002      	b.n	8004902 <_SendPacket+0x282>
      goto SendDone;
 80048fc:	bf00      	nop
 80048fe:	e000      	b.n	8004902 <_SendPacket+0x282>
      goto SendDone;
 8004900:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004902:	4b14      	ldr	r3, [pc, #80]	@ (8004954 <_SendPacket+0x2d4>)
 8004904:	7e1b      	ldrb	r3, [r3, #24]
 8004906:	4619      	mov	r1, r3
 8004908:	4a13      	ldr	r2, [pc, #76]	@ (8004958 <_SendPacket+0x2d8>)
 800490a:	460b      	mov	r3, r1
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	440b      	add	r3, r1
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	336c      	adds	r3, #108	@ 0x6c
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b0e      	ldr	r3, [pc, #56]	@ (8004954 <_SendPacket+0x2d4>)
 800491a:	7e1b      	ldrb	r3, [r3, #24]
 800491c:	4618      	mov	r0, r3
 800491e:	490e      	ldr	r1, [pc, #56]	@ (8004958 <_SendPacket+0x2d8>)
 8004920:	4603      	mov	r3, r0
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4403      	add	r3, r0
 8004926:	00db      	lsls	r3, r3, #3
 8004928:	440b      	add	r3, r1
 800492a:	3370      	adds	r3, #112	@ 0x70
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d00b      	beq.n	800494a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004932:	4b08      	ldr	r3, [pc, #32]	@ (8004954 <_SendPacket+0x2d4>)
 8004934:	789b      	ldrb	r3, [r3, #2]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800493a:	4b06      	ldr	r3, [pc, #24]	@ (8004954 <_SendPacket+0x2d4>)
 800493c:	2201      	movs	r2, #1
 800493e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004940:	f7ff fdbe 	bl	80044c0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004944:	4b03      	ldr	r3, [pc, #12]	@ (8004954 <_SendPacket+0x2d4>)
 8004946:	2200      	movs	r2, #0
 8004948:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800494a:	bf00      	nop
 800494c:	3728      	adds	r7, #40	@ 0x28
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	2001c578 	.word	0x2001c578
 8004958:	200194b8 	.word	0x200194b8

0800495c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	460b      	mov	r3, r1
 8004966:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	3301      	adds	r3, #1
 8004972:	2b80      	cmp	r3, #128	@ 0x80
 8004974:	d80a      	bhi.n	800498c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	1c59      	adds	r1, r3, #1
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	6051      	str	r1, [r2, #4]
 8004980:	78fa      	ldrb	r2, [r7, #3]
 8004982:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	1c5a      	adds	r2, r3, #1
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b80      	cmp	r3, #128	@ 0x80
 8004992:	d15a      	bne.n	8004a4a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691a      	ldr	r2, [r3, #16]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	623b      	str	r3, [r7, #32]
 80049b4:	e00b      	b.n	80049ce <_StoreChar+0x72>
 80049b6:	6a3b      	ldr	r3, [r7, #32]
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	1c59      	adds	r1, r3, #1
 80049be:	6279      	str	r1, [r7, #36]	@ 0x24
 80049c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049c4:	b2d2      	uxtb	r2, r2
 80049c6:	701a      	strb	r2, [r3, #0]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	09db      	lsrs	r3, r3, #7
 80049cc:	623b      	str	r3, [r7, #32]
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80049d2:	d8f0      	bhi.n	80049b6 <_StoreChar+0x5a>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d6:	1c5a      	adds	r2, r3, #1
 80049d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80049da:	6a3a      	ldr	r2, [r7, #32]
 80049dc:	b2d2      	uxtb	r2, r2
 80049de:	701a      	strb	r2, [r3, #0]
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	e00b      	b.n	8004a06 <_StoreChar+0xaa>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	1c59      	adds	r1, r3, #1
 80049f6:	61f9      	str	r1, [r7, #28]
 80049f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049fc:	b2d2      	uxtb	r2, r2
 80049fe:	701a      	strb	r2, [r3, #0]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	09db      	lsrs	r3, r3, #7
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a0a:	d8f0      	bhi.n	80049ee <_StoreChar+0x92>
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	1c5a      	adds	r2, r3, #1
 8004a10:	61fa      	str	r2, [r7, #28]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	701a      	strb	r2, [r3, #0]
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	221a      	movs	r2, #26
 8004a22:	6939      	ldr	r1, [r7, #16]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fe2b 	bl	8004680 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f7ff fd39 	bl	80044a6 <_PreparePacket>
 8004a34:	4602      	mov	r2, r0
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	611a      	str	r2, [r3, #16]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3728      	adds	r7, #40	@ 0x28
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
	...

08004a54 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b08a      	sub	sp, #40	@ 0x28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	60f8      	str	r0, [r7, #12]
 8004a5c:	60b9      	str	r1, [r7, #8]
 8004a5e:	607a      	str	r2, [r7, #4]
 8004a60:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8004a66:	2301      	movs	r3, #1
 8004a68:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a6e:	e007      	b.n	8004a80 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8004a70:	6a3a      	ldr	r2, [r7, #32]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a78:	623b      	str	r3, [r7, #32]
    Width++;
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8004a80:	6a3a      	ldr	r2, [r7, #32]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d2f3      	bcs.n	8004a70 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d901      	bls.n	8004a94 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8004a94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d000      	beq.n	8004aa0 <_PrintUnsigned+0x4c>
 8004a9e:	e01f      	b.n	8004ae0 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004aa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01c      	beq.n	8004ae0 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa8:	f003 0302 	and.w	r3, r3, #2
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <_PrintUnsigned+0x68>
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d102      	bne.n	8004abc <_PrintUnsigned+0x68>
        c = '0';
 8004ab6:	2330      	movs	r3, #48	@ 0x30
 8004ab8:	76fb      	strb	r3, [r7, #27]
 8004aba:	e001      	b.n	8004ac0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8004abc:	2320      	movs	r3, #32
 8004abe:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ac0:	e007      	b.n	8004ad2 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ac4:	3b01      	subs	r3, #1
 8004ac6:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004ac8:	7efb      	ldrb	r3, [r7, #27]
 8004aca:	4619      	mov	r1, r3
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7ff ff45 	bl	800495c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <_PrintUnsigned+0x8c>
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d3f0      	bcc.n	8004ac2 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d903      	bls.n	8004aee <_PrintUnsigned+0x9a>
      NumDigits--;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	e009      	b.n	8004b02 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af6:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d200      	bcs.n	8004b02 <_PrintUnsigned+0xae>
        break;
 8004b00:	e005      	b.n	8004b0e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	fb02 f303 	mul.w	r3, r2, r3
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004b0c:	e7e8      	b.n	8004ae0 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b16:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b1c:	fb02 f303 	mul.w	r3, r2, r3
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004b26:	4a15      	ldr	r2, [pc, #84]	@ (8004b7c <_PrintUnsigned+0x128>)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	4413      	add	r3, r2
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	4619      	mov	r1, r3
 8004b30:	68f8      	ldr	r0, [r7, #12]
 8004b32:	f7ff ff13 	bl	800495c <_StoreChar>
    Digit /= Base;
 8004b36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1e3      	bne.n	8004b0e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8004b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b48:	f003 0301 	and.w	r3, r3, #1
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d011      	beq.n	8004b74 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8004b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b56:	e006      	b.n	8004b66 <_PrintUnsigned+0x112>
        FieldWidth--;
 8004b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8004b5e:	2120      	movs	r1, #32
 8004b60:	68f8      	ldr	r0, [r7, #12]
 8004b62:	f7ff fefb 	bl	800495c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d003      	beq.n	8004b74 <_PrintUnsigned+0x120>
 8004b6c:	69fa      	ldr	r2, [r7, #28]
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d3f1      	bcc.n	8004b58 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8004b74:	bf00      	nop
 8004b76:	3728      	adds	r7, #40	@ 0x28
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	08006118 	.word	0x08006118

08004b80 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af02      	add	r7, sp, #8
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
 8004b8c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	bfb8      	it	lt
 8004b94:	425b      	neglt	r3, r3
 8004b96:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004b9c:	e007      	b.n	8004bae <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004ba6:	613b      	str	r3, [r7, #16]
    Width++;
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	3301      	adds	r3, #1
 8004bac:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	daf3      	bge.n	8004b9e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004bb6:	683a      	ldr	r2, [r7, #0]
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d901      	bls.n	8004bc2 <_PrintInt+0x42>
    Width = NumDigits;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004bc2:	6a3b      	ldr	r3, [r7, #32]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <_PrintInt+0x5e>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	db04      	blt.n	8004bd8 <_PrintInt+0x58>
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <_PrintInt+0x5e>
    FieldWidth--;
 8004bd8:	6a3b      	ldr	r3, [r7, #32]
 8004bda:	3b01      	subs	r3, #1
 8004bdc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8004bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <_PrintInt+0x6e>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d016      	beq.n	8004c1c <_PrintInt+0x9c>
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004bf8:	6a3b      	ldr	r3, [r7, #32]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00e      	beq.n	8004c1c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004bfe:	e006      	b.n	8004c0e <_PrintInt+0x8e>
        FieldWidth--;
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	3b01      	subs	r3, #1
 8004c04:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004c06:	2120      	movs	r1, #32
 8004c08:	68f8      	ldr	r0, [r7, #12]
 8004c0a:	f7ff fea7 	bl	800495c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c0e:	6a3b      	ldr	r3, [r7, #32]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d003      	beq.n	8004c1c <_PrintInt+0x9c>
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d3f1      	bcc.n	8004c00 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	da07      	bge.n	8004c32 <_PrintInt+0xb2>
    v = -v;
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	425b      	negs	r3, r3
 8004c26:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004c28:	212d      	movs	r1, #45	@ 0x2d
 8004c2a:	68f8      	ldr	r0, [r7, #12]
 8004c2c:	f7ff fe96 	bl	800495c <_StoreChar>
 8004c30:	e008      	b.n	8004c44 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8004c3c:	212b      	movs	r1, #43	@ 0x2b
 8004c3e:	68f8      	ldr	r0, [r7, #12]
 8004c40:	f7ff fe8c 	bl	800495c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8004c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c46:	f003 0302 	and.w	r3, r3, #2
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d019      	beq.n	8004c82 <_PrintInt+0x102>
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d114      	bne.n	8004c82 <_PrintInt+0x102>
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d111      	bne.n	8004c82 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8004c5e:	6a3b      	ldr	r3, [r7, #32]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c64:	e006      	b.n	8004c74 <_PrintInt+0xf4>
        FieldWidth--;
 8004c66:	6a3b      	ldr	r3, [r7, #32]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8004c6c:	2130      	movs	r1, #48	@ 0x30
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f7ff fe74 	bl	800495c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004c74:	6a3b      	ldr	r3, [r7, #32]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <_PrintInt+0x102>
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	6a3b      	ldr	r3, [r7, #32]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d3f1      	bcc.n	8004c66 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8004c82:	68b9      	ldr	r1, [r7, #8]
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	9301      	str	r3, [sp, #4]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	687a      	ldr	r2, [r7, #4]
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fedf 	bl	8004a54 <_PrintUnsigned>
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b098      	sub	sp, #96	@ 0x60
 8004ca4:	af02      	add	r7, sp, #8
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004cac:	f3ef 8311 	mrs	r3, BASEPRI
 8004cb0:	f04f 0120 	mov.w	r1, #32
 8004cb4:	f381 8811 	msr	BASEPRI, r1
 8004cb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cba:	48b7      	ldr	r0, [pc, #732]	@ (8004f98 <_VPrintTarget+0x2f8>)
 8004cbc:	f7ff fbf3 	bl	80044a6 <_PreparePacket>
 8004cc0:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004cc2:	4bb5      	ldr	r3, [pc, #724]	@ (8004f98 <_VPrintTarget+0x2f8>)
 8004cc4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 8004cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ccc:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	781b      	ldrb	r3, [r3, #0]
 8004cdc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	f000 81a8 	beq.w	8005040 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004cf0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004cf4:	2b25      	cmp	r3, #37	@ 0x25
 8004cf6:	f040 8195 	bne.w	8005024 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8004d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004d0e:	3b23      	subs	r3, #35	@ 0x23
 8004d10:	2b0d      	cmp	r3, #13
 8004d12:	d83f      	bhi.n	8004d94 <_VPrintTarget+0xf4>
 8004d14:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <_VPrintTarget+0x7c>)
 8004d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1a:	bf00      	nop
 8004d1c:	08004d85 	.word	0x08004d85
 8004d20:	08004d95 	.word	0x08004d95
 8004d24:	08004d95 	.word	0x08004d95
 8004d28:	08004d95 	.word	0x08004d95
 8004d2c:	08004d95 	.word	0x08004d95
 8004d30:	08004d95 	.word	0x08004d95
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004d75 	.word	0x08004d75
 8004d40:	08004d95 	.word	0x08004d95
 8004d44:	08004d55 	.word	0x08004d55
 8004d48:	08004d95 	.word	0x08004d95
 8004d4c:	08004d95 	.word	0x08004d95
 8004d50:	08004d65 	.word	0x08004d65
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8004d54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	e01a      	b.n	8004d9a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8004d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d66:	f043 0302 	orr.w	r3, r3, #2
 8004d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	e012      	b.n	8004d9a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8004d74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d76:	f043 0304 	orr.w	r3, r3, #4
 8004d7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	3301      	adds	r3, #1
 8004d80:	60fb      	str	r3, [r7, #12]
 8004d82:	e00a      	b.n	8004d9a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8004d84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d86:	f043 0308 	orr.w	r3, r3, #8
 8004d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e002      	b.n	8004d9a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8004d94:	2300      	movs	r3, #0
 8004d96:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d98:	bf00      	nop
        }
      } while (v);
 8004d9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1b0      	bne.n	8004d02 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004da0:	2300      	movs	r3, #0
 8004da2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8004dac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004db0:	2b2f      	cmp	r3, #47	@ 0x2f
 8004db2:	d912      	bls.n	8004dda <_VPrintTarget+0x13a>
 8004db4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004db8:	2b39      	cmp	r3, #57	@ 0x39
 8004dba:	d80e      	bhi.n	8004dda <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004dc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	005b      	lsls	r3, r3, #1
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3b30      	subs	r3, #48	@ 0x30
 8004dd6:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004dd8:	e7e4      	b.n	8004da4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004de6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004dea:	2b2e      	cmp	r3, #46	@ 0x2e
 8004dec:	d11d      	bne.n	8004e2a <_VPrintTarget+0x18a>
        sFormat++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3301      	adds	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8004dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e00:	2b2f      	cmp	r3, #47	@ 0x2f
 8004e02:	d912      	bls.n	8004e2a <_VPrintTarget+0x18a>
 8004e04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e08:	2b39      	cmp	r3, #57	@ 0x39
 8004e0a:	d80e      	bhi.n	8004e2a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	3301      	adds	r3, #1
 8004e10:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004e12:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e14:	4613      	mov	r3, r2
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	4413      	add	r3, r2
 8004e1a:	005b      	lsls	r3, r3, #1
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e22:	4413      	add	r3, r2
 8004e24:	3b30      	subs	r3, #48	@ 0x30
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004e28:	e7e4      	b.n	8004df4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004e32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e36:	2b6c      	cmp	r3, #108	@ 0x6c
 8004e38:	d003      	beq.n	8004e42 <_VPrintTarget+0x1a2>
 8004e3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e3e:	2b68      	cmp	r3, #104	@ 0x68
 8004e40:	d107      	bne.n	8004e52 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8004e50:	e7ef      	b.n	8004e32 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8004e52:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004e56:	2b25      	cmp	r3, #37	@ 0x25
 8004e58:	f000 80d8 	beq.w	800500c <_VPrintTarget+0x36c>
 8004e5c:	2b25      	cmp	r3, #37	@ 0x25
 8004e5e:	f2c0 80dc 	blt.w	800501a <_VPrintTarget+0x37a>
 8004e62:	2b78      	cmp	r3, #120	@ 0x78
 8004e64:	f300 80d9 	bgt.w	800501a <_VPrintTarget+0x37a>
 8004e68:	2b58      	cmp	r3, #88	@ 0x58
 8004e6a:	f2c0 80d6 	blt.w	800501a <_VPrintTarget+0x37a>
 8004e6e:	3b58      	subs	r3, #88	@ 0x58
 8004e70:	2b20      	cmp	r3, #32
 8004e72:	f200 80d2 	bhi.w	800501a <_VPrintTarget+0x37a>
 8004e76:	a201      	add	r2, pc, #4	@ (adr r2, 8004e7c <_VPrintTarget+0x1dc>)
 8004e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e7c:	08004f73 	.word	0x08004f73
 8004e80:	0800501b 	.word	0x0800501b
 8004e84:	0800501b 	.word	0x0800501b
 8004e88:	0800501b 	.word	0x0800501b
 8004e8c:	0800501b 	.word	0x0800501b
 8004e90:	0800501b 	.word	0x0800501b
 8004e94:	0800501b 	.word	0x0800501b
 8004e98:	0800501b 	.word	0x0800501b
 8004e9c:	0800501b 	.word	0x0800501b
 8004ea0:	0800501b 	.word	0x0800501b
 8004ea4:	0800501b 	.word	0x0800501b
 8004ea8:	08004f01 	.word	0x08004f01
 8004eac:	08004f27 	.word	0x08004f27
 8004eb0:	0800501b 	.word	0x0800501b
 8004eb4:	0800501b 	.word	0x0800501b
 8004eb8:	0800501b 	.word	0x0800501b
 8004ebc:	0800501b 	.word	0x0800501b
 8004ec0:	0800501b 	.word	0x0800501b
 8004ec4:	0800501b 	.word	0x0800501b
 8004ec8:	0800501b 	.word	0x0800501b
 8004ecc:	0800501b 	.word	0x0800501b
 8004ed0:	0800501b 	.word	0x0800501b
 8004ed4:	0800501b 	.word	0x0800501b
 8004ed8:	0800501b 	.word	0x0800501b
 8004edc:	08004fe7 	.word	0x08004fe7
 8004ee0:	0800501b 	.word	0x0800501b
 8004ee4:	0800501b 	.word	0x0800501b
 8004ee8:	08004f9d 	.word	0x08004f9d
 8004eec:	0800501b 	.word	0x0800501b
 8004ef0:	08004f4d 	.word	0x08004f4d
 8004ef4:	0800501b 	.word	0x0800501b
 8004ef8:	0800501b 	.word	0x0800501b
 8004efc:	08004f73 	.word	0x08004f73
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	1d19      	adds	r1, r3, #4
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6011      	str	r1, [r2, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f10:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004f14:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004f18:	f107 0310 	add.w	r3, r7, #16
 8004f1c:	4611      	mov	r1, r2
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fd1c 	bl	800495c <_StoreChar>
        break;
 8004f24:	e07a      	b.n	800501c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	1d19      	adds	r1, r3, #4
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6011      	str	r1, [r2, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f34:	f107 0010 	add.w	r0, r7, #16
 8004f38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f3a:	9301      	str	r3, [sp, #4]
 8004f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f3e:	9300      	str	r3, [sp, #0]
 8004f40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f42:	220a      	movs	r2, #10
 8004f44:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f46:	f7ff fe1b 	bl	8004b80 <_PrintInt>
        break;
 8004f4a:	e067      	b.n	800501c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	1d19      	adds	r1, r3, #4
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6011      	str	r1, [r2, #0]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004f5a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f5c:	f107 0010 	add.w	r0, r7, #16
 8004f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f62:	9301      	str	r3, [sp, #4]
 8004f64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f66:	9300      	str	r3, [sp, #0]
 8004f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f6a:	220a      	movs	r2, #10
 8004f6c:	f7ff fd72 	bl	8004a54 <_PrintUnsigned>
        break;
 8004f70:	e054      	b.n	800501c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	1d19      	adds	r1, r3, #4
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	6011      	str	r1, [r2, #0]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004f80:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004f82:	f107 0010 	add.w	r0, r7, #16
 8004f86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f88:	9301      	str	r3, [sp, #4]
 8004f8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f90:	2210      	movs	r2, #16
 8004f92:	f7ff fd5f 	bl	8004a54 <_PrintUnsigned>
        break;
 8004f96:	e041      	b.n	800501c <_VPrintTarget+0x37c>
 8004f98:	2001c5a8 	.word	0x2001c5a8
      case 's':
        s = va_arg(*pParamList, const char*);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	1d19      	adds	r1, r3, #4
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004faa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d101      	bne.n	8004fb4 <_VPrintTarget+0x314>
          s = "(null)";
 8004fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80050dc <_VPrintTarget+0x43c>)
 8004fb2:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004fb4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004fbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004fc2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004fca:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004fce:	f107 0310 	add.w	r3, r7, #16
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff fcc1 	bl	800495c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fde:	d9e9      	bls.n	8004fb4 <_VPrintTarget+0x314>
        break;
 8004fe0:	e01c      	b.n	800501c <_VPrintTarget+0x37c>
            break;
 8004fe2:	bf00      	nop
        break;
 8004fe4:	e01a      	b.n	800501c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	1d19      	adds	r1, r3, #4
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6011      	str	r1, [r2, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004ff4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ff6:	f107 0010 	add.w	r0, r7, #16
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	9301      	str	r3, [sp, #4]
 8004ffe:	2308      	movs	r3, #8
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	2308      	movs	r3, #8
 8005004:	2210      	movs	r2, #16
 8005006:	f7ff fd25 	bl	8004a54 <_PrintUnsigned>
        break;
 800500a:	e007      	b.n	800501c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800500c:	f107 0310 	add.w	r3, r7, #16
 8005010:	2125      	movs	r1, #37	@ 0x25
 8005012:	4618      	mov	r0, r3
 8005014:	f7ff fca2 	bl	800495c <_StoreChar>
        break;
 8005018:	e000      	b.n	800501c <_VPrintTarget+0x37c>
      default:
        break;
 800501a:	bf00      	nop
      }
      sFormat++;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	3301      	adds	r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	e007      	b.n	8005034 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005024:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005028:	f107 0310 	add.w	r3, r7, #16
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fc94 	bl	800495c <_StoreChar>
    }
  } while (*sFormat);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	781b      	ldrb	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f47f ae4d 	bne.w	8004cd8 <_VPrintTarget+0x38>
 800503e:	e000      	b.n	8005042 <_VPrintTarget+0x3a2>
      break;
 8005040:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005042:	6a3b      	ldr	r3, [r7, #32]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d041      	beq.n	80050cc <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005048:	6a3a      	ldr	r2, [r7, #32]
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005058:	e00b      	b.n	8005072 <_VPrintTarget+0x3d2>
 800505a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505c:	b2da      	uxtb	r2, r3
 800505e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005060:	1c59      	adds	r1, r3, #1
 8005062:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005064:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005068:	b2d2      	uxtb	r2, r2
 800506a:	701a      	strb	r2, [r3, #0]
 800506c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506e:	09db      	lsrs	r3, r3, #7
 8005070:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005074:	2b7f      	cmp	r3, #127	@ 0x7f
 8005076:	d8f0      	bhi.n	800505a <_VPrintTarget+0x3ba>
 8005078:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800507e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005080:	b2d2      	uxtb	r2, r2
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005086:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	637b      	str	r3, [r7, #52]	@ 0x34
 800508c:	2300      	movs	r3, #0
 800508e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005090:	e00b      	b.n	80050aa <_VPrintTarget+0x40a>
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	b2da      	uxtb	r2, r3
 8005096:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005098:	1c59      	adds	r1, r3, #1
 800509a:	6379      	str	r1, [r7, #52]	@ 0x34
 800509c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
 80050a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a6:	09db      	lsrs	r3, r3, #7
 80050a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80050aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ae:	d8f0      	bhi.n	8005092 <_VPrintTarget+0x3f2>
 80050b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b2:	1c5a      	adds	r2, r3, #1
 80050b4:	637a      	str	r2, [r7, #52]	@ 0x34
 80050b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050b8:	b2d2      	uxtb	r2, r2
 80050ba:	701a      	strb	r2, [r3, #0]
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	6979      	ldr	r1, [r7, #20]
 80050c4:	221a      	movs	r2, #26
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff fada 	bl	8004680 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80050cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ce:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80050d2:	bf00      	nop
 80050d4:	3758      	adds	r7, #88	@ 0x58
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}
 80050da:	bf00      	nop
 80050dc:	080060c8 	.word	0x080060c8

080050e0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80050ee:	2300      	movs	r3, #0
 80050f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80050f4:	4917      	ldr	r1, [pc, #92]	@ (8005154 <SEGGER_SYSVIEW_Init+0x74>)
 80050f6:	4818      	ldr	r0, [pc, #96]	@ (8005158 <SEGGER_SYSVIEW_Init+0x78>)
 80050f8:	f7ff f8cc 	bl	8004294 <SEGGER_RTT_AllocUpBuffer>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	4b16      	ldr	r3, [pc, #88]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005102:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005104:	4b15      	ldr	r3, [pc, #84]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005106:	785a      	ldrb	r2, [r3, #1]
 8005108:	4b14      	ldr	r3, [pc, #80]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 800510a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800510c:	4b13      	ldr	r3, [pc, #76]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 800510e:	7e1b      	ldrb	r3, [r3, #24]
 8005110:	4618      	mov	r0, r3
 8005112:	2300      	movs	r3, #0
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	2308      	movs	r3, #8
 8005118:	4a11      	ldr	r2, [pc, #68]	@ (8005160 <SEGGER_SYSVIEW_Init+0x80>)
 800511a:	490f      	ldr	r1, [pc, #60]	@ (8005158 <SEGGER_SYSVIEW_Init+0x78>)
 800511c:	f7ff f93e 	bl	800439c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005120:	4b0e      	ldr	r3, [pc, #56]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005122:	2200      	movs	r2, #0
 8005124:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005126:	4b0f      	ldr	r3, [pc, #60]	@ (8005164 <SEGGER_SYSVIEW_Init+0x84>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 800512c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800512e:	4a0b      	ldr	r2, [pc, #44]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005134:	4a09      	ldr	r2, [pc, #36]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005140:	4a06      	ldr	r2, [pc, #24]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005146:	4b05      	ldr	r3, [pc, #20]	@ (800515c <SEGGER_SYSVIEW_Init+0x7c>)
 8005148:	2200      	movs	r2, #0
 800514a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800514c:	bf00      	nop
 800514e:	3710      	adds	r7, #16
 8005150:	46bd      	mov	sp, r7
 8005152:	bd80      	pop	{r7, pc}
 8005154:	2001b570 	.word	0x2001b570
 8005158:	080060d0 	.word	0x080060d0
 800515c:	2001c578 	.word	0x2001c578
 8005160:	2001c570 	.word	0x2001c570
 8005164:	e0001004 	.word	0xe0001004

08005168 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005168:	b480      	push	{r7}
 800516a:	b083      	sub	sp, #12
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005170:	4a04      	ldr	r2, [pc, #16]	@ (8005184 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6113      	str	r3, [r2, #16]
}
 8005176:	bf00      	nop
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	2001c578 	.word	0x2001c578

08005188 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005190:	f3ef 8311 	mrs	r3, BASEPRI
 8005194:	f04f 0120 	mov.w	r1, #32
 8005198:	f381 8811 	msr	BASEPRI, r1
 800519c:	60fb      	str	r3, [r7, #12]
 800519e:	4808      	ldr	r0, [pc, #32]	@ (80051c0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80051a0:	f7ff f981 	bl	80044a6 <_PreparePacket>
 80051a4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f7ff fa68 	bl	8004680 <_SendPacket>
  RECORD_END();
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f383 8811 	msr	BASEPRI, r3
}
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	2001c5a8 	.word	0x2001c5a8

080051c4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b088      	sub	sp, #32
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80051ce:	f3ef 8311 	mrs	r3, BASEPRI
 80051d2:	f04f 0120 	mov.w	r1, #32
 80051d6:	f381 8811 	msr	BASEPRI, r1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	4816      	ldr	r0, [pc, #88]	@ (8005238 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80051de:	f7ff f962 	bl	80044a6 <_PreparePacket>
 80051e2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	61fb      	str	r3, [r7, #28]
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	61bb      	str	r3, [r7, #24]
 80051f0:	e00b      	b.n	800520a <SEGGER_SYSVIEW_RecordU32+0x46>
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	1c59      	adds	r1, r3, #1
 80051fa:	61f9      	str	r1, [r7, #28]
 80051fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005200:	b2d2      	uxtb	r2, r2
 8005202:	701a      	strb	r2, [r3, #0]
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	09db      	lsrs	r3, r3, #7
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	69bb      	ldr	r3, [r7, #24]
 800520c:	2b7f      	cmp	r3, #127	@ 0x7f
 800520e:	d8f0      	bhi.n	80051f2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005210:	69fb      	ldr	r3, [r7, #28]
 8005212:	1c5a      	adds	r2, r3, #1
 8005214:	61fa      	str	r2, [r7, #28]
 8005216:	69ba      	ldr	r2, [r7, #24]
 8005218:	b2d2      	uxtb	r2, r2
 800521a:	701a      	strb	r2, [r3, #0]
 800521c:	69fb      	ldr	r3, [r7, #28]
 800521e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	68f9      	ldr	r1, [r7, #12]
 8005224:	6938      	ldr	r0, [r7, #16]
 8005226:	f7ff fa2b 	bl	8004680 <_SendPacket>
  RECORD_END();
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f383 8811 	msr	BASEPRI, r3
}
 8005230:	bf00      	nop
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	2001c5a8 	.word	0x2001c5a8

0800523c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	@ 0x30
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005248:	f3ef 8311 	mrs	r3, BASEPRI
 800524c:	f04f 0120 	mov.w	r1, #32
 8005250:	f381 8811 	msr	BASEPRI, r1
 8005254:	61fb      	str	r3, [r7, #28]
 8005256:	4825      	ldr	r0, [pc, #148]	@ (80052ec <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005258:	f7ff f925 	bl	80044a6 <_PreparePacket>
 800525c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	62bb      	str	r3, [r7, #40]	@ 0x28
 800526a:	e00b      	b.n	8005284 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	b2da      	uxtb	r2, r3
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005276:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800527a:	b2d2      	uxtb	r2, r2
 800527c:	701a      	strb	r2, [r3, #0]
 800527e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005280:	09db      	lsrs	r3, r3, #7
 8005282:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005286:	2b7f      	cmp	r3, #127	@ 0x7f
 8005288:	d8f0      	bhi.n	800526c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005298:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	627b      	str	r3, [r7, #36]	@ 0x24
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	623b      	str	r3, [r7, #32]
 80052a2:	e00b      	b.n	80052bc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	b2da      	uxtb	r2, r3
 80052a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052aa:	1c59      	adds	r1, r3, #1
 80052ac:	6279      	str	r1, [r7, #36]	@ 0x24
 80052ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	6a3b      	ldr	r3, [r7, #32]
 80052b8:	09db      	lsrs	r3, r3, #7
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
 80052be:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c0:	d8f0      	bhi.n	80052a4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	627a      	str	r2, [r7, #36]	@ 0x24
 80052c8:	6a3a      	ldr	r2, [r7, #32]
 80052ca:	b2d2      	uxtb	r2, r2
 80052cc:	701a      	strb	r2, [r3, #0]
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	69b8      	ldr	r0, [r7, #24]
 80052d8:	f7ff f9d2 	bl	8004680 <_SendPacket>
  RECORD_END();
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f383 8811 	msr	BASEPRI, r3
}
 80052e2:	bf00      	nop
 80052e4:	3730      	adds	r7, #48	@ 0x30
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	2001c5a8 	.word	0x2001c5a8

080052f0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08c      	sub	sp, #48	@ 0x30
 80052f4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80052f6:	4b58      	ldr	r3, [pc, #352]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 80052f8:	2201      	movs	r2, #1
 80052fa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80052fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005300:	f04f 0120 	mov.w	r1, #32
 8005304:	f381 8811 	msr	BASEPRI, r1
 8005308:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800530a:	4b53      	ldr	r3, [pc, #332]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	220a      	movs	r2, #10
 8005310:	4952      	ldr	r1, [pc, #328]	@ (800545c <SEGGER_SYSVIEW_Start+0x16c>)
 8005312:	4618      	mov	r0, r3
 8005314:	f7fa ff64 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800531e:	200a      	movs	r0, #10
 8005320:	f7ff ff32 	bl	8005188 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005324:	f3ef 8311 	mrs	r3, BASEPRI
 8005328:	f04f 0120 	mov.w	r1, #32
 800532c:	f381 8811 	msr	BASEPRI, r1
 8005330:	60bb      	str	r3, [r7, #8]
 8005332:	484b      	ldr	r0, [pc, #300]	@ (8005460 <SEGGER_SYSVIEW_Start+0x170>)
 8005334:	f7ff f8b7 	bl	80044a6 <_PreparePacket>
 8005338:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005342:	4b45      	ldr	r3, [pc, #276]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005348:	e00b      	b.n	8005362 <SEGGER_SYSVIEW_Start+0x72>
 800534a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534c:	b2da      	uxtb	r2, r3
 800534e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005350:	1c59      	adds	r1, r3, #1
 8005352:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005354:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005358:	b2d2      	uxtb	r2, r2
 800535a:	701a      	strb	r2, [r3, #0]
 800535c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800535e:	09db      	lsrs	r3, r3, #7
 8005360:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005364:	2b7f      	cmp	r3, #127	@ 0x7f
 8005366:	d8f0      	bhi.n	800534a <SEGGER_SYSVIEW_Start+0x5a>
 8005368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800536e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
 8005374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005376:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	627b      	str	r3, [r7, #36]	@ 0x24
 800537c:	4b36      	ldr	r3, [pc, #216]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	623b      	str	r3, [r7, #32]
 8005382:	e00b      	b.n	800539c <SEGGER_SYSVIEW_Start+0xac>
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	b2da      	uxtb	r2, r3
 8005388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	6279      	str	r1, [r7, #36]	@ 0x24
 800538e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005392:	b2d2      	uxtb	r2, r2
 8005394:	701a      	strb	r2, [r3, #0]
 8005396:	6a3b      	ldr	r3, [r7, #32]
 8005398:	09db      	lsrs	r3, r3, #7
 800539a:	623b      	str	r3, [r7, #32]
 800539c:	6a3b      	ldr	r3, [r7, #32]
 800539e:	2b7f      	cmp	r3, #127	@ 0x7f
 80053a0:	d8f0      	bhi.n	8005384 <SEGGER_SYSVIEW_Start+0x94>
 80053a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80053a8:	6a3a      	ldr	r2, [r7, #32]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	61fb      	str	r3, [r7, #28]
 80053b6:	4b28      	ldr	r3, [pc, #160]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	e00b      	b.n	80053d6 <SEGGER_SYSVIEW_Start+0xe6>
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	61f9      	str	r1, [r7, #28]
 80053c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053cc:	b2d2      	uxtb	r2, r2
 80053ce:	701a      	strb	r2, [r3, #0]
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	09db      	lsrs	r3, r3, #7
 80053d4:	61bb      	str	r3, [r7, #24]
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80053da:	d8f0      	bhi.n	80053be <SEGGER_SYSVIEW_Start+0xce>
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	1c5a      	adds	r2, r3, #1
 80053e0:	61fa      	str	r2, [r7, #28]
 80053e2:	69ba      	ldr	r2, [r7, #24]
 80053e4:	b2d2      	uxtb	r2, r2
 80053e6:	701a      	strb	r2, [r3, #0]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	617b      	str	r3, [r7, #20]
 80053f0:	2300      	movs	r3, #0
 80053f2:	613b      	str	r3, [r7, #16]
 80053f4:	e00b      	b.n	800540e <SEGGER_SYSVIEW_Start+0x11e>
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	b2da      	uxtb	r2, r3
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	1c59      	adds	r1, r3, #1
 80053fe:	6179      	str	r1, [r7, #20]
 8005400:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005404:	b2d2      	uxtb	r2, r2
 8005406:	701a      	strb	r2, [r3, #0]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	09db      	lsrs	r3, r3, #7
 800540c:	613b      	str	r3, [r7, #16]
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	2b7f      	cmp	r3, #127	@ 0x7f
 8005412:	d8f0      	bhi.n	80053f6 <SEGGER_SYSVIEW_Start+0x106>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	617a      	str	r2, [r7, #20]
 800541a:	693a      	ldr	r2, [r7, #16]
 800541c:	b2d2      	uxtb	r2, r2
 800541e:	701a      	strb	r2, [r3, #0]
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005424:	2218      	movs	r2, #24
 8005426:	6839      	ldr	r1, [r7, #0]
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f7ff f929 	bl	8004680 <_SendPacket>
      RECORD_END();
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005434:	4b08      	ldr	r3, [pc, #32]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 8005436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800543c:	4b06      	ldr	r3, [pc, #24]	@ (8005458 <SEGGER_SYSVIEW_Start+0x168>)
 800543e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005440:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005442:	f000 f9eb 	bl	800581c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005446:	f000 f9b1 	bl	80057ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800544a:	f000 fcc1 	bl	8005dd0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800544e:	bf00      	nop
 8005450:	3730      	adds	r7, #48	@ 0x30
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	2001c578 	.word	0x2001c578
 800545c:	0800610c 	.word	0x0800610c
 8005460:	2001c5a8 	.word	0x2001c5a8

08005464 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800546a:	f3ef 8311 	mrs	r3, BASEPRI
 800546e:	f04f 0120 	mov.w	r1, #32
 8005472:	f381 8811 	msr	BASEPRI, r1
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	480b      	ldr	r0, [pc, #44]	@ (80054a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800547a:	f7ff f814 	bl	80044a6 <_PreparePacket>
 800547e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005480:	4b0a      	ldr	r3, [pc, #40]	@ (80054ac <SEGGER_SYSVIEW_Stop+0x48>)
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d007      	beq.n	8005498 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005488:	220b      	movs	r2, #11
 800548a:	6839      	ldr	r1, [r7, #0]
 800548c:	6838      	ldr	r0, [r7, #0]
 800548e:	f7ff f8f7 	bl	8004680 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005492:	4b06      	ldr	r3, [pc, #24]	@ (80054ac <SEGGER_SYSVIEW_Stop+0x48>)
 8005494:	2200      	movs	r2, #0
 8005496:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f383 8811 	msr	BASEPRI, r3
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	2001c5a8 	.word	0x2001c5a8
 80054ac:	2001c578 	.word	0x2001c578

080054b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08c      	sub	sp, #48	@ 0x30
 80054b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80054b6:	f3ef 8311 	mrs	r3, BASEPRI
 80054ba:	f04f 0120 	mov.w	r1, #32
 80054be:	f381 8811 	msr	BASEPRI, r1
 80054c2:	60fb      	str	r3, [r7, #12]
 80054c4:	4845      	ldr	r0, [pc, #276]	@ (80055dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80054c6:	f7fe ffee 	bl	80044a6 <_PreparePacket>
 80054ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d4:	4b42      	ldr	r3, [pc, #264]	@ (80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054da:	e00b      	b.n	80054f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054e2:	1c59      	adds	r1, r3, #1
 80054e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80054e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054ea:	b2d2      	uxtb	r2, r2
 80054ec:	701a      	strb	r2, [r3, #0]
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	09db      	lsrs	r3, r3, #7
 80054f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80054f8:	d8f0      	bhi.n	80054dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80054fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054fc:	1c5a      	adds	r2, r3, #1
 80054fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005500:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005502:	b2d2      	uxtb	r2, r2
 8005504:	701a      	strb	r2, [r3, #0]
 8005506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005508:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24
 800550e:	4b34      	ldr	r3, [pc, #208]	@ (80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	623b      	str	r3, [r7, #32]
 8005514:	e00b      	b.n	800552e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	b2da      	uxtb	r2, r3
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	1c59      	adds	r1, r3, #1
 800551e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005520:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005524:	b2d2      	uxtb	r2, r2
 8005526:	701a      	strb	r2, [r3, #0]
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	623b      	str	r3, [r7, #32]
 800552e:	6a3b      	ldr	r3, [r7, #32]
 8005530:	2b7f      	cmp	r3, #127	@ 0x7f
 8005532:	d8f0      	bhi.n	8005516 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	1c5a      	adds	r2, r3, #1
 8005538:	627a      	str	r2, [r7, #36]	@ 0x24
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	701a      	strb	r2, [r3, #0]
 8005540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005542:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	4b25      	ldr	r3, [pc, #148]	@ (80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800554a:	691b      	ldr	r3, [r3, #16]
 800554c:	61bb      	str	r3, [r7, #24]
 800554e:	e00b      	b.n	8005568 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	b2da      	uxtb	r2, r3
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	1c59      	adds	r1, r3, #1
 8005558:	61f9      	str	r1, [r7, #28]
 800555a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800555e:	b2d2      	uxtb	r2, r2
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	09db      	lsrs	r3, r3, #7
 8005566:	61bb      	str	r3, [r7, #24]
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	2b7f      	cmp	r3, #127	@ 0x7f
 800556c:	d8f0      	bhi.n	8005550 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	61fa      	str	r2, [r7, #28]
 8005574:	69ba      	ldr	r2, [r7, #24]
 8005576:	b2d2      	uxtb	r2, r2
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	2300      	movs	r3, #0
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e00b      	b.n	80055a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	b2da      	uxtb	r2, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	6179      	str	r1, [r7, #20]
 8005592:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005596:	b2d2      	uxtb	r2, r2
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	09db      	lsrs	r3, r3, #7
 800559e:	613b      	str	r3, [r7, #16]
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80055a4:	d8f0      	bhi.n	8005588 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	617a      	str	r2, [r7, #20]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80055b6:	2218      	movs	r2, #24
 80055b8:	6879      	ldr	r1, [r7, #4]
 80055ba:	68b8      	ldr	r0, [r7, #8]
 80055bc:	f7ff f860 	bl	8004680 <_SendPacket>
  RECORD_END();
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80055c6:	4b06      	ldr	r3, [pc, #24]	@ (80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80055ce:	4b04      	ldr	r3, [pc, #16]	@ (80055e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	4798      	blx	r3
  }
}
 80055d4:	bf00      	nop
 80055d6:	3730      	adds	r7, #48	@ 0x30
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	2001c5a8 	.word	0x2001c5a8
 80055e0:	2001c578 	.word	0x2001c578

080055e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b092      	sub	sp, #72	@ 0x48
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80055ec:	f3ef 8311 	mrs	r3, BASEPRI
 80055f0:	f04f 0120 	mov.w	r1, #32
 80055f4:	f381 8811 	msr	BASEPRI, r1
 80055f8:	617b      	str	r3, [r7, #20]
 80055fa:	486a      	ldr	r0, [pc, #424]	@ (80057a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80055fc:	f7fe ff53 	bl	80044a6 <_PreparePacket>
 8005600:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	647b      	str	r3, [r7, #68]	@ 0x44
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	4b66      	ldr	r3, [pc, #408]	@ (80057a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	1ad3      	subs	r3, r2, r3
 8005614:	643b      	str	r3, [r7, #64]	@ 0x40
 8005616:	e00b      	b.n	8005630 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561a:	b2da      	uxtb	r2, r3
 800561c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561e:	1c59      	adds	r1, r3, #1
 8005620:	6479      	str	r1, [r7, #68]	@ 0x44
 8005622:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005626:	b2d2      	uxtb	r2, r2
 8005628:	701a      	strb	r2, [r3, #0]
 800562a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562c:	09db      	lsrs	r3, r3, #7
 800562e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005630:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005632:	2b7f      	cmp	r3, #127	@ 0x7f
 8005634:	d8f0      	bhi.n	8005618 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005636:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005638:	1c5a      	adds	r2, r3, #1
 800563a:	647a      	str	r2, [r7, #68]	@ 0x44
 800563c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	701a      	strb	r2, [r3, #0]
 8005642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005644:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005650:	e00b      	b.n	800566a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	b2da      	uxtb	r2, r3
 8005656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005658:	1c59      	adds	r1, r3, #1
 800565a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800565c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	701a      	strb	r2, [r3, #0]
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	09db      	lsrs	r3, r3, #7
 8005668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	2b7f      	cmp	r3, #127	@ 0x7f
 800566e:	d8f0      	bhi.n	8005652 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005676:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	2220      	movs	r2, #32
 8005686:	4619      	mov	r1, r3
 8005688:	68f8      	ldr	r0, [r7, #12]
 800568a:	f7fe fed3 	bl	8004434 <_EncodeStr>
 800568e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005690:	2209      	movs	r2, #9
 8005692:	68f9      	ldr	r1, [r7, #12]
 8005694:	6938      	ldr	r0, [r7, #16]
 8005696:	f7fe fff3 	bl	8004680 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4b40      	ldr	r3, [pc, #256]	@ (80057a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ae:	e00b      	b.n	80056c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80056b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b2:	b2da      	uxtb	r2, r3
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	1c59      	adds	r1, r3, #1
 80056b8:	6379      	str	r1, [r7, #52]	@ 0x34
 80056ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056be:	b2d2      	uxtb	r2, r2
 80056c0:	701a      	strb	r2, [r3, #0]
 80056c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056c4:	09db      	lsrs	r3, r3, #7
 80056c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80056c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80056cc:	d8f0      	bhi.n	80056b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80056ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80056d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]
 80056da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056e8:	e00b      	b.n	8005702 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80056ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ec:	b2da      	uxtb	r2, r3
 80056ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056f0:	1c59      	adds	r1, r3, #1
 80056f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056f8:	b2d2      	uxtb	r2, r2
 80056fa:	701a      	strb	r2, [r3, #0]
 80056fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fe:	09db      	lsrs	r3, r3, #7
 8005700:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005704:	2b7f      	cmp	r3, #127	@ 0x7f
 8005706:	d8f0      	bhi.n	80056ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800570e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005716:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	627b      	str	r3, [r7, #36]	@ 0x24
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	691b      	ldr	r3, [r3, #16]
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	e00b      	b.n	800573c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005724:	6a3b      	ldr	r3, [r7, #32]
 8005726:	b2da      	uxtb	r2, r3
 8005728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572a:	1c59      	adds	r1, r3, #1
 800572c:	6279      	str	r1, [r7, #36]	@ 0x24
 800572e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005732:	b2d2      	uxtb	r2, r2
 8005734:	701a      	strb	r2, [r3, #0]
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	09db      	lsrs	r3, r3, #7
 800573a:	623b      	str	r3, [r7, #32]
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005740:	d8f0      	bhi.n	8005724 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005744:	1c5a      	adds	r2, r3, #1
 8005746:	627a      	str	r2, [r7, #36]	@ 0x24
 8005748:	6a3a      	ldr	r2, [r7, #32]
 800574a:	b2d2      	uxtb	r2, r2
 800574c:	701a      	strb	r2, [r3, #0]
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	61fb      	str	r3, [r7, #28]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	695b      	ldr	r3, [r3, #20]
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	e00b      	b.n	8005776 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800575e:	69bb      	ldr	r3, [r7, #24]
 8005760:	b2da      	uxtb	r2, r3
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	1c59      	adds	r1, r3, #1
 8005766:	61f9      	str	r1, [r7, #28]
 8005768:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800576c:	b2d2      	uxtb	r2, r2
 800576e:	701a      	strb	r2, [r3, #0]
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	09db      	lsrs	r3, r3, #7
 8005774:	61bb      	str	r3, [r7, #24]
 8005776:	69bb      	ldr	r3, [r7, #24]
 8005778:	2b7f      	cmp	r3, #127	@ 0x7f
 800577a:	d8f0      	bhi.n	800575e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	1c5a      	adds	r2, r3, #1
 8005780:	61fa      	str	r2, [r7, #28]
 8005782:	69ba      	ldr	r2, [r7, #24]
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800578c:	2215      	movs	r2, #21
 800578e:	68f9      	ldr	r1, [r7, #12]
 8005790:	6938      	ldr	r0, [r7, #16]
 8005792:	f7fe ff75 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f383 8811 	msr	BASEPRI, r3
}
 800579c:	bf00      	nop
 800579e:	3748      	adds	r7, #72	@ 0x48
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	2001c5a8 	.word	0x2001c5a8
 80057a8:	2001c578 	.word	0x2001c578

080057ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80057b0:	4b07      	ldr	r3, [pc, #28]	@ (80057d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d008      	beq.n	80057ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80057b8:	4b05      	ldr	r3, [pc, #20]	@ (80057d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057ba:	6a1b      	ldr	r3, [r3, #32]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d003      	beq.n	80057ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80057c2:	4b03      	ldr	r3, [pc, #12]	@ (80057d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4798      	blx	r3
  }
}
 80057ca:	bf00      	nop
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	2001c578 	.word	0x2001c578

080057d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057dc:	f3ef 8311 	mrs	r3, BASEPRI
 80057e0:	f04f 0120 	mov.w	r1, #32
 80057e4:	f381 8811 	msr	BASEPRI, r1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	480b      	ldr	r0, [pc, #44]	@ (8005818 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80057ec:	f7fe fe5b 	bl	80044a6 <_PreparePacket>
 80057f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80057f2:	2280      	movs	r2, #128	@ 0x80
 80057f4:	6879      	ldr	r1, [r7, #4]
 80057f6:	6938      	ldr	r0, [r7, #16]
 80057f8:	f7fe fe1c 	bl	8004434 <_EncodeStr>
 80057fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80057fe:	220e      	movs	r2, #14
 8005800:	68f9      	ldr	r1, [r7, #12]
 8005802:	6938      	ldr	r0, [r7, #16]
 8005804:	f7fe ff3c 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f383 8811 	msr	BASEPRI, r3
}
 800580e:	bf00      	nop
 8005810:	3718      	adds	r7, #24
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	2001c5a8 	.word	0x2001c5a8

0800581c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800581c:	b590      	push	{r4, r7, lr}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005822:	4b15      	ldr	r3, [pc, #84]	@ (8005878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005824:	6a1b      	ldr	r3, [r3, #32]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01a      	beq.n	8005860 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800582a:	4b13      	ldr	r3, [pc, #76]	@ (8005878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800582c:	6a1b      	ldr	r3, [r3, #32]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d015      	beq.n	8005860 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005834:	4b10      	ldr	r3, [pc, #64]	@ (8005878 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005836:	6a1b      	ldr	r3, [r3, #32]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4798      	blx	r3
 800583c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005840:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005842:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	000a      	movs	r2, r1
 8005850:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005852:	4613      	mov	r3, r2
 8005854:	461a      	mov	r2, r3
 8005856:	4621      	mov	r1, r4
 8005858:	200d      	movs	r0, #13
 800585a:	f7ff fcef 	bl	800523c <SEGGER_SYSVIEW_RecordU32x2>
 800585e:	e006      	b.n	800586e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005860:	4b06      	ldr	r3, [pc, #24]	@ (800587c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4619      	mov	r1, r3
 8005866:	200c      	movs	r0, #12
 8005868:	f7ff fcac 	bl	80051c4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800586c:	bf00      	nop
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	bd90      	pop	{r4, r7, pc}
 8005876:	bf00      	nop
 8005878:	2001c578 	.word	0x2001c578
 800587c:	e0001004 	.word	0xe0001004

08005880 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005886:	f3ef 8311 	mrs	r3, BASEPRI
 800588a:	f04f 0120 	mov.w	r1, #32
 800588e:	f381 8811 	msr	BASEPRI, r1
 8005892:	60fb      	str	r3, [r7, #12]
 8005894:	4819      	ldr	r0, [pc, #100]	@ (80058fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005896:	f7fe fe06 	bl	80044a6 <_PreparePacket>
 800589a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80058a0:	4b17      	ldr	r3, [pc, #92]	@ (8005900 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	613b      	str	r3, [r7, #16]
 80058b2:	e00b      	b.n	80058cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	1c59      	adds	r1, r3, #1
 80058bc:	6179      	str	r1, [r7, #20]
 80058be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058c2:	b2d2      	uxtb	r2, r2
 80058c4:	701a      	strb	r2, [r3, #0]
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	09db      	lsrs	r3, r3, #7
 80058ca:	613b      	str	r3, [r7, #16]
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80058d0:	d8f0      	bhi.n	80058b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	1c5a      	adds	r2, r3, #1
 80058d6:	617a      	str	r2, [r7, #20]
 80058d8:	693a      	ldr	r2, [r7, #16]
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80058e2:	2202      	movs	r2, #2
 80058e4:	6879      	ldr	r1, [r7, #4]
 80058e6:	68b8      	ldr	r0, [r7, #8]
 80058e8:	f7fe feca 	bl	8004680 <_SendPacket>
  RECORD_END();
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f383 8811 	msr	BASEPRI, r3
}
 80058f2:	bf00      	nop
 80058f4:	3718      	adds	r7, #24
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}
 80058fa:	bf00      	nop
 80058fc:	2001c5a8 	.word	0x2001c5a8
 8005900:	e000ed04 	.word	0xe000ed04

08005904 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005904:	b580      	push	{r7, lr}
 8005906:	b082      	sub	sp, #8
 8005908:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800590a:	f3ef 8311 	mrs	r3, BASEPRI
 800590e:	f04f 0120 	mov.w	r1, #32
 8005912:	f381 8811 	msr	BASEPRI, r1
 8005916:	607b      	str	r3, [r7, #4]
 8005918:	4807      	ldr	r0, [pc, #28]	@ (8005938 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800591a:	f7fe fdc4 	bl	80044a6 <_PreparePacket>
 800591e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005920:	2203      	movs	r2, #3
 8005922:	6839      	ldr	r1, [r7, #0]
 8005924:	6838      	ldr	r0, [r7, #0]
 8005926:	f7fe feab 	bl	8004680 <_SendPacket>
  RECORD_END();
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f383 8811 	msr	BASEPRI, r3
}
 8005930:	bf00      	nop
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}
 8005938:	2001c5a8 	.word	0x2001c5a8

0800593c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005942:	f3ef 8311 	mrs	r3, BASEPRI
 8005946:	f04f 0120 	mov.w	r1, #32
 800594a:	f381 8811 	msr	BASEPRI, r1
 800594e:	607b      	str	r3, [r7, #4]
 8005950:	4807      	ldr	r0, [pc, #28]	@ (8005970 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005952:	f7fe fda8 	bl	80044a6 <_PreparePacket>
 8005956:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005958:	2212      	movs	r2, #18
 800595a:	6839      	ldr	r1, [r7, #0]
 800595c:	6838      	ldr	r0, [r7, #0]
 800595e:	f7fe fe8f 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f383 8811 	msr	BASEPRI, r3
}
 8005968:	bf00      	nop
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	2001c5a8 	.word	0x2001c5a8

08005974 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800597c:	f3ef 8311 	mrs	r3, BASEPRI
 8005980:	f04f 0120 	mov.w	r1, #32
 8005984:	f381 8811 	msr	BASEPRI, r1
 8005988:	617b      	str	r3, [r7, #20]
 800598a:	4817      	ldr	r0, [pc, #92]	@ (80059e8 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800598c:	f7fe fd8b 	bl	80044a6 <_PreparePacket>
 8005990:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	61fb      	str	r3, [r7, #28]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	61bb      	str	r3, [r7, #24]
 800599e:	e00b      	b.n	80059b8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	b2da      	uxtb	r2, r3
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	1c59      	adds	r1, r3, #1
 80059a8:	61f9      	str	r1, [r7, #28]
 80059aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059ae:	b2d2      	uxtb	r2, r2
 80059b0:	701a      	strb	r2, [r3, #0]
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	09db      	lsrs	r3, r3, #7
 80059b6:	61bb      	str	r3, [r7, #24]
 80059b8:	69bb      	ldr	r3, [r7, #24]
 80059ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80059bc:	d8f0      	bhi.n	80059a0 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	61fa      	str	r2, [r7, #28]
 80059c4:	69ba      	ldr	r2, [r7, #24]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80059ce:	221c      	movs	r2, #28
 80059d0:	68f9      	ldr	r1, [r7, #12]
 80059d2:	6938      	ldr	r0, [r7, #16]
 80059d4:	f7fe fe54 	bl	8004680 <_SendPacket>
  RECORD_END();
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	f383 8811 	msr	BASEPRI, r3
}
 80059de:	bf00      	nop
 80059e0:	3720      	adds	r7, #32
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2001c5a8 	.word	0x2001c5a8

080059ec <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b08a      	sub	sp, #40	@ 0x28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80059f6:	f3ef 8311 	mrs	r3, BASEPRI
 80059fa:	f04f 0120 	mov.w	r1, #32
 80059fe:	f381 8811 	msr	BASEPRI, r1
 8005a02:	617b      	str	r3, [r7, #20]
 8005a04:	4824      	ldr	r0, [pc, #144]	@ (8005a98 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005a06:	f7fe fd4e 	bl	80044a6 <_PreparePacket>
 8005a0a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	623b      	str	r3, [r7, #32]
 8005a18:	e00b      	b.n	8005a32 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	b2da      	uxtb	r2, r3
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	1c59      	adds	r1, r3, #1
 8005a22:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a28:	b2d2      	uxtb	r2, r2
 8005a2a:	701a      	strb	r2, [r3, #0]
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	09db      	lsrs	r3, r3, #7
 8005a30:	623b      	str	r3, [r7, #32]
 8005a32:	6a3b      	ldr	r3, [r7, #32]
 8005a34:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a36:	d8f0      	bhi.n	8005a1a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a3a:	1c5a      	adds	r2, r3, #1
 8005a3c:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a3e:	6a3a      	ldr	r2, [r7, #32]
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	61fb      	str	r3, [r7, #28]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e00b      	b.n	8005a6a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	b2da      	uxtb	r2, r3
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	61f9      	str	r1, [r7, #28]
 8005a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a60:	b2d2      	uxtb	r2, r2
 8005a62:	701a      	strb	r2, [r3, #0]
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	09db      	lsrs	r3, r3, #7
 8005a68:	61bb      	str	r3, [r7, #24]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a6e:	d8f0      	bhi.n	8005a52 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	61fa      	str	r2, [r7, #28]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	b2d2      	uxtb	r2, r2
 8005a7a:	701a      	strb	r2, [r3, #0]
 8005a7c:	69fb      	ldr	r3, [r7, #28]
 8005a7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8005a80:	221c      	movs	r2, #28
 8005a82:	68f9      	ldr	r1, [r7, #12]
 8005a84:	6938      	ldr	r0, [r7, #16]
 8005a86:	f7fe fdfb 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f383 8811 	msr	BASEPRI, r3
}
 8005a90:	bf00      	nop
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	2001c5a8 	.word	0x2001c5a8

08005a9c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b082      	sub	sp, #8
 8005aa0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005aa2:	f3ef 8311 	mrs	r3, BASEPRI
 8005aa6:	f04f 0120 	mov.w	r1, #32
 8005aaa:	f381 8811 	msr	BASEPRI, r1
 8005aae:	607b      	str	r3, [r7, #4]
 8005ab0:	4807      	ldr	r0, [pc, #28]	@ (8005ad0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005ab2:	f7fe fcf8 	bl	80044a6 <_PreparePacket>
 8005ab6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005ab8:	2211      	movs	r2, #17
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6838      	ldr	r0, [r7, #0]
 8005abe:	f7fe fddf 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f383 8811 	msr	BASEPRI, r3
}
 8005ac8:	bf00      	nop
 8005aca:	3708      	adds	r7, #8
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	2001c5a8 	.word	0x2001c5a8

08005ad4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b088      	sub	sp, #32
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005adc:	f3ef 8311 	mrs	r3, BASEPRI
 8005ae0:	f04f 0120 	mov.w	r1, #32
 8005ae4:	f381 8811 	msr	BASEPRI, r1
 8005ae8:	617b      	str	r3, [r7, #20]
 8005aea:	4819      	ldr	r0, [pc, #100]	@ (8005b50 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005aec:	f7fe fcdb 	bl	80044a6 <_PreparePacket>
 8005af0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005af6:	4b17      	ldr	r3, [pc, #92]	@ (8005b54 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	61fb      	str	r3, [r7, #28]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	61bb      	str	r3, [r7, #24]
 8005b08:	e00b      	b.n	8005b22 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	1c59      	adds	r1, r3, #1
 8005b12:	61f9      	str	r1, [r7, #28]
 8005b14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]
 8005b1c:	69bb      	ldr	r3, [r7, #24]
 8005b1e:	09db      	lsrs	r3, r3, #7
 8005b20:	61bb      	str	r3, [r7, #24]
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b26:	d8f0      	bhi.n	8005b0a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	1c5a      	adds	r2, r3, #1
 8005b2c:	61fa      	str	r2, [r7, #28]
 8005b2e:	69ba      	ldr	r2, [r7, #24]
 8005b30:	b2d2      	uxtb	r2, r2
 8005b32:	701a      	strb	r2, [r3, #0]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005b38:	2208      	movs	r2, #8
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	6938      	ldr	r0, [r7, #16]
 8005b3e:	f7fe fd9f 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	f383 8811 	msr	BASEPRI, r3
}
 8005b48:	bf00      	nop
 8005b4a:	3720      	adds	r7, #32
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	2001c5a8 	.word	0x2001c5a8
 8005b54:	2001c578 	.word	0x2001c578

08005b58 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b088      	sub	sp, #32
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005b60:	f3ef 8311 	mrs	r3, BASEPRI
 8005b64:	f04f 0120 	mov.w	r1, #32
 8005b68:	f381 8811 	msr	BASEPRI, r1
 8005b6c:	617b      	str	r3, [r7, #20]
 8005b6e:	4819      	ldr	r0, [pc, #100]	@ (8005bd4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005b70:	f7fe fc99 	bl	80044a6 <_PreparePacket>
 8005b74:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005b7a:	4b17      	ldr	r3, [pc, #92]	@ (8005bd8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	1ad3      	subs	r3, r2, r3
 8005b82:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	61fb      	str	r3, [r7, #28]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	61bb      	str	r3, [r7, #24]
 8005b8c:	e00b      	b.n	8005ba6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005b8e:	69bb      	ldr	r3, [r7, #24]
 8005b90:	b2da      	uxtb	r2, r3
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	1c59      	adds	r1, r3, #1
 8005b96:	61f9      	str	r1, [r7, #28]
 8005b98:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b9c:	b2d2      	uxtb	r2, r2
 8005b9e:	701a      	strb	r2, [r3, #0]
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	09db      	lsrs	r3, r3, #7
 8005ba4:	61bb      	str	r3, [r7, #24]
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005baa:	d8f0      	bhi.n	8005b8e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	1c5a      	adds	r2, r3, #1
 8005bb0:	61fa      	str	r2, [r7, #28]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005bbc:	2204      	movs	r2, #4
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	6938      	ldr	r0, [r7, #16]
 8005bc2:	f7fe fd5d 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	f383 8811 	msr	BASEPRI, r3
}
 8005bcc:	bf00      	nop
 8005bce:	3720      	adds	r7, #32
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	2001c5a8 	.word	0x2001c5a8
 8005bd8:	2001c578 	.word	0x2001c578

08005bdc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b088      	sub	sp, #32
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005be4:	f3ef 8311 	mrs	r3, BASEPRI
 8005be8:	f04f 0120 	mov.w	r1, #32
 8005bec:	f381 8811 	msr	BASEPRI, r1
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	4819      	ldr	r0, [pc, #100]	@ (8005c58 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005bf4:	f7fe fc57 	bl	80044a6 <_PreparePacket>
 8005bf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005bfe:	4b17      	ldr	r3, [pc, #92]	@ (8005c5c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	61fb      	str	r3, [r7, #28]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	61bb      	str	r3, [r7, #24]
 8005c10:	e00b      	b.n	8005c2a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	b2da      	uxtb	r2, r3
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	1c59      	adds	r1, r3, #1
 8005c1a:	61f9      	str	r1, [r7, #28]
 8005c1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c20:	b2d2      	uxtb	r2, r2
 8005c22:	701a      	strb	r2, [r3, #0]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	09db      	lsrs	r3, r3, #7
 8005c28:	61bb      	str	r3, [r7, #24]
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c2e:	d8f0      	bhi.n	8005c12 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	61fa      	str	r2, [r7, #28]
 8005c36:	69ba      	ldr	r2, [r7, #24]
 8005c38:	b2d2      	uxtb	r2, r2
 8005c3a:	701a      	strb	r2, [r3, #0]
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8005c40:	2206      	movs	r2, #6
 8005c42:	68f9      	ldr	r1, [r7, #12]
 8005c44:	6938      	ldr	r0, [r7, #16]
 8005c46:	f7fe fd1b 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f383 8811 	msr	BASEPRI, r3
}
 8005c50:	bf00      	nop
 8005c52:	3720      	adds	r7, #32
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	2001c5a8 	.word	0x2001c5a8
 8005c5c:	2001c578 	.word	0x2001c578

08005c60 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005c68:	4b04      	ldr	r3, [pc, #16]	@ (8005c7c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	1ad3      	subs	r3, r2, r3
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	2001c578 	.word	0x2001c578

08005c80 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08c      	sub	sp, #48	@ 0x30
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	4603      	mov	r3, r0
 8005c88:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005c8a:	4b40      	ldr	r3, [pc, #256]	@ (8005d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d077      	beq.n	8005d82 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8005c92:	4b3e      	ldr	r3, [pc, #248]	@ (8005d8c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005c98:	2300      	movs	r3, #0
 8005c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c9c:	e008      	b.n	8005cb0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d007      	beq.n	8005cba <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cac:	3301      	adds	r3, #1
 8005cae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005cb0:	79fb      	ldrb	r3, [r7, #7]
 8005cb2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d3f2      	bcc.n	8005c9e <SEGGER_SYSVIEW_SendModule+0x1e>
 8005cb8:	e000      	b.n	8005cbc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005cba:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005cbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d055      	beq.n	8005d6e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8005cc6:	f04f 0120 	mov.w	r1, #32
 8005cca:	f381 8811 	msr	BASEPRI, r1
 8005cce:	617b      	str	r3, [r7, #20]
 8005cd0:	482f      	ldr	r0, [pc, #188]	@ (8005d90 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005cd2:	f7fe fbe8 	bl	80044a6 <_PreparePacket>
 8005cd6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	623b      	str	r3, [r7, #32]
 8005ce4:	e00b      	b.n	8005cfe <SEGGER_SYSVIEW_SendModule+0x7e>
 8005ce6:	6a3b      	ldr	r3, [r7, #32]
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cec:	1c59      	adds	r1, r3, #1
 8005cee:	6279      	str	r1, [r7, #36]	@ 0x24
 8005cf0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	09db      	lsrs	r3, r3, #7
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d02:	d8f0      	bhi.n	8005ce6 <SEGGER_SYSVIEW_SendModule+0x66>
 8005d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d06:	1c5a      	adds	r2, r3, #1
 8005d08:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d0a:	6a3a      	ldr	r2, [r7, #32]
 8005d0c:	b2d2      	uxtb	r2, r2
 8005d0e:	701a      	strb	r2, [r3, #0]
 8005d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d12:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	e00b      	b.n	8005d38 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	61f9      	str	r1, [r7, #28]
 8005d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	09db      	lsrs	r3, r3, #7
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3c:	d8f0      	bhi.n	8005d20 <SEGGER_SYSVIEW_SendModule+0xa0>
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	61fa      	str	r2, [r7, #28]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2280      	movs	r2, #128	@ 0x80
 8005d54:	4619      	mov	r1, r3
 8005d56:	68f8      	ldr	r0, [r7, #12]
 8005d58:	f7fe fb6c 	bl	8004434 <_EncodeStr>
 8005d5c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8005d5e:	2216      	movs	r2, #22
 8005d60:	68f9      	ldr	r1, [r7, #12]
 8005d62:	6938      	ldr	r0, [r7, #16]
 8005d64:	f7fe fc8c 	bl	8004680 <_SendPacket>
      RECORD_END();
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8005d6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d006      	beq.n	8005d82 <SEGGER_SYSVIEW_SendModule+0x102>
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	4798      	blx	r3
    }
  }
}
 8005d82:	bf00      	nop
 8005d84:	3730      	adds	r7, #48	@ 0x30
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	2001c5a0 	.word	0x2001c5a0
 8005d90:	2001c5a8 	.word	0x2001c5a8

08005d94 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b082      	sub	sp, #8
 8005d98:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005da2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dcc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68db      	ldr	r3, [r3, #12]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d002      	beq.n	8005db6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	691b      	ldr	r3, [r3, #16]
 8005dba:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d1f2      	bne.n	8005da8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2001c5a0 	.word	0x2001c5a0

08005dd0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005dd6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dda:	f04f 0120 	mov.w	r1, #32
 8005dde:	f381 8811 	msr	BASEPRI, r1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	4817      	ldr	r0, [pc, #92]	@ (8005e44 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005de6:	f7fe fb5e 	bl	80044a6 <_PreparePacket>
 8005dea:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	617b      	str	r3, [r7, #20]
 8005df4:	4b14      	ldr	r3, [pc, #80]	@ (8005e48 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005df6:	781b      	ldrb	r3, [r3, #0]
 8005df8:	613b      	str	r3, [r7, #16]
 8005dfa:	e00b      	b.n	8005e14 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	b2da      	uxtb	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	1c59      	adds	r1, r3, #1
 8005e04:	6179      	str	r1, [r7, #20]
 8005e06:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e0a:	b2d2      	uxtb	r2, r2
 8005e0c:	701a      	strb	r2, [r3, #0]
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	09db      	lsrs	r3, r3, #7
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e18:	d8f0      	bhi.n	8005dfc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	1c5a      	adds	r2, r3, #1
 8005e1e:	617a      	str	r2, [r7, #20]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	b2d2      	uxtb	r2, r2
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005e2a:	221b      	movs	r2, #27
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	68b8      	ldr	r0, [r7, #8]
 8005e30:	f7fe fc26 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f383 8811 	msr	BASEPRI, r3
}
 8005e3a:	bf00      	nop
 8005e3c:	3718      	adds	r7, #24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2001c5a8 	.word	0x2001c5a8
 8005e48:	2001c5a4 	.word	0x2001c5a4

08005e4c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8005e4c:	b40f      	push	{r0, r1, r2, r3}
 8005e4e:	b580      	push	{r7, lr}
 8005e50:	b082      	sub	sp, #8
 8005e52:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8005e54:	f107 0314 	add.w	r3, r7, #20
 8005e58:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8005e5a:	1d3b      	adds	r3, r7, #4
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	2100      	movs	r1, #0
 8005e60:	6938      	ldr	r0, [r7, #16]
 8005e62:	f7fe ff1d 	bl	8004ca0 <_VPrintTarget>
  va_end(ParamList);
}
 8005e66:	bf00      	nop
 8005e68:	3708      	adds	r7, #8
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e70:	b004      	add	sp, #16
 8005e72:	4770      	bx	lr

08005e74 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b08a      	sub	sp, #40	@ 0x28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e80:	f04f 0120 	mov.w	r1, #32
 8005e84:	f381 8811 	msr	BASEPRI, r1
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	4827      	ldr	r0, [pc, #156]	@ (8005f28 <SEGGER_SYSVIEW_Warn+0xb4>)
 8005e8c:	f7fe fb0b 	bl	80044a6 <_PreparePacket>
 8005e90:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e92:	2280      	movs	r2, #128	@ 0x80
 8005e94:	6879      	ldr	r1, [r7, #4]
 8005e96:	6938      	ldr	r0, [r7, #16]
 8005e98:	f7fe facc 	bl	8004434 <_EncodeStr>
 8005e9c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	623b      	str	r3, [r7, #32]
 8005ea6:	e00b      	b.n	8005ec0 <SEGGER_SYSVIEW_Warn+0x4c>
 8005ea8:	6a3b      	ldr	r3, [r7, #32]
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eae:	1c59      	adds	r1, r3, #1
 8005eb0:	6279      	str	r1, [r7, #36]	@ 0x24
 8005eb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eb6:	b2d2      	uxtb	r2, r2
 8005eb8:	701a      	strb	r2, [r3, #0]
 8005eba:	6a3b      	ldr	r3, [r7, #32]
 8005ebc:	09db      	lsrs	r3, r3, #7
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ec4:	d8f0      	bhi.n	8005ea8 <SEGGER_SYSVIEW_Warn+0x34>
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ecc:	6a3a      	ldr	r2, [r7, #32]
 8005ece:	b2d2      	uxtb	r2, r2
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	61fb      	str	r3, [r7, #28]
 8005eda:	2300      	movs	r3, #0
 8005edc:	61bb      	str	r3, [r7, #24]
 8005ede:	e00b      	b.n	8005ef8 <SEGGER_SYSVIEW_Warn+0x84>
 8005ee0:	69bb      	ldr	r3, [r7, #24]
 8005ee2:	b2da      	uxtb	r2, r3
 8005ee4:	69fb      	ldr	r3, [r7, #28]
 8005ee6:	1c59      	adds	r1, r3, #1
 8005ee8:	61f9      	str	r1, [r7, #28]
 8005eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eee:	b2d2      	uxtb	r2, r2
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	69bb      	ldr	r3, [r7, #24]
 8005ef4:	09db      	lsrs	r3, r3, #7
 8005ef6:	61bb      	str	r3, [r7, #24]
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005efc:	d8f0      	bhi.n	8005ee0 <SEGGER_SYSVIEW_Warn+0x6c>
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	1c5a      	adds	r2, r3, #1
 8005f02:	61fa      	str	r2, [r7, #28]
 8005f04:	69ba      	ldr	r2, [r7, #24]
 8005f06:	b2d2      	uxtb	r2, r2
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	69fb      	ldr	r3, [r7, #28]
 8005f0c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f0e:	221a      	movs	r2, #26
 8005f10:	68f9      	ldr	r1, [r7, #12]
 8005f12:	6938      	ldr	r0, [r7, #16]
 8005f14:	f7fe fbb4 	bl	8004680 <_SendPacket>
  RECORD_END();
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f383 8811 	msr	BASEPRI, r3
}
 8005f1e:	bf00      	nop
 8005f20:	3728      	adds	r7, #40	@ 0x28
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	2001c5a8 	.word	0x2001c5a8

08005f2c <memcmp>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	3901      	subs	r1, #1
 8005f30:	4402      	add	r2, r0
 8005f32:	4290      	cmp	r0, r2
 8005f34:	d101      	bne.n	8005f3a <memcmp+0xe>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e005      	b.n	8005f46 <memcmp+0x1a>
 8005f3a:	7803      	ldrb	r3, [r0, #0]
 8005f3c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005f40:	42a3      	cmp	r3, r4
 8005f42:	d001      	beq.n	8005f48 <memcmp+0x1c>
 8005f44:	1b18      	subs	r0, r3, r4
 8005f46:	bd10      	pop	{r4, pc}
 8005f48:	3001      	adds	r0, #1
 8005f4a:	e7f2      	b.n	8005f32 <memcmp+0x6>

08005f4c <memset>:
 8005f4c:	4402      	add	r2, r0
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d100      	bne.n	8005f56 <memset+0xa>
 8005f54:	4770      	bx	lr
 8005f56:	f803 1b01 	strb.w	r1, [r3], #1
 8005f5a:	e7f9      	b.n	8005f50 <memset+0x4>

08005f5c <__libc_init_array>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f94 <__libc_init_array+0x38>)
 8005f60:	4c0d      	ldr	r4, [pc, #52]	@ (8005f98 <__libc_init_array+0x3c>)
 8005f62:	1b64      	subs	r4, r4, r5
 8005f64:	10a4      	asrs	r4, r4, #2
 8005f66:	2600      	movs	r6, #0
 8005f68:	42a6      	cmp	r6, r4
 8005f6a:	d109      	bne.n	8005f80 <__libc_init_array+0x24>
 8005f6c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f9c <__libc_init_array+0x40>)
 8005f6e:	4c0c      	ldr	r4, [pc, #48]	@ (8005fa0 <__libc_init_array+0x44>)
 8005f70:	f000 f826 	bl	8005fc0 <_init>
 8005f74:	1b64      	subs	r4, r4, r5
 8005f76:	10a4      	asrs	r4, r4, #2
 8005f78:	2600      	movs	r6, #0
 8005f7a:	42a6      	cmp	r6, r4
 8005f7c:	d105      	bne.n	8005f8a <__libc_init_array+0x2e>
 8005f7e:	bd70      	pop	{r4, r5, r6, pc}
 8005f80:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f84:	4798      	blx	r3
 8005f86:	3601      	adds	r6, #1
 8005f88:	e7ee      	b.n	8005f68 <__libc_init_array+0xc>
 8005f8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f8e:	4798      	blx	r3
 8005f90:	3601      	adds	r6, #1
 8005f92:	e7f2      	b.n	8005f7a <__libc_init_array+0x1e>
 8005f94:	08006130 	.word	0x08006130
 8005f98:	08006130 	.word	0x08006130
 8005f9c:	08006130 	.word	0x08006130
 8005fa0:	08006134 	.word	0x08006134

08005fa4 <memcpy>:
 8005fa4:	440a      	add	r2, r1
 8005fa6:	4291      	cmp	r1, r2
 8005fa8:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fac:	d100      	bne.n	8005fb0 <memcpy+0xc>
 8005fae:	4770      	bx	lr
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fba:	4291      	cmp	r1, r2
 8005fbc:	d1f9      	bne.n	8005fb2 <memcpy+0xe>
 8005fbe:	bd10      	pop	{r4, pc}

08005fc0 <_init>:
 8005fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc2:	bf00      	nop
 8005fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fc6:	bc08      	pop	{r3}
 8005fc8:	469e      	mov	lr, r3
 8005fca:	4770      	bx	lr

08005fcc <_fini>:
 8005fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fce:	bf00      	nop
 8005fd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fd2:	bc08      	pop	{r3}
 8005fd4:	469e      	mov	lr, r3
 8005fd6:	4770      	bx	lr
