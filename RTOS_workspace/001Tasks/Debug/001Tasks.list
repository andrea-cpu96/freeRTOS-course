
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000629c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065cc  080065cc  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  080065cc  080065cc  000075cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d4  080065d4  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d4  080065d4  000075d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065d8  080065d8  000075d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080065dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001abb4  20000064  08006640  00008064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001ac18  08006640  00008c18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001270e  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002977  00000000  00000000  0001a7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a0  00000000  00000000  0001d120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d97  00000000  00000000  0001e2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019bab  00000000  00000000  0001f057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001444e  00000000  00000000  00038c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aacc6  00000000  00000000  0004d050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7d16  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  000f7d5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  000fcc00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006424 	.word	0x08006424

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08006424 	.word	0x08006424

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194f8 	.word	0x200194f8
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb77 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f853 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8bb 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CyCCNT counter
  DWT_CTRL |= ( 1 << 0 );
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <main+0x98>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062e:	f003 f9d5 	bl	80039dc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000632:	f004 fc0d 	bl	8004e50 <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_h);
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <main+0x9c>)
 8000642:	22c8      	movs	r2, #200	@ 0xc8
 8000644:	491a      	ldr	r1, [pc, #104]	@ (80006b0 <main+0xa0>)
 8000646:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <main+0xa4>)
 8000648:	f001 fe78 	bl	800233c <xTaskCreate>
 800064c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00b      	beq.n	800066c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_h);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2302      	movs	r3, #2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <main+0xa8>)
 8000676:	22c8      	movs	r2, #200	@ 0xc8
 8000678:	4910      	ldr	r1, [pc, #64]	@ (80006bc <main+0xac>)
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <main+0xb0>)
 800067c:	f001 fe5e 	bl	800233c <xTaskCreate>
 8000680:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00b      	beq.n	80006a0 <main+0x90>
    __asm volatile
 8000688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068c:	f383 8811 	msr	BASEPRI, r3
 8000690:	f3bf 8f6f 	isb	sy
 8000694:	f3bf 8f4f 	dsb	sy
 8000698:	60fb      	str	r3, [r7, #12]
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <main+0x8c>

  vTaskStartScheduler();
 80006a0:	f002 f810 	bl	80026c4 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0x94>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0800643c 	.word	0x0800643c
 80006b0:	08006454 	.word	0x08006454
 80006b4:	08000a55 	.word	0x08000a55
 80006b8:	0800645c 	.word	0x0800645c
 80006bc:	08006474 	.word	0x08006474
 80006c0:	08000a91 	.word	0x08000a91

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f005 fa1e 	bl	8005b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000738:	23c0      	movs	r3, #192	@ 0xc0
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fd9f 	bl	800128c <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9cc 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2103      	movs	r1, #3
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f800 	bl	800177c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9b5 	bl	8000af0 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fcfc 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fcf7 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fcf1 	bl	8001258 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000876:	2304      	movs	r3, #4
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486d      	ldr	r0, [pc, #436]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 800088a:	f000 fb61 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4866      	ldr	r0, [pc, #408]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 80008a6:	f000 fb53 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008aa:	2332      	movs	r3, #50	@ 0x32
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4860      	ldr	r0, [pc, #384]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 80008c0:	f000 fb46 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	485a      	ldr	r0, [pc, #360]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80008dc:	f000 fb38 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e0:	2308      	movs	r3, #8
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f0:	2305      	movs	r3, #5
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80008fc:	f000 fb28 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000904:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	484d      	ldr	r0, [pc, #308]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000916:	f000 fb1b 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800091a:	2310      	movs	r3, #16
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092a:	2306      	movs	r3, #6
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000936:	f000 fb0b 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800093a:	23e0      	movs	r3, #224	@ 0xe0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483d      	ldr	r0, [pc, #244]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000956:	f000 fafb 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800095a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096c:	2305      	movs	r3, #5
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <MX_GPIO_Init+0x2b8>)
 8000978:	f000 faea 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000980:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000996:	f000 fadb 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800099a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ac:	2306      	movs	r3, #6
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4823      	ldr	r0, [pc, #140]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80009b8:	f000 faca 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fabd 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 80009f4:	f000 faac 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000a0c:	f000 faa0 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a10:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a22:	2304      	movs	r3, #4
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a2e:	f000 fa8f 	bl	8000f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	@ 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	@ 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	while(1)
	{

		//printf("%s\n", (char *)parameters);

		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	@ 0x64
 8000a66:	f005 f811 	bl	8005a8c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f004 ff9c 	bl	80059ac <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a84:	bf00      	nop
 8000a86:	e7e9      	b.n	8000a5c <task1_handler+0x8>
 8000a88:	0800647c 	.word	0x0800647c
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:

}


static void task2_handler(void *parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	@ 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	while(1)
	{

		//printf("%s\n", (char *)parameters);

		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <task2_handler+0x34>)
 8000aa0:	2164      	movs	r1, #100	@ 0x64
 8000aa2:	f004 fff3 	bl	8005a8c <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f004 ff7e 	bl	80059ac <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <task2_handler+0x38>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000ac0:	bf00      	nop
 8000ac2:	e7e9      	b.n	8000a98 <task2_handler+0x8>
 8000ac4:	0800647c 	.word	0x0800647c
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f935 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40000c00 	.word	0x40000c00

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b3a:	f002 fb13 	bl	8003164 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a32      	ldr	r2, [pc, #200]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b78:	f107 0210 	add.w	r2, r7, #16
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f806 	bl	8001b94 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 ffeb 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b96:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b98:	e004      	b.n	8000ba4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9a:	f000 ffe7 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c9b      	lsrs	r3, r3, #18
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <HAL_InitTick+0xf0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bd8:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bda:	f001 f80d 	bl	8001bf8 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d11b      	bne.n	8000c24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000bec:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bee:	f001 f85d 	bl	8001cac <HAL_TIM_Base_Start_IT>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d111      	bne.n	8000c24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c00:	2032      	movs	r0, #50	@ 0x32
 8000c02:	f000 f997 	bl	8000f34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d808      	bhi.n	8000c1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2032      	movs	r0, #50	@ 0x32
 8000c12:	f000 f973 	bl	8000efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_InitTick+0xf4>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e002      	b.n	8000c24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3738      	adds	r7, #56	@ 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	20000080 	.word	0x20000080
 8000c3c:	40000c00 	.word	0x40000c00
 8000c40:	20000004 	.word	0x20000004

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <TIM5_IRQHandler+0x10>)
 8000c82:	f001 f875 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000080 	.word	0x20000080

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f004 ff1f 	bl	8005b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc93 	bl	8000610 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cf8:	080065dc 	.word	0x080065dc
  ldr r2, =_sbss
 8000cfc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d00:	2001ac18 	.word	0x2001ac18

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f8d8 	bl	8000ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff08 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fede 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200000c8 	.word	0x200000c8

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000c8 	.word	0x200000c8

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	@ (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	@ (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	@ 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff4c 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0e:	f7ff ff61 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffb1 	bl	8000e80 <NVIC_EncodePriority>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff80 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff54 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e159      	b.n	8001220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8148 	bne.w	800121a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a2 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b57      	ldr	r3, [pc, #348]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a56      	ldr	r2, [pc, #344]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b54      	ldr	r3, [pc, #336]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a52      	ldr	r2, [pc, #328]	@ (800123c <HAL_GPIO_Init+0x2ec>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x2f0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x202>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a48      	ldr	r2, [pc, #288]	@ (8001244 <HAL_GPIO_Init+0x2f4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1fe>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a47      	ldr	r2, [pc, #284]	@ (8001248 <HAL_GPIO_Init+0x2f8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1fa>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a46      	ldr	r2, [pc, #280]	@ (800124c <HAL_GPIO_Init+0x2fc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1f6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a45      	ldr	r2, [pc, #276]	@ (8001250 <HAL_GPIO_Init+0x300>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1f2>
 800113e:	2304      	movs	r3, #4
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001142:	2307      	movs	r3, #7
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	@ (800123c <HAL_GPIO_Init+0x2ec>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001196:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_GPIO_Init+0x304>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c0:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f aea2 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e267      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4b88      	ldr	r3, [pc, #544]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b85      	ldr	r3, [pc, #532]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b82      	ldr	r3, [pc, #520]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b7e      	ldr	r3, [pc, #504]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e242      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b70      	ldr	r3, [pc, #448]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6f      	ldr	r2, [pc, #444]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b6d      	ldr	r3, [pc, #436]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6c      	ldr	r2, [pc, #432]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4b69      	ldr	r3, [pc, #420]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a68      	ldr	r2, [pc, #416]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b66      	ldr	r3, [pc, #408]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a65      	ldr	r2, [pc, #404]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fd16 	bl	8000d74 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fd12 	bl	8000d74 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	@ 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e207      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fd02 	bl	8000d74 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcfe 	bl	8000d74 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1f3      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b47      	ldr	r3, [pc, #284]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b44      	ldr	r3, [pc, #272]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1c7      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4937      	ldr	r1, [pc, #220]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <HAL_RCC_OscConfig+0x244>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fcb7 	bl	8000d74 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fcb3 	bl	8000d74 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a8      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4925      	ldr	r1, [pc, #148]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <HAL_RCC_OscConfig+0x244>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc96 	bl	8000d74 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc92 	bl	8000d74 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e187      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d036      	beq.n	80014e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_RCC_OscConfig+0x248>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fc76 	bl	8000d74 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc72 	bl	8000d74 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e167      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e01b      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_OscConfig+0x248>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc5f 	bl	8000d74 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e00e      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc5b 	bl	8000d74 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d907      	bls.n	80014d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e150      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b88      	ldr	r3, [pc, #544]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ea      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8097 	beq.w	8001620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b81      	ldr	r3, [pc, #516]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b7d      	ldr	r3, [pc, #500]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a7c      	ldr	r2, [pc, #496]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b7a      	ldr	r3, [pc, #488]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b77      	ldr	r3, [pc, #476]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d118      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b74      	ldr	r3, [pc, #464]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a73      	ldr	r2, [pc, #460]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fc1b 	bl	8000d74 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff fc17 	bl	8000d74 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e10c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x2ea>
 8001568:	4b64      	ldr	r3, [pc, #400]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156c:	4a63      	ldr	r2, [pc, #396]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	@ 0x70
 8001574:	e01c      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x30c>
 800157e:	4b5f      	ldr	r3, [pc, #380]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	4a5e      	ldr	r2, [pc, #376]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6713      	str	r3, [r2, #112]	@ 0x70
 800158a:	4b5c      	ldr	r3, [pc, #368]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	4a5b      	ldr	r2, [pc, #364]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	@ 0x70
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001598:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a57      	ldr	r2, [pc, #348]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	4b55      	ldr	r3, [pc, #340]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	4a54      	ldr	r2, [pc, #336]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d015      	beq.n	80015e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbdc 	bl	8000d74 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbd8 	bl	8000d74 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0cb      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ee      	beq.n	80015c0 <HAL_RCC_OscConfig+0x334>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbc6 	bl	8000d74 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbc2 	bl	8000d74 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0b5      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ee      	bne.n	80015ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	4a38      	ldr	r2, [pc, #224]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800161a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a1 	beq.w	800176c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d05c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d141      	bne.n	80016c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb96 	bl	8000d74 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb92 	bl	8000d74 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e087      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	491b      	ldr	r1, [pc, #108]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb6b 	bl	8000d74 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb67 	bl	8000d74 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e05c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x416>
 80016c0:	e054      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb54 	bl	8000d74 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff fb50 	bl	8000d74 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e045      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x444>
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e038      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000
 8001704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d028      	beq.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d121      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d11a      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	3b01      	subs	r3, #1
 8001752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fa82 	bl	8000d74 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa7e 	bl	8000d74 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	@ (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f912 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	08006548 	.word	0x08006548
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800194c:	b094      	sub	sp, #80	@ 0x50
 800194e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001958:	2300      	movs	r3, #0
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001960:	4b79      	ldr	r3, [pc, #484]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d00d      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x40>
 800196c:	2b08      	cmp	r3, #8
 800196e:	f200 80e1 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x34>
 8001976:	2b04      	cmp	r3, #4
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x3a>
 800197a:	e0db      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001980:	e0db      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001986:	e0d8      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001988:	4b6f      	ldr	r3, [pc, #444]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b6d      	ldr	r3, [pc, #436]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	2200      	movs	r2, #0
 80019a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ba:	4622      	mov	r2, r4
 80019bc:	462b      	mov	r3, r5
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4621      	mov	r1, r4
 80019d4:	1a51      	subs	r1, r2, r1
 80019d6:	6139      	str	r1, [r7, #16]
 80019d8:	4629      	mov	r1, r5
 80019da:	eb63 0301 	sbc.w	r3, r3, r1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ec:	4659      	mov	r1, fp
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	4651      	mov	r1, sl
 80019f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f6:	4651      	mov	r1, sl
 80019f8:	018a      	lsls	r2, r1, #6
 80019fa:	4651      	mov	r1, sl
 80019fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001a00:	4659      	mov	r1, fp
 8001a02:	eb63 0901 	sbc.w	r9, r3, r1
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1a:	4690      	mov	r8, r2
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	eb18 0303 	adds.w	r3, r8, r3
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	462b      	mov	r3, r5
 8001a28:	eb49 0303 	adc.w	r3, r9, r3
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	024b      	lsls	r3, r1, #9
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a44:	4621      	mov	r1, r4
 8001a46:	024a      	lsls	r2, r1, #9
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a58:	f7fe fc62 	bl	8000320 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a64:	e058      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4611      	mov	r1, r2
 8001a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a80:	4642      	mov	r2, r8
 8001a82:	464b      	mov	r3, r9
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0159      	lsls	r1, r3, #5
 8001a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a92:	0150      	lsls	r0, r2, #5
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8001abc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00eb      	lsls	r3, r5, #3
 8001aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	18e3      	adds	r3, r4, r3
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	464b      	mov	r3, r9
 8001adc:	eb45 0303 	adc.w	r3, r5, r3
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b02:	2200      	movs	r2, #0
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	61fa      	str	r2, [r7, #28]
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fc08 	bl	8000320 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3750      	adds	r7, #80	@ 0x50
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	08006558 	.word	0x08006558

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9b2 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e044      	b.n	8001d4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40014000 	.word	0x40014000

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0202 	mvn.w	r2, #2
 8001da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8d2 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8d5 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89e 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8af 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f886 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f878 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f889 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f860 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f852 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f863 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fdf8 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8e6 	bl	80020cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f834 	bl	8001f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8b8 	bl	80020b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a37      	ldr	r2, [pc, #220]	@ (80020a0 <TIM_Base_SetConfig+0x100>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a36      	ldr	r2, [pc, #216]	@ (80020a4 <TIM_Base_SetConfig+0x104>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <TIM_Base_SetConfig+0x108>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff8:	d017      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	@ (80020a0 <TIM_Base_SetConfig+0x100>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a27      	ldr	r2, [pc, #156]	@ (80020a4 <TIM_Base_SetConfig+0x104>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00f      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <TIM_Base_SetConfig+0x108>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <TIM_Base_SetConfig+0x10c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <TIM_Base_SetConfig+0x110>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <TIM_Base_SetConfig+0x114>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f023 0201 	bic.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
  }
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800

080020b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 0208 	add.w	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0208 	add.w	r2, r3, #8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002114:	f240 1019 	movw	r0, #281	@ 0x119
 8002118:	f003 f9dc 	bl	80054d4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002132:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002136:	f003 f9cd 	bl	80054d4 <SEGGER_SYSVIEW_RecordEndCall>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <uxListRemove>:
}
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	6892      	ldr	r2, [r2, #8]
 8002158:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	6852      	ldr	r2, [r2, #4]
 8002162:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	429a      	cmp	r2, r3
 800216c:	d103      	bne.n	8002176 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4619      	mov	r1, r3
 800218c:	f240 101d 	movw	r0, #285	@ 0x11d
 8002190:	f003 f9dc 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3710      	adds	r7, #16
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}

080021a0 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08e      	sub	sp, #56	@ 0x38
 80021a4:	af04      	add	r7, sp, #16
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
 80021ac:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80021ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10b      	bne.n	80021cc <prvCreateStaticTask+0x2c>
    __asm volatile
 80021b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b8:	f383 8811 	msr	BASEPRI, r3
 80021bc:	f3bf 8f6f 	isb	sy
 80021c0:	f3bf 8f4f 	dsb	sy
 80021c4:	623b      	str	r3, [r7, #32]
}
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	e7fd      	b.n	80021c8 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80021cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10b      	bne.n	80021ea <prvCreateStaticTask+0x4a>
    __asm volatile
 80021d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d6:	f383 8811 	msr	BASEPRI, r3
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	f3bf 8f4f 	dsb	sy
 80021e2:	61fb      	str	r3, [r7, #28]
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	e7fd      	b.n	80021e6 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80021ea:	2358      	movs	r3, #88	@ 0x58
 80021ec:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	2b58      	cmp	r3, #88	@ 0x58
 80021f2:	d00b      	beq.n	800220c <prvCreateStaticTask+0x6c>
    __asm volatile
 80021f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	61bb      	str	r3, [r7, #24]
}
 8002206:	bf00      	nop
 8002208:	bf00      	nop
 800220a:	e7fd      	b.n	8002208 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800220c:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d01f      	beq.n	8002254 <prvCreateStaticTask+0xb4>
 8002214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 800221a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800221c:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800221e:	2258      	movs	r2, #88	@ 0x58
 8002220:	2100      	movs	r1, #0
 8002222:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002224:	f003 fc76 	bl	8005b14 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800222c:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	2202      	movs	r2, #2
 8002232:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002236:	2300      	movs	r3, #0
 8002238:	9303      	str	r3, [sp, #12]
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	9302      	str	r3, [sp, #8]
 800223e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002240:	9301      	str	r3, [sp, #4]
 8002242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002244:	9300      	str	r3, [sp, #0]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f89d 	bl	800238c <prvInitialiseNewTask>
 8002252:	e001      	b.n	8002258 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8002254:	2300      	movs	r3, #0
 8002256:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800225a:	4618      	mov	r0, r3
 800225c:	3728      	adds	r7, #40	@ 0x28
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8002262:	b580      	push	{r7, lr}
 8002264:	b08a      	sub	sp, #40	@ 0x28
 8002266:	af04      	add	r7, sp, #16
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8002274:	f107 0310 	add.w	r3, r7, #16
 8002278:	9303      	str	r3, [sp, #12]
 800227a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800227c:	9302      	str	r3, [sp, #8]
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	9300      	str	r3, [sp, #0]
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68b9      	ldr	r1, [r7, #8]
 800228c:	68f8      	ldr	r0, [r7, #12]
 800228e:	f7ff ff87 	bl	80021a0 <prvCreateStaticTask>
 8002292:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800229a:	6978      	ldr	r0, [r7, #20]
 800229c:	f000 f906 	bl	80024ac <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f003 fa8c 	bl	80057c0 <SEGGER_SYSVIEW_ShrinkId>
 80022a8:	4603      	mov	r3, r0
 80022aa:	4619      	mov	r1, r3
 80022ac:	20bf      	movs	r0, #191	@ 0xbf
 80022ae:	f003 f94d 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80022b2:	693b      	ldr	r3, [r7, #16]
    }
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af04      	add	r7, sp, #16
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
 80022c8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4618      	mov	r0, r3
 80022d0:	f001 f8f6 	bl	80034c0 <pvPortMalloc>
 80022d4:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d013      	beq.n	8002304 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80022dc:	2058      	movs	r0, #88	@ 0x58
 80022de:	f001 f8ef 	bl	80034c0 <pvPortMalloc>
 80022e2:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d008      	beq.n	80022fc <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80022ea:	2258      	movs	r2, #88	@ 0x58
 80022ec:	2100      	movs	r1, #0
 80022ee:	6978      	ldr	r0, [r7, #20]
 80022f0:	f003 fc10 	bl	8005b14 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	693a      	ldr	r2, [r7, #16]
 80022f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80022fa:	e005      	b.n	8002308 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80022fc:	6938      	ldr	r0, [r7, #16]
 80022fe:	f001 fa11 	bl	8003724 <vPortFree>
 8002302:	e001      	b.n	8002308 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d011      	beq.n	8002332 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002316:	2300      	movs	r3, #0
 8002318:	9303      	str	r3, [sp, #12]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	9302      	str	r3, [sp, #8]
 800231e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002320:	9301      	str	r3, [sp, #4]
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	68b9      	ldr	r1, [r7, #8]
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f000 f82d 	bl	800238c <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002332:	697b      	ldr	r3, [r7, #20]
    }
 8002334:	4618      	mov	r0, r3
 8002336:	3718      	adds	r7, #24
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af02      	add	r7, sp, #8
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
 8002348:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800234a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234c:	9301      	str	r3, [sp, #4]
 800234e:	6a3b      	ldr	r3, [r7, #32]
 8002350:	9300      	str	r3, [sp, #0]
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	68b9      	ldr	r1, [r7, #8]
 8002358:	68f8      	ldr	r0, [r7, #12]
 800235a:	f7ff ffaf 	bl	80022bc <prvCreateTask>
 800235e:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d005      	beq.n	8002372 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002366:	6938      	ldr	r0, [r7, #16]
 8002368:	f000 f8a0 	bl	80024ac <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800236c:	2301      	movs	r3, #1
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e002      	b.n	8002378 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002372:	f04f 33ff 	mov.w	r3, #4294967295
 8002376:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4619      	mov	r1, r3
 800237c:	20c2      	movs	r0, #194	@ 0xc2
 800237e:	f003 f8e5 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002382:	697b      	ldr	r3, [r7, #20]
    }
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b088      	sub	sp, #32
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]
 8002398:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 800239a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800239c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	461a      	mov	r2, r3
 80023a4:	21a5      	movs	r1, #165	@ 0xa5
 80023a6:	f003 fbb5 	bl	8005b14 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80023aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023b4:	3b01      	subs	r3, #1
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	f023 0307 	bic.w	r3, r3, #7
 80023c2:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80023c4:	69bb      	ldr	r3, [r7, #24]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00b      	beq.n	80023e6 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80023ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d2:	f383 8811 	msr	BASEPRI, r3
 80023d6:	f3bf 8f6f 	isb	sy
 80023da:	f3bf 8f4f 	dsb	sy
 80023de:	617b      	str	r3, [r7, #20]
}
 80023e0:	bf00      	nop
 80023e2:	bf00      	nop
 80023e4:	e7fd      	b.n	80023e2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d01e      	beq.n	800242a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80023ec:	2300      	movs	r3, #0
 80023ee:	61fb      	str	r3, [r7, #28]
 80023f0:	e012      	b.n	8002418 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	4413      	add	r3, r2
 80023f8:	7819      	ldrb	r1, [r3, #0]
 80023fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	4413      	add	r3, r2
 8002400:	3334      	adds	r3, #52	@ 0x34
 8002402:	460a      	mov	r2, r1
 8002404:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	4413      	add	r3, r2
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	3301      	adds	r3, #1
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	2b09      	cmp	r3, #9
 800241c:	d9e9      	bls.n	80023f2 <prvInitialiseNewTask+0x66>
 800241e:	e000      	b.n	8002422 <prvInitialiseNewTask+0x96>
            {
                break;
 8002420:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002424:	2200      	movs	r2, #0
 8002426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800242c:	2b04      	cmp	r3, #4
 800242e:	d90b      	bls.n	8002448 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	613b      	str	r3, [r7, #16]
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800244a:	2b04      	cmp	r3, #4
 800244c:	d901      	bls.n	8002452 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800244e:	2304      	movs	r3, #4
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002454:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002456:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002458:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800245a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800245c:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800245e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002460:	3304      	adds	r3, #4
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff fe5e 	bl	8002124 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800246a:	3318      	adds	r3, #24
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff fe59 	bl	8002124 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002472:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002476:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	f1c3 0205 	rsb	r2, r3, #5
 800247e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002480:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	68f9      	ldr	r1, [r7, #12]
 800248c:	69b8      	ldr	r0, [r7, #24]
 800248e:	f000 fced 	bl	8002e6c <pxPortInitialiseStack>
 8002492:	4602      	mov	r2, r0
 8002494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002496:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800249e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024a4:	bf00      	nop
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80024ac:	b5b0      	push	{r4, r5, r7, lr}
 80024ae:	b086      	sub	sp, #24
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80024b4:	f000 fed6 	bl	8003264 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80024b8:	4b48      	ldr	r3, [pc, #288]	@ (80025dc <prvAddNewTaskToReadyList+0x130>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	3301      	adds	r3, #1
 80024be:	4a47      	ldr	r2, [pc, #284]	@ (80025dc <prvAddNewTaskToReadyList+0x130>)
 80024c0:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80024c2:	4b47      	ldr	r3, [pc, #284]	@ (80025e0 <prvAddNewTaskToReadyList+0x134>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d109      	bne.n	80024de <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80024ca:	4a45      	ldr	r2, [pc, #276]	@ (80025e0 <prvAddNewTaskToReadyList+0x134>)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024d0:	4b42      	ldr	r3, [pc, #264]	@ (80025dc <prvAddNewTaskToReadyList+0x130>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d110      	bne.n	80024fa <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80024d8:	f000 fbf4 	bl	8002cc4 <prvInitialiseTaskLists>
 80024dc:	e00d      	b.n	80024fa <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80024de:	4b41      	ldr	r3, [pc, #260]	@ (80025e4 <prvAddNewTaskToReadyList+0x138>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024e6:	4b3e      	ldr	r3, [pc, #248]	@ (80025e0 <prvAddNewTaskToReadyList+0x134>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d802      	bhi.n	80024fa <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80024f4:	4a3a      	ldr	r2, [pc, #232]	@ (80025e0 <prvAddNewTaskToReadyList+0x134>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80024fa:	4b3b      	ldr	r3, [pc, #236]	@ (80025e8 <prvAddNewTaskToReadyList+0x13c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3301      	adds	r3, #1
 8002500:	4a39      	ldr	r2, [pc, #228]	@ (80025e8 <prvAddNewTaskToReadyList+0x13c>)
 8002502:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002504:	4b38      	ldr	r3, [pc, #224]	@ (80025e8 <prvAddNewTaskToReadyList+0x13c>)
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d016      	beq.n	8002540 <prvAddNewTaskToReadyList+0x94>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4618      	mov	r0, r3
 8002516:	f003 f88d 	bl	8005634 <SEGGER_SYSVIEW_OnTaskCreate>
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800252a:	461d      	mov	r5, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461c      	mov	r4, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002536:	1ae3      	subs	r3, r4, r3
 8002538:	9300      	str	r3, [sp, #0]
 800253a:	462b      	mov	r3, r5
 800253c:	f001 faf0 	bl	8003b20 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4618      	mov	r0, r3
 8002544:	f003 f8fa 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	2201      	movs	r2, #1
 800254e:	409a      	lsls	r2, r3
 8002550:	4b26      	ldr	r3, [pc, #152]	@ (80025ec <prvAddNewTaskToReadyList+0x140>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4313      	orrs	r3, r2
 8002556:	4a25      	ldr	r2, [pc, #148]	@ (80025ec <prvAddNewTaskToReadyList+0x140>)
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800255e:	4924      	ldr	r1, [pc, #144]	@ (80025f0 <prvAddNewTaskToReadyList+0x144>)
 8002560:	4613      	mov	r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	3304      	adds	r3, #4
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60da      	str	r2, [r3, #12]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	3204      	adds	r2, #4
 8002586:	605a      	str	r2, [r3, #4]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	609a      	str	r2, [r3, #8]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	4a14      	ldr	r2, [pc, #80]	@ (80025f0 <prvAddNewTaskToReadyList+0x144>)
 800259e:	441a      	add	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	615a      	str	r2, [r3, #20]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025a8:	4911      	ldr	r1, [pc, #68]	@ (80025f0 <prvAddNewTaskToReadyList+0x144>)
 80025aa:	4613      	mov	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	480c      	ldr	r0, [pc, #48]	@ (80025f0 <prvAddNewTaskToReadyList+0x144>)
 80025be:	4613      	mov	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	4413      	add	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4403      	add	r3, r0
 80025c8:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80025ca:	f000 fe7d 	bl	80032c8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80025ce:	4b05      	ldr	r3, [pc, #20]	@ (80025e4 <prvAddNewTaskToReadyList+0x138>)
 80025d0:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80025d2:	bf00      	nop
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bdb0      	pop	{r4, r5, r7, pc}
 80025da:	bf00      	nop
 80025dc:	200001a4 	.word	0x200001a4
 80025e0:	200000cc 	.word	0x200000cc
 80025e4:	200001b0 	.word	0x200001b0
 80025e8:	200001c0 	.word	0x200001c0
 80025ec:	200001ac 	.word	0x200001ac
 80025f0:	200000d0 	.word	0x200000d0

080025f4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80025fa:	2301      	movs	r3, #1
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	e013      	b.n	8002630 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002608:	4a2b      	ldr	r2, [pc, #172]	@ (80026b8 <prvCreateIdleTasks+0xc4>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	7819      	ldrb	r1, [r3, #0]
 8002610:	f107 020c 	add.w	r2, r7, #12
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	4413      	add	r3, r2
 8002618:	460a      	mov	r2, r1
 800261a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800261c:	f107 020c 	add.w	r2, r7, #12
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	4413      	add	r3, r2
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	3301      	adds	r3, #1
 800262e:	61fb      	str	r3, [r7, #28]
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	2b09      	cmp	r3, #9
 8002634:	dde8      	ble.n	8002608 <prvCreateIdleTasks+0x14>
 8002636:	e000      	b.n	800263a <prvCreateIdleTasks+0x46>
        {
            break;
 8002638:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800263a:	2300      	movs	r3, #0
 800263c:	623b      	str	r3, [r7, #32]
 800263e:	e030      	b.n	80026a2 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002640:	4b1e      	ldr	r3, [pc, #120]	@ (80026bc <prvCreateIdleTasks+0xc8>)
 8002642:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002644:	2300      	movs	r3, #0
 8002646:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002648:	2300      	movs	r3, #0
 800264a:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800264c:	463a      	mov	r2, r7
 800264e:	1d39      	adds	r1, r7, #4
 8002650:	f107 0308 	add.w	r3, r7, #8
 8002654:	4618      	mov	r0, r3
 8002656:	f000 fbef 	bl	8002e38 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800265a:	6838      	ldr	r0, [r7, #0]
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	68ba      	ldr	r2, [r7, #8]
 8002660:	f107 010c 	add.w	r1, r7, #12
 8002664:	9202      	str	r2, [sp, #8]
 8002666:	9301      	str	r3, [sp, #4]
 8002668:	2300      	movs	r3, #0
 800266a:	9300      	str	r3, [sp, #0]
 800266c:	2300      	movs	r3, #0
 800266e:	4602      	mov	r2, r0
 8002670:	69b8      	ldr	r0, [r7, #24]
 8002672:	f7ff fdf6 	bl	8002262 <xTaskCreateStatic>
 8002676:	4602      	mov	r2, r0
 8002678:	4911      	ldr	r1, [pc, #68]	@ (80026c0 <prvCreateIdleTasks+0xcc>)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002680:	4a0f      	ldr	r2, [pc, #60]	@ (80026c0 <prvCreateIdleTasks+0xcc>)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d002      	beq.n	8002692 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 800268c:	2301      	movs	r3, #1
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002690:	e001      	b.n	8002696 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8002692:	2300      	movs	r3, #0
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002698:	2b00      	cmp	r3, #0
 800269a:	d006      	beq.n	80026aa <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	3301      	adds	r3, #1
 80026a0:	623b      	str	r3, [r7, #32]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	ddcb      	ble.n	8002640 <prvCreateIdleTasks+0x4c>
 80026a8:	e000      	b.n	80026ac <prvCreateIdleTasks+0xb8>
        {
            break;
 80026aa:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80026ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3728      	adds	r7, #40	@ 0x28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	08006480 	.word	0x08006480
 80026bc:	08002ca1 	.word	0x08002ca1
 80026c0:	200001c8 	.word	0x200001c8

080026c4 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80026ca:	f7ff ff93 	bl	80025f4 <prvCreateIdleTasks>
 80026ce:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d129      	bne.n	800272a <vTaskStartScheduler+0x66>
    __asm volatile
 80026d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026da:	f383 8811 	msr	BASEPRI, r3
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f3bf 8f4f 	dsb	sy
 80026e6:	60bb      	str	r3, [r7, #8]
}
 80026e8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	@ (800275c <vTaskStartScheduler+0x98>)
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80026f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002760 <vTaskStartScheduler+0x9c>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002764 <vTaskStartScheduler+0xa0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80026fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002768 <vTaskStartScheduler+0xa4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	3334      	adds	r3, #52	@ 0x34
 8002704:	2205      	movs	r2, #5
 8002706:	4919      	ldr	r1, [pc, #100]	@ (800276c <vTaskStartScheduler+0xa8>)
 8002708:	4618      	mov	r0, r3
 800270a:	f003 f9f3 	bl	8005af4 <memcmp>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d005      	beq.n	8002720 <vTaskStartScheduler+0x5c>
 8002714:	4b14      	ldr	r3, [pc, #80]	@ (8002768 <vTaskStartScheduler+0xa4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f002 ffcd 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartExec>
 800271e:	e001      	b.n	8002724 <vTaskStartScheduler+0x60>
 8002720:	f002 ff6c 	bl	80055fc <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002724:	f000 fc2e 	bl	8002f84 <xPortStartScheduler>
 8002728:	e00f      	b.n	800274a <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d10b      	bne.n	800274a <vTaskStartScheduler+0x86>
    __asm volatile
 8002732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002736:	f383 8811 	msr	BASEPRI, r3
 800273a:	f3bf 8f6f 	isb	sy
 800273e:	f3bf 8f4f 	dsb	sy
 8002742:	607b      	str	r3, [r7, #4]
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	e7fd      	b.n	8002746 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800274a:	4b09      	ldr	r3, [pc, #36]	@ (8002770 <vTaskStartScheduler+0xac>)
 800274c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800274e:	20cd      	movs	r0, #205	@ 0xcd
 8002750:	f002 fec0 	bl	80054d4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	200001c4 	.word	0x200001c4
 8002760:	200001b0 	.word	0x200001b0
 8002764:	200001a8 	.word	0x200001a8
 8002768:	200000cc 	.word	0x200000cc
 800276c:	08006480 	.word	0x08006480
 8002770:	2000000c 	.word	0x2000000c

08002774 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002778:	4b04      	ldr	r3, [pc, #16]	@ (800278c <vTaskSuspendAll+0x18>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	3301      	adds	r3, #1
 800277e:	4a03      	ldr	r2, [pc, #12]	@ (800278c <vTaskSuspendAll+0x18>)
 8002780:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002782:	20cf      	movs	r0, #207	@ 0xcf
 8002784:	f002 fea6 	bl	80054d4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	200001cc 	.word	0x200001cc

08002790 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800279e:	f000 fd61 	bl	8003264 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 80027a6:	4b73      	ldr	r3, [pc, #460]	@ (8002974 <xTaskResumeAll+0x1e4>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <xTaskResumeAll+0x36>
    __asm volatile
 80027ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027b2:	f383 8811 	msr	BASEPRI, r3
 80027b6:	f3bf 8f6f 	isb	sy
 80027ba:	f3bf 8f4f 	dsb	sy
 80027be:	603b      	str	r3, [r7, #0]
}
 80027c0:	bf00      	nop
 80027c2:	bf00      	nop
 80027c4:	e7fd      	b.n	80027c2 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80027c6:	4b6b      	ldr	r3, [pc, #428]	@ (8002974 <xTaskResumeAll+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	4a69      	ldr	r2, [pc, #420]	@ (8002974 <xTaskResumeAll+0x1e4>)
 80027ce:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80027d0:	4b68      	ldr	r3, [pc, #416]	@ (8002974 <xTaskResumeAll+0x1e4>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f040 80c0 	bne.w	800295a <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <xTaskResumeAll+0x1e8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 80bb 	beq.w	800295a <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027e4:	e092      	b.n	800290c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80027e6:	4b65      	ldr	r3, [pc, #404]	@ (800297c <xTaskResumeAll+0x1ec>)
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	69db      	ldr	r3, [r3, #28]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	6a12      	ldr	r2, [r2, #32]
 80027fc:	609a      	str	r2, [r3, #8]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	6a1b      	ldr	r3, [r3, #32]
 8002802:	69fa      	ldr	r2, [r7, #28]
 8002804:	69d2      	ldr	r2, [r2, #28]
 8002806:	605a      	str	r2, [r3, #4]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	3318      	adds	r3, #24
 8002810:	429a      	cmp	r2, r3
 8002812:	d103      	bne.n	800281c <xTaskResumeAll+0x8c>
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	6a1a      	ldr	r2, [r3, #32]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	2200      	movs	r2, #0
 8002820:	629a      	str	r2, [r3, #40]	@ 0x28
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	1e5a      	subs	r2, r3, #1
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	695b      	ldr	r3, [r3, #20]
 8002830:	60bb      	str	r3, [r7, #8]
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	69fa      	ldr	r2, [r7, #28]
 8002838:	68d2      	ldr	r2, [r2, #12]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	69fa      	ldr	r2, [r7, #28]
 8002842:	6892      	ldr	r2, [r2, #8]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	685a      	ldr	r2, [r3, #4]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3304      	adds	r3, #4
 800284e:	429a      	cmp	r2, r3
 8002850:	d103      	bne.n	800285a <xTaskResumeAll+0xca>
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	605a      	str	r2, [r3, #4]
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	2200      	movs	r2, #0
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	4618      	mov	r0, r3
 800286e:	f002 ff65 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002876:	2201      	movs	r2, #1
 8002878:	409a      	lsls	r2, r3
 800287a:	4b41      	ldr	r3, [pc, #260]	@ (8002980 <xTaskResumeAll+0x1f0>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4313      	orrs	r3, r2
 8002880:	4a3f      	ldr	r2, [pc, #252]	@ (8002980 <xTaskResumeAll+0x1f0>)
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002888:	493e      	ldr	r1, [pc, #248]	@ (8002984 <xTaskResumeAll+0x1f4>)
 800288a:	4613      	mov	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	4413      	add	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	440b      	add	r3, r1
 8002894:	3304      	adds	r3, #4
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	607b      	str	r3, [r7, #4]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	609a      	str	r2, [r3, #8]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	60da      	str	r2, [r3, #12]
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	3204      	adds	r2, #4
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	1d1a      	adds	r2, r3, #4
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028be:	4613      	mov	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	4413      	add	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002984 <xTaskResumeAll+0x1f4>)
 80028c8:	441a      	add	r2, r3
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	615a      	str	r2, [r3, #20]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028d2:	492c      	ldr	r1, [pc, #176]	@ (8002984 <xTaskResumeAll+0x1f4>)
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	440b      	add	r3, r1
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69fa      	ldr	r2, [r7, #28]
 80028e2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80028e4:	1c59      	adds	r1, r3, #1
 80028e6:	4827      	ldr	r0, [pc, #156]	@ (8002984 <xTaskResumeAll+0x1f4>)
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	4403      	add	r3, r0
 80028f2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028f8:	4b23      	ldr	r3, [pc, #140]	@ (8002988 <xTaskResumeAll+0x1f8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028fe:	429a      	cmp	r2, r3
 8002900:	d904      	bls.n	800290c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002902:	4a22      	ldr	r2, [pc, #136]	@ (800298c <xTaskResumeAll+0x1fc>)
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	2101      	movs	r1, #1
 8002908:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800290c:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <xTaskResumeAll+0x1ec>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	f47f af68 	bne.w	80027e6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d001      	beq.n	8002920 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800291c:	f000 fa70 	bl	8002e00 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002920:	4b1b      	ldr	r3, [pc, #108]	@ (8002990 <xTaskResumeAll+0x200>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d012      	beq.n	8002952 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 800292c:	f000 f848 	bl	80029c0 <xTaskIncrementTick>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d004      	beq.n	8002940 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002936:	4a15      	ldr	r2, [pc, #84]	@ (800298c <xTaskResumeAll+0x1fc>)
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2101      	movs	r1, #1
 800293c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	3b01      	subs	r3, #1
 8002944:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002946:	69bb      	ldr	r3, [r7, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d1ef      	bne.n	800292c <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 800294c:	4b10      	ldr	r3, [pc, #64]	@ (8002990 <xTaskResumeAll+0x200>)
 800294e:	2200      	movs	r2, #0
 8002950:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002952:	4a0e      	ldr	r2, [pc, #56]	@ (800298c <xTaskResumeAll+0x1fc>)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800295a:	f000 fcb5 	bl	80032c8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	4619      	mov	r1, r3
 8002962:	20d0      	movs	r0, #208	@ 0xd0
 8002964:	f002 fdf2 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002968:	697b      	ldr	r3, [r7, #20]
}
 800296a:	4618      	mov	r0, r3
 800296c:	3720      	adds	r7, #32
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	200001cc 	.word	0x200001cc
 8002978:	200001a4 	.word	0x200001a4
 800297c:	20000164 	.word	0x20000164
 8002980:	200001ac 	.word	0x200001ac
 8002984:	200000d0 	.word	0x200000d0
 8002988:	200000cc 	.word	0x200000cc
 800298c:	200001b8 	.word	0x200001b8
 8002990:	200001b4 	.word	0x200001b4

08002994 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800299a:	f000 fd4f 	bl	800343c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800299e:	2300      	movs	r3, #0
 80029a0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80029a2:	4b06      	ldr	r3, [pc, #24]	@ (80029bc <xTaskGetTickCountFromISR+0x28>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 80029a8:	6839      	ldr	r1, [r7, #0]
 80029aa:	20d2      	movs	r0, #210	@ 0xd2
 80029ac:	f002 fdce 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 80029b0:	683b      	ldr	r3, [r7, #0]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3708      	adds	r7, #8
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	200001a8 	.word	0x200001a8

080029c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b08a      	sub	sp, #40	@ 0x28
 80029c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80029ca:	4b74      	ldr	r3, [pc, #464]	@ (8002b9c <xTaskIncrementTick+0x1dc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80d4 	bne.w	8002b7c <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80029d4:	4b72      	ldr	r3, [pc, #456]	@ (8002ba0 <xTaskIncrementTick+0x1e0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	3301      	adds	r3, #1
 80029da:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80029dc:	4a70      	ldr	r2, [pc, #448]	@ (8002ba0 <xTaskIncrementTick+0x1e0>)
 80029de:	6a3b      	ldr	r3, [r7, #32]
 80029e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d121      	bne.n	8002a2c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80029e8:	4b6e      	ldr	r3, [pc, #440]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00b      	beq.n	8002a0a <xTaskIncrementTick+0x4a>
    __asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	607b      	str	r3, [r7, #4]
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <xTaskIncrementTick+0x46>
 8002a0a:	4b66      	ldr	r3, [pc, #408]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	61fb      	str	r3, [r7, #28]
 8002a10:	4b65      	ldr	r3, [pc, #404]	@ (8002ba8 <xTaskIncrementTick+0x1e8>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a63      	ldr	r2, [pc, #396]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a16:	6013      	str	r3, [r2, #0]
 8002a18:	4a63      	ldr	r2, [pc, #396]	@ (8002ba8 <xTaskIncrementTick+0x1e8>)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	4b63      	ldr	r3, [pc, #396]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	3301      	adds	r3, #1
 8002a24:	4a61      	ldr	r2, [pc, #388]	@ (8002bac <xTaskIncrementTick+0x1ec>)
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	f000 f9ea 	bl	8002e00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002a2c:	4b60      	ldr	r3, [pc, #384]	@ (8002bb0 <xTaskIncrementTick+0x1f0>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6a3a      	ldr	r2, [r7, #32]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	f0c0 80a7 	bcc.w	8002b86 <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002a38:	4b5a      	ldr	r3, [pc, #360]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d104      	bne.n	8002a4c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002a42:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb0 <xTaskIncrementTick+0x1f0>)
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295
 8002a48:	601a      	str	r2, [r3, #0]
                    break;
 8002a4a:	e09c      	b.n	8002b86 <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002a4c:	4b55      	ldr	r3, [pc, #340]	@ (8002ba4 <xTaskIncrementTick+0x1e4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002a5c:	6a3a      	ldr	r2, [r7, #32]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d203      	bcs.n	8002a6c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002a64:	4a52      	ldr	r2, [pc, #328]	@ (8002bb0 <xTaskIncrementTick+0x1f0>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	6013      	str	r3, [r2, #0]
                        break;
 8002a6a:	e08c      	b.n	8002b86 <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	695b      	ldr	r3, [r3, #20]
 8002a70:	613b      	str	r3, [r7, #16]
 8002a72:	69bb      	ldr	r3, [r7, #24]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	68d2      	ldr	r2, [r2, #12]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	6892      	ldr	r2, [r2, #8]
 8002a84:	605a      	str	r2, [r3, #4]
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	685a      	ldr	r2, [r3, #4]
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d103      	bne.n	8002a9a <xTaskIncrementTick+0xda>
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	615a      	str	r2, [r3, #20]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	1e5a      	subs	r2, r3, #1
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d01e      	beq.n	8002af0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	6a12      	ldr	r2, [r2, #32]
 8002ac0:	609a      	str	r2, [r3, #8]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	6a1b      	ldr	r3, [r3, #32]
 8002ac6:	69ba      	ldr	r2, [r7, #24]
 8002ac8:	69d2      	ldr	r2, [r2, #28]
 8002aca:	605a      	str	r2, [r3, #4]
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	3318      	adds	r3, #24
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d103      	bne.n	8002ae0 <xTaskIncrementTick+0x120>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	6a1a      	ldr	r2, [r3, #32]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	1e5a      	subs	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f002 fe22 	bl	800573c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afc:	2201      	movs	r2, #1
 8002afe:	409a      	lsls	r2, r3
 8002b00:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb4 <xTaskIncrementTick+0x1f4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	4a2b      	ldr	r2, [pc, #172]	@ (8002bb4 <xTaskIncrementTick+0x1f4>)
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b0e:	492a      	ldr	r1, [pc, #168]	@ (8002bb8 <xTaskIncrementTick+0x1f8>)
 8002b10:	4613      	mov	r3, r2
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	4413      	add	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	60bb      	str	r3, [r7, #8]
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	68bb      	ldr	r3, [r7, #8]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	60da      	str	r2, [r3, #12]
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	3204      	adds	r2, #4
 8002b36:	605a      	str	r2, [r3, #4]
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	1d1a      	adds	r2, r3, #4
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	009b      	lsls	r3, r3, #2
 8002b4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb8 <xTaskIncrementTick+0x1f8>)
 8002b4e:	441a      	add	r2, r3
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	615a      	str	r2, [r3, #20]
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b58:	4917      	ldr	r1, [pc, #92]	@ (8002bb8 <xTaskIncrementTick+0x1f8>)
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	69ba      	ldr	r2, [r7, #24]
 8002b68:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b6a:	1c59      	adds	r1, r3, #1
 8002b6c:	4812      	ldr	r0, [pc, #72]	@ (8002bb8 <xTaskIncrementTick+0x1f8>)
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4403      	add	r3, r0
 8002b78:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b7a:	e75d      	b.n	8002a38 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bbc <xTaskIncrementTick+0x1fc>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a0e      	ldr	r2, [pc, #56]	@ (8002bbc <xTaskIncrementTick+0x1fc>)
 8002b84:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	4619      	mov	r1, r3
 8002b8a:	20db      	movs	r0, #219	@ 0xdb
 8002b8c:	f002 fcde 	bl	800554c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3728      	adds	r7, #40	@ 0x28
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	200001cc 	.word	0x200001cc
 8002ba0:	200001a8 	.word	0x200001a8
 8002ba4:	2000015c 	.word	0x2000015c
 8002ba8:	20000160 	.word	0x20000160
 8002bac:	200001bc 	.word	0x200001bc
 8002bb0:	200001c4 	.word	0x200001c4
 8002bb4:	200001ac 	.word	0x200001ac
 8002bb8:	200000d0 	.word	0x200000d0
 8002bbc:	200001b4 	.word	0x200001b4

08002bc0 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002bc6:	4b30      	ldr	r3, [pc, #192]	@ (8002c88 <vTaskSwitchContext+0xc8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002bce:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <vTaskSwitchContext+0xcc>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002bd4:	e054      	b.n	8002c80 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <vTaskSwitchContext+0xcc>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bdc:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <vTaskSwitchContext+0xd0>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002bea:	7afb      	ldrb	r3, [r7, #11]
 8002bec:	f1c3 031f 	rsb	r3, r3, #31
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	4928      	ldr	r1, [pc, #160]	@ (8002c94 <vTaskSwitchContext+0xd4>)
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	440b      	add	r3, r1
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <vTaskSwitchContext+0x5e>
    __asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	607b      	str	r3, [r7, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <vTaskSwitchContext+0x5a>
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4a1a      	ldr	r2, [pc, #104]	@ (8002c94 <vTaskSwitchContext+0xd4>)
 8002c2a:	4413      	add	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	685a      	ldr	r2, [r3, #4]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	3308      	adds	r3, #8
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d103      	bne.n	8002c4c <vTaskSwitchContext+0x8c>
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	68da      	ldr	r2, [r3, #12]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	605a      	str	r2, [r3, #4]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	68db      	ldr	r3, [r3, #12]
 8002c52:	4a11      	ldr	r2, [pc, #68]	@ (8002c98 <vTaskSwitchContext+0xd8>)
 8002c54:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002c56:	4b10      	ldr	r3, [pc, #64]	@ (8002c98 <vTaskSwitchContext+0xd8>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	3334      	adds	r3, #52	@ 0x34
 8002c5c:	2205      	movs	r2, #5
 8002c5e:	490f      	ldr	r1, [pc, #60]	@ (8002c9c <vTaskSwitchContext+0xdc>)
 8002c60:	4618      	mov	r0, r3
 8002c62:	f002 ff47 	bl	8005af4 <memcmp>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <vTaskSwitchContext+0xb8>
 8002c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <vTaskSwitchContext+0xd8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f002 fd21 	bl	80056b8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002c76:	e001      	b.n	8002c7c <vTaskSwitchContext+0xbc>
 8002c78:	f002 fcc0 	bl	80055fc <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002c7c:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <vTaskSwitchContext+0xd8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
    }
 8002c80:	bf00      	nop
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	200001cc 	.word	0x200001cc
 8002c8c:	200001b8 	.word	0x200001b8
 8002c90:	200001ac 	.word	0x200001ac
 8002c94:	200000d0 	.word	0x200000d0
 8002c98:	200000cc 	.word	0x200000cc
 8002c9c:	08006480 	.word	0x08006480

08002ca0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002ca8:	f000 f84c 	bl	8002d44 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8002cac:	4b04      	ldr	r3, [pc, #16]	@ (8002cc0 <prvIdleTask+0x20>)
 8002cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002cbc:	bf00      	nop
 8002cbe:	e7f3      	b.n	8002ca8 <prvIdleTask+0x8>
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002cca:	2300      	movs	r3, #0
 8002ccc:	607b      	str	r3, [r7, #4]
 8002cce:	e00c      	b.n	8002cea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4a12      	ldr	r2, [pc, #72]	@ (8002d24 <prvInitialiseTaskLists+0x60>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7ff f9fe 	bl	80020e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	607b      	str	r3, [r7, #4]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d9ef      	bls.n	8002cd0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002cf0:	480d      	ldr	r0, [pc, #52]	@ (8002d28 <prvInitialiseTaskLists+0x64>)
 8002cf2:	f7ff f9f5 	bl	80020e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002cf6:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <prvInitialiseTaskLists+0x68>)
 8002cf8:	f7ff f9f2 	bl	80020e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002cfc:	480c      	ldr	r0, [pc, #48]	@ (8002d30 <prvInitialiseTaskLists+0x6c>)
 8002cfe:	f7ff f9ef 	bl	80020e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002d02:	480c      	ldr	r0, [pc, #48]	@ (8002d34 <prvInitialiseTaskLists+0x70>)
 8002d04:	f7ff f9ec 	bl	80020e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002d08:	480b      	ldr	r0, [pc, #44]	@ (8002d38 <prvInitialiseTaskLists+0x74>)
 8002d0a:	f7ff f9e9 	bl	80020e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d3c <prvInitialiseTaskLists+0x78>)
 8002d10:	4a05      	ldr	r2, [pc, #20]	@ (8002d28 <prvInitialiseTaskLists+0x64>)
 8002d12:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002d14:	4b0a      	ldr	r3, [pc, #40]	@ (8002d40 <prvInitialiseTaskLists+0x7c>)
 8002d16:	4a05      	ldr	r2, [pc, #20]	@ (8002d2c <prvInitialiseTaskLists+0x68>)
 8002d18:	601a      	str	r2, [r3, #0]
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	200000d0 	.word	0x200000d0
 8002d28:	20000134 	.word	0x20000134
 8002d2c:	20000148 	.word	0x20000148
 8002d30:	20000164 	.word	0x20000164
 8002d34:	20000178 	.word	0x20000178
 8002d38:	20000190 	.word	0x20000190
 8002d3c:	2000015c 	.word	0x2000015c
 8002d40:	20000160 	.word	0x20000160

08002d44 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d4a:	e019      	b.n	8002d80 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002d4c:	f000 fa8a 	bl	8003264 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002d50:	4b10      	ldr	r3, [pc, #64]	@ (8002d94 <prvCheckTasksWaitingTermination+0x50>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff f9f0 	bl	8002142 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <prvCheckTasksWaitingTermination+0x54>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	4a0b      	ldr	r2, [pc, #44]	@ (8002d98 <prvCheckTasksWaitingTermination+0x54>)
 8002d6a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002d9c <prvCheckTasksWaitingTermination+0x58>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	3b01      	subs	r3, #1
 8002d72:	4a0a      	ldr	r2, [pc, #40]	@ (8002d9c <prvCheckTasksWaitingTermination+0x58>)
 8002d74:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002d76:	f000 faa7 	bl	80032c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f810 	bl	8002da0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002d80:	4b06      	ldr	r3, [pc, #24]	@ (8002d9c <prvCheckTasksWaitingTermination+0x58>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1e1      	bne.n	8002d4c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002d88:	bf00      	nop
 8002d8a:	bf00      	nop
 8002d8c:	3708      	adds	r7, #8
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	20000178 	.word	0x20000178
 8002d98:	200001a4 	.word	0x200001a4
 8002d9c:	2000018c 	.word	0x2000018c

08002da0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d108      	bne.n	8002dc4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db6:	4618      	mov	r0, r3
 8002db8:	f000 fcb4 	bl	8003724 <vPortFree>
                vPortFree( pxTCB );
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 fcb1 	bl	8003724 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002dc2:	e019      	b.n	8002df8 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d103      	bne.n	8002dd6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fca8 	bl	8003724 <vPortFree>
    }
 8002dd4:	e010      	b.n	8002df8 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d00b      	beq.n	8002df8 <prvDeleteTCB+0x58>
    __asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <prvDeleteTCB+0x54>
    }
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}

08002e00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e04:	4b0a      	ldr	r3, [pc, #40]	@ (8002e30 <prvResetNextTaskUnblockTime+0x30>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d104      	bne.n	8002e18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002e0e:	4b09      	ldr	r3, [pc, #36]	@ (8002e34 <prvResetNextTaskUnblockTime+0x34>)
 8002e10:	f04f 32ff 	mov.w	r2, #4294967295
 8002e14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002e16:	e005      	b.n	8002e24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002e18:	4b05      	ldr	r3, [pc, #20]	@ (8002e30 <prvResetNextTaskUnblockTime+0x30>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <prvResetNextTaskUnblockTime+0x34>)
 8002e22:	6013      	str	r3, [r2, #0]
}
 8002e24:	bf00      	nop
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	2000015c 	.word	0x2000015c
 8002e34:	200001c4 	.word	0x200001c4

08002e38 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a07      	ldr	r2, [pc, #28]	@ (8002e64 <vApplicationGetIdleTaskMemory+0x2c>)
 8002e48:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	4a06      	ldr	r2, [pc, #24]	@ (8002e68 <vApplicationGetIdleTaskMemory+0x30>)
 8002e4e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2282      	movs	r2, #130	@ 0x82
 8002e54:	601a      	str	r2, [r3, #0]
    }
 8002e56:	bf00      	nop
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	200001d0 	.word	0x200001d0
 8002e68:	20000228 	.word	0x20000228

08002e6c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002e84:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	3b04      	subs	r3, #4
 8002e8a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	f023 0201 	bic.w	r2, r3, #1
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3b04      	subs	r3, #4
 8002e9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002e9c:	4a0c      	ldr	r2, [pc, #48]	@ (8002ed0 <pxPortInitialiseStack+0x64>)
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	3b14      	subs	r3, #20
 8002ea6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f06f 0202 	mvn.w	r2, #2
 8002eba:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	3b20      	subs	r3, #32
 8002ec0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr
 8002ed0:	08002ed5 	.word	0x08002ed5

08002ed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002ede:	4b13      	ldr	r3, [pc, #76]	@ (8002f2c <prvTaskExitError+0x58>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee6:	d00b      	beq.n	8002f00 <prvTaskExitError+0x2c>
    __asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	60fb      	str	r3, [r7, #12]
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <prvTaskExitError+0x28>
    __asm volatile
 8002f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f04:	f383 8811 	msr	BASEPRI, r3
 8002f08:	f3bf 8f6f 	isb	sy
 8002f0c:	f3bf 8f4f 	dsb	sy
 8002f10:	60bb      	str	r3, [r7, #8]
}
 8002f12:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002f14:	bf00      	nop
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0fc      	beq.n	8002f16 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002f1c:	bf00      	nop
 8002f1e:	bf00      	nop
 8002f20:	3714      	adds	r7, #20
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	20000010 	.word	0x20000010

08002f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002f30:	4b07      	ldr	r3, [pc, #28]	@ (8002f50 <pxCurrentTCBConst2>)
 8002f32:	6819      	ldr	r1, [r3, #0]
 8002f34:	6808      	ldr	r0, [r1, #0]
 8002f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f3a:	f380 8809 	msr	PSP, r0
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	f04f 0000 	mov.w	r0, #0
 8002f46:	f380 8811 	msr	BASEPRI, r0
 8002f4a:	4770      	bx	lr
 8002f4c:	f3af 8000 	nop.w

08002f50 <pxCurrentTCBConst2>:
 8002f50:	200000cc 	.word	0x200000cc
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop

08002f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002f58:	4808      	ldr	r0, [pc, #32]	@ (8002f7c <prvPortStartFirstTask+0x24>)
 8002f5a:	6800      	ldr	r0, [r0, #0]
 8002f5c:	6800      	ldr	r0, [r0, #0]
 8002f5e:	f380 8808 	msr	MSP, r0
 8002f62:	f04f 0000 	mov.w	r0, #0
 8002f66:	f380 8814 	msr	CONTROL, r0
 8002f6a:	b662      	cpsie	i
 8002f6c:	b661      	cpsie	f
 8002f6e:	f3bf 8f4f 	dsb	sy
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	df00      	svc	0
 8002f78:	bf00      	nop
 8002f7a:	0000      	.short	0x0000
 8002f7c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8002f80:	bf00      	nop
 8002f82:	bf00      	nop

08002f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b08c      	sub	sp, #48	@ 0x30
 8002f88:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002f8a:	4b69      	ldr	r3, [pc, #420]	@ (8003130 <xPortStartScheduler+0x1ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a69      	ldr	r2, [pc, #420]	@ (8003134 <xPortStartScheduler+0x1b0>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d10b      	bne.n	8002fac <xPortStartScheduler+0x28>
    __asm volatile
 8002f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002fa6:	bf00      	nop
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002fac:	4b60      	ldr	r3, [pc, #384]	@ (8003130 <xPortStartScheduler+0x1ac>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a61      	ldr	r2, [pc, #388]	@ (8003138 <xPortStartScheduler+0x1b4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d10b      	bne.n	8002fce <xPortStartScheduler+0x4a>
    __asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	623b      	str	r3, [r7, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	bf00      	nop
 8002fcc:	e7fd      	b.n	8002fca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8002fce:	4b5b      	ldr	r3, [pc, #364]	@ (800313c <xPortStartScheduler+0x1b8>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	332c      	adds	r3, #44	@ 0x2c
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a59      	ldr	r2, [pc, #356]	@ (8003140 <xPortStartScheduler+0x1bc>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d00b      	beq.n	8002ff8 <xPortStartScheduler+0x74>
    __asm volatile
 8002fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe4:	f383 8811 	msr	BASEPRI, r3
 8002fe8:	f3bf 8f6f 	isb	sy
 8002fec:	f3bf 8f4f 	dsb	sy
 8002ff0:	61fb      	str	r3, [r7, #28]
}
 8002ff2:	bf00      	nop
 8002ff4:	bf00      	nop
 8002ff6:	e7fd      	b.n	8002ff4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8002ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ffa:	3338      	adds	r3, #56	@ 0x38
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a51      	ldr	r2, [pc, #324]	@ (8003144 <xPortStartScheduler+0x1c0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00b      	beq.n	800301c <xPortStartScheduler+0x98>
    __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	61bb      	str	r3, [r7, #24]
}
 8003016:	bf00      	nop
 8003018:	bf00      	nop
 800301a:	e7fd      	b.n	8003018 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800301c:	2300      	movs	r3, #0
 800301e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003020:	4b49      	ldr	r3, [pc, #292]	@ (8003148 <xPortStartScheduler+0x1c4>)
 8003022:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302e:	22ff      	movs	r2, #255	@ 0xff
 8003030:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	b2db      	uxtb	r3, r3
 8003038:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003042:	b2da      	uxtb	r2, r3
 8003044:	4b41      	ldr	r3, [pc, #260]	@ (800314c <xPortStartScheduler+0x1c8>)
 8003046:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003048:	4b40      	ldr	r3, [pc, #256]	@ (800314c <xPortStartScheduler+0x1c8>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d10b      	bne.n	8003068 <xPortStartScheduler+0xe4>
    __asm volatile
 8003050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003054:	f383 8811 	msr	BASEPRI, r3
 8003058:	f3bf 8f6f 	isb	sy
 800305c:	f3bf 8f4f 	dsb	sy
 8003060:	617b      	str	r3, [r7, #20]
}
 8003062:	bf00      	nop
 8003064:	bf00      	nop
 8003066:	e7fd      	b.n	8003064 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003072:	2b00      	cmp	r3, #0
 8003074:	d013      	beq.n	800309e <xPortStartScheduler+0x11a>
    __asm volatile
 8003076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307a:	f383 8811 	msr	BASEPRI, r3
 800307e:	f3bf 8f6f 	isb	sy
 8003082:	f3bf 8f4f 	dsb	sy
 8003086:	613b      	str	r3, [r7, #16]
}
 8003088:	bf00      	nop
 800308a:	bf00      	nop
 800308c:	e7fd      	b.n	800308a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	3301      	adds	r3, #1
 8003092:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003094:	79fb      	ldrb	r3, [r7, #7]
 8003096:	b2db      	uxtb	r3, r3
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	b2db      	uxtb	r3, r3
 800309c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a6:	2b80      	cmp	r3, #128	@ 0x80
 80030a8:	d0f1      	beq.n	800308e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d103      	bne.n	80030b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80030b0:	4b27      	ldr	r3, [pc, #156]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e004      	b.n	80030c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	f1c3 0307 	rsb	r3, r3, #7
 80030be:	4a24      	ldr	r2, [pc, #144]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80030c2:	4b23      	ldr	r3, [pc, #140]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	021b      	lsls	r3, r3, #8
 80030c8:	4a21      	ldr	r2, [pc, #132]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80030cc:	4b20      	ldr	r3, [pc, #128]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030d4:	4a1e      	ldr	r2, [pc, #120]	@ (8003150 <xPortStartScheduler+0x1cc>)
 80030d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	b2da      	uxtb	r2, r3
 80030dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80030e0:	4b1c      	ldr	r3, [pc, #112]	@ (8003154 <xPortStartScheduler+0x1d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a1b      	ldr	r2, [pc, #108]	@ (8003154 <xPortStartScheduler+0x1d0>)
 80030e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80030ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80030ec:	4b19      	ldr	r3, [pc, #100]	@ (8003154 <xPortStartScheduler+0x1d0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a18      	ldr	r2, [pc, #96]	@ (8003154 <xPortStartScheduler+0x1d0>)
 80030f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80030f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80030f8:	4b17      	ldr	r3, [pc, #92]	@ (8003158 <xPortStartScheduler+0x1d4>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80030fe:	f000 f96d 	bl	80033dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <xPortStartScheduler+0x1d8>)
 8003104:	2200      	movs	r2, #0
 8003106:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003108:	f000 f98c 	bl	8003424 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800310c:	4b14      	ldr	r3, [pc, #80]	@ (8003160 <xPortStartScheduler+0x1dc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a13      	ldr	r2, [pc, #76]	@ (8003160 <xPortStartScheduler+0x1dc>)
 8003112:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003116:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003118:	f7ff ff1e 	bl	8002f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800311c:	f7ff fd50 	bl	8002bc0 <vTaskSwitchContext>
    prvTaskExitError();
 8003120:	f7ff fed8 	bl	8002ed4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3730      	adds	r7, #48	@ 0x30
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
 800312e:	bf00      	nop
 8003130:	e000ed00 	.word	0xe000ed00
 8003134:	410fc271 	.word	0x410fc271
 8003138:	410fc270 	.word	0x410fc270
 800313c:	e000ed08 	.word	0xe000ed08
 8003140:	08002f31 	.word	0x08002f31
 8003144:	08003321 	.word	0x08003321
 8003148:	e000e400 	.word	0xe000e400
 800314c:	20000430 	.word	0x20000430
 8003150:	20000434 	.word	0x20000434
 8003154:	e000ed20 	.word	0xe000ed20
 8003158:	e000ed1c 	.word	0xe000ed1c
 800315c:	20000010 	.word	0x20000010
 8003160:	e000ef34 	.word	0xe000ef34

08003164 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800316a:	4b38      	ldr	r3, [pc, #224]	@ (800324c <vInitPrioGroupValue+0xe8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a38      	ldr	r2, [pc, #224]	@ (8003250 <vInitPrioGroupValue+0xec>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d10b      	bne.n	800318c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003178:	f383 8811 	msr	BASEPRI, r3
 800317c:	f3bf 8f6f 	isb	sy
 8003180:	f3bf 8f4f 	dsb	sy
 8003184:	613b      	str	r3, [r7, #16]
}
 8003186:	bf00      	nop
 8003188:	bf00      	nop
 800318a:	e7fd      	b.n	8003188 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800318c:	4b2f      	ldr	r3, [pc, #188]	@ (800324c <vInitPrioGroupValue+0xe8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a30      	ldr	r2, [pc, #192]	@ (8003254 <vInitPrioGroupValue+0xf0>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10b      	bne.n	80031ae <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	60fb      	str	r3, [r7, #12]
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80031ae:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <vInitPrioGroupValue+0xf4>)
 80031b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	22ff      	movs	r2, #255	@ 0xff
 80031be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	4b22      	ldr	r3, [pc, #136]	@ (800325c <vInitPrioGroupValue+0xf8>)
 80031d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80031d6:	4b22      	ldr	r3, [pc, #136]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 80031d8:	2207      	movs	r2, #7
 80031da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031dc:	e009      	b.n	80031f2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80031de:	4b20      	ldr	r3, [pc, #128]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	3b01      	subs	r3, #1
 80031e4:	4a1e      	ldr	r2, [pc, #120]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 80031e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80031e8:	78fb      	ldrb	r3, [r7, #3]
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031fa:	2b80      	cmp	r3, #128	@ 0x80
 80031fc:	d0ef      	beq.n	80031de <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80031fe:	4b18      	ldr	r3, [pc, #96]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1c3 0307 	rsb	r3, r3, #7
 8003206:	2b04      	cmp	r3, #4
 8003208:	d00b      	beq.n	8003222 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800320a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320e:	f383 8811 	msr	BASEPRI, r3
 8003212:	f3bf 8f6f 	isb	sy
 8003216:	f3bf 8f4f 	dsb	sy
 800321a:	60bb      	str	r3, [r7, #8]
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	e7fd      	b.n	800321e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003222:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	021b      	lsls	r3, r3, #8
 8003228:	4a0d      	ldr	r2, [pc, #52]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 800322a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800322c:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003234:	4a0a      	ldr	r2, [pc, #40]	@ (8003260 <vInitPrioGroupValue+0xfc>)
 8003236:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	b2da      	uxtb	r2, r3
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003240:	bf00      	nop
 8003242:	371c      	adds	r7, #28
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00
 8003250:	410fc271 	.word	0x410fc271
 8003254:	410fc270 	.word	0x410fc270
 8003258:	e000e400 	.word	0xe000e400
 800325c:	20000430 	.word	0x20000430
 8003260:	20000434 	.word	0x20000434

08003264 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
    __asm volatile
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	607b      	str	r3, [r7, #4]
}
 800327c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800327e:	4b10      	ldr	r3, [pc, #64]	@ (80032c0 <vPortEnterCritical+0x5c>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	3301      	adds	r3, #1
 8003284:	4a0e      	ldr	r2, [pc, #56]	@ (80032c0 <vPortEnterCritical+0x5c>)
 8003286:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003288:	4b0d      	ldr	r3, [pc, #52]	@ (80032c0 <vPortEnterCritical+0x5c>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d110      	bne.n	80032b2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <vPortEnterCritical+0x60>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <vPortEnterCritical+0x4e>
    __asm volatile
 800329a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329e:	f383 8811 	msr	BASEPRI, r3
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	f3bf 8f4f 	dsb	sy
 80032aa:	603b      	str	r3, [r7, #0]
}
 80032ac:	bf00      	nop
 80032ae:	bf00      	nop
 80032b0:	e7fd      	b.n	80032ae <vPortEnterCritical+0x4a>
    }
}
 80032b2:	bf00      	nop
 80032b4:	370c      	adds	r7, #12
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	20000010 	.word	0x20000010
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80032ce:	4b12      	ldr	r3, [pc, #72]	@ (8003318 <vPortExitCritical+0x50>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10b      	bne.n	80032ee <vPortExitCritical+0x26>
    __asm volatile
 80032d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032da:	f383 8811 	msr	BASEPRI, r3
 80032de:	f3bf 8f6f 	isb	sy
 80032e2:	f3bf 8f4f 	dsb	sy
 80032e6:	607b      	str	r3, [r7, #4]
}
 80032e8:	bf00      	nop
 80032ea:	bf00      	nop
 80032ec:	e7fd      	b.n	80032ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80032ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003318 <vPortExitCritical+0x50>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	3b01      	subs	r3, #1
 80032f4:	4a08      	ldr	r2, [pc, #32]	@ (8003318 <vPortExitCritical+0x50>)
 80032f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80032f8:	4b07      	ldr	r3, [pc, #28]	@ (8003318 <vPortExitCritical+0x50>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <vPortExitCritical+0x44>
 8003300:	2300      	movs	r3, #0
 8003302:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800330a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000010 	.word	0x20000010
 800331c:	00000000 	.word	0x00000000

08003320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003320:	f3ef 8009 	mrs	r0, PSP
 8003324:	f3bf 8f6f 	isb	sy
 8003328:	4b15      	ldr	r3, [pc, #84]	@ (8003380 <pxCurrentTCBConst>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	f01e 0f10 	tst.w	lr, #16
 8003330:	bf08      	it	eq
 8003332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800333a:	6010      	str	r0, [r2, #0]
 800333c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003344:	f380 8811 	msr	BASEPRI, r0
 8003348:	f3bf 8f4f 	dsb	sy
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f7ff fc36 	bl	8002bc0 <vTaskSwitchContext>
 8003354:	f04f 0000 	mov.w	r0, #0
 8003358:	f380 8811 	msr	BASEPRI, r0
 800335c:	bc09      	pop	{r0, r3}
 800335e:	6819      	ldr	r1, [r3, #0]
 8003360:	6808      	ldr	r0, [r1, #0]
 8003362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003366:	f01e 0f10 	tst.w	lr, #16
 800336a:	bf08      	it	eq
 800336c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003370:	f380 8809 	msr	PSP, r0
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	f3af 8000 	nop.w

08003380 <pxCurrentTCBConst>:
 8003380:	200000cc 	.word	0x200000cc
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop

08003388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
    __asm volatile
 800338e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003392:	f383 8811 	msr	BASEPRI, r3
 8003396:	f3bf 8f6f 	isb	sy
 800339a:	f3bf 8f4f 	dsb	sy
 800339e:	607b      	str	r3, [r7, #4]
}
 80033a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80033a2:	f002 f81d 	bl	80053e0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80033a6:	f7ff fb0b 	bl	80029c0 <xTaskIncrementTick>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80033b0:	f002 f874 	bl	800549c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80033b4:	4b08      	ldr	r3, [pc, #32]	@ (80033d8 <SysTick_Handler+0x50>)
 80033b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	e001      	b.n	80033c2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80033be:	f002 f851 	bl	8005464 <SEGGER_SYSVIEW_RecordExitISR>
 80033c2:	2300      	movs	r3, #0
 80033c4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	f383 8811 	msr	BASEPRI, r3
}
 80033cc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80033ce:	bf00      	nop
 80033d0:	3708      	adds	r7, #8
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	e000ed04 	.word	0xe000ed04

080033dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80033dc:	b480      	push	{r7}
 80033de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80033e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003410 <vPortSetupTimerInterrupt+0x34>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80033e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003414 <vPortSetupTimerInterrupt+0x38>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80033ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003418 <vPortSetupTimerInterrupt+0x3c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	@ (800341c <vPortSetupTimerInterrupt+0x40>)
 80033f2:	fba2 2303 	umull	r2, r3, r2, r3
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	4a09      	ldr	r2, [pc, #36]	@ (8003420 <vPortSetupTimerInterrupt+0x44>)
 80033fa:	3b01      	subs	r3, #1
 80033fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80033fe:	4b04      	ldr	r3, [pc, #16]	@ (8003410 <vPortSetupTimerInterrupt+0x34>)
 8003400:	2207      	movs	r2, #7
 8003402:	601a      	str	r2, [r3, #0]
}
 8003404:	bf00      	nop
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr
 800340e:	bf00      	nop
 8003410:	e000e010 	.word	0xe000e010
 8003414:	e000e018 	.word	0xe000e018
 8003418:	20000000 	.word	0x20000000
 800341c:	10624dd3 	.word	0x10624dd3
 8003420:	e000e014 	.word	0xe000e014

08003424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003434 <vPortEnableVFP+0x10>
 8003428:	6801      	ldr	r1, [r0, #0]
 800342a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800342e:	6001      	str	r1, [r0, #0]
 8003430:	4770      	bx	lr
 8003432:	0000      	.short	0x0000
 8003434:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003438:	bf00      	nop
 800343a:	bf00      	nop

0800343c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003442:	f3ef 8305 	mrs	r3, IPSR
 8003446:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2b0f      	cmp	r3, #15
 800344c:	d915      	bls.n	800347a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800344e:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <vPortValidateInterruptPriority+0x74>)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	4413      	add	r3, r2
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003458:	4b16      	ldr	r3, [pc, #88]	@ (80034b4 <vPortValidateInterruptPriority+0x78>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	7afa      	ldrb	r2, [r7, #11]
 800345e:	429a      	cmp	r2, r3
 8003460:	d20b      	bcs.n	800347a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	607b      	str	r3, [r7, #4]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800347a:	4b0f      	ldr	r3, [pc, #60]	@ (80034b8 <vPortValidateInterruptPriority+0x7c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003482:	4b0e      	ldr	r3, [pc, #56]	@ (80034bc <vPortValidateInterruptPriority+0x80>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	429a      	cmp	r2, r3
 8003488:	d90b      	bls.n	80034a2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	bf00      	nop
 80034a0:	e7fd      	b.n	800349e <vPortValidateInterruptPriority+0x62>
    }
 80034a2:	bf00      	nop
 80034a4:	3714      	adds	r7, #20
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
 80034ae:	bf00      	nop
 80034b0:	e000e3f0 	.word	0xe000e3f0
 80034b4:	20000430 	.word	0x20000430
 80034b8:	e000ed0c 	.word	0xe000ed0c
 80034bc:	20000434 	.word	0x20000434

080034c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08e      	sub	sp, #56	@ 0x38
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80034c8:	2300      	movs	r3, #0
 80034ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d022      	beq.n	8003518 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80034d2:	2308      	movs	r3, #8
 80034d4:	43db      	mvns	r3, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	429a      	cmp	r2, r3
 80034da:	d81b      	bhi.n	8003514 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80034dc:	2208      	movs	r2, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	f003 0307 	and.w	r3, r3, #7
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d014      	beq.n	8003518 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f003 0307 	and.w	r3, r3, #7
 80034f4:	f1c3 0308 	rsb	r3, r3, #8
 80034f8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80034fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034fc:	43db      	mvns	r3, r3
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	429a      	cmp	r2, r3
 8003502:	d804      	bhi.n	800350e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	4413      	add	r3, r2
 800350a:	607b      	str	r3, [r7, #4]
 800350c:	e004      	b.n	8003518 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	e001      	b.n	8003518 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003514:	2300      	movs	r3, #0
 8003516:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003518:	f7ff f92c 	bl	8002774 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800351c:	4b7a      	ldr	r3, [pc, #488]	@ (8003708 <pvPortMalloc+0x248>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003524:	f000 f978 	bl	8003818 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f2c0 80d3 	blt.w	80036d6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2b00      	cmp	r3, #0
 8003534:	f000 80cf 	beq.w	80036d6 <pvPortMalloc+0x216>
 8003538:	4b74      	ldr	r3, [pc, #464]	@ (800370c <pvPortMalloc+0x24c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	429a      	cmp	r2, r3
 8003540:	f200 80c9 	bhi.w	80036d6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003544:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <pvPortMalloc+0x250>)
 8003546:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003548:	4b71      	ldr	r3, [pc, #452]	@ (8003710 <pvPortMalloc+0x250>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800354e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003550:	4a70      	ldr	r2, [pc, #448]	@ (8003714 <pvPortMalloc+0x254>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d305      	bcc.n	8003562 <pvPortMalloc+0xa2>
 8003556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003558:	4a6f      	ldr	r2, [pc, #444]	@ (8003718 <pvPortMalloc+0x258>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d801      	bhi.n	8003562 <pvPortMalloc+0xa2>
 800355e:	2301      	movs	r3, #1
 8003560:	e000      	b.n	8003564 <pvPortMalloc+0xa4>
 8003562:	2300      	movs	r3, #0
 8003564:	2b00      	cmp	r3, #0
 8003566:	d129      	bne.n	80035bc <pvPortMalloc+0xfc>
    __asm volatile
 8003568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800356c:	f383 8811 	msr	BASEPRI, r3
 8003570:	f3bf 8f6f 	isb	sy
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	623b      	str	r3, [r7, #32]
}
 800357a:	bf00      	nop
 800357c:	bf00      	nop
 800357e:	e7fd      	b.n	800357c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003582:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800358a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800358c:	4a61      	ldr	r2, [pc, #388]	@ (8003714 <pvPortMalloc+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d305      	bcc.n	800359e <pvPortMalloc+0xde>
 8003592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003594:	4a60      	ldr	r2, [pc, #384]	@ (8003718 <pvPortMalloc+0x258>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d801      	bhi.n	800359e <pvPortMalloc+0xde>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <pvPortMalloc+0xe0>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10b      	bne.n	80035bc <pvPortMalloc+0xfc>
    __asm volatile
 80035a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a8:	f383 8811 	msr	BASEPRI, r3
 80035ac:	f3bf 8f6f 	isb	sy
 80035b0:	f3bf 8f4f 	dsb	sy
 80035b4:	61fb      	str	r3, [r7, #28]
}
 80035b6:	bf00      	nop
 80035b8:	bf00      	nop
 80035ba:	e7fd      	b.n	80035b8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80035bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d903      	bls.n	80035ce <pvPortMalloc+0x10e>
 80035c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1d8      	bne.n	8003580 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80035ce:	4b4e      	ldr	r3, [pc, #312]	@ (8003708 <pvPortMalloc+0x248>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d07e      	beq.n	80036d6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2208      	movs	r2, #8
 80035de:	4413      	add	r3, r2
 80035e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80035e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e4:	4a4b      	ldr	r2, [pc, #300]	@ (8003714 <pvPortMalloc+0x254>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d305      	bcc.n	80035f6 <pvPortMalloc+0x136>
 80035ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003718 <pvPortMalloc+0x258>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d801      	bhi.n	80035f6 <pvPortMalloc+0x136>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <pvPortMalloc+0x138>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <pvPortMalloc+0x154>
    __asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	61bb      	str	r3, [r7, #24]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800361a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800361c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	429a      	cmp	r2, r3
 8003624:	d90b      	bls.n	800363e <pvPortMalloc+0x17e>
    __asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	617b      	str	r3, [r7, #20]
}
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800363e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003640:	685a      	ldr	r2, [r3, #4]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	1ad2      	subs	r2, r2, r3
 8003646:	2308      	movs	r3, #8
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	429a      	cmp	r2, r3
 800364c:	d924      	bls.n	8003698 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800364e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4413      	add	r3, r2
 8003654:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003658:	f003 0307 	and.w	r3, r3, #7
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00b      	beq.n	8003678 <pvPortMalloc+0x1b8>
    __asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	613b      	str	r3, [r7, #16]
}
 8003672:	bf00      	nop
 8003674:	bf00      	nop
 8003676:	e7fd      	b.n	8003674 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	1ad2      	subs	r2, r2, r3
 8003680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003682:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8003684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800368a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003690:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8003692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003696:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003698:	4b1c      	ldr	r3, [pc, #112]	@ (800370c <pvPortMalloc+0x24c>)
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	4a1a      	ldr	r2, [pc, #104]	@ (800370c <pvPortMalloc+0x24c>)
 80036a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036a6:	4b19      	ldr	r3, [pc, #100]	@ (800370c <pvPortMalloc+0x24c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b1c      	ldr	r3, [pc, #112]	@ (800371c <pvPortMalloc+0x25c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d203      	bcs.n	80036ba <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036b2:	4b16      	ldr	r3, [pc, #88]	@ (800370c <pvPortMalloc+0x24c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a19      	ldr	r2, [pc, #100]	@ (800371c <pvPortMalloc+0x25c>)
 80036b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80036ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80036c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80036c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80036cc:	4b14      	ldr	r3, [pc, #80]	@ (8003720 <pvPortMalloc+0x260>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	3301      	adds	r3, #1
 80036d2:	4a13      	ldr	r2, [pc, #76]	@ (8003720 <pvPortMalloc+0x260>)
 80036d4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80036d6:	f7ff f85b 	bl	8002790 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80036da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00b      	beq.n	80036fc <pvPortMalloc+0x23c>
    __asm volatile
 80036e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
}
 80036f6:	bf00      	nop
 80036f8:	bf00      	nop
 80036fa:	e7fd      	b.n	80036f8 <pvPortMalloc+0x238>
    return pvReturn;
 80036fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3738      	adds	r7, #56	@ 0x38
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	20019440 	.word	0x20019440
 800370c:	20019444 	.word	0x20019444
 8003710:	20019438 	.word	0x20019438
 8003714:	20000438 	.word	0x20000438
 8003718:	20019437 	.word	0x20019437
 800371c:	20019448 	.word	0x20019448
 8003720:	2001944c 	.word	0x2001944c

08003724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d064      	beq.n	8003800 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003736:	2308      	movs	r3, #8
 8003738:	425b      	negs	r3, r3
 800373a:	69fa      	ldr	r2, [r7, #28]
 800373c:	4413      	add	r3, r2
 800373e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4a30      	ldr	r2, [pc, #192]	@ (8003808 <vPortFree+0xe4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d305      	bcc.n	8003758 <vPortFree+0x34>
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <vPortFree+0xe8>)
 8003750:	4293      	cmp	r3, r2
 8003752:	d801      	bhi.n	8003758 <vPortFree+0x34>
 8003754:	2301      	movs	r3, #1
 8003756:	e000      	b.n	800375a <vPortFree+0x36>
 8003758:	2300      	movs	r3, #0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <vPortFree+0x52>
    __asm volatile
 800375e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003762:	f383 8811 	msr	BASEPRI, r3
 8003766:	f3bf 8f6f 	isb	sy
 800376a:	f3bf 8f4f 	dsb	sy
 800376e:	617b      	str	r3, [r7, #20]
}
 8003770:	bf00      	nop
 8003772:	bf00      	nop
 8003774:	e7fd      	b.n	8003772 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	db0b      	blt.n	8003796 <vPortFree+0x72>
    __asm volatile
 800377e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003782:	f383 8811 	msr	BASEPRI, r3
 8003786:	f3bf 8f6f 	isb	sy
 800378a:	f3bf 8f4f 	dsb	sy
 800378e:	613b      	str	r3, [r7, #16]
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	e7fd      	b.n	8003792 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <vPortFree+0x92>
    __asm volatile
 800379e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a2:	f383 8811 	msr	BASEPRI, r3
 80037a6:	f3bf 8f6f 	isb	sy
 80037aa:	f3bf 8f4f 	dsb	sy
 80037ae:	60fb      	str	r3, [r7, #12]
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	e7fd      	b.n	80037b2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0fdb      	lsrs	r3, r3, #31
 80037bc:	f003 0301 	and.w	r3, r3, #1
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d01c      	beq.n	8003800 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80037da:	f7fe ffcb 	bl	8002774 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003810 <vPortFree+0xec>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4413      	add	r3, r2
 80037e8:	4a09      	ldr	r2, [pc, #36]	@ (8003810 <vPortFree+0xec>)
 80037ea:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80037ec:	69b8      	ldr	r0, [r7, #24]
 80037ee:	f000 f86d 	bl	80038cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80037f2:	4b08      	ldr	r3, [pc, #32]	@ (8003814 <vPortFree+0xf0>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	4a06      	ldr	r2, [pc, #24]	@ (8003814 <vPortFree+0xf0>)
 80037fa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80037fc:	f7fe ffc8 	bl	8002790 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	20000438 	.word	0x20000438
 800380c:	20019437 	.word	0x20019437
 8003810:	20019444 	.word	0x20019444
 8003814:	20019450 	.word	0x20019450

08003818 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800381e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8003822:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003824:	4b24      	ldr	r3, [pc, #144]	@ (80038b8 <prvHeapInit+0xa0>)
 8003826:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00c      	beq.n	800384c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	3307      	adds	r3, #7
 8003836:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f023 0307 	bic.w	r3, r3, #7
 800383e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1ad3      	subs	r3, r2, r3
 8003846:	4a1c      	ldr	r2, [pc, #112]	@ (80038b8 <prvHeapInit+0xa0>)
 8003848:	4413      	add	r3, r2
 800384a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	4a1b      	ldr	r2, [pc, #108]	@ (80038bc <prvHeapInit+0xa4>)
 8003850:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003852:	4b1a      	ldr	r3, [pc, #104]	@ (80038bc <prvHeapInit+0xa4>)
 8003854:	2200      	movs	r2, #0
 8003856:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	4413      	add	r3, r2
 800385e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003860:	2208      	movs	r2, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	1a9b      	subs	r3, r3, r2
 8003866:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f023 0307 	bic.w	r3, r3, #7
 800386e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a13      	ldr	r2, [pc, #76]	@ (80038c0 <prvHeapInit+0xa8>)
 8003874:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003876:	4b12      	ldr	r3, [pc, #72]	@ (80038c0 <prvHeapInit+0xa8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800387e:	4b10      	ldr	r3, [pc, #64]	@ (80038c0 <prvHeapInit+0xa8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	1ad2      	subs	r2, r2, r3
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <prvHeapInit+0xa8>)
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a08      	ldr	r2, [pc, #32]	@ (80038c4 <prvHeapInit+0xac>)
 80038a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	4a07      	ldr	r2, [pc, #28]	@ (80038c8 <prvHeapInit+0xb0>)
 80038aa:	6013      	str	r3, [r2, #0]
}
 80038ac:	bf00      	nop
 80038ae:	3714      	adds	r7, #20
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr
 80038b8:	20000438 	.word	0x20000438
 80038bc:	20019438 	.word	0x20019438
 80038c0:	20019440 	.word	0x20019440
 80038c4:	20019448 	.word	0x20019448
 80038c8:	20019444 	.word	0x20019444

080038cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80038d4:	4b36      	ldr	r3, [pc, #216]	@ (80039b0 <prvInsertBlockIntoFreeList+0xe4>)
 80038d6:	617b      	str	r3, [r7, #20]
 80038d8:	e002      	b.n	80038e0 <prvInsertBlockIntoFreeList+0x14>
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d8f7      	bhi.n	80038da <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	4a30      	ldr	r2, [pc, #192]	@ (80039b0 <prvInsertBlockIntoFreeList+0xe4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d018      	beq.n	8003924 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	4a2f      	ldr	r2, [pc, #188]	@ (80039b4 <prvInsertBlockIntoFreeList+0xe8>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d305      	bcc.n	8003906 <prvInsertBlockIntoFreeList+0x3a>
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4a2e      	ldr	r2, [pc, #184]	@ (80039b8 <prvInsertBlockIntoFreeList+0xec>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d801      	bhi.n	8003906 <prvInsertBlockIntoFreeList+0x3a>
 8003902:	2301      	movs	r3, #1
 8003904:	e000      	b.n	8003908 <prvInsertBlockIntoFreeList+0x3c>
 8003906:	2300      	movs	r3, #0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d10b      	bne.n	8003924 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	60fb      	str	r3, [r7, #12]
}
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4413      	add	r3, r2
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	429a      	cmp	r2, r3
 8003934:	d108      	bne.n	8003948 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	441a      	add	r2, r3
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	441a      	add	r2, r3
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	429a      	cmp	r2, r3
 800395a:	d118      	bne.n	800398e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	4b16      	ldr	r3, [pc, #88]	@ (80039bc <prvInsertBlockIntoFreeList+0xf0>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d00d      	beq.n	8003984 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	681a      	ldr	r2, [r3, #0]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	e008      	b.n	8003996 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003984:	4b0d      	ldr	r3, [pc, #52]	@ (80039bc <prvInsertBlockIntoFreeList+0xf0>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	e003      	b.n	8003996 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d002      	beq.n	80039a4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80039a4:	bf00      	nop
 80039a6:	371c      	adds	r7, #28
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr
 80039b0:	20019438 	.word	0x20019438
 80039b4:	20000438 	.word	0x20000438
 80039b8:	20019437 	.word	0x20019437
 80039bc:	20019440 	.word	0x20019440

080039c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80039c0:	b580      	push	{r7, lr}
 80039c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80039c4:	4803      	ldr	r0, [pc, #12]	@ (80039d4 <_cbSendSystemDesc+0x14>)
 80039c6:	f001 fcb5 	bl	8005334 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80039ca:	4803      	ldr	r0, [pc, #12]	@ (80039d8 <_cbSendSystemDesc+0x18>)
 80039cc:	f001 fcb2 	bl	8005334 <SEGGER_SYSVIEW_SendSysDesc>
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	08006488 	.word	0x08006488
 80039d8:	080064c4 	.word	0x080064c4

080039dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80039e0:	4b06      	ldr	r3, [pc, #24]	@ (80039fc <SEGGER_SYSVIEW_Conf+0x20>)
 80039e2:	6818      	ldr	r0, [r3, #0]
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <SEGGER_SYSVIEW_Conf+0x20>)
 80039e6:	6819      	ldr	r1, [r3, #0]
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <SEGGER_SYSVIEW_Conf+0x24>)
 80039ea:	4a06      	ldr	r2, [pc, #24]	@ (8003a04 <SEGGER_SYSVIEW_Conf+0x28>)
 80039ec:	f001 f928 	bl	8004c40 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80039f0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80039f4:	f001 f968 	bl	8004cc8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80039f8:	bf00      	nop
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	20000000 	.word	0x20000000
 8003a00:	080039c1 	.word	0x080039c1
 8003a04:	08006560 	.word	0x08006560

08003a08 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a0a:	b085      	sub	sp, #20
 8003a0c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003a0e:	2300      	movs	r3, #0
 8003a10:	607b      	str	r3, [r7, #4]
 8003a12:	e033      	b.n	8003a7c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003a14:	491e      	ldr	r1, [pc, #120]	@ (8003a90 <_cbSendTaskList+0x88>)
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	491a      	ldr	r1, [pc, #104]	@ (8003a90 <_cbSendTaskList+0x88>)
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3304      	adds	r3, #4
 8003a34:	6819      	ldr	r1, [r3, #0]
 8003a36:	4c16      	ldr	r4, [pc, #88]	@ (8003a90 <_cbSendTaskList+0x88>)
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4423      	add	r3, r4
 8003a44:	3308      	adds	r3, #8
 8003a46:	681c      	ldr	r4, [r3, #0]
 8003a48:	4d11      	ldr	r5, [pc, #68]	@ (8003a90 <_cbSendTaskList+0x88>)
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	442b      	add	r3, r5
 8003a56:	330c      	adds	r3, #12
 8003a58:	681d      	ldr	r5, [r3, #0]
 8003a5a:	4e0d      	ldr	r6, [pc, #52]	@ (8003a90 <_cbSendTaskList+0x88>)
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4433      	add	r3, r6
 8003a68:	3310      	adds	r3, #16
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	462b      	mov	r3, r5
 8003a70:	4622      	mov	r2, r4
 8003a72:	f000 f8bd 	bl	8003bf0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	3301      	adds	r3, #1
 8003a7a:	607b      	str	r3, [r7, #4]
 8003a7c:	4b05      	ldr	r3, [pc, #20]	@ (8003a94 <_cbSendTaskList+0x8c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d3c6      	bcc.n	8003a14 <_cbSendTaskList+0xc>
  }
}
 8003a86:	bf00      	nop
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a90:	20019454 	.word	0x20019454
 8003a94:	200194f4 	.word	0x200194f4

08003a98 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a9c:	b082      	sub	sp, #8
 8003a9e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003aa0:	f7fe ff78 	bl	8002994 <xTaskGetTickCountFromISR>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	4693      	mov	fp, r2
 8003aac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	f04f 0a00 	mov.w	sl, #0
 8003abc:	f04f 0b00 	mov.w	fp, #0
 8003ac0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003ac4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003ac8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003acc:	4652      	mov	r2, sl
 8003ace:	465b      	mov	r3, fp
 8003ad0:	1a14      	subs	r4, r2, r0
 8003ad2:	eb63 0501 	sbc.w	r5, r3, r1
 8003ad6:	f04f 0200 	mov.w	r2, #0
 8003ada:	f04f 0300 	mov.w	r3, #0
 8003ade:	00ab      	lsls	r3, r5, #2
 8003ae0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003ae4:	00a2      	lsls	r2, r4, #2
 8003ae6:	4614      	mov	r4, r2
 8003ae8:	461d      	mov	r5, r3
 8003aea:	eb14 0800 	adds.w	r8, r4, r0
 8003aee:	eb45 0901 	adc.w	r9, r5, r1
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	f04f 0300 	mov.w	r3, #0
 8003afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b06:	4690      	mov	r8, r2
 8003b08:	4699      	mov	r9, r3
 8003b0a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003b12:	4610      	mov	r0, r2
 8003b14:	4619      	mov	r1, r3
 8003b16:	3708      	adds	r7, #8
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003b20 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af02      	add	r7, sp, #8
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003b2e:	2205      	movs	r2, #5
 8003b30:	492b      	ldr	r1, [pc, #172]	@ (8003be0 <SYSVIEW_AddTask+0xc0>)
 8003b32:	68b8      	ldr	r0, [r7, #8]
 8003b34:	f001 ffde 	bl	8005af4 <memcmp>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d04b      	beq.n	8003bd6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003b3e:	4b29      	ldr	r3, [pc, #164]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b07      	cmp	r3, #7
 8003b44:	d903      	bls.n	8003b4e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003b46:	4828      	ldr	r0, [pc, #160]	@ (8003be8 <SYSVIEW_AddTask+0xc8>)
 8003b48:	f001 ff44 	bl	80059d4 <SEGGER_SYSVIEW_Warn>
    return;
 8003b4c:	e044      	b.n	8003bd8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003b4e:	4b25      	ldr	r3, [pc, #148]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	4926      	ldr	r1, [pc, #152]	@ (8003bec <SYSVIEW_AddTask+0xcc>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003b62:	4b20      	ldr	r3, [pc, #128]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4921      	ldr	r1, [pc, #132]	@ (8003bec <SYSVIEW_AddTask+0xcc>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	3304      	adds	r3, #4
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003b78:	4b1a      	ldr	r3, [pc, #104]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	491b      	ldr	r1, [pc, #108]	@ (8003bec <SYSVIEW_AddTask+0xcc>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	3308      	adds	r3, #8
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	4916      	ldr	r1, [pc, #88]	@ (8003bec <SYSVIEW_AddTask+0xcc>)
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	440b      	add	r3, r1
 8003b9e:	330c      	adds	r3, #12
 8003ba0:	683a      	ldr	r2, [r7, #0]
 8003ba2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	4910      	ldr	r1, [pc, #64]	@ (8003bec <SYSVIEW_AddTask+0xcc>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3310      	adds	r3, #16
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003bba:	4b0a      	ldr	r3, [pc, #40]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	4a08      	ldr	r2, [pc, #32]	@ (8003be4 <SYSVIEW_AddTask+0xc4>)
 8003bc2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003bc4:	69bb      	ldr	r3, [r7, #24]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f80e 	bl	8003bf0 <SYSVIEW_SendTaskInfo>
 8003bd4:	e000      	b.n	8003bd8 <SYSVIEW_AddTask+0xb8>
    return;
 8003bd6:	bf00      	nop

}
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	080064d4 	.word	0x080064d4
 8003be4:	200194f4 	.word	0x200194f4
 8003be8:	080064dc 	.word	0x080064dc
 8003bec:	20019454 	.word	0x20019454

08003bf0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b08a      	sub	sp, #40	@ 0x28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003bfe:	f107 0310 	add.w	r3, r7, #16
 8003c02:	2218      	movs	r2, #24
 8003c04:	2100      	movs	r1, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	f001 ff84 	bl	8005b14 <memset>
  TaskInfo.TaskID     = TaskID;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003c20:	f107 0310 	add.w	r3, r7, #16
 8003c24:	4618      	mov	r0, r3
 8003c26:	f001 fa8d 	bl	8005144 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003c2a:	bf00      	nop
 8003c2c:	3728      	adds	r7, #40	@ 0x28
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003c3a:	4b26      	ldr	r3, [pc, #152]	@ (8003cd4 <_DoInit+0xa0>)
 8003c3c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003c3e:	22a8      	movs	r2, #168	@ 0xa8
 8003c40:	2100      	movs	r1, #0
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	f001 ff66 	bl	8005b14 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2203      	movs	r2, #3
 8003c52:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <_DoInit+0xa4>)
 8003c58:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <_DoInit+0xa8>)
 8003c5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c66:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	2200      	movs	r2, #0
 8003c72:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <_DoInit+0xa4>)
 8003c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	4a17      	ldr	r2, [pc, #92]	@ (8003ce0 <_DoInit+0xac>)
 8003c84:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2210      	movs	r2, #16
 8003c8a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003c9e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	e00c      	b.n	8003cc2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f1c3 030f 	rsb	r3, r3, #15
 8003cae:	4a0d      	ldr	r2, [pc, #52]	@ (8003ce4 <_DoInit+0xb0>)
 8003cb0:	5cd1      	ldrb	r1, [r2, r3]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	460a      	mov	r2, r1
 8003cba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	607b      	str	r3, [r7, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b0f      	cmp	r3, #15
 8003cc6:	d9ef      	bls.n	8003ca8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003cc8:	f3bf 8f5f 	dmb	sy
}
 8003ccc:	bf00      	nop
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	200194f8 	.word	0x200194f8
 8003cd8:	0800652c 	.word	0x0800652c
 8003cdc:	200195a0 	.word	0x200195a0
 8003ce0:	200199a0 	.word	0x200199a0
 8003ce4:	08006568 	.word	0x08006568

08003ce8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	@ 0x30
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003cf4:	4b3e      	ldr	r3, [pc, #248]	@ (8003df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b53      	cmp	r3, #83	@ 0x53
 8003d00:	d001      	beq.n	8003d06 <SEGGER_RTT_ReadNoLock+0x1e>
 8003d02:	f7ff ff97 	bl	8003c34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	4413      	add	r3, r2
 8003d0e:	00db      	lsls	r3, r3, #3
 8003d10:	3360      	adds	r3, #96	@ 0x60
 8003d12:	4a37      	ldr	r2, [pc, #220]	@ (8003df0 <SEGGER_RTT_ReadNoLock+0x108>)
 8003d14:	4413      	add	r3, r2
 8003d16:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	68db      	ldr	r3, [r3, #12]
 8003d26:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d92b      	bls.n	8003d8c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	689a      	ldr	r2, [r3, #8]
 8003d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4293      	cmp	r3, r2
 8003d44:	bf28      	it	cs
 8003d46:	4613      	movcs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	685a      	ldr	r2, [r3, #4]
 8003d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d50:	4413      	add	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	6939      	ldr	r1, [r7, #16]
 8003d58:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d5a:	f001 ff09 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 8003d5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4413      	add	r3, r2
 8003d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	4413      	add	r3, r2
 8003d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d101      	bne.n	8003d8c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	bf28      	it	cs
 8003d9c:	4613      	movcs	r3, r2
 8003d9e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d019      	beq.n	8003dda <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dac:	4413      	add	r3, r2
 8003dae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003db0:	697a      	ldr	r2, [r7, #20]
 8003db2:	6939      	ldr	r1, [r7, #16]
 8003db4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003db6:	f001 fedb 	bl	8005b70 <memcpy>
    NumBytesRead += NumBytesRem;
 8003dba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003dc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1ad3      	subs	r3, r2, r3
 8003dd0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003dd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d002      	beq.n	8003de6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003de4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8003de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3730      	adds	r7, #48	@ 0x30
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200194f8 	.word	0x200194f8

08003df4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b088      	sub	sp, #32
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	60f8      	str	r0, [r7, #12]
 8003dfc:	60b9      	str	r1, [r7, #8]
 8003dfe:	607a      	str	r2, [r7, #4]
 8003e00:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003e02:	4b3d      	ldr	r3, [pc, #244]	@ (8003ef8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b53      	cmp	r3, #83	@ 0x53
 8003e0e:	d001      	beq.n	8003e14 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003e10:	f7ff ff10 	bl	8003c34 <_DoInit>
  SEGGER_RTT_LOCK();
 8003e14:	f3ef 8311 	mrs	r3, BASEPRI
 8003e18:	f04f 0120 	mov.w	r1, #32
 8003e1c:	f381 8811 	msr	BASEPRI, r1
 8003e20:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003e22:	4b35      	ldr	r3, [pc, #212]	@ (8003ef8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8003e24:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003e2a:	6939      	ldr	r1, [r7, #16]
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	4613      	mov	r3, r2
 8003e32:	005b      	lsls	r3, r3, #1
 8003e34:	4413      	add	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	440b      	add	r3, r1
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d008      	beq.n	8003e54 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	3301      	adds	r3, #1
 8003e46:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	69fa      	ldr	r2, [r7, #28]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	dbeb      	blt.n	8003e2a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003e52:	e000      	b.n	8003e56 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003e54:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	da3f      	bge.n	8003ee0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003e60:	6939      	ldr	r1, [r7, #16]
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	4613      	mov	r3, r2
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4413      	add	r3, r2
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	440b      	add	r3, r1
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003e74:	6939      	ldr	r1, [r7, #16]
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	1c5a      	adds	r2, r3, #1
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3304      	adds	r3, #4
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	00db      	lsls	r3, r3, #3
 8003e96:	440b      	add	r3, r1
 8003e98:	3320      	adds	r3, #32
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003e9e:	6939      	ldr	r1, [r7, #16]
 8003ea0:	69fa      	ldr	r2, [r7, #28]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	00db      	lsls	r3, r3, #3
 8003eaa:	440b      	add	r3, r1
 8003eac:	3328      	adds	r3, #40	@ 0x28
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003eb2:	6939      	ldr	r1, [r7, #16]
 8003eb4:	69fa      	ldr	r2, [r7, #28]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	005b      	lsls	r3, r3, #1
 8003eba:	4413      	add	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	440b      	add	r3, r1
 8003ec0:	3324      	adds	r3, #36	@ 0x24
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003ec6:	6939      	ldr	r1, [r7, #16]
 8003ec8:	69fa      	ldr	r2, [r7, #28]
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	440b      	add	r3, r1
 8003ed4:	332c      	adds	r3, #44	@ 0x2c
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003eda:	f3bf 8f5f 	dmb	sy
 8003ede:	e002      	b.n	8003ee6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003eec:	69fb      	ldr	r3, [r7, #28]
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3720      	adds	r7, #32
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	200194f8 	.word	0x200194f8

08003efc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b08a      	sub	sp, #40	@ 0x28
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003f0a:	4b21      	ldr	r3, [pc, #132]	@ (8003f90 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f0c:	623b      	str	r3, [r7, #32]
 8003f0e:	6a3b      	ldr	r3, [r7, #32]
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	2b53      	cmp	r3, #83	@ 0x53
 8003f16:	d001      	beq.n	8003f1c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003f18:	f7ff fe8c 	bl	8003c34 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	@ (8003f90 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8003f1e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d82c      	bhi.n	8003f80 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8003f26:	f3ef 8311 	mrs	r3, BASEPRI
 8003f2a:	f04f 0120 	mov.w	r1, #32
 8003f2e:	f381 8811 	msr	BASEPRI, r1
 8003f32:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4613      	mov	r3, r2
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00db      	lsls	r3, r3, #3
 8003f3e:	3360      	adds	r3, #96	@ 0x60
 8003f40:	69fa      	ldr	r2, [r7, #28]
 8003f42:	4413      	add	r3, r2
 8003f44:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	683a      	ldr	r2, [r7, #0]
 8003f5c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	2200      	movs	r2, #0
 8003f62:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2200      	movs	r2, #0
 8003f68:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f6e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003f70:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f7e:	e002      	b.n	8003f86 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8003f80:	f04f 33ff 	mov.w	r3, #4294967295
 8003f84:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8003f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3728      	adds	r7, #40	@ 0x28
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}
 8003f90:	200194f8 	.word	0x200194f8

08003f94 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003f94:	b480      	push	{r7}
 8003f96:	b087      	sub	sp, #28
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d105      	bne.n	8003fb2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	1c5a      	adds	r2, r3, #1
 8003faa:	60fa      	str	r2, [r7, #12]
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
 8003fb0:	e022      	b.n	8003ff8 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1c5a      	adds	r2, r3, #1
 8003fba:	60fa      	str	r2, [r7, #12]
 8003fbc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2b80      	cmp	r3, #128	@ 0x80
 8003fc2:	d90a      	bls.n	8003fda <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8003fc4:	2380      	movs	r3, #128	@ 0x80
 8003fc6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003fc8:	e007      	b.n	8003fda <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	1c53      	adds	r3, r2, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	1c59      	adds	r1, r3, #1
 8003fd4:	60f9      	str	r1, [r7, #12]
 8003fd6:	7812      	ldrb	r2, [r2, #0]
 8003fd8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	1e5a      	subs	r2, r3, #1
 8003fde:	607a      	str	r2, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <_EncodeStr+0x58>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1ee      	bne.n	8003fca <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	b2da      	uxtb	r2, r3
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3307      	adds	r3, #7
}
 8004012:	4618      	mov	r0, r3
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004020:	b580      	push	{r7, lr}
 8004022:	b082      	sub	sp, #8
 8004024:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004026:	4b34      	ldr	r3, [pc, #208]	@ (80040f8 <_HandleIncomingPacket+0xd8>)
 8004028:	7e1b      	ldrb	r3, [r3, #24]
 800402a:	4618      	mov	r0, r3
 800402c:	1cfb      	adds	r3, r7, #3
 800402e:	2201      	movs	r2, #1
 8004030:	4619      	mov	r1, r3
 8004032:	f7ff fe59 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
 8004036:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d057      	beq.n	80040ee <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	2b80      	cmp	r3, #128	@ 0x80
 8004042:	d031      	beq.n	80040a8 <_HandleIncomingPacket+0x88>
 8004044:	2b80      	cmp	r3, #128	@ 0x80
 8004046:	dc40      	bgt.n	80040ca <_HandleIncomingPacket+0xaa>
 8004048:	2b07      	cmp	r3, #7
 800404a:	dc15      	bgt.n	8004078 <_HandleIncomingPacket+0x58>
 800404c:	2b00      	cmp	r3, #0
 800404e:	dd3c      	ble.n	80040ca <_HandleIncomingPacket+0xaa>
 8004050:	3b01      	subs	r3, #1
 8004052:	2b06      	cmp	r3, #6
 8004054:	d839      	bhi.n	80040ca <_HandleIncomingPacket+0xaa>
 8004056:	a201      	add	r2, pc, #4	@ (adr r2, 800405c <_HandleIncomingPacket+0x3c>)
 8004058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800405c:	0800407f 	.word	0x0800407f
 8004060:	08004085 	.word	0x08004085
 8004064:	0800408b 	.word	0x0800408b
 8004068:	08004091 	.word	0x08004091
 800406c:	08004097 	.word	0x08004097
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040a3 	.word	0x080040a3
 8004078:	2b7f      	cmp	r3, #127	@ 0x7f
 800407a:	d033      	beq.n	80040e4 <_HandleIncomingPacket+0xc4>
 800407c:	e025      	b.n	80040ca <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800407e:	f000 fee7 	bl	8004e50 <SEGGER_SYSVIEW_Start>
      break;
 8004082:	e034      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004084:	f000 ff9e 	bl	8004fc4 <SEGGER_SYSVIEW_Stop>
      break;
 8004088:	e031      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800408a:	f001 f977 	bl	800537c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800408e:	e02e      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004090:	f001 f93c 	bl	800530c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004094:	e02b      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004096:	f000 ffbb 	bl	8005010 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800409a:	e028      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800409c:	f001 fc48 	bl	8005930 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80040a0:	e025      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80040a2:	f001 fc27 	bl	80058f4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80040a6:	e022      	b.n	80040ee <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <_HandleIncomingPacket+0xd8>)
 80040aa:	7e1b      	ldrb	r3, [r3, #24]
 80040ac:	4618      	mov	r0, r3
 80040ae:	1cfb      	adds	r3, r7, #3
 80040b0:	2201      	movs	r2, #1
 80040b2:	4619      	mov	r1, r3
 80040b4:	f7ff fe18 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
 80040b8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d013      	beq.n	80040e8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f001 fb8c 	bl	80057e0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80040c8:	e00e      	b.n	80040e8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80040ca:	78fb      	ldrb	r3, [r7, #3]
 80040cc:	b25b      	sxtb	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da0c      	bge.n	80040ec <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80040d2:	4b09      	ldr	r3, [pc, #36]	@ (80040f8 <_HandleIncomingPacket+0xd8>)
 80040d4:	7e1b      	ldrb	r3, [r3, #24]
 80040d6:	4618      	mov	r0, r3
 80040d8:	1cfb      	adds	r3, r7, #3
 80040da:	2201      	movs	r2, #1
 80040dc:	4619      	mov	r1, r3
 80040de:	f7ff fe03 	bl	8003ce8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80040e2:	e003      	b.n	80040ec <_HandleIncomingPacket+0xcc>
      break;
 80040e4:	bf00      	nop
 80040e6:	e002      	b.n	80040ee <_HandleIncomingPacket+0xce>
      break;
 80040e8:	bf00      	nop
 80040ea:	e000      	b.n	80040ee <_HandleIncomingPacket+0xce>
      break;
 80040ec:	bf00      	nop
    }
  }
}
 80040ee:	bf00      	nop
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	2001a9b8 	.word	0x2001a9b8

080040fc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b08c      	sub	sp, #48	@ 0x30
 8004100:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004102:	2301      	movs	r3, #1
 8004104:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004106:	1d3b      	adds	r3, r7, #4
 8004108:	3301      	adds	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 8004112:	695b      	ldr	r3, [r3, #20]
 8004114:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004116:	e00b      	b.n	8004130 <_TrySendOverflowPacket+0x34>
 8004118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411a:	b2da      	uxtb	r2, r3
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411e:	1c59      	adds	r1, r3, #1
 8004120:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004122:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	09db      	lsrs	r3, r3, #7
 800412e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004130:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004132:	2b7f      	cmp	r3, #127	@ 0x7f
 8004134:	d8f0      	bhi.n	8004118 <_TrySendOverflowPacket+0x1c>
 8004136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800413c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004144:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004146:	4b25      	ldr	r3, [pc, #148]	@ (80041dc <_TrySendOverflowPacket+0xe0>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 800414c:	4b22      	ldr	r3, [pc, #136]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	627b      	str	r3, [r7, #36]	@ 0x24
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	e00b      	b.n	8004178 <_TrySendOverflowPacket+0x7c>
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004166:	1c59      	adds	r1, r3, #1
 8004168:	6279      	str	r1, [r7, #36]	@ 0x24
 800416a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	09db      	lsrs	r3, r3, #7
 8004176:	623b      	str	r3, [r7, #32]
 8004178:	6a3b      	ldr	r3, [r7, #32]
 800417a:	2b7f      	cmp	r3, #127	@ 0x7f
 800417c:	d8f0      	bhi.n	8004160 <_TrySendOverflowPacket+0x64>
 800417e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	627a      	str	r2, [r7, #36]	@ 0x24
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	701a      	strb	r2, [r3, #0]
 800418a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800418e:	4b12      	ldr	r3, [pc, #72]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	4618      	mov	r0, r3
 8004194:	1d3b      	adds	r3, r7, #4
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	461a      	mov	r2, r3
 800419c:	1d3b      	adds	r3, r7, #4
 800419e:	4619      	mov	r1, r3
 80041a0:	f7fc f81e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80041a4:	4603      	mov	r3, r0
 80041a6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80041ae:	4a0a      	ldr	r2, [pc, #40]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80041b4:	4b08      	ldr	r3, [pc, #32]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	3b01      	subs	r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	4b06      	ldr	r3, [pc, #24]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e004      	b.n	80041cc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80041c2:	4b05      	ldr	r3, [pc, #20]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	4a03      	ldr	r2, [pc, #12]	@ (80041d8 <_TrySendOverflowPacket+0xdc>)
 80041ca:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80041cc:	693b      	ldr	r3, [r7, #16]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3730      	adds	r7, #48	@ 0x30
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	2001a9b8 	.word	0x2001a9b8
 80041dc:	e0001004 	.word	0xe0001004

080041e0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b08a      	sub	sp, #40	@ 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80041ec:	4b98      	ldr	r3, [pc, #608]	@ (8004450 <_SendPacket+0x270>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d010      	beq.n	8004216 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80041f4:	4b96      	ldr	r3, [pc, #600]	@ (8004450 <_SendPacket+0x270>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	f000 812d 	beq.w	8004458 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80041fe:	4b94      	ldr	r3, [pc, #592]	@ (8004450 <_SendPacket+0x270>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d109      	bne.n	800421a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004206:	f7ff ff79 	bl	80040fc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800420a:	4b91      	ldr	r3, [pc, #580]	@ (8004450 <_SendPacket+0x270>)
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b01      	cmp	r3, #1
 8004210:	f040 8124 	bne.w	800445c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004214:	e001      	b.n	800421a <_SendPacket+0x3a>
    goto Send;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <_SendPacket+0x3c>
Send:
 800421a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2b1f      	cmp	r3, #31
 8004220:	d809      	bhi.n	8004236 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004222:	4b8b      	ldr	r3, [pc, #556]	@ (8004450 <_SendPacket+0x270>)
 8004224:	69da      	ldr	r2, [r3, #28]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	fa22 f303 	lsr.w	r3, r2, r3
 800422c:	f003 0301 	and.w	r3, r3, #1
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 8115 	bne.w	8004460 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b17      	cmp	r3, #23
 800423a:	d807      	bhi.n	800424c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3b01      	subs	r3, #1
 8004240:	60fb      	str	r3, [r7, #12]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	b2da      	uxtb	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	701a      	strb	r2, [r3, #0]
 800424a:	e0c4      	b.n	80043d6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800424c:	68ba      	ldr	r2, [r7, #8]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	2b7f      	cmp	r3, #127	@ 0x7f
 8004258:	d912      	bls.n	8004280 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	09da      	lsrs	r2, r3, #7
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	3b01      	subs	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800426a:	69fb      	ldr	r3, [r7, #28]
 800426c:	b2db      	uxtb	r3, r3
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	3a01      	subs	r2, #1
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e006      	b.n	800428e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3b01      	subs	r3, #1
 8004284:	60fb      	str	r3, [r7, #12]
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	b2da      	uxtb	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2b7e      	cmp	r3, #126	@ 0x7e
 8004292:	d807      	bhi.n	80042a4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	60fb      	str	r3, [r7, #12]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	701a      	strb	r2, [r3, #0]
 80042a2:	e098      	b.n	80043d6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042aa:	d212      	bcs.n	80042d2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	09da      	lsrs	r2, r3, #7
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	60fb      	str	r3, [r7, #12]
 80042b6:	b2d2      	uxtb	r2, r2
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	68fa      	ldr	r2, [r7, #12]
 80042c2:	3a01      	subs	r2, #1
 80042c4:	60fa      	str	r2, [r7, #12]
 80042c6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	701a      	strb	r2, [r3, #0]
 80042d0:	e081      	b.n	80043d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d8:	d21d      	bcs.n	8004316 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	0b9a      	lsrs	r2, r3, #14
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60fb      	str	r3, [r7, #12]
 80042e4:	b2d2      	uxtb	r2, r2
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	09db      	lsrs	r3, r3, #7
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	68fa      	ldr	r2, [r7, #12]
 80042f2:	3a01      	subs	r2, #1
 80042f4:	60fa      	str	r2, [r7, #12]
 80042f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	3a01      	subs	r2, #1
 8004308:	60fa      	str	r2, [r7, #12]
 800430a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800430e:	b2da      	uxtb	r2, r3
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e05f      	b.n	80043d6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800431c:	d228      	bcs.n	8004370 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	0d5a      	lsrs	r2, r3, #21
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b01      	subs	r3, #1
 8004326:	60fb      	str	r3, [r7, #12]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0b9b      	lsrs	r3, r3, #14
 8004332:	b2db      	uxtb	r3, r3
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	3a01      	subs	r2, #1
 8004338:	60fa      	str	r2, [r7, #12]
 800433a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800433e:	b2da      	uxtb	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	09db      	lsrs	r3, r3, #7
 8004348:	b2db      	uxtb	r3, r3
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	3a01      	subs	r2, #1
 800434e:	60fa      	str	r2, [r7, #12]
 8004350:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004354:	b2da      	uxtb	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	3a01      	subs	r2, #1
 8004362:	60fa      	str	r2, [r7, #12]
 8004364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004368:	b2da      	uxtb	r2, r3
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	701a      	strb	r2, [r3, #0]
 800436e:	e032      	b.n	80043d6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	0f1a      	lsrs	r2, r3, #28
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	3b01      	subs	r3, #1
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	0d5b      	lsrs	r3, r3, #21
 8004384:	b2db      	uxtb	r3, r3
 8004386:	68fa      	ldr	r2, [r7, #12]
 8004388:	3a01      	subs	r2, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004390:	b2da      	uxtb	r2, r3
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	0b9b      	lsrs	r3, r3, #14
 800439a:	b2db      	uxtb	r3, r3
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	3a01      	subs	r2, #1
 80043a0:	60fa      	str	r2, [r7, #12]
 80043a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043a6:	b2da      	uxtb	r2, r3
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	09db      	lsrs	r3, r3, #7
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	3a01      	subs	r2, #1
 80043b6:	60fa      	str	r2, [r7, #12]
 80043b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043bc:	b2da      	uxtb	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	b2db      	uxtb	r3, r3
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	3a01      	subs	r2, #1
 80043ca:	60fa      	str	r2, [r7, #12]
 80043cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80043d0:	b2da      	uxtb	r2, r3
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80043d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004454 <_SendPacket+0x274>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80043dc:	4b1c      	ldr	r3, [pc, #112]	@ (8004450 <_SendPacket+0x270>)
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	623b      	str	r3, [r7, #32]
 80043ee:	e00b      	b.n	8004408 <_SendPacket+0x228>
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f6:	1c59      	adds	r1, r3, #1
 80043f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80043fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	6a3b      	ldr	r3, [r7, #32]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	623b      	str	r3, [r7, #32]
 8004408:	6a3b      	ldr	r3, [r7, #32]
 800440a:	2b7f      	cmp	r3, #127	@ 0x7f
 800440c:	d8f0      	bhi.n	80043f0 <_SendPacket+0x210>
 800440e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	627a      	str	r2, [r7, #36]	@ 0x24
 8004414:	6a3a      	ldr	r2, [r7, #32]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800441c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800441e:	4b0c      	ldr	r3, [pc, #48]	@ (8004450 <_SendPacket+0x270>)
 8004420:	785b      	ldrb	r3, [r3, #1]
 8004422:	4618      	mov	r0, r3
 8004424:	68ba      	ldr	r2, [r7, #8]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	461a      	mov	r2, r3
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	f7fb fed7 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004432:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800443a:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <_SendPacket+0x270>)
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	60d3      	str	r3, [r2, #12]
 8004440:	e00f      	b.n	8004462 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004442:	4b03      	ldr	r3, [pc, #12]	@ (8004450 <_SendPacket+0x270>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	3301      	adds	r3, #1
 8004448:	b2da      	uxtb	r2, r3
 800444a:	4b01      	ldr	r3, [pc, #4]	@ (8004450 <_SendPacket+0x270>)
 800444c:	701a      	strb	r2, [r3, #0]
 800444e:	e008      	b.n	8004462 <_SendPacket+0x282>
 8004450:	2001a9b8 	.word	0x2001a9b8
 8004454:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004458:	bf00      	nop
 800445a:	e002      	b.n	8004462 <_SendPacket+0x282>
      goto SendDone;
 800445c:	bf00      	nop
 800445e:	e000      	b.n	8004462 <_SendPacket+0x282>
      goto SendDone;
 8004460:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004462:	4b14      	ldr	r3, [pc, #80]	@ (80044b4 <_SendPacket+0x2d4>)
 8004464:	7e1b      	ldrb	r3, [r3, #24]
 8004466:	4619      	mov	r1, r3
 8004468:	4a13      	ldr	r2, [pc, #76]	@ (80044b8 <_SendPacket+0x2d8>)
 800446a:	460b      	mov	r3, r1
 800446c:	005b      	lsls	r3, r3, #1
 800446e:	440b      	add	r3, r1
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	336c      	adds	r3, #108	@ 0x6c
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	4b0e      	ldr	r3, [pc, #56]	@ (80044b4 <_SendPacket+0x2d4>)
 800447a:	7e1b      	ldrb	r3, [r3, #24]
 800447c:	4618      	mov	r0, r3
 800447e:	490e      	ldr	r1, [pc, #56]	@ (80044b8 <_SendPacket+0x2d8>)
 8004480:	4603      	mov	r3, r0
 8004482:	005b      	lsls	r3, r3, #1
 8004484:	4403      	add	r3, r0
 8004486:	00db      	lsls	r3, r3, #3
 8004488:	440b      	add	r3, r1
 800448a:	3370      	adds	r3, #112	@ 0x70
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d00b      	beq.n	80044aa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004492:	4b08      	ldr	r3, [pc, #32]	@ (80044b4 <_SendPacket+0x2d4>)
 8004494:	789b      	ldrb	r3, [r3, #2]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d107      	bne.n	80044aa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800449a:	4b06      	ldr	r3, [pc, #24]	@ (80044b4 <_SendPacket+0x2d4>)
 800449c:	2201      	movs	r2, #1
 800449e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80044a0:	f7ff fdbe 	bl	8004020 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80044a4:	4b03      	ldr	r3, [pc, #12]	@ (80044b4 <_SendPacket+0x2d4>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80044aa:	bf00      	nop
 80044ac:	3728      	adds	r7, #40	@ 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	2001a9b8 	.word	0x2001a9b8
 80044b8:	200194f8 	.word	0x200194f8

080044bc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08a      	sub	sp, #40	@ 0x28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	3301      	adds	r3, #1
 80044d2:	2b80      	cmp	r3, #128	@ 0x80
 80044d4:	d80a      	bhi.n	80044ec <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6051      	str	r1, [r2, #4]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1c5a      	adds	r2, r3, #1
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b80      	cmp	r3, #128	@ 0x80
 80044f2:	d15a      	bne.n	80045aa <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	623b      	str	r3, [r7, #32]
 8004514:	e00b      	b.n	800452e <_StoreChar+0x72>
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	b2da      	uxtb	r2, r3
 800451a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451c:	1c59      	adds	r1, r3, #1
 800451e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004520:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	701a      	strb	r2, [r3, #0]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	09db      	lsrs	r3, r3, #7
 800452c:	623b      	str	r3, [r7, #32]
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	2b7f      	cmp	r3, #127	@ 0x7f
 8004532:	d8f0      	bhi.n	8004516 <_StoreChar+0x5a>
 8004534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004536:	1c5a      	adds	r2, r3, #1
 8004538:	627a      	str	r2, [r7, #36]	@ 0x24
 800453a:	6a3a      	ldr	r2, [r7, #32]
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004542:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	61fb      	str	r3, [r7, #28]
 8004548:	2300      	movs	r3, #0
 800454a:	61bb      	str	r3, [r7, #24]
 800454c:	e00b      	b.n	8004566 <_StoreChar+0xaa>
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	1c59      	adds	r1, r3, #1
 8004556:	61f9      	str	r1, [r7, #28]
 8004558:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800455c:	b2d2      	uxtb	r2, r2
 800455e:	701a      	strb	r2, [r3, #0]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	09db      	lsrs	r3, r3, #7
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b7f      	cmp	r3, #127	@ 0x7f
 800456a:	d8f0      	bhi.n	800454e <_StoreChar+0x92>
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	61fa      	str	r2, [r7, #28]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	b2d2      	uxtb	r2, r2
 8004576:	701a      	strb	r2, [r3, #0]
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	221a      	movs	r2, #26
 8004582:	6939      	ldr	r1, [r7, #16]
 8004584:	4618      	mov	r0, r3
 8004586:	f7ff fe2b 	bl	80041e0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fd39 	bl	8004006 <_PreparePacket>
 8004594:	4602      	mov	r2, r0
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	611a      	str	r2, [r3, #16]
  }
}
 80045aa:	bf00      	nop
 80045ac:	3728      	adds	r7, #40	@ 0x28
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b08a      	sub	sp, #40	@ 0x28
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	60f8      	str	r0, [r7, #12]
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	607a      	str	r2, [r7, #4]
 80045c0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80045c6:	2301      	movs	r3, #1
 80045c8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045ce:	e007      	b.n	80045e0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d8:	623b      	str	r3, [r7, #32]
    Width++;
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80045e0:	6a3a      	ldr	r2, [r7, #32]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d2f3      	bcs.n	80045d0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	429a      	cmp	r2, r3
 80045ee:	d901      	bls.n	80045f4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80045f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d000      	beq.n	8004600 <_PrintUnsigned+0x4c>
 80045fe:	e01f      	b.n	8004640 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01c      	beq.n	8004640 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8004606:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d005      	beq.n	800461c <_PrintUnsigned+0x68>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d102      	bne.n	800461c <_PrintUnsigned+0x68>
        c = '0';
 8004616:	2330      	movs	r3, #48	@ 0x30
 8004618:	76fb      	strb	r3, [r7, #27]
 800461a:	e001      	b.n	8004620 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800461c:	2320      	movs	r3, #32
 800461e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004620:	e007      	b.n	8004632 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	3b01      	subs	r3, #1
 8004626:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8004628:	7efb      	ldrb	r3, [r7, #27]
 800462a:	4619      	mov	r1, r3
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	f7ff ff45 	bl	80044bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <_PrintUnsigned+0x8c>
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	429a      	cmp	r2, r3
 800463e:	d3f0      	bcc.n	8004622 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d903      	bls.n	800464e <_PrintUnsigned+0x9a>
      NumDigits--;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	3b01      	subs	r3, #1
 800464a:	603b      	str	r3, [r7, #0]
 800464c:	e009      	b.n	8004662 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004652:	fbb2 f3f3 	udiv	r3, r2, r3
 8004656:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8004658:	697a      	ldr	r2, [r7, #20]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	429a      	cmp	r2, r3
 800465e:	d200      	bcs.n	8004662 <_PrintUnsigned+0xae>
        break;
 8004660:	e005      	b.n	800466e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8004662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	fb02 f303 	mul.w	r3, r2, r3
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800466c:	e7e8      	b.n	8004640 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800466e:	68ba      	ldr	r2, [r7, #8]
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	fbb2 f3f3 	udiv	r3, r2, r3
 8004676:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	fb02 f303 	mul.w	r3, r2, r3
 8004680:	68ba      	ldr	r2, [r7, #8]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8004686:	4a15      	ldr	r2, [pc, #84]	@ (80046dc <_PrintUnsigned+0x128>)
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	4619      	mov	r1, r3
 8004690:	68f8      	ldr	r0, [r7, #12]
 8004692:	f7ff ff13 	bl	80044bc <_StoreChar>
    Digit /= Base;
 8004696:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80046a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e3      	bne.n	800466e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80046a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d011      	beq.n	80046d4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00e      	beq.n	80046d4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046b6:	e006      	b.n	80046c6 <_PrintUnsigned+0x112>
        FieldWidth--;
 80046b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ba:	3b01      	subs	r3, #1
 80046bc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80046be:	2120      	movs	r1, #32
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f7ff fefb 	bl	80044bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80046c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <_PrintUnsigned+0x120>
 80046cc:	69fa      	ldr	r2, [r7, #28]
 80046ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d3f1      	bcc.n	80046b8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3728      	adds	r7, #40	@ 0x28
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	08006588 	.word	0x08006588

080046e0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bfb8      	it	lt
 80046f4:	425b      	neglt	r3, r3
 80046f6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80046f8:	2301      	movs	r3, #1
 80046fa:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80046fc:	e007      	b.n	800470e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	693a      	ldr	r2, [r7, #16]
 8004702:	fb92 f3f3 	sdiv	r3, r2, r3
 8004706:	613b      	str	r3, [r7, #16]
    Width++;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	3301      	adds	r3, #1
 800470c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	429a      	cmp	r2, r3
 8004714:	daf3      	bge.n	80046fe <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	429a      	cmp	r2, r3
 800471c:	d901      	bls.n	8004722 <_PrintInt+0x42>
    Width = NumDigits;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <_PrintInt+0x5e>
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	db04      	blt.n	8004738 <_PrintInt+0x58>
 800472e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <_PrintInt+0x5e>
    FieldWidth--;
 8004738:	6a3b      	ldr	r3, [r7, #32]
 800473a:	3b01      	subs	r3, #1
 800473c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800473e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d002      	beq.n	800474e <_PrintInt+0x6e>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <_PrintInt+0x9c>
 800474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d111      	bne.n	800477c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8004758:	6a3b      	ldr	r3, [r7, #32]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d00e      	beq.n	800477c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800475e:	e006      	b.n	800476e <_PrintInt+0x8e>
        FieldWidth--;
 8004760:	6a3b      	ldr	r3, [r7, #32]
 8004762:	3b01      	subs	r3, #1
 8004764:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8004766:	2120      	movs	r1, #32
 8004768:	68f8      	ldr	r0, [r7, #12]
 800476a:	f7ff fea7 	bl	80044bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800476e:	6a3b      	ldr	r3, [r7, #32]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d003      	beq.n	800477c <_PrintInt+0x9c>
 8004774:	697a      	ldr	r2, [r7, #20]
 8004776:	6a3b      	ldr	r3, [r7, #32]
 8004778:	429a      	cmp	r2, r3
 800477a:	d3f1      	bcc.n	8004760 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2b00      	cmp	r3, #0
 8004780:	da07      	bge.n	8004792 <_PrintInt+0xb2>
    v = -v;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	425b      	negs	r3, r3
 8004786:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8004788:	212d      	movs	r1, #45	@ 0x2d
 800478a:	68f8      	ldr	r0, [r7, #12]
 800478c:	f7ff fe96 	bl	80044bc <_StoreChar>
 8004790:	e008      	b.n	80047a4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800479c:	212b      	movs	r1, #43	@ 0x2b
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f7ff fe8c 	bl	80044bc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80047a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a6:	f003 0302 	and.w	r3, r3, #2
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d019      	beq.n	80047e2 <_PrintInt+0x102>
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d114      	bne.n	80047e2 <_PrintInt+0x102>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d111      	bne.n	80047e2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80047be:	6a3b      	ldr	r3, [r7, #32]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00e      	beq.n	80047e2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047c4:	e006      	b.n	80047d4 <_PrintInt+0xf4>
        FieldWidth--;
 80047c6:	6a3b      	ldr	r3, [r7, #32]
 80047c8:	3b01      	subs	r3, #1
 80047ca:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80047cc:	2130      	movs	r1, #48	@ 0x30
 80047ce:	68f8      	ldr	r0, [r7, #12]
 80047d0:	f7ff fe74 	bl	80044bc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80047d4:	6a3b      	ldr	r3, [r7, #32]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <_PrintInt+0x102>
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d3f1      	bcc.n	80047c6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80047e2:	68b9      	ldr	r1, [r7, #8]
 80047e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e6:	9301      	str	r3, [sp, #4]
 80047e8:	6a3b      	ldr	r3, [r7, #32]
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	68f8      	ldr	r0, [r7, #12]
 80047f2:	f7ff fedf 	bl	80045b4 <_PrintUnsigned>
}
 80047f6:	bf00      	nop
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
	...

08004800 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b098      	sub	sp, #96	@ 0x60
 8004804:	af02      	add	r7, sp, #8
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800480c:	f3ef 8311 	mrs	r3, BASEPRI
 8004810:	f04f 0120 	mov.w	r1, #32
 8004814:	f381 8811 	msr	BASEPRI, r1
 8004818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800481a:	48b7      	ldr	r0, [pc, #732]	@ (8004af8 <_VPrintTarget+0x2f8>)
 800481c:	f7ff fbf3 	bl	8004006 <_PreparePacket>
 8004820:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8004822:	4bb5      	ldr	r3, [pc, #724]	@ (8004af8 <_VPrintTarget+0x2f8>)
 8004824:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8004826:	2300      	movs	r3, #0
 8004828:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	3301      	adds	r3, #1
 8004832:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8004846:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 81a8 	beq.w	8004ba0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8004850:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004854:	2b25      	cmp	r3, #37	@ 0x25
 8004856:	f040 8195 	bne.w	8004b84 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800485a:	2300      	movs	r3, #0
 800485c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800485e:	2301      	movs	r3, #1
 8004860:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800486a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800486e:	3b23      	subs	r3, #35	@ 0x23
 8004870:	2b0d      	cmp	r3, #13
 8004872:	d83f      	bhi.n	80048f4 <_VPrintTarget+0xf4>
 8004874:	a201      	add	r2, pc, #4	@ (adr r2, 800487c <_VPrintTarget+0x7c>)
 8004876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800487a:	bf00      	nop
 800487c:	080048e5 	.word	0x080048e5
 8004880:	080048f5 	.word	0x080048f5
 8004884:	080048f5 	.word	0x080048f5
 8004888:	080048f5 	.word	0x080048f5
 800488c:	080048f5 	.word	0x080048f5
 8004890:	080048f5 	.word	0x080048f5
 8004894:	080048f5 	.word	0x080048f5
 8004898:	080048f5 	.word	0x080048f5
 800489c:	080048d5 	.word	0x080048d5
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	080048b5 	.word	0x080048b5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048f5 	.word	0x080048f5
 80048b0:	080048c5 	.word	0x080048c5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80048b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b6:	f043 0301 	orr.w	r3, r3, #1
 80048ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	3301      	adds	r3, #1
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	e01a      	b.n	80048fa <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80048c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048c6:	f043 0302 	orr.w	r3, r3, #2
 80048ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60fb      	str	r3, [r7, #12]
 80048d2:	e012      	b.n	80048fa <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80048d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d6:	f043 0304 	orr.w	r3, r3, #4
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	3301      	adds	r3, #1
 80048e0:	60fb      	str	r3, [r7, #12]
 80048e2:	e00a      	b.n	80048fa <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80048e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048e6:	f043 0308 	orr.w	r3, r3, #8
 80048ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
 80048f2:	e002      	b.n	80048fa <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80048f4:	2300      	movs	r3, #0
 80048f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80048f8:	bf00      	nop
        }
      } while (v);
 80048fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1b0      	bne.n	8004862 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8004900:	2300      	movs	r3, #0
 8004902:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800490c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004910:	2b2f      	cmp	r3, #47	@ 0x2f
 8004912:	d912      	bls.n	800493a <_VPrintTarget+0x13a>
 8004914:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004918:	2b39      	cmp	r3, #57	@ 0x39
 800491a:	d80e      	bhi.n	800493a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	3301      	adds	r3, #1
 8004920:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8004922:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004924:	4613      	mov	r3, r2
 8004926:	009b      	lsls	r3, r3, #2
 8004928:	4413      	add	r3, r2
 800492a:	005b      	lsls	r3, r3, #1
 800492c:	461a      	mov	r2, r3
 800492e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004932:	4413      	add	r3, r2
 8004934:	3b30      	subs	r3, #48	@ 0x30
 8004936:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8004938:	e7e4      	b.n	8004904 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800493a:	2300      	movs	r3, #0
 800493c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8004946:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800494a:	2b2e      	cmp	r3, #46	@ 0x2e
 800494c:	d11d      	bne.n	800498a <_VPrintTarget+0x18a>
        sFormat++;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3301      	adds	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800495c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004960:	2b2f      	cmp	r3, #47	@ 0x2f
 8004962:	d912      	bls.n	800498a <_VPrintTarget+0x18a>
 8004964:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004968:	2b39      	cmp	r3, #57	@ 0x39
 800496a:	d80e      	bhi.n	800498a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8004972:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	461a      	mov	r2, r3
 800497e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004982:	4413      	add	r3, r2
 8004984:	3b30      	subs	r3, #48	@ 0x30
 8004986:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8004988:	e7e4      	b.n	8004954 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8004992:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004996:	2b6c      	cmp	r3, #108	@ 0x6c
 8004998:	d003      	beq.n	80049a2 <_VPrintTarget+0x1a2>
 800499a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800499e:	2b68      	cmp	r3, #104	@ 0x68
 80049a0:	d107      	bne.n	80049b2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	781b      	ldrb	r3, [r3, #0]
 80049a6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	3301      	adds	r3, #1
 80049ae:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80049b0:	e7ef      	b.n	8004992 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80049b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80049b6:	2b25      	cmp	r3, #37	@ 0x25
 80049b8:	f000 80d8 	beq.w	8004b6c <_VPrintTarget+0x36c>
 80049bc:	2b25      	cmp	r3, #37	@ 0x25
 80049be:	f2c0 80dc 	blt.w	8004b7a <_VPrintTarget+0x37a>
 80049c2:	2b78      	cmp	r3, #120	@ 0x78
 80049c4:	f300 80d9 	bgt.w	8004b7a <_VPrintTarget+0x37a>
 80049c8:	2b58      	cmp	r3, #88	@ 0x58
 80049ca:	f2c0 80d6 	blt.w	8004b7a <_VPrintTarget+0x37a>
 80049ce:	3b58      	subs	r3, #88	@ 0x58
 80049d0:	2b20      	cmp	r3, #32
 80049d2:	f200 80d2 	bhi.w	8004b7a <_VPrintTarget+0x37a>
 80049d6:	a201      	add	r2, pc, #4	@ (adr r2, 80049dc <_VPrintTarget+0x1dc>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004ad3 	.word	0x08004ad3
 80049e0:	08004b7b 	.word	0x08004b7b
 80049e4:	08004b7b 	.word	0x08004b7b
 80049e8:	08004b7b 	.word	0x08004b7b
 80049ec:	08004b7b 	.word	0x08004b7b
 80049f0:	08004b7b 	.word	0x08004b7b
 80049f4:	08004b7b 	.word	0x08004b7b
 80049f8:	08004b7b 	.word	0x08004b7b
 80049fc:	08004b7b 	.word	0x08004b7b
 8004a00:	08004b7b 	.word	0x08004b7b
 8004a04:	08004b7b 	.word	0x08004b7b
 8004a08:	08004a61 	.word	0x08004a61
 8004a0c:	08004a87 	.word	0x08004a87
 8004a10:	08004b7b 	.word	0x08004b7b
 8004a14:	08004b7b 	.word	0x08004b7b
 8004a18:	08004b7b 	.word	0x08004b7b
 8004a1c:	08004b7b 	.word	0x08004b7b
 8004a20:	08004b7b 	.word	0x08004b7b
 8004a24:	08004b7b 	.word	0x08004b7b
 8004a28:	08004b7b 	.word	0x08004b7b
 8004a2c:	08004b7b 	.word	0x08004b7b
 8004a30:	08004b7b 	.word	0x08004b7b
 8004a34:	08004b7b 	.word	0x08004b7b
 8004a38:	08004b7b 	.word	0x08004b7b
 8004a3c:	08004b47 	.word	0x08004b47
 8004a40:	08004b7b 	.word	0x08004b7b
 8004a44:	08004b7b 	.word	0x08004b7b
 8004a48:	08004afd 	.word	0x08004afd
 8004a4c:	08004b7b 	.word	0x08004b7b
 8004a50:	08004aad 	.word	0x08004aad
 8004a54:	08004b7b 	.word	0x08004b7b
 8004a58:	08004b7b 	.word	0x08004b7b
 8004a5c:	08004ad3 	.word	0x08004ad3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	1d19      	adds	r1, r3, #4
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	6011      	str	r1, [r2, #0]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8004a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a70:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8004a74:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8004a78:	f107 0310 	add.w	r3, r7, #16
 8004a7c:	4611      	mov	r1, r2
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7ff fd1c 	bl	80044bc <_StoreChar>
        break;
 8004a84:	e07a      	b.n	8004b7c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	1d19      	adds	r1, r3, #4
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	6011      	str	r1, [r2, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004a94:	f107 0010 	add.w	r0, r7, #16
 8004a98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a9a:	9301      	str	r3, [sp, #4]
 8004a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aa2:	220a      	movs	r2, #10
 8004aa4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004aa6:	f7ff fe1b 	bl	80046e0 <_PrintInt>
        break;
 8004aaa:	e067      	b.n	8004b7c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	1d19      	adds	r1, r3, #4
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6011      	str	r1, [r2, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8004aba:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004abc:	f107 0010 	add.w	r0, r7, #16
 8004ac0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004aca:	220a      	movs	r2, #10
 8004acc:	f7ff fd72 	bl	80045b4 <_PrintUnsigned>
        break;
 8004ad0:	e054      	b.n	8004b7c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	1d19      	adds	r1, r3, #4
 8004ad8:	687a      	ldr	r2, [r7, #4]
 8004ada:	6011      	str	r1, [r2, #0]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8004ae0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004ae2:	f107 0010 	add.w	r0, r7, #16
 8004ae6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004ae8:	9301      	str	r3, [sp, #4]
 8004aea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aec:	9300      	str	r3, [sp, #0]
 8004aee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004af0:	2210      	movs	r2, #16
 8004af2:	f7ff fd5f 	bl	80045b4 <_PrintUnsigned>
        break;
 8004af6:	e041      	b.n	8004b7c <_VPrintTarget+0x37c>
 8004af8:	2001a9e8 	.word	0x2001a9e8
      case 's':
        s = va_arg(*pParamList, const char*);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	1d19      	adds	r1, r3, #4
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8004b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <_VPrintTarget+0x314>
          s = "(null)";
 8004b10:	4b4a      	ldr	r3, [pc, #296]	@ (8004c3c <_VPrintTarget+0x43c>)
 8004b12:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8004b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b16:	781b      	ldrb	r3, [r3, #0]
 8004b18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8004b1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b1e:	3301      	adds	r3, #1
 8004b20:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8004b22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00b      	beq.n	8004b42 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8004b2a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004b2e:	f107 0310 	add.w	r3, r7, #16
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff fcc1 	bl	80044bc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b3e:	d9e9      	bls.n	8004b14 <_VPrintTarget+0x314>
        break;
 8004b40:	e01c      	b.n	8004b7c <_VPrintTarget+0x37c>
            break;
 8004b42:	bf00      	nop
        break;
 8004b44:	e01a      	b.n	8004b7c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1d19      	adds	r1, r3, #4
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6011      	str	r1, [r2, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8004b54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8004b56:	f107 0010 	add.w	r0, r7, #16
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	9301      	str	r3, [sp, #4]
 8004b5e:	2308      	movs	r3, #8
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	2308      	movs	r3, #8
 8004b64:	2210      	movs	r2, #16
 8004b66:	f7ff fd25 	bl	80045b4 <_PrintUnsigned>
        break;
 8004b6a:	e007      	b.n	8004b7c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8004b6c:	f107 0310 	add.w	r3, r7, #16
 8004b70:	2125      	movs	r1, #37	@ 0x25
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7ff fca2 	bl	80044bc <_StoreChar>
        break;
 8004b78:	e000      	b.n	8004b7c <_VPrintTarget+0x37c>
      default:
        break;
 8004b7a:	bf00      	nop
      }
      sFormat++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60fb      	str	r3, [r7, #12]
 8004b82:	e007      	b.n	8004b94 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8004b84:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	4611      	mov	r1, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fc94 	bl	80044bc <_StoreChar>
    }
  } while (*sFormat);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f47f ae4d 	bne.w	8004838 <_VPrintTarget+0x38>
 8004b9e:	e000      	b.n	8004ba2 <_VPrintTarget+0x3a2>
      break;
 8004ba0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d041      	beq.n	8004c2c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8004ba8:	6a3a      	ldr	r2, [r7, #32]
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bb8:	e00b      	b.n	8004bd2 <_VPrintTarget+0x3d2>
 8004bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbc:	b2da      	uxtb	r2, r3
 8004bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bc0:	1c59      	adds	r1, r3, #1
 8004bc2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004bc4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	701a      	strb	r2, [r3, #0]
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bce:	09db      	lsrs	r3, r3, #7
 8004bd0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004bd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd6:	d8f0      	bhi.n	8004bba <_VPrintTarget+0x3ba>
 8004bd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bda:	1c5a      	adds	r2, r3, #1
 8004bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	701a      	strb	r2, [r3, #0]
 8004be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bec:	2300      	movs	r3, #0
 8004bee:	633b      	str	r3, [r7, #48]	@ 0x30
 8004bf0:	e00b      	b.n	8004c0a <_VPrintTarget+0x40a>
 8004bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bf8:	1c59      	adds	r1, r3, #1
 8004bfa:	6379      	str	r1, [r7, #52]	@ 0x34
 8004bfc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c00:	b2d2      	uxtb	r2, r2
 8004c02:	701a      	strb	r2, [r3, #0]
 8004c04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c06:	09db      	lsrs	r3, r3, #7
 8004c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c0e:	d8f0      	bhi.n	8004bf2 <_VPrintTarget+0x3f2>
 8004c10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	637a      	str	r2, [r7, #52]	@ 0x34
 8004c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c18:	b2d2      	uxtb	r2, r2
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c1e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	6979      	ldr	r1, [r7, #20]
 8004c24:	221a      	movs	r2, #26
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7ff fada 	bl	80041e0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8004c32:	bf00      	nop
 8004c34:	3758      	adds	r7, #88	@ 0x58
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	08006538 	.word	0x08006538

08004c40 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
 8004c4c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c4e:	2300      	movs	r3, #0
 8004c50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004c54:	4917      	ldr	r1, [pc, #92]	@ (8004cb4 <SEGGER_SYSVIEW_Init+0x74>)
 8004c56:	4818      	ldr	r0, [pc, #96]	@ (8004cb8 <SEGGER_SYSVIEW_Init+0x78>)
 8004c58:	f7ff f8cc 	bl	8003df4 <SEGGER_RTT_AllocUpBuffer>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	b2da      	uxtb	r2, r3
 8004c60:	4b16      	ldr	r3, [pc, #88]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c62:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004c64:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c66:	785a      	ldrb	r2, [r3, #1]
 8004c68:	4b14      	ldr	r3, [pc, #80]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004c6c:	4b13      	ldr	r3, [pc, #76]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c6e:	7e1b      	ldrb	r3, [r3, #24]
 8004c70:	4618      	mov	r0, r3
 8004c72:	2300      	movs	r3, #0
 8004c74:	9300      	str	r3, [sp, #0]
 8004c76:	2308      	movs	r3, #8
 8004c78:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <SEGGER_SYSVIEW_Init+0x80>)
 8004c7a:	490f      	ldr	r1, [pc, #60]	@ (8004cb8 <SEGGER_SYSVIEW_Init+0x78>)
 8004c7c:	f7ff f93e 	bl	8003efc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8004c80:	4b0e      	ldr	r3, [pc, #56]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c86:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc4 <SEGGER_SYSVIEW_Init+0x84>)
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c8c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8004c8e:	4a0b      	ldr	r2, [pc, #44]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004c94:	4a09      	ldr	r2, [pc, #36]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004c9a:	4a08      	ldr	r2, [pc, #32]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8004ca0:	4a06      	ldr	r2, [pc, #24]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004ca6:	4b05      	ldr	r3, [pc, #20]	@ (8004cbc <SEGGER_SYSVIEW_Init+0x7c>)
 8004ca8:	2200      	movs	r2, #0
 8004caa:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	200199b0 	.word	0x200199b0
 8004cb8:	08006540 	.word	0x08006540
 8004cbc:	2001a9b8 	.word	0x2001a9b8
 8004cc0:	2001a9b0 	.word	0x2001a9b0
 8004cc4:	e0001004 	.word	0xe0001004

08004cc8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8004cd0:	4a04      	ldr	r2, [pc, #16]	@ (8004ce4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6113      	str	r3, [r2, #16]
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	2001a9b8 	.word	0x2001a9b8

08004ce8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004cf0:	f3ef 8311 	mrs	r3, BASEPRI
 8004cf4:	f04f 0120 	mov.w	r1, #32
 8004cf8:	f381 8811 	msr	BASEPRI, r1
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	4808      	ldr	r0, [pc, #32]	@ (8004d20 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004d00:	f7ff f981 	bl	8004006 <_PreparePacket>
 8004d04:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	68b8      	ldr	r0, [r7, #8]
 8004d0c:	f7ff fa68 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	f383 8811 	msr	BASEPRI, r3
}
 8004d16:	bf00      	nop
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
 8004d1e:	bf00      	nop
 8004d20:	2001a9e8 	.word	0x2001a9e8

08004d24 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004d2e:	f3ef 8311 	mrs	r3, BASEPRI
 8004d32:	f04f 0120 	mov.w	r1, #32
 8004d36:	f381 8811 	msr	BASEPRI, r1
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	4816      	ldr	r0, [pc, #88]	@ (8004d98 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004d3e:	f7ff f962 	bl	8004006 <_PreparePacket>
 8004d42:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	61fb      	str	r3, [r7, #28]
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	61bb      	str	r3, [r7, #24]
 8004d50:	e00b      	b.n	8004d6a <SEGGER_SYSVIEW_RecordU32+0x46>
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	1c59      	adds	r1, r3, #1
 8004d5a:	61f9      	str	r1, [r7, #28]
 8004d5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d60:	b2d2      	uxtb	r2, r2
 8004d62:	701a      	strb	r2, [r3, #0]
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	09db      	lsrs	r3, r3, #7
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6e:	d8f0      	bhi.n	8004d52 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	1c5a      	adds	r2, r3, #1
 8004d74:	61fa      	str	r2, [r7, #28]
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	b2d2      	uxtb	r2, r2
 8004d7a:	701a      	strb	r2, [r3, #0]
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	68f9      	ldr	r1, [r7, #12]
 8004d84:	6938      	ldr	r0, [r7, #16]
 8004d86:	f7ff fa2b 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f383 8811 	msr	BASEPRI, r3
}
 8004d90:	bf00      	nop
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	2001a9e8 	.word	0x2001a9e8

08004d9c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08c      	sub	sp, #48	@ 0x30
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004da8:	f3ef 8311 	mrs	r3, BASEPRI
 8004dac:	f04f 0120 	mov.w	r1, #32
 8004db0:	f381 8811 	msr	BASEPRI, r1
 8004db4:	61fb      	str	r3, [r7, #28]
 8004db6:	4825      	ldr	r0, [pc, #148]	@ (8004e4c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004db8:	f7ff f925 	bl	8004006 <_PreparePacket>
 8004dbc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dca:	e00b      	b.n	8004de4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd2:	1c59      	adds	r1, r3, #1
 8004dd4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004dd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004dda:	b2d2      	uxtb	r2, r2
 8004ddc:	701a      	strb	r2, [r3, #0]
 8004dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de0:	09db      	lsrs	r3, r3, #7
 8004de2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004de8:	d8f0      	bhi.n	8004dcc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dec:	1c5a      	adds	r2, r3, #1
 8004dee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004df0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004df8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	623b      	str	r3, [r7, #32]
 8004e02:	e00b      	b.n	8004e1c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004e04:	6a3b      	ldr	r3, [r7, #32]
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	1c59      	adds	r1, r3, #1
 8004e0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	6a3b      	ldr	r3, [r7, #32]
 8004e18:	09db      	lsrs	r3, r3, #7
 8004e1a:	623b      	str	r3, [r7, #32]
 8004e1c:	6a3b      	ldr	r3, [r7, #32]
 8004e1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e20:	d8f0      	bhi.n	8004e04 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	1c5a      	adds	r2, r3, #1
 8004e26:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e28:	6a3a      	ldr	r2, [r7, #32]
 8004e2a:	b2d2      	uxtb	r2, r2
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e30:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	6979      	ldr	r1, [r7, #20]
 8004e36:	69b8      	ldr	r0, [r7, #24]
 8004e38:	f7ff f9d2 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f383 8811 	msr	BASEPRI, r3
}
 8004e42:	bf00      	nop
 8004e44:	3730      	adds	r7, #48	@ 0x30
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	2001a9e8 	.word	0x2001a9e8

08004e50 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08c      	sub	sp, #48	@ 0x30
 8004e54:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004e56:	4b58      	ldr	r3, [pc, #352]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004e58:	2201      	movs	r2, #1
 8004e5a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004e5c:	f3ef 8311 	mrs	r3, BASEPRI
 8004e60:	f04f 0120 	mov.w	r1, #32
 8004e64:	f381 8811 	msr	BASEPRI, r1
 8004e68:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004e6a:	4b53      	ldr	r3, [pc, #332]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004e6c:	785b      	ldrb	r3, [r3, #1]
 8004e6e:	220a      	movs	r2, #10
 8004e70:	4952      	ldr	r1, [pc, #328]	@ (8004fbc <SEGGER_SYSVIEW_Start+0x16c>)
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7fb f9b4 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8004e7e:	200a      	movs	r0, #10
 8004e80:	f7ff ff32 	bl	8004ce8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004e84:	f3ef 8311 	mrs	r3, BASEPRI
 8004e88:	f04f 0120 	mov.w	r1, #32
 8004e8c:	f381 8811 	msr	BASEPRI, r1
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	484b      	ldr	r0, [pc, #300]	@ (8004fc0 <SEGGER_SYSVIEW_Start+0x170>)
 8004e94:	f7ff f8b7 	bl	8004006 <_PreparePacket>
 8004e98:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ea2:	4b45      	ldr	r3, [pc, #276]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ea8:	e00b      	b.n	8004ec2 <SEGGER_SYSVIEW_Start+0x72>
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eb0:	1c59      	adds	r1, r3, #1
 8004eb2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004eb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eb8:	b2d2      	uxtb	r2, r2
 8004eba:	701a      	strb	r2, [r3, #0]
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ec6:	d8f0      	bhi.n	8004eaa <SEGGER_SYSVIEW_Start+0x5a>
 8004ec8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ece:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ed0:	b2d2      	uxtb	r2, r2
 8004ed2:	701a      	strb	r2, [r3, #0]
 8004ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	627b      	str	r3, [r7, #36]	@ 0x24
 8004edc:	4b36      	ldr	r3, [pc, #216]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	e00b      	b.n	8004efc <SEGGER_SYSVIEW_Start+0xac>
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eea:	1c59      	adds	r1, r3, #1
 8004eec:	6279      	str	r1, [r7, #36]	@ 0x24
 8004eee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]
 8004ef6:	6a3b      	ldr	r3, [r7, #32]
 8004ef8:	09db      	lsrs	r3, r3, #7
 8004efa:	623b      	str	r3, [r7, #32]
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f00:	d8f0      	bhi.n	8004ee4 <SEGGER_SYSVIEW_Start+0x94>
 8004f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f04:	1c5a      	adds	r2, r3, #1
 8004f06:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f08:	6a3a      	ldr	r2, [r7, #32]
 8004f0a:	b2d2      	uxtb	r2, r2
 8004f0c:	701a      	strb	r2, [r3, #0]
 8004f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f10:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	61fb      	str	r3, [r7, #28]
 8004f16:	4b28      	ldr	r3, [pc, #160]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e00b      	b.n	8004f36 <SEGGER_SYSVIEW_Start+0xe6>
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	b2da      	uxtb	r2, r3
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	1c59      	adds	r1, r3, #1
 8004f26:	61f9      	str	r1, [r7, #28]
 8004f28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	09db      	lsrs	r3, r3, #7
 8004f34:	61bb      	str	r3, [r7, #24]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f3a:	d8f0      	bhi.n	8004f1e <SEGGER_SYSVIEW_Start+0xce>
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	1c5a      	adds	r2, r3, #1
 8004f40:	61fa      	str	r2, [r7, #28]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	617b      	str	r3, [r7, #20]
 8004f50:	2300      	movs	r3, #0
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	e00b      	b.n	8004f6e <SEGGER_SYSVIEW_Start+0x11e>
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	1c59      	adds	r1, r3, #1
 8004f5e:	6179      	str	r1, [r7, #20]
 8004f60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	09db      	lsrs	r3, r3, #7
 8004f6c:	613b      	str	r3, [r7, #16]
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f72:	d8f0      	bhi.n	8004f56 <SEGGER_SYSVIEW_Start+0x106>
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	617a      	str	r2, [r7, #20]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004f84:	2218      	movs	r2, #24
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff f929 	bl	80041e0 <_SendPacket>
      RECORD_END();
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004f94:	4b08      	ldr	r3, [pc, #32]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004f9c:	4b06      	ldr	r3, [pc, #24]	@ (8004fb8 <SEGGER_SYSVIEW_Start+0x168>)
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004fa2:	f000 f9eb 	bl	800537c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004fa6:	f000 f9b1 	bl	800530c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004faa:	f000 fcc1 	bl	8005930 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004fae:	bf00      	nop
 8004fb0:	3730      	adds	r7, #48	@ 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	2001a9b8 	.word	0x2001a9b8
 8004fbc:	0800657c 	.word	0x0800657c
 8004fc0:	2001a9e8 	.word	0x2001a9e8

08004fc4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004fca:	f3ef 8311 	mrs	r3, BASEPRI
 8004fce:	f04f 0120 	mov.w	r1, #32
 8004fd2:	f381 8811 	msr	BASEPRI, r1
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	480b      	ldr	r0, [pc, #44]	@ (8005008 <SEGGER_SYSVIEW_Stop+0x44>)
 8004fda:	f7ff f814 	bl	8004006 <_PreparePacket>
 8004fde:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	@ (800500c <SEGGER_SYSVIEW_Stop+0x48>)
 8004fe2:	781b      	ldrb	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d007      	beq.n	8004ff8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004fe8:	220b      	movs	r2, #11
 8004fea:	6839      	ldr	r1, [r7, #0]
 8004fec:	6838      	ldr	r0, [r7, #0]
 8004fee:	f7ff f8f7 	bl	80041e0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004ff2:	4b06      	ldr	r3, [pc, #24]	@ (800500c <SEGGER_SYSVIEW_Stop+0x48>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f383 8811 	msr	BASEPRI, r3
}
 8004ffe:	bf00      	nop
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	2001a9e8 	.word	0x2001a9e8
 800500c:	2001a9b8 	.word	0x2001a9b8

08005010 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005010:	b580      	push	{r7, lr}
 8005012:	b08c      	sub	sp, #48	@ 0x30
 8005014:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005016:	f3ef 8311 	mrs	r3, BASEPRI
 800501a:	f04f 0120 	mov.w	r1, #32
 800501e:	f381 8811 	msr	BASEPRI, r1
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	4845      	ldr	r0, [pc, #276]	@ (800513c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005026:	f7fe ffee 	bl	8004006 <_PreparePacket>
 800502a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005034:	4b42      	ldr	r3, [pc, #264]	@ (8005140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	62bb      	str	r3, [r7, #40]	@ 0x28
 800503a:	e00b      	b.n	8005054 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800503c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800503e:	b2da      	uxtb	r2, r3
 8005040:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005046:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005050:	09db      	lsrs	r3, r3, #7
 8005052:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005056:	2b7f      	cmp	r3, #127	@ 0x7f
 8005058:	d8f0      	bhi.n	800503c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800505a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005060:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005062:	b2d2      	uxtb	r2, r2
 8005064:	701a      	strb	r2, [r3, #0]
 8005066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005068:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	627b      	str	r3, [r7, #36]	@ 0x24
 800506e:	4b34      	ldr	r3, [pc, #208]	@ (8005140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	e00b      	b.n	800508e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005076:	6a3b      	ldr	r3, [r7, #32]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	1c59      	adds	r1, r3, #1
 800507e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005080:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	09db      	lsrs	r3, r3, #7
 800508c:	623b      	str	r3, [r7, #32]
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	2b7f      	cmp	r3, #127	@ 0x7f
 8005092:	d8f0      	bhi.n	8005076 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	627a      	str	r2, [r7, #36]	@ 0x24
 800509a:	6a3a      	ldr	r2, [r7, #32]
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]
 80050a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	4b25      	ldr	r3, [pc, #148]	@ (8005140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	e00b      	b.n	80050c8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	b2da      	uxtb	r2, r3
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	1c59      	adds	r1, r3, #1
 80050b8:	61f9      	str	r1, [r7, #28]
 80050ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050be:	b2d2      	uxtb	r2, r2
 80050c0:	701a      	strb	r2, [r3, #0]
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	09db      	lsrs	r3, r3, #7
 80050c6:	61bb      	str	r3, [r7, #24]
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80050cc:	d8f0      	bhi.n	80050b0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80050ce:	69fb      	ldr	r3, [r7, #28]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	61fa      	str	r2, [r7, #28]
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	617b      	str	r3, [r7, #20]
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e00b      	b.n	8005100 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	b2da      	uxtb	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	1c59      	adds	r1, r3, #1
 80050f0:	6179      	str	r1, [r7, #20]
 80050f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f6:	b2d2      	uxtb	r2, r2
 80050f8:	701a      	strb	r2, [r3, #0]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	09db      	lsrs	r3, r3, #7
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	2b7f      	cmp	r3, #127	@ 0x7f
 8005104:	d8f0      	bhi.n	80050e8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	1c5a      	adds	r2, r3, #1
 800510a:	617a      	str	r2, [r7, #20]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	b2d2      	uxtb	r2, r2
 8005110:	701a      	strb	r2, [r3, #0]
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005116:	2218      	movs	r2, #24
 8005118:	6879      	ldr	r1, [r7, #4]
 800511a:	68b8      	ldr	r0, [r7, #8]
 800511c:	f7ff f860 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005126:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800512a:	2b00      	cmp	r3, #0
 800512c:	d002      	beq.n	8005134 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800512e:	4b04      	ldr	r3, [pc, #16]	@ (8005140 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005132:	4798      	blx	r3
  }
}
 8005134:	bf00      	nop
 8005136:	3730      	adds	r7, #48	@ 0x30
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	2001a9e8 	.word	0x2001a9e8
 8005140:	2001a9b8 	.word	0x2001a9b8

08005144 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b092      	sub	sp, #72	@ 0x48
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800514c:	f3ef 8311 	mrs	r3, BASEPRI
 8005150:	f04f 0120 	mov.w	r1, #32
 8005154:	f381 8811 	msr	BASEPRI, r1
 8005158:	617b      	str	r3, [r7, #20]
 800515a:	486a      	ldr	r0, [pc, #424]	@ (8005304 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800515c:	f7fe ff53 	bl	8004006 <_PreparePacket>
 8005160:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	647b      	str	r3, [r7, #68]	@ 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b66      	ldr	r3, [pc, #408]	@ (8005308 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	1ad3      	subs	r3, r2, r3
 8005174:	643b      	str	r3, [r7, #64]	@ 0x40
 8005176:	e00b      	b.n	8005190 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005178:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800517a:	b2da      	uxtb	r2, r3
 800517c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800517e:	1c59      	adds	r1, r3, #1
 8005180:	6479      	str	r1, [r7, #68]	@ 0x44
 8005182:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005186:	b2d2      	uxtb	r2, r2
 8005188:	701a      	strb	r2, [r3, #0]
 800518a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800518c:	09db      	lsrs	r3, r3, #7
 800518e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005190:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005192:	2b7f      	cmp	r3, #127	@ 0x7f
 8005194:	d8f0      	bhi.n	8005178 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005196:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005198:	1c5a      	adds	r2, r3, #1
 800519a:	647a      	str	r2, [r7, #68]	@ 0x44
 800519c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800519e:	b2d2      	uxtb	r2, r2
 80051a0:	701a      	strb	r2, [r3, #0]
 80051a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051b0:	e00b      	b.n	80051ca <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80051b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051b8:	1c59      	adds	r1, r3, #1
 80051ba:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80051bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
 80051c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c6:	09db      	lsrs	r3, r3, #7
 80051c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80051ce:	d8f0      	bhi.n	80051b2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80051d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d2:	1c5a      	adds	r2, r3, #1
 80051d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80051d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80051d8:	b2d2      	uxtb	r2, r2
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051de:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7fe fed3 	bl	8003f94 <_EncodeStr>
 80051ee:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 80051f0:	2209      	movs	r2, #9
 80051f2:	68f9      	ldr	r1, [r7, #12]
 80051f4:	6938      	ldr	r0, [r7, #16]
 80051f6:	f7fe fff3 	bl	80041e0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	637b      	str	r3, [r7, #52]	@ 0x34
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b40      	ldr	r3, [pc, #256]	@ (8005308 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005208:	691b      	ldr	r3, [r3, #16]
 800520a:	1ad3      	subs	r3, r2, r3
 800520c:	633b      	str	r3, [r7, #48]	@ 0x30
 800520e:	e00b      	b.n	8005228 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005212:	b2da      	uxtb	r2, r3
 8005214:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005216:	1c59      	adds	r1, r3, #1
 8005218:	6379      	str	r1, [r7, #52]	@ 0x34
 800521a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	09db      	lsrs	r3, r3, #7
 8005226:	633b      	str	r3, [r7, #48]	@ 0x30
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	2b7f      	cmp	r3, #127	@ 0x7f
 800522c:	d8f0      	bhi.n	8005210 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800522e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	637a      	str	r2, [r7, #52]	@ 0x34
 8005234:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
 800523a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800523c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005248:	e00b      	b.n	8005262 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524c:	b2da      	uxtb	r2, r3
 800524e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005250:	1c59      	adds	r1, r3, #1
 8005252:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005254:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005258:	b2d2      	uxtb	r2, r2
 800525a:	701a      	strb	r2, [r3, #0]
 800525c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525e:	09db      	lsrs	r3, r3, #7
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	2b7f      	cmp	r3, #127	@ 0x7f
 8005266:	d8f0      	bhi.n	800524a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005268:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800526a:	1c5a      	adds	r2, r3, #1
 800526c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800526e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005270:	b2d2      	uxtb	r2, r2
 8005272:	701a      	strb	r2, [r3, #0]
 8005274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005276:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	623b      	str	r3, [r7, #32]
 8005282:	e00b      	b.n	800529c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	b2da      	uxtb	r2, r3
 8005288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800528a:	1c59      	adds	r1, r3, #1
 800528c:	6279      	str	r1, [r7, #36]	@ 0x24
 800528e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	09db      	lsrs	r3, r3, #7
 800529a:	623b      	str	r3, [r7, #32]
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	2b7f      	cmp	r3, #127	@ 0x7f
 80052a0:	d8f0      	bhi.n	8005284 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	1c5a      	adds	r2, r3, #1
 80052a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80052a8:	6a3a      	ldr	r2, [r7, #32]
 80052aa:	b2d2      	uxtb	r2, r2
 80052ac:	701a      	strb	r2, [r3, #0]
 80052ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	61fb      	str	r3, [r7, #28]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	695b      	ldr	r3, [r3, #20]
 80052ba:	61bb      	str	r3, [r7, #24]
 80052bc:	e00b      	b.n	80052d6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 80052be:	69bb      	ldr	r3, [r7, #24]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	1c59      	adds	r1, r3, #1
 80052c6:	61f9      	str	r1, [r7, #28]
 80052c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052cc:	b2d2      	uxtb	r2, r2
 80052ce:	701a      	strb	r2, [r3, #0]
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	09db      	lsrs	r3, r3, #7
 80052d4:	61bb      	str	r3, [r7, #24]
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80052da:	d8f0      	bhi.n	80052be <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	b2d2      	uxtb	r2, r2
 80052e6:	701a      	strb	r2, [r3, #0]
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80052ec:	2215      	movs	r2, #21
 80052ee:	68f9      	ldr	r1, [r7, #12]
 80052f0:	6938      	ldr	r0, [r7, #16]
 80052f2:	f7fe ff75 	bl	80041e0 <_SendPacket>
  RECORD_END();
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f383 8811 	msr	BASEPRI, r3
}
 80052fc:	bf00      	nop
 80052fe:	3748      	adds	r7, #72	@ 0x48
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	2001a9e8 	.word	0x2001a9e8
 8005308:	2001a9b8 	.word	0x2001a9b8

0800530c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005310:	4b07      	ldr	r3, [pc, #28]	@ (8005330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005312:	6a1b      	ldr	r3, [r3, #32]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d008      	beq.n	800532a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005318:	4b05      	ldr	r3, [pc, #20]	@ (8005330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800531a:	6a1b      	ldr	r3, [r3, #32]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005322:	4b03      	ldr	r3, [pc, #12]	@ (8005330 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005324:	6a1b      	ldr	r3, [r3, #32]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	4798      	blx	r3
  }
}
 800532a:	bf00      	nop
 800532c:	bd80      	pop	{r7, pc}
 800532e:	bf00      	nop
 8005330:	2001a9b8 	.word	0x2001a9b8

08005334 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800533c:	f3ef 8311 	mrs	r3, BASEPRI
 8005340:	f04f 0120 	mov.w	r1, #32
 8005344:	f381 8811 	msr	BASEPRI, r1
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	480b      	ldr	r0, [pc, #44]	@ (8005378 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800534c:	f7fe fe5b 	bl	8004006 <_PreparePacket>
 8005350:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005352:	2280      	movs	r2, #128	@ 0x80
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	6938      	ldr	r0, [r7, #16]
 8005358:	f7fe fe1c 	bl	8003f94 <_EncodeStr>
 800535c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800535e:	220e      	movs	r2, #14
 8005360:	68f9      	ldr	r1, [r7, #12]
 8005362:	6938      	ldr	r0, [r7, #16]
 8005364:	f7fe ff3c 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	f383 8811 	msr	BASEPRI, r3
}
 800536e:	bf00      	nop
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2001a9e8 	.word	0x2001a9e8

0800537c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800537c:	b590      	push	{r4, r7, lr}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005382:	4b15      	ldr	r3, [pc, #84]	@ (80053d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01a      	beq.n	80053c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800538a:	4b13      	ldr	r3, [pc, #76]	@ (80053d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800538c:	6a1b      	ldr	r3, [r3, #32]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005394:	4b10      	ldr	r3, [pc, #64]	@ (80053d8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005396:	6a1b      	ldr	r3, [r3, #32]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4798      	blx	r3
 800539c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053a0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80053a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	000a      	movs	r2, r1
 80053b0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80053b2:	4613      	mov	r3, r2
 80053b4:	461a      	mov	r2, r3
 80053b6:	4621      	mov	r1, r4
 80053b8:	200d      	movs	r0, #13
 80053ba:	f7ff fcef 	bl	8004d9c <SEGGER_SYSVIEW_RecordU32x2>
 80053be:	e006      	b.n	80053ce <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80053c0:	4b06      	ldr	r3, [pc, #24]	@ (80053dc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4619      	mov	r1, r3
 80053c6:	200c      	movs	r0, #12
 80053c8:	f7ff fcac 	bl	8004d24 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80053cc:	bf00      	nop
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2001a9b8 	.word	0x2001a9b8
 80053dc:	e0001004 	.word	0xe0001004

080053e0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80053e6:	f3ef 8311 	mrs	r3, BASEPRI
 80053ea:	f04f 0120 	mov.w	r1, #32
 80053ee:	f381 8811 	msr	BASEPRI, r1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	4819      	ldr	r0, [pc, #100]	@ (800545c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80053f6:	f7fe fe06 	bl	8004006 <_PreparePacket>
 80053fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80053fc:	68bb      	ldr	r3, [r7, #8]
 80053fe:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005400:	4b17      	ldr	r3, [pc, #92]	@ (8005460 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005408:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	613b      	str	r3, [r7, #16]
 8005412:	e00b      	b.n	800542c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	b2da      	uxtb	r2, r3
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	1c59      	adds	r1, r3, #1
 800541c:	6179      	str	r1, [r7, #20]
 800541e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005422:	b2d2      	uxtb	r2, r2
 8005424:	701a      	strb	r2, [r3, #0]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	09db      	lsrs	r3, r3, #7
 800542a:	613b      	str	r3, [r7, #16]
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005430:	d8f0      	bhi.n	8005414 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	1c5a      	adds	r2, r3, #1
 8005436:	617a      	str	r2, [r7, #20]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005442:	2202      	movs	r2, #2
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	68b8      	ldr	r0, [r7, #8]
 8005448:	f7fe feca 	bl	80041e0 <_SendPacket>
  RECORD_END();
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f383 8811 	msr	BASEPRI, r3
}
 8005452:	bf00      	nop
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	2001a9e8 	.word	0x2001a9e8
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800546a:	f3ef 8311 	mrs	r3, BASEPRI
 800546e:	f04f 0120 	mov.w	r1, #32
 8005472:	f381 8811 	msr	BASEPRI, r1
 8005476:	607b      	str	r3, [r7, #4]
 8005478:	4807      	ldr	r0, [pc, #28]	@ (8005498 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800547a:	f7fe fdc4 	bl	8004006 <_PreparePacket>
 800547e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005480:	2203      	movs	r2, #3
 8005482:	6839      	ldr	r1, [r7, #0]
 8005484:	6838      	ldr	r0, [r7, #0]
 8005486:	f7fe feab 	bl	80041e0 <_SendPacket>
  RECORD_END();
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f383 8811 	msr	BASEPRI, r3
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	2001a9e8 	.word	0x2001a9e8

0800549c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80054a2:	f3ef 8311 	mrs	r3, BASEPRI
 80054a6:	f04f 0120 	mov.w	r1, #32
 80054aa:	f381 8811 	msr	BASEPRI, r1
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	4807      	ldr	r0, [pc, #28]	@ (80054d0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80054b2:	f7fe fda8 	bl	8004006 <_PreparePacket>
 80054b6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80054b8:	2212      	movs	r2, #18
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6838      	ldr	r0, [r7, #0]
 80054be:	f7fe fe8f 	bl	80041e0 <_SendPacket>
  RECORD_END();
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f383 8811 	msr	BASEPRI, r3
}
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	2001a9e8 	.word	0x2001a9e8

080054d4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b088      	sub	sp, #32
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80054dc:	f3ef 8311 	mrs	r3, BASEPRI
 80054e0:	f04f 0120 	mov.w	r1, #32
 80054e4:	f381 8811 	msr	BASEPRI, r1
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	4817      	ldr	r0, [pc, #92]	@ (8005548 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 80054ec:	f7fe fd8b 	bl	8004006 <_PreparePacket>
 80054f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	61bb      	str	r3, [r7, #24]
 80054fe:	e00b      	b.n	8005518 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	b2da      	uxtb	r2, r3
 8005504:	69fb      	ldr	r3, [r7, #28]
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	61f9      	str	r1, [r7, #28]
 800550a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	09db      	lsrs	r3, r3, #7
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	2b7f      	cmp	r3, #127	@ 0x7f
 800551c:	d8f0      	bhi.n	8005500 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	1c5a      	adds	r2, r3, #1
 8005522:	61fa      	str	r2, [r7, #28]
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	b2d2      	uxtb	r2, r2
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800552e:	221c      	movs	r2, #28
 8005530:	68f9      	ldr	r1, [r7, #12]
 8005532:	6938      	ldr	r0, [r7, #16]
 8005534:	f7fe fe54 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f383 8811 	msr	BASEPRI, r3
}
 800553e:	bf00      	nop
 8005540:	3720      	adds	r7, #32
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	2001a9e8 	.word	0x2001a9e8

0800554c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b08a      	sub	sp, #40	@ 0x28
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005556:	f3ef 8311 	mrs	r3, BASEPRI
 800555a:	f04f 0120 	mov.w	r1, #32
 800555e:	f381 8811 	msr	BASEPRI, r1
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	4824      	ldr	r0, [pc, #144]	@ (80055f8 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005566:	f7fe fd4e 	bl	8004006 <_PreparePacket>
 800556a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	e00b      	b.n	8005592 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	6279      	str	r1, [r7, #36]	@ 0x24
 8005584:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2b7f      	cmp	r3, #127	@ 0x7f
 8005596:	d8f0      	bhi.n	800557a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	627a      	str	r2, [r7, #36]	@ 0x24
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e00b      	b.n	80055ca <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	61f9      	str	r1, [r7, #28]
 80055bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	09db      	lsrs	r3, r3, #7
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80055ce:	d8f0      	bhi.n	80055b2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80055e0:	221c      	movs	r2, #28
 80055e2:	68f9      	ldr	r1, [r7, #12]
 80055e4:	6938      	ldr	r0, [r7, #16]
 80055e6:	f7fe fdfb 	bl	80041e0 <_SendPacket>
  RECORD_END();
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
 80055f2:	3728      	adds	r7, #40	@ 0x28
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2001a9e8 	.word	0x2001a9e8

080055fc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	f04f 0120 	mov.w	r1, #32
 800560a:	f381 8811 	msr	BASEPRI, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	4807      	ldr	r0, [pc, #28]	@ (8005630 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8005612:	f7fe fcf8 	bl	8004006 <_PreparePacket>
 8005616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005618:	2211      	movs	r2, #17
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f7fe fddf 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f383 8811 	msr	BASEPRI, r3
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	2001a9e8 	.word	0x2001a9e8

08005634 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b088      	sub	sp, #32
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800563c:	f3ef 8311 	mrs	r3, BASEPRI
 8005640:	f04f 0120 	mov.w	r1, #32
 8005644:	f381 8811 	msr	BASEPRI, r1
 8005648:	617b      	str	r3, [r7, #20]
 800564a:	4819      	ldr	r0, [pc, #100]	@ (80056b0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800564c:	f7fe fcdb 	bl	8004006 <_PreparePacket>
 8005650:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005656:	4b17      	ldr	r3, [pc, #92]	@ (80056b4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	61fb      	str	r3, [r7, #28]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e00b      	b.n	8005682 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	1c59      	adds	r1, r3, #1
 8005672:	61f9      	str	r1, [r7, #28]
 8005674:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	701a      	strb	r2, [r3, #0]
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	09db      	lsrs	r3, r3, #7
 8005680:	61bb      	str	r3, [r7, #24]
 8005682:	69bb      	ldr	r3, [r7, #24]
 8005684:	2b7f      	cmp	r3, #127	@ 0x7f
 8005686:	d8f0      	bhi.n	800566a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005688:	69fb      	ldr	r3, [r7, #28]
 800568a:	1c5a      	adds	r2, r3, #1
 800568c:	61fa      	str	r2, [r7, #28]
 800568e:	69ba      	ldr	r2, [r7, #24]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	701a      	strb	r2, [r3, #0]
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005698:	2208      	movs	r2, #8
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	6938      	ldr	r0, [r7, #16]
 800569e:	f7fe fd9f 	bl	80041e0 <_SendPacket>
  RECORD_END();
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f383 8811 	msr	BASEPRI, r3
}
 80056a8:	bf00      	nop
 80056aa:	3720      	adds	r7, #32
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	2001a9e8 	.word	0x2001a9e8
 80056b4:	2001a9b8 	.word	0x2001a9b8

080056b8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056c0:	f3ef 8311 	mrs	r3, BASEPRI
 80056c4:	f04f 0120 	mov.w	r1, #32
 80056c8:	f381 8811 	msr	BASEPRI, r1
 80056cc:	617b      	str	r3, [r7, #20]
 80056ce:	4819      	ldr	r0, [pc, #100]	@ (8005734 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80056d0:	f7fe fc99 	bl	8004006 <_PreparePacket>
 80056d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80056da:	4b17      	ldr	r3, [pc, #92]	@ (8005738 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	1ad3      	subs	r3, r2, r3
 80056e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	61bb      	str	r3, [r7, #24]
 80056ec:	e00b      	b.n	8005706 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	61f9      	str	r1, [r7, #28]
 80056f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	701a      	strb	r2, [r3, #0]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	09db      	lsrs	r3, r3, #7
 8005704:	61bb      	str	r3, [r7, #24]
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b7f      	cmp	r3, #127	@ 0x7f
 800570a:	d8f0      	bhi.n	80056ee <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	1c5a      	adds	r2, r3, #1
 8005710:	61fa      	str	r2, [r7, #28]
 8005712:	69ba      	ldr	r2, [r7, #24]
 8005714:	b2d2      	uxtb	r2, r2
 8005716:	701a      	strb	r2, [r3, #0]
 8005718:	69fb      	ldr	r3, [r7, #28]
 800571a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800571c:	2204      	movs	r2, #4
 800571e:	68f9      	ldr	r1, [r7, #12]
 8005720:	6938      	ldr	r0, [r7, #16]
 8005722:	f7fe fd5d 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f383 8811 	msr	BASEPRI, r3
}
 800572c:	bf00      	nop
 800572e:	3720      	adds	r7, #32
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}
 8005734:	2001a9e8 	.word	0x2001a9e8
 8005738:	2001a9b8 	.word	0x2001a9b8

0800573c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005744:	f3ef 8311 	mrs	r3, BASEPRI
 8005748:	f04f 0120 	mov.w	r1, #32
 800574c:	f381 8811 	msr	BASEPRI, r1
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	4819      	ldr	r0, [pc, #100]	@ (80057b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005754:	f7fe fc57 	bl	8004006 <_PreparePacket>
 8005758:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800575e:	4b17      	ldr	r3, [pc, #92]	@ (80057bc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	61bb      	str	r3, [r7, #24]
 8005770:	e00b      	b.n	800578a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	b2da      	uxtb	r2, r3
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	1c59      	adds	r1, r3, #1
 800577a:	61f9      	str	r1, [r7, #28]
 800577c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005780:	b2d2      	uxtb	r2, r2
 8005782:	701a      	strb	r2, [r3, #0]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	09db      	lsrs	r3, r3, #7
 8005788:	61bb      	str	r3, [r7, #24]
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	2b7f      	cmp	r3, #127	@ 0x7f
 800578e:	d8f0      	bhi.n	8005772 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	61fa      	str	r2, [r7, #28]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057a0:	2206      	movs	r2, #6
 80057a2:	68f9      	ldr	r1, [r7, #12]
 80057a4:	6938      	ldr	r0, [r7, #16]
 80057a6:	f7fe fd1b 	bl	80041e0 <_SendPacket>
  RECORD_END();
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f383 8811 	msr	BASEPRI, r3
}
 80057b0:	bf00      	nop
 80057b2:	3720      	adds	r7, #32
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	2001a9e8 	.word	0x2001a9e8
 80057bc:	2001a9b8 	.word	0x2001a9b8

080057c0 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80057c8:	4b04      	ldr	r3, [pc, #16]	@ (80057dc <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	687a      	ldr	r2, [r7, #4]
 80057ce:	1ad3      	subs	r3, r2, r3
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	370c      	adds	r7, #12
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr
 80057dc:	2001a9b8 	.word	0x2001a9b8

080057e0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	@ 0x30
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80057ea:	4b40      	ldr	r3, [pc, #256]	@ (80058ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d077      	beq.n	80058e2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80057f2:	4b3e      	ldr	r3, [pc, #248]	@ (80058ec <SEGGER_SYSVIEW_SendModule+0x10c>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80057f8:	2300      	movs	r3, #0
 80057fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057fc:	e008      	b.n	8005810 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80057fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005806:	2b00      	cmp	r3, #0
 8005808:	d007      	beq.n	800581a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800580a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580c:	3301      	adds	r3, #1
 800580e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005810:	79fb      	ldrb	r3, [r7, #7]
 8005812:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005814:	429a      	cmp	r2, r3
 8005816:	d3f2      	bcc.n	80057fe <SEGGER_SYSVIEW_SendModule+0x1e>
 8005818:	e000      	b.n	800581c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800581a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800581c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d055      	beq.n	80058ce <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005822:	f3ef 8311 	mrs	r3, BASEPRI
 8005826:	f04f 0120 	mov.w	r1, #32
 800582a:	f381 8811 	msr	BASEPRI, r1
 800582e:	617b      	str	r3, [r7, #20]
 8005830:	482f      	ldr	r0, [pc, #188]	@ (80058f0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8005832:	f7fe fbe8 	bl	8004006 <_PreparePacket>
 8005836:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	623b      	str	r3, [r7, #32]
 8005844:	e00b      	b.n	800585e <SEGGER_SYSVIEW_SendModule+0x7e>
 8005846:	6a3b      	ldr	r3, [r7, #32]
 8005848:	b2da      	uxtb	r2, r3
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1c59      	adds	r1, r3, #1
 800584e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005850:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005854:	b2d2      	uxtb	r2, r2
 8005856:	701a      	strb	r2, [r3, #0]
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	09db      	lsrs	r3, r3, #7
 800585c:	623b      	str	r3, [r7, #32]
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	2b7f      	cmp	r3, #127	@ 0x7f
 8005862:	d8f0      	bhi.n	8005846 <SEGGER_SYSVIEW_SendModule+0x66>
 8005864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	627a      	str	r2, [r7, #36]	@ 0x24
 800586a:	6a3a      	ldr	r2, [r7, #32]
 800586c:	b2d2      	uxtb	r2, r2
 800586e:	701a      	strb	r2, [r3, #0]
 8005870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005872:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	61bb      	str	r3, [r7, #24]
 800587e:	e00b      	b.n	8005898 <SEGGER_SYSVIEW_SendModule+0xb8>
 8005880:	69bb      	ldr	r3, [r7, #24]
 8005882:	b2da      	uxtb	r2, r3
 8005884:	69fb      	ldr	r3, [r7, #28]
 8005886:	1c59      	adds	r1, r3, #1
 8005888:	61f9      	str	r1, [r7, #28]
 800588a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800588e:	b2d2      	uxtb	r2, r2
 8005890:	701a      	strb	r2, [r3, #0]
 8005892:	69bb      	ldr	r3, [r7, #24]
 8005894:	09db      	lsrs	r3, r3, #7
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	2b7f      	cmp	r3, #127	@ 0x7f
 800589c:	d8f0      	bhi.n	8005880 <SEGGER_SYSVIEW_SendModule+0xa0>
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	61fa      	str	r2, [r7, #28]
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2280      	movs	r2, #128	@ 0x80
 80058b4:	4619      	mov	r1, r3
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f7fe fb6c 	bl	8003f94 <_EncodeStr>
 80058bc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80058be:	2216      	movs	r2, #22
 80058c0:	68f9      	ldr	r1, [r7, #12]
 80058c2:	6938      	ldr	r0, [r7, #16]
 80058c4:	f7fe fc8c 	bl	80041e0 <_SendPacket>
      RECORD_END();
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80058ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d006      	beq.n	80058e2 <SEGGER_SYSVIEW_SendModule+0x102>
 80058d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d002      	beq.n	80058e2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80058dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058de:	68db      	ldr	r3, [r3, #12]
 80058e0:	4798      	blx	r3
    }
  }
}
 80058e2:	bf00      	nop
 80058e4:	3730      	adds	r7, #48	@ 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	2001a9e0 	.word	0x2001a9e0
 80058f0:	2001a9e8 	.word	0x2001a9e8

080058f4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80058fa:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00f      	beq.n	8005922 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005902:	4b0a      	ldr	r3, [pc, #40]	@ (800592c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f2      	bne.n	8005908 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005922:	bf00      	nop
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	2001a9e0 	.word	0x2001a9e0

08005930 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	f04f 0120 	mov.w	r1, #32
 800593e:	f381 8811 	msr	BASEPRI, r1
 8005942:	60fb      	str	r3, [r7, #12]
 8005944:	4817      	ldr	r0, [pc, #92]	@ (80059a4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8005946:	f7fe fb5e 	bl	8004006 <_PreparePacket>
 800594a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	617b      	str	r3, [r7, #20]
 8005954:	4b14      	ldr	r3, [pc, #80]	@ (80059a8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e00b      	b.n	8005974 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800595c:	693b      	ldr	r3, [r7, #16]
 800595e:	b2da      	uxtb	r2, r3
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	6179      	str	r1, [r7, #20]
 8005966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b7f      	cmp	r3, #127	@ 0x7f
 8005978:	d8f0      	bhi.n	800595c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800598a:	221b      	movs	r2, #27
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	68b8      	ldr	r0, [r7, #8]
 8005990:	f7fe fc26 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	f383 8811 	msr	BASEPRI, r3
}
 800599a:	bf00      	nop
 800599c:	3718      	adds	r7, #24
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	2001a9e8 	.word	0x2001a9e8
 80059a8:	2001a9e4 	.word	0x2001a9e4

080059ac <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80059ac:	b40f      	push	{r0, r1, r2, r3}
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b082      	sub	sp, #8
 80059b2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80059ba:	1d3b      	adds	r3, r7, #4
 80059bc:	461a      	mov	r2, r3
 80059be:	2100      	movs	r1, #0
 80059c0:	6938      	ldr	r0, [r7, #16]
 80059c2:	f7fe ff1d 	bl	8004800 <_VPrintTarget>
  va_end(ParamList);
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80059d0:	b004      	add	sp, #16
 80059d2:	4770      	bx	lr

080059d4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b08a      	sub	sp, #40	@ 0x28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059dc:	f3ef 8311 	mrs	r3, BASEPRI
 80059e0:	f04f 0120 	mov.w	r1, #32
 80059e4:	f381 8811 	msr	BASEPRI, r1
 80059e8:	617b      	str	r3, [r7, #20]
 80059ea:	4827      	ldr	r0, [pc, #156]	@ (8005a88 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059ec:	f7fe fb0b 	bl	8004006 <_PreparePacket>
 80059f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059f2:	2280      	movs	r2, #128	@ 0x80
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	6938      	ldr	r0, [r7, #16]
 80059f8:	f7fe facc 	bl	8003f94 <_EncodeStr>
 80059fc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a02:	2301      	movs	r3, #1
 8005a04:	623b      	str	r3, [r7, #32]
 8005a06:	e00b      	b.n	8005a20 <SEGGER_SYSVIEW_Warn+0x4c>
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	b2da      	uxtb	r2, r3
 8005a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a16:	b2d2      	uxtb	r2, r2
 8005a18:	701a      	strb	r2, [r3, #0]
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	09db      	lsrs	r3, r3, #7
 8005a1e:	623b      	str	r3, [r7, #32]
 8005a20:	6a3b      	ldr	r3, [r7, #32]
 8005a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a24:	d8f0      	bhi.n	8005a08 <SEGGER_SYSVIEW_Warn+0x34>
 8005a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a28:	1c5a      	adds	r2, r3, #1
 8005a2a:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a2c:	6a3a      	ldr	r2, [r7, #32]
 8005a2e:	b2d2      	uxtb	r2, r2
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	61fb      	str	r3, [r7, #28]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	e00b      	b.n	8005a58 <SEGGER_SYSVIEW_Warn+0x84>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	1c59      	adds	r1, r3, #1
 8005a48:	61f9      	str	r1, [r7, #28]
 8005a4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a4e:	b2d2      	uxtb	r2, r2
 8005a50:	701a      	strb	r2, [r3, #0]
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	09db      	lsrs	r3, r3, #7
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a5c:	d8f0      	bhi.n	8005a40 <SEGGER_SYSVIEW_Warn+0x6c>
 8005a5e:	69fb      	ldr	r3, [r7, #28]
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	61fa      	str	r2, [r7, #28]
 8005a64:	69ba      	ldr	r2, [r7, #24]
 8005a66:	b2d2      	uxtb	r2, r2
 8005a68:	701a      	strb	r2, [r3, #0]
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a6e:	221a      	movs	r2, #26
 8005a70:	68f9      	ldr	r1, [r7, #12]
 8005a72:	6938      	ldr	r0, [r7, #16]
 8005a74:	f7fe fbb4 	bl	80041e0 <_SendPacket>
  RECORD_END();
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f383 8811 	msr	BASEPRI, r3
}
 8005a7e:	bf00      	nop
 8005a80:	3728      	adds	r7, #40	@ 0x28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	2001a9e8 	.word	0x2001a9e8

08005a8c <sniprintf>:
 8005a8c:	b40c      	push	{r2, r3}
 8005a8e:	b530      	push	{r4, r5, lr}
 8005a90:	4b17      	ldr	r3, [pc, #92]	@ (8005af0 <sniprintf+0x64>)
 8005a92:	1e0c      	subs	r4, r1, #0
 8005a94:	681d      	ldr	r5, [r3, #0]
 8005a96:	b09d      	sub	sp, #116	@ 0x74
 8005a98:	da08      	bge.n	8005aac <sniprintf+0x20>
 8005a9a:	238b      	movs	r3, #139	@ 0x8b
 8005a9c:	602b      	str	r3, [r5, #0]
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa2:	b01d      	add	sp, #116	@ 0x74
 8005aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005aa8:	b002      	add	sp, #8
 8005aaa:	4770      	bx	lr
 8005aac:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005ab0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005ab4:	bf14      	ite	ne
 8005ab6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005aba:	4623      	moveq	r3, r4
 8005abc:	9304      	str	r3, [sp, #16]
 8005abe:	9307      	str	r3, [sp, #28]
 8005ac0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005ac4:	9002      	str	r0, [sp, #8]
 8005ac6:	9006      	str	r0, [sp, #24]
 8005ac8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005acc:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ace:	ab21      	add	r3, sp, #132	@ 0x84
 8005ad0:	a902      	add	r1, sp, #8
 8005ad2:	4628      	mov	r0, r5
 8005ad4:	9301      	str	r3, [sp, #4]
 8005ad6:	f000 f9ad 	bl	8005e34 <_svfiprintf_r>
 8005ada:	1c43      	adds	r3, r0, #1
 8005adc:	bfbc      	itt	lt
 8005ade:	238b      	movlt	r3, #139	@ 0x8b
 8005ae0:	602b      	strlt	r3, [r5, #0]
 8005ae2:	2c00      	cmp	r4, #0
 8005ae4:	d0dd      	beq.n	8005aa2 <sniprintf+0x16>
 8005ae6:	9b02      	ldr	r3, [sp, #8]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	701a      	strb	r2, [r3, #0]
 8005aec:	e7d9      	b.n	8005aa2 <sniprintf+0x16>
 8005aee:	bf00      	nop
 8005af0:	20000014 	.word	0x20000014

08005af4 <memcmp>:
 8005af4:	b510      	push	{r4, lr}
 8005af6:	3901      	subs	r1, #1
 8005af8:	4402      	add	r2, r0
 8005afa:	4290      	cmp	r0, r2
 8005afc:	d101      	bne.n	8005b02 <memcmp+0xe>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e005      	b.n	8005b0e <memcmp+0x1a>
 8005b02:	7803      	ldrb	r3, [r0, #0]
 8005b04:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d001      	beq.n	8005b10 <memcmp+0x1c>
 8005b0c:	1b18      	subs	r0, r3, r4
 8005b0e:	bd10      	pop	{r4, pc}
 8005b10:	3001      	adds	r0, #1
 8005b12:	e7f2      	b.n	8005afa <memcmp+0x6>

08005b14 <memset>:
 8005b14:	4402      	add	r2, r0
 8005b16:	4603      	mov	r3, r0
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d100      	bne.n	8005b1e <memset+0xa>
 8005b1c:	4770      	bx	lr
 8005b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b22:	e7f9      	b.n	8005b18 <memset+0x4>

08005b24 <__libc_init_array>:
 8005b24:	b570      	push	{r4, r5, r6, lr}
 8005b26:	4d0d      	ldr	r5, [pc, #52]	@ (8005b5c <__libc_init_array+0x38>)
 8005b28:	4c0d      	ldr	r4, [pc, #52]	@ (8005b60 <__libc_init_array+0x3c>)
 8005b2a:	1b64      	subs	r4, r4, r5
 8005b2c:	10a4      	asrs	r4, r4, #2
 8005b2e:	2600      	movs	r6, #0
 8005b30:	42a6      	cmp	r6, r4
 8005b32:	d109      	bne.n	8005b48 <__libc_init_array+0x24>
 8005b34:	4d0b      	ldr	r5, [pc, #44]	@ (8005b64 <__libc_init_array+0x40>)
 8005b36:	4c0c      	ldr	r4, [pc, #48]	@ (8005b68 <__libc_init_array+0x44>)
 8005b38:	f000 fc74 	bl	8006424 <_init>
 8005b3c:	1b64      	subs	r4, r4, r5
 8005b3e:	10a4      	asrs	r4, r4, #2
 8005b40:	2600      	movs	r6, #0
 8005b42:	42a6      	cmp	r6, r4
 8005b44:	d105      	bne.n	8005b52 <__libc_init_array+0x2e>
 8005b46:	bd70      	pop	{r4, r5, r6, pc}
 8005b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4c:	4798      	blx	r3
 8005b4e:	3601      	adds	r6, #1
 8005b50:	e7ee      	b.n	8005b30 <__libc_init_array+0xc>
 8005b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b56:	4798      	blx	r3
 8005b58:	3601      	adds	r6, #1
 8005b5a:	e7f2      	b.n	8005b42 <__libc_init_array+0x1e>
 8005b5c:	080065d4 	.word	0x080065d4
 8005b60:	080065d4 	.word	0x080065d4
 8005b64:	080065d4 	.word	0x080065d4
 8005b68:	080065d8 	.word	0x080065d8

08005b6c <__retarget_lock_acquire_recursive>:
 8005b6c:	4770      	bx	lr

08005b6e <__retarget_lock_release_recursive>:
 8005b6e:	4770      	bx	lr

08005b70 <memcpy>:
 8005b70:	440a      	add	r2, r1
 8005b72:	4291      	cmp	r1, r2
 8005b74:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b78:	d100      	bne.n	8005b7c <memcpy+0xc>
 8005b7a:	4770      	bx	lr
 8005b7c:	b510      	push	{r4, lr}
 8005b7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b86:	4291      	cmp	r1, r2
 8005b88:	d1f9      	bne.n	8005b7e <memcpy+0xe>
 8005b8a:	bd10      	pop	{r4, pc}

08005b8c <_free_r>:
 8005b8c:	b538      	push	{r3, r4, r5, lr}
 8005b8e:	4605      	mov	r5, r0
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d041      	beq.n	8005c18 <_free_r+0x8c>
 8005b94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b98:	1f0c      	subs	r4, r1, #4
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	bfb8      	it	lt
 8005b9e:	18e4      	addlt	r4, r4, r3
 8005ba0:	f000 f8e0 	bl	8005d64 <__malloc_lock>
 8005ba4:	4a1d      	ldr	r2, [pc, #116]	@ (8005c1c <_free_r+0x90>)
 8005ba6:	6813      	ldr	r3, [r2, #0]
 8005ba8:	b933      	cbnz	r3, 8005bb8 <_free_r+0x2c>
 8005baa:	6063      	str	r3, [r4, #4]
 8005bac:	6014      	str	r4, [r2, #0]
 8005bae:	4628      	mov	r0, r5
 8005bb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005bb4:	f000 b8dc 	b.w	8005d70 <__malloc_unlock>
 8005bb8:	42a3      	cmp	r3, r4
 8005bba:	d908      	bls.n	8005bce <_free_r+0x42>
 8005bbc:	6820      	ldr	r0, [r4, #0]
 8005bbe:	1821      	adds	r1, r4, r0
 8005bc0:	428b      	cmp	r3, r1
 8005bc2:	bf01      	itttt	eq
 8005bc4:	6819      	ldreq	r1, [r3, #0]
 8005bc6:	685b      	ldreq	r3, [r3, #4]
 8005bc8:	1809      	addeq	r1, r1, r0
 8005bca:	6021      	streq	r1, [r4, #0]
 8005bcc:	e7ed      	b.n	8005baa <_free_r+0x1e>
 8005bce:	461a      	mov	r2, r3
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	b10b      	cbz	r3, 8005bd8 <_free_r+0x4c>
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	d9fa      	bls.n	8005bce <_free_r+0x42>
 8005bd8:	6811      	ldr	r1, [r2, #0]
 8005bda:	1850      	adds	r0, r2, r1
 8005bdc:	42a0      	cmp	r0, r4
 8005bde:	d10b      	bne.n	8005bf8 <_free_r+0x6c>
 8005be0:	6820      	ldr	r0, [r4, #0]
 8005be2:	4401      	add	r1, r0
 8005be4:	1850      	adds	r0, r2, r1
 8005be6:	4283      	cmp	r3, r0
 8005be8:	6011      	str	r1, [r2, #0]
 8005bea:	d1e0      	bne.n	8005bae <_free_r+0x22>
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	6053      	str	r3, [r2, #4]
 8005bf2:	4408      	add	r0, r1
 8005bf4:	6010      	str	r0, [r2, #0]
 8005bf6:	e7da      	b.n	8005bae <_free_r+0x22>
 8005bf8:	d902      	bls.n	8005c00 <_free_r+0x74>
 8005bfa:	230c      	movs	r3, #12
 8005bfc:	602b      	str	r3, [r5, #0]
 8005bfe:	e7d6      	b.n	8005bae <_free_r+0x22>
 8005c00:	6820      	ldr	r0, [r4, #0]
 8005c02:	1821      	adds	r1, r4, r0
 8005c04:	428b      	cmp	r3, r1
 8005c06:	bf04      	itt	eq
 8005c08:	6819      	ldreq	r1, [r3, #0]
 8005c0a:	685b      	ldreq	r3, [r3, #4]
 8005c0c:	6063      	str	r3, [r4, #4]
 8005c0e:	bf04      	itt	eq
 8005c10:	1809      	addeq	r1, r1, r0
 8005c12:	6021      	streq	r1, [r4, #0]
 8005c14:	6054      	str	r4, [r2, #4]
 8005c16:	e7ca      	b.n	8005bae <_free_r+0x22>
 8005c18:	bd38      	pop	{r3, r4, r5, pc}
 8005c1a:	bf00      	nop
 8005c1c:	2001ac10 	.word	0x2001ac10

08005c20 <sbrk_aligned>:
 8005c20:	b570      	push	{r4, r5, r6, lr}
 8005c22:	4e0f      	ldr	r6, [pc, #60]	@ (8005c60 <sbrk_aligned+0x40>)
 8005c24:	460c      	mov	r4, r1
 8005c26:	6831      	ldr	r1, [r6, #0]
 8005c28:	4605      	mov	r5, r0
 8005c2a:	b911      	cbnz	r1, 8005c32 <sbrk_aligned+0x12>
 8005c2c:	f000 fba6 	bl	800637c <_sbrk_r>
 8005c30:	6030      	str	r0, [r6, #0]
 8005c32:	4621      	mov	r1, r4
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fba1 	bl	800637c <_sbrk_r>
 8005c3a:	1c43      	adds	r3, r0, #1
 8005c3c:	d103      	bne.n	8005c46 <sbrk_aligned+0x26>
 8005c3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005c42:	4620      	mov	r0, r4
 8005c44:	bd70      	pop	{r4, r5, r6, pc}
 8005c46:	1cc4      	adds	r4, r0, #3
 8005c48:	f024 0403 	bic.w	r4, r4, #3
 8005c4c:	42a0      	cmp	r0, r4
 8005c4e:	d0f8      	beq.n	8005c42 <sbrk_aligned+0x22>
 8005c50:	1a21      	subs	r1, r4, r0
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fb92 	bl	800637c <_sbrk_r>
 8005c58:	3001      	adds	r0, #1
 8005c5a:	d1f2      	bne.n	8005c42 <sbrk_aligned+0x22>
 8005c5c:	e7ef      	b.n	8005c3e <sbrk_aligned+0x1e>
 8005c5e:	bf00      	nop
 8005c60:	2001ac0c 	.word	0x2001ac0c

08005c64 <_malloc_r>:
 8005c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c68:	1ccd      	adds	r5, r1, #3
 8005c6a:	f025 0503 	bic.w	r5, r5, #3
 8005c6e:	3508      	adds	r5, #8
 8005c70:	2d0c      	cmp	r5, #12
 8005c72:	bf38      	it	cc
 8005c74:	250c      	movcc	r5, #12
 8005c76:	2d00      	cmp	r5, #0
 8005c78:	4606      	mov	r6, r0
 8005c7a:	db01      	blt.n	8005c80 <_malloc_r+0x1c>
 8005c7c:	42a9      	cmp	r1, r5
 8005c7e:	d904      	bls.n	8005c8a <_malloc_r+0x26>
 8005c80:	230c      	movs	r3, #12
 8005c82:	6033      	str	r3, [r6, #0]
 8005c84:	2000      	movs	r0, #0
 8005c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005d60 <_malloc_r+0xfc>
 8005c8e:	f000 f869 	bl	8005d64 <__malloc_lock>
 8005c92:	f8d8 3000 	ldr.w	r3, [r8]
 8005c96:	461c      	mov	r4, r3
 8005c98:	bb44      	cbnz	r4, 8005cec <_malloc_r+0x88>
 8005c9a:	4629      	mov	r1, r5
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7ff ffbf 	bl	8005c20 <sbrk_aligned>
 8005ca2:	1c43      	adds	r3, r0, #1
 8005ca4:	4604      	mov	r4, r0
 8005ca6:	d158      	bne.n	8005d5a <_malloc_r+0xf6>
 8005ca8:	f8d8 4000 	ldr.w	r4, [r8]
 8005cac:	4627      	mov	r7, r4
 8005cae:	2f00      	cmp	r7, #0
 8005cb0:	d143      	bne.n	8005d3a <_malloc_r+0xd6>
 8005cb2:	2c00      	cmp	r4, #0
 8005cb4:	d04b      	beq.n	8005d4e <_malloc_r+0xea>
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	4639      	mov	r1, r7
 8005cba:	4630      	mov	r0, r6
 8005cbc:	eb04 0903 	add.w	r9, r4, r3
 8005cc0:	f000 fb5c 	bl	800637c <_sbrk_r>
 8005cc4:	4581      	cmp	r9, r0
 8005cc6:	d142      	bne.n	8005d4e <_malloc_r+0xea>
 8005cc8:	6821      	ldr	r1, [r4, #0]
 8005cca:	1a6d      	subs	r5, r5, r1
 8005ccc:	4629      	mov	r1, r5
 8005cce:	4630      	mov	r0, r6
 8005cd0:	f7ff ffa6 	bl	8005c20 <sbrk_aligned>
 8005cd4:	3001      	adds	r0, #1
 8005cd6:	d03a      	beq.n	8005d4e <_malloc_r+0xea>
 8005cd8:	6823      	ldr	r3, [r4, #0]
 8005cda:	442b      	add	r3, r5
 8005cdc:	6023      	str	r3, [r4, #0]
 8005cde:	f8d8 3000 	ldr.w	r3, [r8]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	bb62      	cbnz	r2, 8005d40 <_malloc_r+0xdc>
 8005ce6:	f8c8 7000 	str.w	r7, [r8]
 8005cea:	e00f      	b.n	8005d0c <_malloc_r+0xa8>
 8005cec:	6822      	ldr	r2, [r4, #0]
 8005cee:	1b52      	subs	r2, r2, r5
 8005cf0:	d420      	bmi.n	8005d34 <_malloc_r+0xd0>
 8005cf2:	2a0b      	cmp	r2, #11
 8005cf4:	d917      	bls.n	8005d26 <_malloc_r+0xc2>
 8005cf6:	1961      	adds	r1, r4, r5
 8005cf8:	42a3      	cmp	r3, r4
 8005cfa:	6025      	str	r5, [r4, #0]
 8005cfc:	bf18      	it	ne
 8005cfe:	6059      	strne	r1, [r3, #4]
 8005d00:	6863      	ldr	r3, [r4, #4]
 8005d02:	bf08      	it	eq
 8005d04:	f8c8 1000 	streq.w	r1, [r8]
 8005d08:	5162      	str	r2, [r4, r5]
 8005d0a:	604b      	str	r3, [r1, #4]
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f000 f82f 	bl	8005d70 <__malloc_unlock>
 8005d12:	f104 000b 	add.w	r0, r4, #11
 8005d16:	1d23      	adds	r3, r4, #4
 8005d18:	f020 0007 	bic.w	r0, r0, #7
 8005d1c:	1ac2      	subs	r2, r0, r3
 8005d1e:	bf1c      	itt	ne
 8005d20:	1a1b      	subne	r3, r3, r0
 8005d22:	50a3      	strne	r3, [r4, r2]
 8005d24:	e7af      	b.n	8005c86 <_malloc_r+0x22>
 8005d26:	6862      	ldr	r2, [r4, #4]
 8005d28:	42a3      	cmp	r3, r4
 8005d2a:	bf0c      	ite	eq
 8005d2c:	f8c8 2000 	streq.w	r2, [r8]
 8005d30:	605a      	strne	r2, [r3, #4]
 8005d32:	e7eb      	b.n	8005d0c <_malloc_r+0xa8>
 8005d34:	4623      	mov	r3, r4
 8005d36:	6864      	ldr	r4, [r4, #4]
 8005d38:	e7ae      	b.n	8005c98 <_malloc_r+0x34>
 8005d3a:	463c      	mov	r4, r7
 8005d3c:	687f      	ldr	r7, [r7, #4]
 8005d3e:	e7b6      	b.n	8005cae <_malloc_r+0x4a>
 8005d40:	461a      	mov	r2, r3
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	42a3      	cmp	r3, r4
 8005d46:	d1fb      	bne.n	8005d40 <_malloc_r+0xdc>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	6053      	str	r3, [r2, #4]
 8005d4c:	e7de      	b.n	8005d0c <_malloc_r+0xa8>
 8005d4e:	230c      	movs	r3, #12
 8005d50:	6033      	str	r3, [r6, #0]
 8005d52:	4630      	mov	r0, r6
 8005d54:	f000 f80c 	bl	8005d70 <__malloc_unlock>
 8005d58:	e794      	b.n	8005c84 <_malloc_r+0x20>
 8005d5a:	6005      	str	r5, [r0, #0]
 8005d5c:	e7d6      	b.n	8005d0c <_malloc_r+0xa8>
 8005d5e:	bf00      	nop
 8005d60:	2001ac10 	.word	0x2001ac10

08005d64 <__malloc_lock>:
 8005d64:	4801      	ldr	r0, [pc, #4]	@ (8005d6c <__malloc_lock+0x8>)
 8005d66:	f7ff bf01 	b.w	8005b6c <__retarget_lock_acquire_recursive>
 8005d6a:	bf00      	nop
 8005d6c:	2001ac08 	.word	0x2001ac08

08005d70 <__malloc_unlock>:
 8005d70:	4801      	ldr	r0, [pc, #4]	@ (8005d78 <__malloc_unlock+0x8>)
 8005d72:	f7ff befc 	b.w	8005b6e <__retarget_lock_release_recursive>
 8005d76:	bf00      	nop
 8005d78:	2001ac08 	.word	0x2001ac08

08005d7c <__ssputs_r>:
 8005d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d80:	688e      	ldr	r6, [r1, #8]
 8005d82:	461f      	mov	r7, r3
 8005d84:	42be      	cmp	r6, r7
 8005d86:	680b      	ldr	r3, [r1, #0]
 8005d88:	4682      	mov	sl, r0
 8005d8a:	460c      	mov	r4, r1
 8005d8c:	4690      	mov	r8, r2
 8005d8e:	d82d      	bhi.n	8005dec <__ssputs_r+0x70>
 8005d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005d98:	d026      	beq.n	8005de8 <__ssputs_r+0x6c>
 8005d9a:	6965      	ldr	r5, [r4, #20]
 8005d9c:	6909      	ldr	r1, [r1, #16]
 8005d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005da2:	eba3 0901 	sub.w	r9, r3, r1
 8005da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005daa:	1c7b      	adds	r3, r7, #1
 8005dac:	444b      	add	r3, r9
 8005dae:	106d      	asrs	r5, r5, #1
 8005db0:	429d      	cmp	r5, r3
 8005db2:	bf38      	it	cc
 8005db4:	461d      	movcc	r5, r3
 8005db6:	0553      	lsls	r3, r2, #21
 8005db8:	d527      	bpl.n	8005e0a <__ssputs_r+0x8e>
 8005dba:	4629      	mov	r1, r5
 8005dbc:	f7ff ff52 	bl	8005c64 <_malloc_r>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	b360      	cbz	r0, 8005e1e <__ssputs_r+0xa2>
 8005dc4:	6921      	ldr	r1, [r4, #16]
 8005dc6:	464a      	mov	r2, r9
 8005dc8:	f7ff fed2 	bl	8005b70 <memcpy>
 8005dcc:	89a3      	ldrh	r3, [r4, #12]
 8005dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005dd6:	81a3      	strh	r3, [r4, #12]
 8005dd8:	6126      	str	r6, [r4, #16]
 8005dda:	6165      	str	r5, [r4, #20]
 8005ddc:	444e      	add	r6, r9
 8005dde:	eba5 0509 	sub.w	r5, r5, r9
 8005de2:	6026      	str	r6, [r4, #0]
 8005de4:	60a5      	str	r5, [r4, #8]
 8005de6:	463e      	mov	r6, r7
 8005de8:	42be      	cmp	r6, r7
 8005dea:	d900      	bls.n	8005dee <__ssputs_r+0x72>
 8005dec:	463e      	mov	r6, r7
 8005dee:	6820      	ldr	r0, [r4, #0]
 8005df0:	4632      	mov	r2, r6
 8005df2:	4641      	mov	r1, r8
 8005df4:	f000 faa8 	bl	8006348 <memmove>
 8005df8:	68a3      	ldr	r3, [r4, #8]
 8005dfa:	1b9b      	subs	r3, r3, r6
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	4433      	add	r3, r6
 8005e02:	6023      	str	r3, [r4, #0]
 8005e04:	2000      	movs	r0, #0
 8005e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0a:	462a      	mov	r2, r5
 8005e0c:	f000 fac6 	bl	800639c <_realloc_r>
 8005e10:	4606      	mov	r6, r0
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1e0      	bne.n	8005dd8 <__ssputs_r+0x5c>
 8005e16:	6921      	ldr	r1, [r4, #16]
 8005e18:	4650      	mov	r0, sl
 8005e1a:	f7ff feb7 	bl	8005b8c <_free_r>
 8005e1e:	230c      	movs	r3, #12
 8005e20:	f8ca 3000 	str.w	r3, [sl]
 8005e24:	89a3      	ldrh	r3, [r4, #12]
 8005e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e2a:	81a3      	strh	r3, [r4, #12]
 8005e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e30:	e7e9      	b.n	8005e06 <__ssputs_r+0x8a>
	...

08005e34 <_svfiprintf_r>:
 8005e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e38:	4698      	mov	r8, r3
 8005e3a:	898b      	ldrh	r3, [r1, #12]
 8005e3c:	061b      	lsls	r3, r3, #24
 8005e3e:	b09d      	sub	sp, #116	@ 0x74
 8005e40:	4607      	mov	r7, r0
 8005e42:	460d      	mov	r5, r1
 8005e44:	4614      	mov	r4, r2
 8005e46:	d510      	bpl.n	8005e6a <_svfiprintf_r+0x36>
 8005e48:	690b      	ldr	r3, [r1, #16]
 8005e4a:	b973      	cbnz	r3, 8005e6a <_svfiprintf_r+0x36>
 8005e4c:	2140      	movs	r1, #64	@ 0x40
 8005e4e:	f7ff ff09 	bl	8005c64 <_malloc_r>
 8005e52:	6028      	str	r0, [r5, #0]
 8005e54:	6128      	str	r0, [r5, #16]
 8005e56:	b930      	cbnz	r0, 8005e66 <_svfiprintf_r+0x32>
 8005e58:	230c      	movs	r3, #12
 8005e5a:	603b      	str	r3, [r7, #0]
 8005e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e60:	b01d      	add	sp, #116	@ 0x74
 8005e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e66:	2340      	movs	r3, #64	@ 0x40
 8005e68:	616b      	str	r3, [r5, #20]
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e6e:	2320      	movs	r3, #32
 8005e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005e78:	2330      	movs	r3, #48	@ 0x30
 8005e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006018 <_svfiprintf_r+0x1e4>
 8005e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005e82:	f04f 0901 	mov.w	r9, #1
 8005e86:	4623      	mov	r3, r4
 8005e88:	469a      	mov	sl, r3
 8005e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e8e:	b10a      	cbz	r2, 8005e94 <_svfiprintf_r+0x60>
 8005e90:	2a25      	cmp	r2, #37	@ 0x25
 8005e92:	d1f9      	bne.n	8005e88 <_svfiprintf_r+0x54>
 8005e94:	ebba 0b04 	subs.w	fp, sl, r4
 8005e98:	d00b      	beq.n	8005eb2 <_svfiprintf_r+0x7e>
 8005e9a:	465b      	mov	r3, fp
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	4638      	mov	r0, r7
 8005ea2:	f7ff ff6b 	bl	8005d7c <__ssputs_r>
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	f000 80a7 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005eae:	445a      	add	r2, fp
 8005eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	f000 809f 	beq.w	8005ffa <_svfiprintf_r+0x1c6>
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8005ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ec6:	f10a 0a01 	add.w	sl, sl, #1
 8005eca:	9304      	str	r3, [sp, #16]
 8005ecc:	9307      	str	r3, [sp, #28]
 8005ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ed4:	4654      	mov	r4, sl
 8005ed6:	2205      	movs	r2, #5
 8005ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005edc:	484e      	ldr	r0, [pc, #312]	@ (8006018 <_svfiprintf_r+0x1e4>)
 8005ede:	f7fa f9cf 	bl	8000280 <memchr>
 8005ee2:	9a04      	ldr	r2, [sp, #16]
 8005ee4:	b9d8      	cbnz	r0, 8005f1e <_svfiprintf_r+0xea>
 8005ee6:	06d0      	lsls	r0, r2, #27
 8005ee8:	bf44      	itt	mi
 8005eea:	2320      	movmi	r3, #32
 8005eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ef0:	0711      	lsls	r1, r2, #28
 8005ef2:	bf44      	itt	mi
 8005ef4:	232b      	movmi	r3, #43	@ 0x2b
 8005ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005efa:	f89a 3000 	ldrb.w	r3, [sl]
 8005efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f00:	d015      	beq.n	8005f2e <_svfiprintf_r+0xfa>
 8005f02:	9a07      	ldr	r2, [sp, #28]
 8005f04:	4654      	mov	r4, sl
 8005f06:	2000      	movs	r0, #0
 8005f08:	f04f 0c0a 	mov.w	ip, #10
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f12:	3b30      	subs	r3, #48	@ 0x30
 8005f14:	2b09      	cmp	r3, #9
 8005f16:	d94b      	bls.n	8005fb0 <_svfiprintf_r+0x17c>
 8005f18:	b1b0      	cbz	r0, 8005f48 <_svfiprintf_r+0x114>
 8005f1a:	9207      	str	r2, [sp, #28]
 8005f1c:	e014      	b.n	8005f48 <_svfiprintf_r+0x114>
 8005f1e:	eba0 0308 	sub.w	r3, r0, r8
 8005f22:	fa09 f303 	lsl.w	r3, r9, r3
 8005f26:	4313      	orrs	r3, r2
 8005f28:	9304      	str	r3, [sp, #16]
 8005f2a:	46a2      	mov	sl, r4
 8005f2c:	e7d2      	b.n	8005ed4 <_svfiprintf_r+0xa0>
 8005f2e:	9b03      	ldr	r3, [sp, #12]
 8005f30:	1d19      	adds	r1, r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	9103      	str	r1, [sp, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	bfbb      	ittet	lt
 8005f3a:	425b      	neglt	r3, r3
 8005f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8005f40:	9307      	strge	r3, [sp, #28]
 8005f42:	9307      	strlt	r3, [sp, #28]
 8005f44:	bfb8      	it	lt
 8005f46:	9204      	strlt	r2, [sp, #16]
 8005f48:	7823      	ldrb	r3, [r4, #0]
 8005f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f4c:	d10a      	bne.n	8005f64 <_svfiprintf_r+0x130>
 8005f4e:	7863      	ldrb	r3, [r4, #1]
 8005f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f52:	d132      	bne.n	8005fba <_svfiprintf_r+0x186>
 8005f54:	9b03      	ldr	r3, [sp, #12]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	9203      	str	r2, [sp, #12]
 8005f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005f60:	3402      	adds	r4, #2
 8005f62:	9305      	str	r3, [sp, #20]
 8005f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006028 <_svfiprintf_r+0x1f4>
 8005f68:	7821      	ldrb	r1, [r4, #0]
 8005f6a:	2203      	movs	r2, #3
 8005f6c:	4650      	mov	r0, sl
 8005f6e:	f7fa f987 	bl	8000280 <memchr>
 8005f72:	b138      	cbz	r0, 8005f84 <_svfiprintf_r+0x150>
 8005f74:	9b04      	ldr	r3, [sp, #16]
 8005f76:	eba0 000a 	sub.w	r0, r0, sl
 8005f7a:	2240      	movs	r2, #64	@ 0x40
 8005f7c:	4082      	lsls	r2, r0
 8005f7e:	4313      	orrs	r3, r2
 8005f80:	3401      	adds	r4, #1
 8005f82:	9304      	str	r3, [sp, #16]
 8005f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f88:	4824      	ldr	r0, [pc, #144]	@ (800601c <_svfiprintf_r+0x1e8>)
 8005f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005f8e:	2206      	movs	r2, #6
 8005f90:	f7fa f976 	bl	8000280 <memchr>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d036      	beq.n	8006006 <_svfiprintf_r+0x1d2>
 8005f98:	4b21      	ldr	r3, [pc, #132]	@ (8006020 <_svfiprintf_r+0x1ec>)
 8005f9a:	bb1b      	cbnz	r3, 8005fe4 <_svfiprintf_r+0x1b0>
 8005f9c:	9b03      	ldr	r3, [sp, #12]
 8005f9e:	3307      	adds	r3, #7
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	9303      	str	r3, [sp, #12]
 8005fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005faa:	4433      	add	r3, r6
 8005fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fae:	e76a      	b.n	8005e86 <_svfiprintf_r+0x52>
 8005fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005fb4:	460c      	mov	r4, r1
 8005fb6:	2001      	movs	r0, #1
 8005fb8:	e7a8      	b.n	8005f0c <_svfiprintf_r+0xd8>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	3401      	adds	r4, #1
 8005fbe:	9305      	str	r3, [sp, #20]
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	f04f 0c0a 	mov.w	ip, #10
 8005fc6:	4620      	mov	r0, r4
 8005fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005fcc:	3a30      	subs	r2, #48	@ 0x30
 8005fce:	2a09      	cmp	r2, #9
 8005fd0:	d903      	bls.n	8005fda <_svfiprintf_r+0x1a6>
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d0c6      	beq.n	8005f64 <_svfiprintf_r+0x130>
 8005fd6:	9105      	str	r1, [sp, #20]
 8005fd8:	e7c4      	b.n	8005f64 <_svfiprintf_r+0x130>
 8005fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8005fde:	4604      	mov	r4, r0
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	e7f0      	b.n	8005fc6 <_svfiprintf_r+0x192>
 8005fe4:	ab03      	add	r3, sp, #12
 8005fe6:	9300      	str	r3, [sp, #0]
 8005fe8:	462a      	mov	r2, r5
 8005fea:	4b0e      	ldr	r3, [pc, #56]	@ (8006024 <_svfiprintf_r+0x1f0>)
 8005fec:	a904      	add	r1, sp, #16
 8005fee:	4638      	mov	r0, r7
 8005ff0:	f3af 8000 	nop.w
 8005ff4:	1c42      	adds	r2, r0, #1
 8005ff6:	4606      	mov	r6, r0
 8005ff8:	d1d6      	bne.n	8005fa8 <_svfiprintf_r+0x174>
 8005ffa:	89ab      	ldrh	r3, [r5, #12]
 8005ffc:	065b      	lsls	r3, r3, #25
 8005ffe:	f53f af2d 	bmi.w	8005e5c <_svfiprintf_r+0x28>
 8006002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006004:	e72c      	b.n	8005e60 <_svfiprintf_r+0x2c>
 8006006:	ab03      	add	r3, sp, #12
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	462a      	mov	r2, r5
 800600c:	4b05      	ldr	r3, [pc, #20]	@ (8006024 <_svfiprintf_r+0x1f0>)
 800600e:	a904      	add	r1, sp, #16
 8006010:	4638      	mov	r0, r7
 8006012:	f000 f879 	bl	8006108 <_printf_i>
 8006016:	e7ed      	b.n	8005ff4 <_svfiprintf_r+0x1c0>
 8006018:	08006598 	.word	0x08006598
 800601c:	080065a2 	.word	0x080065a2
 8006020:	00000000 	.word	0x00000000
 8006024:	08005d7d 	.word	0x08005d7d
 8006028:	0800659e 	.word	0x0800659e

0800602c <_printf_common>:
 800602c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006030:	4616      	mov	r6, r2
 8006032:	4698      	mov	r8, r3
 8006034:	688a      	ldr	r2, [r1, #8]
 8006036:	690b      	ldr	r3, [r1, #16]
 8006038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800603c:	4293      	cmp	r3, r2
 800603e:	bfb8      	it	lt
 8006040:	4613      	movlt	r3, r2
 8006042:	6033      	str	r3, [r6, #0]
 8006044:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006048:	4607      	mov	r7, r0
 800604a:	460c      	mov	r4, r1
 800604c:	b10a      	cbz	r2, 8006052 <_printf_common+0x26>
 800604e:	3301      	adds	r3, #1
 8006050:	6033      	str	r3, [r6, #0]
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	0699      	lsls	r1, r3, #26
 8006056:	bf42      	ittt	mi
 8006058:	6833      	ldrmi	r3, [r6, #0]
 800605a:	3302      	addmi	r3, #2
 800605c:	6033      	strmi	r3, [r6, #0]
 800605e:	6825      	ldr	r5, [r4, #0]
 8006060:	f015 0506 	ands.w	r5, r5, #6
 8006064:	d106      	bne.n	8006074 <_printf_common+0x48>
 8006066:	f104 0a19 	add.w	sl, r4, #25
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	6832      	ldr	r2, [r6, #0]
 800606e:	1a9b      	subs	r3, r3, r2
 8006070:	42ab      	cmp	r3, r5
 8006072:	dc26      	bgt.n	80060c2 <_printf_common+0x96>
 8006074:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	3b00      	subs	r3, #0
 800607c:	bf18      	it	ne
 800607e:	2301      	movne	r3, #1
 8006080:	0692      	lsls	r2, r2, #26
 8006082:	d42b      	bmi.n	80060dc <_printf_common+0xb0>
 8006084:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006088:	4641      	mov	r1, r8
 800608a:	4638      	mov	r0, r7
 800608c:	47c8      	blx	r9
 800608e:	3001      	adds	r0, #1
 8006090:	d01e      	beq.n	80060d0 <_printf_common+0xa4>
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	6922      	ldr	r2, [r4, #16]
 8006096:	f003 0306 	and.w	r3, r3, #6
 800609a:	2b04      	cmp	r3, #4
 800609c:	bf02      	ittt	eq
 800609e:	68e5      	ldreq	r5, [r4, #12]
 80060a0:	6833      	ldreq	r3, [r6, #0]
 80060a2:	1aed      	subeq	r5, r5, r3
 80060a4:	68a3      	ldr	r3, [r4, #8]
 80060a6:	bf0c      	ite	eq
 80060a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060ac:	2500      	movne	r5, #0
 80060ae:	4293      	cmp	r3, r2
 80060b0:	bfc4      	itt	gt
 80060b2:	1a9b      	subgt	r3, r3, r2
 80060b4:	18ed      	addgt	r5, r5, r3
 80060b6:	2600      	movs	r6, #0
 80060b8:	341a      	adds	r4, #26
 80060ba:	42b5      	cmp	r5, r6
 80060bc:	d11a      	bne.n	80060f4 <_printf_common+0xc8>
 80060be:	2000      	movs	r0, #0
 80060c0:	e008      	b.n	80060d4 <_printf_common+0xa8>
 80060c2:	2301      	movs	r3, #1
 80060c4:	4652      	mov	r2, sl
 80060c6:	4641      	mov	r1, r8
 80060c8:	4638      	mov	r0, r7
 80060ca:	47c8      	blx	r9
 80060cc:	3001      	adds	r0, #1
 80060ce:	d103      	bne.n	80060d8 <_printf_common+0xac>
 80060d0:	f04f 30ff 	mov.w	r0, #4294967295
 80060d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060d8:	3501      	adds	r5, #1
 80060da:	e7c6      	b.n	800606a <_printf_common+0x3e>
 80060dc:	18e1      	adds	r1, r4, r3
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	2030      	movs	r0, #48	@ 0x30
 80060e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060e6:	4422      	add	r2, r4
 80060e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060f0:	3302      	adds	r3, #2
 80060f2:	e7c7      	b.n	8006084 <_printf_common+0x58>
 80060f4:	2301      	movs	r3, #1
 80060f6:	4622      	mov	r2, r4
 80060f8:	4641      	mov	r1, r8
 80060fa:	4638      	mov	r0, r7
 80060fc:	47c8      	blx	r9
 80060fe:	3001      	adds	r0, #1
 8006100:	d0e6      	beq.n	80060d0 <_printf_common+0xa4>
 8006102:	3601      	adds	r6, #1
 8006104:	e7d9      	b.n	80060ba <_printf_common+0x8e>
	...

08006108 <_printf_i>:
 8006108:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800610c:	7e0f      	ldrb	r7, [r1, #24]
 800610e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006110:	2f78      	cmp	r7, #120	@ 0x78
 8006112:	4691      	mov	r9, r2
 8006114:	4680      	mov	r8, r0
 8006116:	460c      	mov	r4, r1
 8006118:	469a      	mov	sl, r3
 800611a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800611e:	d807      	bhi.n	8006130 <_printf_i+0x28>
 8006120:	2f62      	cmp	r7, #98	@ 0x62
 8006122:	d80a      	bhi.n	800613a <_printf_i+0x32>
 8006124:	2f00      	cmp	r7, #0
 8006126:	f000 80d2 	beq.w	80062ce <_printf_i+0x1c6>
 800612a:	2f58      	cmp	r7, #88	@ 0x58
 800612c:	f000 80b9 	beq.w	80062a2 <_printf_i+0x19a>
 8006130:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006134:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006138:	e03a      	b.n	80061b0 <_printf_i+0xa8>
 800613a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800613e:	2b15      	cmp	r3, #21
 8006140:	d8f6      	bhi.n	8006130 <_printf_i+0x28>
 8006142:	a101      	add	r1, pc, #4	@ (adr r1, 8006148 <_printf_i+0x40>)
 8006144:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006148:	080061a1 	.word	0x080061a1
 800614c:	080061b5 	.word	0x080061b5
 8006150:	08006131 	.word	0x08006131
 8006154:	08006131 	.word	0x08006131
 8006158:	08006131 	.word	0x08006131
 800615c:	08006131 	.word	0x08006131
 8006160:	080061b5 	.word	0x080061b5
 8006164:	08006131 	.word	0x08006131
 8006168:	08006131 	.word	0x08006131
 800616c:	08006131 	.word	0x08006131
 8006170:	08006131 	.word	0x08006131
 8006174:	080062b5 	.word	0x080062b5
 8006178:	080061df 	.word	0x080061df
 800617c:	0800626f 	.word	0x0800626f
 8006180:	08006131 	.word	0x08006131
 8006184:	08006131 	.word	0x08006131
 8006188:	080062d7 	.word	0x080062d7
 800618c:	08006131 	.word	0x08006131
 8006190:	080061df 	.word	0x080061df
 8006194:	08006131 	.word	0x08006131
 8006198:	08006131 	.word	0x08006131
 800619c:	08006277 	.word	0x08006277
 80061a0:	6833      	ldr	r3, [r6, #0]
 80061a2:	1d1a      	adds	r2, r3, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6032      	str	r2, [r6, #0]
 80061a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80061b0:	2301      	movs	r3, #1
 80061b2:	e09d      	b.n	80062f0 <_printf_i+0x1e8>
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	6820      	ldr	r0, [r4, #0]
 80061b8:	1d19      	adds	r1, r3, #4
 80061ba:	6031      	str	r1, [r6, #0]
 80061bc:	0606      	lsls	r6, r0, #24
 80061be:	d501      	bpl.n	80061c4 <_printf_i+0xbc>
 80061c0:	681d      	ldr	r5, [r3, #0]
 80061c2:	e003      	b.n	80061cc <_printf_i+0xc4>
 80061c4:	0645      	lsls	r5, r0, #25
 80061c6:	d5fb      	bpl.n	80061c0 <_printf_i+0xb8>
 80061c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061cc:	2d00      	cmp	r5, #0
 80061ce:	da03      	bge.n	80061d8 <_printf_i+0xd0>
 80061d0:	232d      	movs	r3, #45	@ 0x2d
 80061d2:	426d      	negs	r5, r5
 80061d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061d8:	4859      	ldr	r0, [pc, #356]	@ (8006340 <_printf_i+0x238>)
 80061da:	230a      	movs	r3, #10
 80061dc:	e011      	b.n	8006202 <_printf_i+0xfa>
 80061de:	6821      	ldr	r1, [r4, #0]
 80061e0:	6833      	ldr	r3, [r6, #0]
 80061e2:	0608      	lsls	r0, r1, #24
 80061e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80061e8:	d402      	bmi.n	80061f0 <_printf_i+0xe8>
 80061ea:	0649      	lsls	r1, r1, #25
 80061ec:	bf48      	it	mi
 80061ee:	b2ad      	uxthmi	r5, r5
 80061f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80061f2:	4853      	ldr	r0, [pc, #332]	@ (8006340 <_printf_i+0x238>)
 80061f4:	6033      	str	r3, [r6, #0]
 80061f6:	bf14      	ite	ne
 80061f8:	230a      	movne	r3, #10
 80061fa:	2308      	moveq	r3, #8
 80061fc:	2100      	movs	r1, #0
 80061fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006202:	6866      	ldr	r6, [r4, #4]
 8006204:	60a6      	str	r6, [r4, #8]
 8006206:	2e00      	cmp	r6, #0
 8006208:	bfa2      	ittt	ge
 800620a:	6821      	ldrge	r1, [r4, #0]
 800620c:	f021 0104 	bicge.w	r1, r1, #4
 8006210:	6021      	strge	r1, [r4, #0]
 8006212:	b90d      	cbnz	r5, 8006218 <_printf_i+0x110>
 8006214:	2e00      	cmp	r6, #0
 8006216:	d04b      	beq.n	80062b0 <_printf_i+0x1a8>
 8006218:	4616      	mov	r6, r2
 800621a:	fbb5 f1f3 	udiv	r1, r5, r3
 800621e:	fb03 5711 	mls	r7, r3, r1, r5
 8006222:	5dc7      	ldrb	r7, [r0, r7]
 8006224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006228:	462f      	mov	r7, r5
 800622a:	42bb      	cmp	r3, r7
 800622c:	460d      	mov	r5, r1
 800622e:	d9f4      	bls.n	800621a <_printf_i+0x112>
 8006230:	2b08      	cmp	r3, #8
 8006232:	d10b      	bne.n	800624c <_printf_i+0x144>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07df      	lsls	r7, r3, #31
 8006238:	d508      	bpl.n	800624c <_printf_i+0x144>
 800623a:	6923      	ldr	r3, [r4, #16]
 800623c:	6861      	ldr	r1, [r4, #4]
 800623e:	4299      	cmp	r1, r3
 8006240:	bfde      	ittt	le
 8006242:	2330      	movle	r3, #48	@ 0x30
 8006244:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006248:	f106 36ff 	addle.w	r6, r6, #4294967295
 800624c:	1b92      	subs	r2, r2, r6
 800624e:	6122      	str	r2, [r4, #16]
 8006250:	f8cd a000 	str.w	sl, [sp]
 8006254:	464b      	mov	r3, r9
 8006256:	aa03      	add	r2, sp, #12
 8006258:	4621      	mov	r1, r4
 800625a:	4640      	mov	r0, r8
 800625c:	f7ff fee6 	bl	800602c <_printf_common>
 8006260:	3001      	adds	r0, #1
 8006262:	d14a      	bne.n	80062fa <_printf_i+0x1f2>
 8006264:	f04f 30ff 	mov.w	r0, #4294967295
 8006268:	b004      	add	sp, #16
 800626a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	f043 0320 	orr.w	r3, r3, #32
 8006274:	6023      	str	r3, [r4, #0]
 8006276:	4833      	ldr	r0, [pc, #204]	@ (8006344 <_printf_i+0x23c>)
 8006278:	2778      	movs	r7, #120	@ 0x78
 800627a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	6831      	ldr	r1, [r6, #0]
 8006282:	061f      	lsls	r7, r3, #24
 8006284:	f851 5b04 	ldr.w	r5, [r1], #4
 8006288:	d402      	bmi.n	8006290 <_printf_i+0x188>
 800628a:	065f      	lsls	r7, r3, #25
 800628c:	bf48      	it	mi
 800628e:	b2ad      	uxthmi	r5, r5
 8006290:	6031      	str	r1, [r6, #0]
 8006292:	07d9      	lsls	r1, r3, #31
 8006294:	bf44      	itt	mi
 8006296:	f043 0320 	orrmi.w	r3, r3, #32
 800629a:	6023      	strmi	r3, [r4, #0]
 800629c:	b11d      	cbz	r5, 80062a6 <_printf_i+0x19e>
 800629e:	2310      	movs	r3, #16
 80062a0:	e7ac      	b.n	80061fc <_printf_i+0xf4>
 80062a2:	4827      	ldr	r0, [pc, #156]	@ (8006340 <_printf_i+0x238>)
 80062a4:	e7e9      	b.n	800627a <_printf_i+0x172>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	f023 0320 	bic.w	r3, r3, #32
 80062ac:	6023      	str	r3, [r4, #0]
 80062ae:	e7f6      	b.n	800629e <_printf_i+0x196>
 80062b0:	4616      	mov	r6, r2
 80062b2:	e7bd      	b.n	8006230 <_printf_i+0x128>
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	6825      	ldr	r5, [r4, #0]
 80062b8:	6961      	ldr	r1, [r4, #20]
 80062ba:	1d18      	adds	r0, r3, #4
 80062bc:	6030      	str	r0, [r6, #0]
 80062be:	062e      	lsls	r6, r5, #24
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	d501      	bpl.n	80062c8 <_printf_i+0x1c0>
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	e002      	b.n	80062ce <_printf_i+0x1c6>
 80062c8:	0668      	lsls	r0, r5, #25
 80062ca:	d5fb      	bpl.n	80062c4 <_printf_i+0x1bc>
 80062cc:	8019      	strh	r1, [r3, #0]
 80062ce:	2300      	movs	r3, #0
 80062d0:	6123      	str	r3, [r4, #16]
 80062d2:	4616      	mov	r6, r2
 80062d4:	e7bc      	b.n	8006250 <_printf_i+0x148>
 80062d6:	6833      	ldr	r3, [r6, #0]
 80062d8:	1d1a      	adds	r2, r3, #4
 80062da:	6032      	str	r2, [r6, #0]
 80062dc:	681e      	ldr	r6, [r3, #0]
 80062de:	6862      	ldr	r2, [r4, #4]
 80062e0:	2100      	movs	r1, #0
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7f9 ffcc 	bl	8000280 <memchr>
 80062e8:	b108      	cbz	r0, 80062ee <_printf_i+0x1e6>
 80062ea:	1b80      	subs	r0, r0, r6
 80062ec:	6060      	str	r0, [r4, #4]
 80062ee:	6863      	ldr	r3, [r4, #4]
 80062f0:	6123      	str	r3, [r4, #16]
 80062f2:	2300      	movs	r3, #0
 80062f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f8:	e7aa      	b.n	8006250 <_printf_i+0x148>
 80062fa:	6923      	ldr	r3, [r4, #16]
 80062fc:	4632      	mov	r2, r6
 80062fe:	4649      	mov	r1, r9
 8006300:	4640      	mov	r0, r8
 8006302:	47d0      	blx	sl
 8006304:	3001      	adds	r0, #1
 8006306:	d0ad      	beq.n	8006264 <_printf_i+0x15c>
 8006308:	6823      	ldr	r3, [r4, #0]
 800630a:	079b      	lsls	r3, r3, #30
 800630c:	d413      	bmi.n	8006336 <_printf_i+0x22e>
 800630e:	68e0      	ldr	r0, [r4, #12]
 8006310:	9b03      	ldr	r3, [sp, #12]
 8006312:	4298      	cmp	r0, r3
 8006314:	bfb8      	it	lt
 8006316:	4618      	movlt	r0, r3
 8006318:	e7a6      	b.n	8006268 <_printf_i+0x160>
 800631a:	2301      	movs	r3, #1
 800631c:	4632      	mov	r2, r6
 800631e:	4649      	mov	r1, r9
 8006320:	4640      	mov	r0, r8
 8006322:	47d0      	blx	sl
 8006324:	3001      	adds	r0, #1
 8006326:	d09d      	beq.n	8006264 <_printf_i+0x15c>
 8006328:	3501      	adds	r5, #1
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	9903      	ldr	r1, [sp, #12]
 800632e:	1a5b      	subs	r3, r3, r1
 8006330:	42ab      	cmp	r3, r5
 8006332:	dcf2      	bgt.n	800631a <_printf_i+0x212>
 8006334:	e7eb      	b.n	800630e <_printf_i+0x206>
 8006336:	2500      	movs	r5, #0
 8006338:	f104 0619 	add.w	r6, r4, #25
 800633c:	e7f5      	b.n	800632a <_printf_i+0x222>
 800633e:	bf00      	nop
 8006340:	080065a9 	.word	0x080065a9
 8006344:	080065ba 	.word	0x080065ba

08006348 <memmove>:
 8006348:	4288      	cmp	r0, r1
 800634a:	b510      	push	{r4, lr}
 800634c:	eb01 0402 	add.w	r4, r1, r2
 8006350:	d902      	bls.n	8006358 <memmove+0x10>
 8006352:	4284      	cmp	r4, r0
 8006354:	4623      	mov	r3, r4
 8006356:	d807      	bhi.n	8006368 <memmove+0x20>
 8006358:	1e43      	subs	r3, r0, #1
 800635a:	42a1      	cmp	r1, r4
 800635c:	d008      	beq.n	8006370 <memmove+0x28>
 800635e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006362:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006366:	e7f8      	b.n	800635a <memmove+0x12>
 8006368:	4402      	add	r2, r0
 800636a:	4601      	mov	r1, r0
 800636c:	428a      	cmp	r2, r1
 800636e:	d100      	bne.n	8006372 <memmove+0x2a>
 8006370:	bd10      	pop	{r4, pc}
 8006372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800637a:	e7f7      	b.n	800636c <memmove+0x24>

0800637c <_sbrk_r>:
 800637c:	b538      	push	{r3, r4, r5, lr}
 800637e:	4d06      	ldr	r5, [pc, #24]	@ (8006398 <_sbrk_r+0x1c>)
 8006380:	2300      	movs	r3, #0
 8006382:	4604      	mov	r4, r0
 8006384:	4608      	mov	r0, r1
 8006386:	602b      	str	r3, [r5, #0]
 8006388:	f000 f83e 	bl	8006408 <_sbrk>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d102      	bne.n	8006396 <_sbrk_r+0x1a>
 8006390:	682b      	ldr	r3, [r5, #0]
 8006392:	b103      	cbz	r3, 8006396 <_sbrk_r+0x1a>
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	bd38      	pop	{r3, r4, r5, pc}
 8006398:	2001ac04 	.word	0x2001ac04

0800639c <_realloc_r>:
 800639c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063a0:	4680      	mov	r8, r0
 80063a2:	4615      	mov	r5, r2
 80063a4:	460c      	mov	r4, r1
 80063a6:	b921      	cbnz	r1, 80063b2 <_realloc_r+0x16>
 80063a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063ac:	4611      	mov	r1, r2
 80063ae:	f7ff bc59 	b.w	8005c64 <_malloc_r>
 80063b2:	b92a      	cbnz	r2, 80063c0 <_realloc_r+0x24>
 80063b4:	f7ff fbea 	bl	8005b8c <_free_r>
 80063b8:	2400      	movs	r4, #0
 80063ba:	4620      	mov	r0, r4
 80063bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063c0:	f000 f81a 	bl	80063f8 <_malloc_usable_size_r>
 80063c4:	4285      	cmp	r5, r0
 80063c6:	4606      	mov	r6, r0
 80063c8:	d802      	bhi.n	80063d0 <_realloc_r+0x34>
 80063ca:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80063ce:	d8f4      	bhi.n	80063ba <_realloc_r+0x1e>
 80063d0:	4629      	mov	r1, r5
 80063d2:	4640      	mov	r0, r8
 80063d4:	f7ff fc46 	bl	8005c64 <_malloc_r>
 80063d8:	4607      	mov	r7, r0
 80063da:	2800      	cmp	r0, #0
 80063dc:	d0ec      	beq.n	80063b8 <_realloc_r+0x1c>
 80063de:	42b5      	cmp	r5, r6
 80063e0:	462a      	mov	r2, r5
 80063e2:	4621      	mov	r1, r4
 80063e4:	bf28      	it	cs
 80063e6:	4632      	movcs	r2, r6
 80063e8:	f7ff fbc2 	bl	8005b70 <memcpy>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4640      	mov	r0, r8
 80063f0:	f7ff fbcc 	bl	8005b8c <_free_r>
 80063f4:	463c      	mov	r4, r7
 80063f6:	e7e0      	b.n	80063ba <_realloc_r+0x1e>

080063f8 <_malloc_usable_size_r>:
 80063f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fc:	1f18      	subs	r0, r3, #4
 80063fe:	2b00      	cmp	r3, #0
 8006400:	bfbc      	itt	lt
 8006402:	580b      	ldrlt	r3, [r1, r0]
 8006404:	18c0      	addlt	r0, r0, r3
 8006406:	4770      	bx	lr

08006408 <_sbrk>:
 8006408:	4a04      	ldr	r2, [pc, #16]	@ (800641c <_sbrk+0x14>)
 800640a:	6811      	ldr	r1, [r2, #0]
 800640c:	4603      	mov	r3, r0
 800640e:	b909      	cbnz	r1, 8006414 <_sbrk+0xc>
 8006410:	4903      	ldr	r1, [pc, #12]	@ (8006420 <_sbrk+0x18>)
 8006412:	6011      	str	r1, [r2, #0]
 8006414:	6810      	ldr	r0, [r2, #0]
 8006416:	4403      	add	r3, r0
 8006418:	6013      	str	r3, [r2, #0]
 800641a:	4770      	bx	lr
 800641c:	2001ac14 	.word	0x2001ac14
 8006420:	2001ac18 	.word	0x2001ac18

08006424 <_init>:
 8006424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006426:	bf00      	nop
 8006428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642a:	bc08      	pop	{r3}
 800642c:	469e      	mov	lr, r3
 800642e:	4770      	bx	lr

08006430 <_fini>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr
