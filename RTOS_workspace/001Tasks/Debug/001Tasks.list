
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074ec  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800768c  0800768c  0000868c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800782c  0800782c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  0800782c  0800782c  0000882c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007834  08007834  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007834  08007834  00008834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007838  08007838  00008838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800783c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001b160  20000064  080078a0  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001b1c4  080078a0  000091c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015914  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003044  00000000  00000000  0001e9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001418  00000000  00000000  000219f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7f  00000000  00000000  00022e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a222  00000000  00000000  00023d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000170fd  00000000  00000000  0003dfa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac716  00000000  00000000  000550a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001017bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005930  00000000  00000000  00101800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000aa  00000000  00000000  00107130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007674 	.word	0x08007674

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007674 	.word	0x08007674

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20019aa4 	.word	0x20019aa4
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <__aeabi_uldivmod>:
 8000320:	b953      	cbnz	r3, 8000338 <__aeabi_uldivmod+0x18>
 8000322:	b94a      	cbnz	r2, 8000338 <__aeabi_uldivmod+0x18>
 8000324:	2900      	cmp	r1, #0
 8000326:	bf08      	it	eq
 8000328:	2800      	cmpeq	r0, #0
 800032a:	bf1c      	itt	ne
 800032c:	f04f 31ff 	movne.w	r1, #4294967295
 8000330:	f04f 30ff 	movne.w	r0, #4294967295
 8000334:	f000 b96a 	b.w	800060c <__aeabi_idiv0>
 8000338:	f1ad 0c08 	sub.w	ip, sp, #8
 800033c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000340:	f000 f806 	bl	8000350 <__udivmoddi4>
 8000344:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000348:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034c:	b004      	add	sp, #16
 800034e:	4770      	bx	lr

08000350 <__udivmoddi4>:
 8000350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000354:	9d08      	ldr	r5, [sp, #32]
 8000356:	460c      	mov	r4, r1
 8000358:	2b00      	cmp	r3, #0
 800035a:	d14e      	bne.n	80003fa <__udivmoddi4+0xaa>
 800035c:	4694      	mov	ip, r2
 800035e:	458c      	cmp	ip, r1
 8000360:	4686      	mov	lr, r0
 8000362:	fab2 f282 	clz	r2, r2
 8000366:	d962      	bls.n	800042e <__udivmoddi4+0xde>
 8000368:	b14a      	cbz	r2, 800037e <__udivmoddi4+0x2e>
 800036a:	f1c2 0320 	rsb	r3, r2, #32
 800036e:	4091      	lsls	r1, r2
 8000370:	fa20 f303 	lsr.w	r3, r0, r3
 8000374:	fa0c fc02 	lsl.w	ip, ip, r2
 8000378:	4319      	orrs	r1, r3
 800037a:	fa00 fe02 	lsl.w	lr, r0, r2
 800037e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000382:	fa1f f68c 	uxth.w	r6, ip
 8000386:	fbb1 f4f7 	udiv	r4, r1, r7
 800038a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800038e:	fb07 1114 	mls	r1, r7, r4, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb04 f106 	mul.w	r1, r4, r6
 800039a:	4299      	cmp	r1, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x64>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003a6:	f080 8112 	bcs.w	80005ce <__udivmoddi4+0x27e>
 80003aa:	4299      	cmp	r1, r3
 80003ac:	f240 810f 	bls.w	80005ce <__udivmoddi4+0x27e>
 80003b0:	3c02      	subs	r4, #2
 80003b2:	4463      	add	r3, ip
 80003b4:	1a59      	subs	r1, r3, r1
 80003b6:	fa1f f38e 	uxth.w	r3, lr
 80003ba:	fbb1 f0f7 	udiv	r0, r1, r7
 80003be:	fb07 1110 	mls	r1, r7, r0, r1
 80003c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c6:	fb00 f606 	mul.w	r6, r0, r6
 80003ca:	429e      	cmp	r6, r3
 80003cc:	d90a      	bls.n	80003e4 <__udivmoddi4+0x94>
 80003ce:	eb1c 0303 	adds.w	r3, ip, r3
 80003d2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d6:	f080 80fc 	bcs.w	80005d2 <__udivmoddi4+0x282>
 80003da:	429e      	cmp	r6, r3
 80003dc:	f240 80f9 	bls.w	80005d2 <__udivmoddi4+0x282>
 80003e0:	4463      	add	r3, ip
 80003e2:	3802      	subs	r0, #2
 80003e4:	1b9b      	subs	r3, r3, r6
 80003e6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ea:	2100      	movs	r1, #0
 80003ec:	b11d      	cbz	r5, 80003f6 <__udivmoddi4+0xa6>
 80003ee:	40d3      	lsrs	r3, r2
 80003f0:	2200      	movs	r2, #0
 80003f2:	e9c5 3200 	strd	r3, r2, [r5]
 80003f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fa:	428b      	cmp	r3, r1
 80003fc:	d905      	bls.n	800040a <__udivmoddi4+0xba>
 80003fe:	b10d      	cbz	r5, 8000404 <__udivmoddi4+0xb4>
 8000400:	e9c5 0100 	strd	r0, r1, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	4608      	mov	r0, r1
 8000408:	e7f5      	b.n	80003f6 <__udivmoddi4+0xa6>
 800040a:	fab3 f183 	clz	r1, r3
 800040e:	2900      	cmp	r1, #0
 8000410:	d146      	bne.n	80004a0 <__udivmoddi4+0x150>
 8000412:	42a3      	cmp	r3, r4
 8000414:	d302      	bcc.n	800041c <__udivmoddi4+0xcc>
 8000416:	4290      	cmp	r0, r2
 8000418:	f0c0 80f0 	bcc.w	80005fc <__udivmoddi4+0x2ac>
 800041c:	1a86      	subs	r6, r0, r2
 800041e:	eb64 0303 	sbc.w	r3, r4, r3
 8000422:	2001      	movs	r0, #1
 8000424:	2d00      	cmp	r5, #0
 8000426:	d0e6      	beq.n	80003f6 <__udivmoddi4+0xa6>
 8000428:	e9c5 6300 	strd	r6, r3, [r5]
 800042c:	e7e3      	b.n	80003f6 <__udivmoddi4+0xa6>
 800042e:	2a00      	cmp	r2, #0
 8000430:	f040 8090 	bne.w	8000554 <__udivmoddi4+0x204>
 8000434:	eba1 040c 	sub.w	r4, r1, ip
 8000438:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800043c:	fa1f f78c 	uxth.w	r7, ip
 8000440:	2101      	movs	r1, #1
 8000442:	fbb4 f6f8 	udiv	r6, r4, r8
 8000446:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800044a:	fb08 4416 	mls	r4, r8, r6, r4
 800044e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000452:	fb07 f006 	mul.w	r0, r7, r6
 8000456:	4298      	cmp	r0, r3
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x11c>
 800045a:	eb1c 0303 	adds.w	r3, ip, r3
 800045e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x11a>
 8000464:	4298      	cmp	r0, r3
 8000466:	f200 80cd 	bhi.w	8000604 <__udivmoddi4+0x2b4>
 800046a:	4626      	mov	r6, r4
 800046c:	1a1c      	subs	r4, r3, r0
 800046e:	fa1f f38e 	uxth.w	r3, lr
 8000472:	fbb4 f0f8 	udiv	r0, r4, r8
 8000476:	fb08 4410 	mls	r4, r8, r0, r4
 800047a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800047e:	fb00 f707 	mul.w	r7, r0, r7
 8000482:	429f      	cmp	r7, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x148>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 34ff 	add.w	r4, r0, #4294967295
 800048e:	d202      	bcs.n	8000496 <__udivmoddi4+0x146>
 8000490:	429f      	cmp	r7, r3
 8000492:	f200 80b0 	bhi.w	80005f6 <__udivmoddi4+0x2a6>
 8000496:	4620      	mov	r0, r4
 8000498:	1bdb      	subs	r3, r3, r7
 800049a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800049e:	e7a5      	b.n	80003ec <__udivmoddi4+0x9c>
 80004a0:	f1c1 0620 	rsb	r6, r1, #32
 80004a4:	408b      	lsls	r3, r1
 80004a6:	fa22 f706 	lsr.w	r7, r2, r6
 80004aa:	431f      	orrs	r7, r3
 80004ac:	fa20 fc06 	lsr.w	ip, r0, r6
 80004b0:	fa04 f301 	lsl.w	r3, r4, r1
 80004b4:	ea43 030c 	orr.w	r3, r3, ip
 80004b8:	40f4      	lsrs	r4, r6
 80004ba:	fa00 f801 	lsl.w	r8, r0, r1
 80004be:	0c38      	lsrs	r0, r7, #16
 80004c0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004c4:	fbb4 fef0 	udiv	lr, r4, r0
 80004c8:	fa1f fc87 	uxth.w	ip, r7
 80004cc:	fb00 441e 	mls	r4, r0, lr, r4
 80004d0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004d4:	fb0e f90c 	mul.w	r9, lr, ip
 80004d8:	45a1      	cmp	r9, r4
 80004da:	fa02 f201 	lsl.w	r2, r2, r1
 80004de:	d90a      	bls.n	80004f6 <__udivmoddi4+0x1a6>
 80004e0:	193c      	adds	r4, r7, r4
 80004e2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004e6:	f080 8084 	bcs.w	80005f2 <__udivmoddi4+0x2a2>
 80004ea:	45a1      	cmp	r9, r4
 80004ec:	f240 8081 	bls.w	80005f2 <__udivmoddi4+0x2a2>
 80004f0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004f4:	443c      	add	r4, r7
 80004f6:	eba4 0409 	sub.w	r4, r4, r9
 80004fa:	fa1f f983 	uxth.w	r9, r3
 80004fe:	fbb4 f3f0 	udiv	r3, r4, r0
 8000502:	fb00 4413 	mls	r4, r0, r3, r4
 8000506:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800050a:	fb03 fc0c 	mul.w	ip, r3, ip
 800050e:	45a4      	cmp	ip, r4
 8000510:	d907      	bls.n	8000522 <__udivmoddi4+0x1d2>
 8000512:	193c      	adds	r4, r7, r4
 8000514:	f103 30ff 	add.w	r0, r3, #4294967295
 8000518:	d267      	bcs.n	80005ea <__udivmoddi4+0x29a>
 800051a:	45a4      	cmp	ip, r4
 800051c:	d965      	bls.n	80005ea <__udivmoddi4+0x29a>
 800051e:	3b02      	subs	r3, #2
 8000520:	443c      	add	r4, r7
 8000522:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000526:	fba0 9302 	umull	r9, r3, r0, r2
 800052a:	eba4 040c 	sub.w	r4, r4, ip
 800052e:	429c      	cmp	r4, r3
 8000530:	46ce      	mov	lr, r9
 8000532:	469c      	mov	ip, r3
 8000534:	d351      	bcc.n	80005da <__udivmoddi4+0x28a>
 8000536:	d04e      	beq.n	80005d6 <__udivmoddi4+0x286>
 8000538:	b155      	cbz	r5, 8000550 <__udivmoddi4+0x200>
 800053a:	ebb8 030e 	subs.w	r3, r8, lr
 800053e:	eb64 040c 	sbc.w	r4, r4, ip
 8000542:	fa04 f606 	lsl.w	r6, r4, r6
 8000546:	40cb      	lsrs	r3, r1
 8000548:	431e      	orrs	r6, r3
 800054a:	40cc      	lsrs	r4, r1
 800054c:	e9c5 6400 	strd	r6, r4, [r5]
 8000550:	2100      	movs	r1, #0
 8000552:	e750      	b.n	80003f6 <__udivmoddi4+0xa6>
 8000554:	f1c2 0320 	rsb	r3, r2, #32
 8000558:	fa20 f103 	lsr.w	r1, r0, r3
 800055c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000560:	fa24 f303 	lsr.w	r3, r4, r3
 8000564:	4094      	lsls	r4, r2
 8000566:	430c      	orrs	r4, r1
 8000568:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800056c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000570:	fa1f f78c 	uxth.w	r7, ip
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3110 	mls	r1, r8, r0, r3
 800057c:	0c23      	lsrs	r3, r4, #16
 800057e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000582:	fb00 f107 	mul.w	r1, r0, r7
 8000586:	4299      	cmp	r1, r3
 8000588:	d908      	bls.n	800059c <__udivmoddi4+0x24c>
 800058a:	eb1c 0303 	adds.w	r3, ip, r3
 800058e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000592:	d22c      	bcs.n	80005ee <__udivmoddi4+0x29e>
 8000594:	4299      	cmp	r1, r3
 8000596:	d92a      	bls.n	80005ee <__udivmoddi4+0x29e>
 8000598:	3802      	subs	r0, #2
 800059a:	4463      	add	r3, ip
 800059c:	1a5b      	subs	r3, r3, r1
 800059e:	b2a4      	uxth	r4, r4
 80005a0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005a4:	fb08 3311 	mls	r3, r8, r1, r3
 80005a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ac:	fb01 f307 	mul.w	r3, r1, r7
 80005b0:	42a3      	cmp	r3, r4
 80005b2:	d908      	bls.n	80005c6 <__udivmoddi4+0x276>
 80005b4:	eb1c 0404 	adds.w	r4, ip, r4
 80005b8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005bc:	d213      	bcs.n	80005e6 <__udivmoddi4+0x296>
 80005be:	42a3      	cmp	r3, r4
 80005c0:	d911      	bls.n	80005e6 <__udivmoddi4+0x296>
 80005c2:	3902      	subs	r1, #2
 80005c4:	4464      	add	r4, ip
 80005c6:	1ae4      	subs	r4, r4, r3
 80005c8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005cc:	e739      	b.n	8000442 <__udivmoddi4+0xf2>
 80005ce:	4604      	mov	r4, r0
 80005d0:	e6f0      	b.n	80003b4 <__udivmoddi4+0x64>
 80005d2:	4608      	mov	r0, r1
 80005d4:	e706      	b.n	80003e4 <__udivmoddi4+0x94>
 80005d6:	45c8      	cmp	r8, r9
 80005d8:	d2ae      	bcs.n	8000538 <__udivmoddi4+0x1e8>
 80005da:	ebb9 0e02 	subs.w	lr, r9, r2
 80005de:	eb63 0c07 	sbc.w	ip, r3, r7
 80005e2:	3801      	subs	r0, #1
 80005e4:	e7a8      	b.n	8000538 <__udivmoddi4+0x1e8>
 80005e6:	4631      	mov	r1, r6
 80005e8:	e7ed      	b.n	80005c6 <__udivmoddi4+0x276>
 80005ea:	4603      	mov	r3, r0
 80005ec:	e799      	b.n	8000522 <__udivmoddi4+0x1d2>
 80005ee:	4630      	mov	r0, r6
 80005f0:	e7d4      	b.n	800059c <__udivmoddi4+0x24c>
 80005f2:	46d6      	mov	lr, sl
 80005f4:	e77f      	b.n	80004f6 <__udivmoddi4+0x1a6>
 80005f6:	4463      	add	r3, ip
 80005f8:	3802      	subs	r0, #2
 80005fa:	e74d      	b.n	8000498 <__udivmoddi4+0x148>
 80005fc:	4606      	mov	r6, r0
 80005fe:	4623      	mov	r3, r4
 8000600:	4608      	mov	r0, r1
 8000602:	e70f      	b.n	8000424 <__udivmoddi4+0xd4>
 8000604:	3e02      	subs	r6, #2
 8000606:	4463      	add	r3, ip
 8000608:	e730      	b.n	800046c <__udivmoddi4+0x11c>
 800060a:	bf00      	nop

0800060c <__aeabi_idiv0>:
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop

08000610 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b088      	sub	sp, #32
 8000614:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000616:	f000 fb77 	bl	8000d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800061a:	f000 f853 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061e:	f000 f8bb 	bl	8000798 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  // Enable the CyCCNT counter
  DWT_CTRL |= ( 1 << 0 );
 8000622:	4b21      	ldr	r3, [pc, #132]	@ (80006a8 <main+0x98>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a20      	ldr	r2, [pc, #128]	@ (80006a8 <main+0x98>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 800062e:	f004 fa9d 	bl	8004b6c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 8000632:	f005 fcd5 	bl	8005fe0 <SEGGER_SYSVIEW_Start>


  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_h);
 8000636:	f107 0308 	add.w	r3, r7, #8
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	2302      	movs	r3, #2
 800063e:	9300      	str	r3, [sp, #0]
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <main+0x9c>)
 8000642:	22c8      	movs	r2, #200	@ 0xc8
 8000644:	491a      	ldr	r1, [pc, #104]	@ (80006b0 <main+0xa0>)
 8000646:	481b      	ldr	r0, [pc, #108]	@ (80006b4 <main+0xa4>)
 8000648:	f002 f9c3 	bl	80029d2 <xTaskCreate>
 800064c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d00b      	beq.n	800066c <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 8000654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000658:	f383 8811 	msr	BASEPRI, r3
 800065c:	f3bf 8f6f 	isb	sy
 8000660:	f3bf 8f4f 	dsb	sy
 8000664:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	e7fd      	b.n	8000668 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_h);
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	9301      	str	r3, [sp, #4]
 8000670:	2302      	movs	r3, #2
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4b10      	ldr	r3, [pc, #64]	@ (80006b8 <main+0xa8>)
 8000676:	22c8      	movs	r2, #200	@ 0xc8
 8000678:	4910      	ldr	r1, [pc, #64]	@ (80006bc <main+0xac>)
 800067a:	4811      	ldr	r0, [pc, #68]	@ (80006c0 <main+0xb0>)
 800067c:	f002 f9a9 	bl	80029d2 <xTaskCreate>
 8000680:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d00b      	beq.n	80006a0 <main+0x90>
    __asm volatile
 8000688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800068c:	f383 8811 	msr	BASEPRI, r3
 8000690:	f3bf 8f6f 	isb	sy
 8000694:	f3bf 8f4f 	dsb	sy
 8000698:	60fb      	str	r3, [r7, #12]
}
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <main+0x8c>

  vTaskStartScheduler();
 80006a0:	f002 fb5c 	bl	8002d5c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <main+0x94>
 80006a8:	e0001000 	.word	0xe0001000
 80006ac:	0800768c 	.word	0x0800768c
 80006b0:	080076a4 	.word	0x080076a4
 80006b4:	08000a55 	.word	0x08000a55
 80006b8:	080076ac 	.word	0x080076ac
 80006bc:	080076c4 	.word	0x080076c4
 80006c0:	08000a91 	.word	0x08000a91

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f006 fb46 	bl	8006d64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b28      	ldr	r3, [pc, #160]	@ (8000790 <SystemClock_Config+0xcc>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a27      	ldr	r2, [pc, #156]	@ (8000790 <SystemClock_Config+0xcc>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b25      	ldr	r3, [pc, #148]	@ (8000790 <SystemClock_Config+0xcc>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b22      	ldr	r3, [pc, #136]	@ (8000794 <SystemClock_Config+0xd0>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a21      	ldr	r2, [pc, #132]	@ (8000794 <SystemClock_Config+0xd0>)
 800070e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000712:	6013      	str	r3, [r2, #0]
 8000714:	4b1f      	ldr	r3, [pc, #124]	@ (8000794 <SystemClock_Config+0xd0>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800071c:	607b      	str	r3, [r7, #4]
 800071e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000720:	2302      	movs	r3, #2
 8000722:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000724:	2301      	movs	r3, #1
 8000726:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000728:	2310      	movs	r3, #16
 800072a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072c:	2302      	movs	r3, #2
 800072e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000730:	2300      	movs	r3, #0
 8000732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000734:	2308      	movs	r3, #8
 8000736:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000738:	23c0      	movs	r3, #192	@ 0xc0
 800073a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800073c:	2304      	movs	r3, #4
 800073e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000740:	2308      	movs	r3, #8
 8000742:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000744:	f107 0320 	add.w	r3, r7, #32
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fd9f 	bl	800128c <HAL_RCC_OscConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000754:	f000 f9cc 	bl	8000af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000758:	230f      	movs	r3, #15
 800075a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800075c:	2302      	movs	r3, #2
 800075e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000764:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000768:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	2103      	movs	r1, #3
 8000776:	4618      	mov	r0, r3
 8000778:	f001 f800 	bl	800177c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000782:	f000 f9b5 	bl	8000af0 <Error_Handler>
  }
}
 8000786:	bf00      	nop
 8000788:	3750      	adds	r7, #80	@ 0x50
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08c      	sub	sp, #48	@ 0x30
 800079c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
 80007b2:	4ba2      	ldr	r3, [pc, #648]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4aa1      	ldr	r2, [pc, #644]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007b8:	f043 0310 	orr.w	r3, r3, #16
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b9f      	ldr	r3, [pc, #636]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0310 	and.w	r3, r3, #16
 80007c6:	61bb      	str	r3, [r7, #24]
 80007c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	617b      	str	r3, [r7, #20]
 80007ce:	4b9b      	ldr	r3, [pc, #620]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a9a      	ldr	r2, [pc, #616]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b98      	ldr	r3, [pc, #608]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	4b94      	ldr	r3, [pc, #592]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a93      	ldr	r2, [pc, #588]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b91      	ldr	r3, [pc, #580]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007fe:	613b      	str	r3, [r7, #16]
 8000800:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60fb      	str	r3, [r7, #12]
 8000806:	4b8d      	ldr	r3, [pc, #564]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a8c      	ldr	r2, [pc, #560]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b8a      	ldr	r3, [pc, #552]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
 800081c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
 8000822:	4b86      	ldr	r3, [pc, #536]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	4a85      	ldr	r2, [pc, #532]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	@ 0x30
 800082e:	4b83      	ldr	r3, [pc, #524]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b7f      	ldr	r3, [pc, #508]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a7e      	ldr	r2, [pc, #504]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b7c      	ldr	r3, [pc, #496]	@ (8000a3c <MX_GPIO_Init+0x2a4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000856:	2200      	movs	r2, #0
 8000858:	2108      	movs	r1, #8
 800085a:	4879      	ldr	r0, [pc, #484]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 800085c:	f000 fcfc 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2101      	movs	r1, #1
 8000864:	4877      	ldr	r0, [pc, #476]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 8000866:	f000 fcf7 	bl	8001258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800086a:	2200      	movs	r2, #0
 800086c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000870:	4875      	ldr	r0, [pc, #468]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000872:	f000 fcf1 	bl	8001258 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000876:	2304      	movs	r3, #4
 8000878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087a:	2300      	movs	r3, #0
 800087c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	2300      	movs	r3, #0
 8000880:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000882:	f107 031c 	add.w	r3, r7, #28
 8000886:	4619      	mov	r1, r3
 8000888:	486d      	ldr	r0, [pc, #436]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 800088a:	f000 fb61 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800088e:	2308      	movs	r3, #8
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000892:	2301      	movs	r3, #1
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089a:	2300      	movs	r3, #0
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800089e:	f107 031c 	add.w	r3, r7, #28
 80008a2:	4619      	mov	r1, r3
 80008a4:	4866      	ldr	r0, [pc, #408]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 80008a6:	f000 fb53 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 80008aa:	2332      	movs	r3, #50	@ 0x32
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008ae:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b8:	f107 031c 	add.w	r3, r7, #28
 80008bc:	4619      	mov	r1, r3
 80008be:	4860      	ldr	r0, [pc, #384]	@ (8000a40 <MX_GPIO_Init+0x2a8>)
 80008c0:	f000 fb46 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	485a      	ldr	r0, [pc, #360]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80008dc:	f000 fb38 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008e0:	2308      	movs	r3, #8
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2300      	movs	r3, #0
 80008ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f0:	2305      	movs	r3, #5
 80008f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008f4:	f107 031c 	add.w	r3, r7, #28
 80008f8:	4619      	mov	r1, r3
 80008fa:	4852      	ldr	r0, [pc, #328]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80008fc:	f000 fb28 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000900:	2301      	movs	r3, #1
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000904:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000908:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090e:	f107 031c 	add.w	r3, r7, #28
 8000912:	4619      	mov	r1, r3
 8000914:	484d      	ldr	r0, [pc, #308]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000916:	f000 fb1b 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800091a:	2310      	movs	r3, #16
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800092a:	2306      	movs	r3, #6
 800092c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	4619      	mov	r1, r3
 8000934:	4845      	ldr	r0, [pc, #276]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000936:	f000 fb0b 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800093a:	23e0      	movs	r3, #224	@ 0xe0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093e:	2302      	movs	r3, #2
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094a:	2305      	movs	r3, #5
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	483d      	ldr	r0, [pc, #244]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 8000956:	f000 fafb 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 800095a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000968:	2300      	movs	r3, #0
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800096c:	2305      	movs	r3, #5
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	4836      	ldr	r0, [pc, #216]	@ (8000a50 <MX_GPIO_Init+0x2b8>)
 8000978:	f000 faea 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800097c:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000980:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000982:	2301      	movs	r3, #1
 8000984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	482c      	ldr	r0, [pc, #176]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000996:	f000 fadb 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800099a:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800099e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a0:	2302      	movs	r3, #2
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80009ac:	2306      	movs	r3, #6
 80009ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b0:	f107 031c 	add.w	r3, r7, #28
 80009b4:	4619      	mov	r1, r3
 80009b6:	4823      	ldr	r0, [pc, #140]	@ (8000a44 <MX_GPIO_Init+0x2ac>)
 80009b8:	f000 faca 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80009bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	4619      	mov	r1, r3
 80009d0:	481e      	ldr	r0, [pc, #120]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 80009d2:	f000 fabd 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009d6:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009e8:	230a      	movs	r3, #10
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4619      	mov	r1, r3
 80009f2:	4816      	ldr	r0, [pc, #88]	@ (8000a4c <MX_GPIO_Init+0x2b4>)
 80009f4:	f000 faac 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f8:	2320      	movs	r3, #32
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 031c 	add.w	r3, r7, #28
 8000a08:	4619      	mov	r1, r3
 8000a0a:	480f      	ldr	r0, [pc, #60]	@ (8000a48 <MX_GPIO_Init+0x2b0>)
 8000a0c:	f000 faa0 	bl	8000f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000a10:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a16:	2312      	movs	r3, #18
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a22:	2304      	movs	r3, #4
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4808      	ldr	r0, [pc, #32]	@ (8000a50 <MX_GPIO_Init+0x2b8>)
 8000a2e:	f000 fa8f 	bl	8000f50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	@ 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40021000 	.word	0x40021000
 8000a44:	40020800 	.word	0x40020800
 8000a48:	40020c00 	.word	0x40020c00
 8000a4c:	40020000 	.word	0x40020000
 8000a50:	40020400 	.word	0x40020400

08000a54 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void *parameters)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b09c      	sub	sp, #112	@ 0x70
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	while(1)
	{

		//printf("%s\n", (char *)parameters);

		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a5c:	f107 000c 	add.w	r0, r7, #12
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	4a09      	ldr	r2, [pc, #36]	@ (8000a88 <task1_handler+0x34>)
 8000a64:	2164      	movs	r1, #100	@ 0x64
 8000a66:	f006 f939 	bl	8006cdc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a6a:	f107 030c 	add.w	r3, r7, #12
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f006 f8c4 	bl	8006bfc <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000a74:	4b05      	ldr	r3, [pc, #20]	@ (8000a8c <task1_handler+0x38>)
 8000a76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	f3bf 8f4f 	dsb	sy
 8000a80:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a84:	bf00      	nop
 8000a86:	e7e9      	b.n	8000a5c <task1_handler+0x8>
 8000a88:	080076cc 	.word	0x080076cc
 8000a8c:	e000ed04 	.word	0xe000ed04

08000a90 <task2_handler>:

}


static void task2_handler(void *parameters)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b09c      	sub	sp, #112	@ 0x70
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	while(1)
	{

		//printf("%s\n", (char *)parameters);

		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000a98:	f107 000c 	add.w	r0, r7, #12
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	4a09      	ldr	r2, [pc, #36]	@ (8000ac4 <task2_handler+0x34>)
 8000aa0:	2164      	movs	r1, #100	@ 0x64
 8000aa2:	f006 f91b 	bl	8006cdc <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f006 f8a6 	bl	8006bfc <SEGGER_SYSVIEW_PrintfTarget>

		taskYIELD();
 8000ab0:	4b05      	ldr	r3, [pc, #20]	@ (8000ac8 <task2_handler+0x38>)
 8000ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	f3bf 8f4f 	dsb	sy
 8000abc:	f3bf 8f6f 	isb	sy
		snprintf(msg, 100, "%s\n", (char *)parameters);
 8000ac0:	bf00      	nop
 8000ac2:	e7e9      	b.n	8000a98 <task2_handler+0x8>
 8000ac4:	080076cc 	.word	0x080076cc
 8000ac8:	e000ed04 	.word	0xe000ed04

08000acc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a04      	ldr	r2, [pc, #16]	@ (8000aec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d101      	bne.n	8000ae2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ade:	f000 f935 	bl	8000d4c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40000c00 	.word	0x40000c00

08000af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af4:	b672      	cpsid	i
}
 8000af6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <Error_Handler+0x8>

08000afc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	607b      	str	r3, [r7, #4]
 8000b06:	4b10      	ldr	r3, [pc, #64]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b12:	4b0d      	ldr	r3, [pc, #52]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
 8000b22:	4b09      	ldr	r3, [pc, #36]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b26:	4a08      	ldr	r2, [pc, #32]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b2e:	4b06      	ldr	r3, [pc, #24]	@ (8000b48 <HAL_MspInit+0x4c>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 8000b3a:	f003 fbdb 	bl	80042f4 <vInitPrioGroupValue>

  /* USER CODE END MspInit 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	3708      	adds	r7, #8
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023800 	.word	0x40023800

08000b4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	@ 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b54:	2300      	movs	r3, #0
 8000b56:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4b33      	ldr	r3, [pc, #204]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b64:	4a32      	ldr	r2, [pc, #200]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b66:	f043 0308 	orr.w	r3, r3, #8
 8000b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b6c:	4b30      	ldr	r3, [pc, #192]	@ (8000c30 <HAL_InitTick+0xe4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b70:	f003 0308 	and.w	r3, r3, #8
 8000b74:	60fb      	str	r3, [r7, #12]
 8000b76:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b78:	f107 0210 	add.w	r2, r7, #16
 8000b7c:	f107 0314 	add.w	r3, r7, #20
 8000b80:	4611      	mov	r1, r2
 8000b82:	4618      	mov	r0, r3
 8000b84:	f001 f806 	bl	8001b94 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b88:	6a3b      	ldr	r3, [r7, #32]
 8000b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d103      	bne.n	8000b9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b92:	f000 ffeb 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b96:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b98:	e004      	b.n	8000ba4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b9a:	f000 ffe7 	bl	8001b6c <HAL_RCC_GetPCLK1Freq>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ba6:	4a23      	ldr	r2, [pc, #140]	@ (8000c34 <HAL_InitTick+0xe8>)
 8000ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bac:	0c9b      	lsrs	r3, r3, #18
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000bb2:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bb4:	4a21      	ldr	r2, [pc, #132]	@ (8000c3c <HAL_InitTick+0xf0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bbe:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bc4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000bd8:	4817      	ldr	r0, [pc, #92]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bda:	f001 f80d 	bl	8001bf8 <HAL_TIM_Base_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000be4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d11b      	bne.n	8000c24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000bec:	4812      	ldr	r0, [pc, #72]	@ (8000c38 <HAL_InitTick+0xec>)
 8000bee:	f001 f85d 	bl	8001cac <HAL_TIM_Base_Start_IT>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bf8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d111      	bne.n	8000c24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000c00:	2032      	movs	r0, #50	@ 0x32
 8000c02:	f000 f997 	bl	8000f34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d808      	bhi.n	8000c1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	2032      	movs	r0, #50	@ 0x32
 8000c12:	f000 f973 	bl	8000efc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c16:	4a0a      	ldr	r2, [pc, #40]	@ (8000c40 <HAL_InitTick+0xf4>)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	6013      	str	r3, [r2, #0]
 8000c1c:	e002      	b.n	8000c24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3738      	adds	r7, #56	@ 0x38
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40023800 	.word	0x40023800
 8000c34:	431bde83 	.word	0x431bde83
 8000c38:	20000080 	.word	0x20000080
 8000c3c:	40000c00 	.word	0x40000c00
 8000c40:	20000004 	.word	0x20000004

08000c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <NMI_Handler+0x4>

08000c4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <HardFault_Handler+0x4>

08000c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <MemManage_Handler+0x4>

08000c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <BusFault_Handler+0x4>

08000c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <UsageFault_Handler+0x4>

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c80:	4802      	ldr	r0, [pc, #8]	@ (8000c8c <TIM5_IRQHandler+0x10>)
 8000c82:	f001 f875 	bl	8001d70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000080 	.word	0x20000080

08000c90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c94:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <SystemInit+0x20>)
 8000c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c9a:	4a05      	ldr	r2, [pc, #20]	@ (8000cb0 <SystemInit+0x20>)
 8000c9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ca0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000ed00 	.word	0xe000ed00

08000cb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cb4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cb8:	f7ff ffea 	bl	8000c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cbc:	480c      	ldr	r0, [pc, #48]	@ (8000cf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cbe:	490d      	ldr	r1, [pc, #52]	@ (8000cf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce2:	f006 f847 	bl	8006d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ce6:	f7ff fc93 	bl	8000610 <main>
  bx  lr    
 8000cea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000cf8:	0800783c 	.word	0x0800783c
  ldr r2, =_sbss
 8000cfc:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d00:	2001b1c4 	.word	0x2001b1c4

08000d04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d04:	e7fe      	b.n	8000d04 <ADC_IRQHandler>
	...

08000d08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0d      	ldr	r2, [pc, #52]	@ (8000d48 <HAL_Init+0x40>)
 8000d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <HAL_Init+0x40>)
 8000d1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d24:	4b08      	ldr	r3, [pc, #32]	@ (8000d48 <HAL_Init+0x40>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a07      	ldr	r2, [pc, #28]	@ (8000d48 <HAL_Init+0x40>)
 8000d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d30:	2003      	movs	r0, #3
 8000d32:	f000 f8d8 	bl	8000ee6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff ff08 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3c:	f7ff fede 	bl	8000afc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40023c00 	.word	0x40023c00

08000d4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d50:	4b06      	ldr	r3, [pc, #24]	@ (8000d6c <HAL_IncTick+0x20>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	461a      	mov	r2, r3
 8000d56:	4b06      	ldr	r3, [pc, #24]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	4a04      	ldr	r2, [pc, #16]	@ (8000d70 <HAL_IncTick+0x24>)
 8000d5e:	6013      	str	r3, [r2, #0]
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	20000008 	.word	0x20000008
 8000d70:	200000c8 	.word	0x200000c8

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b03      	ldr	r3, [pc, #12]	@ (8000d88 <HAL_GetTick+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	200000c8 	.word	0x200000c8

08000d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da8:	4013      	ands	r3, r2
 8000daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000db0:	68bb      	ldr	r3, [r7, #8]
 8000db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000db4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dbe:	4a04      	ldr	r2, [pc, #16]	@ (8000dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	60d3      	str	r3, [r2, #12]
}
 8000dc4:	bf00      	nop
 8000dc6:	3714      	adds	r7, #20
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000ed00 	.word	0xe000ed00

08000dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd8:	4b04      	ldr	r3, [pc, #16]	@ (8000dec <__NVIC_GetPriorityGrouping+0x18>)
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	0a1b      	lsrs	r3, r3, #8
 8000dde:	f003 0307 	and.w	r3, r3, #7
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	db0b      	blt.n	8000e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	f003 021f 	and.w	r2, r3, #31
 8000e08:	4907      	ldr	r1, [pc, #28]	@ (8000e28 <__NVIC_EnableIRQ+0x38>)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	095b      	lsrs	r3, r3, #5
 8000e10:	2001      	movs	r0, #1
 8000e12:	fa00 f202 	lsl.w	r2, r0, r2
 8000e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e1a:	bf00      	nop
 8000e1c:	370c      	adds	r7, #12
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000e100 	.word	0xe000e100

08000e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	4603      	mov	r3, r0
 8000e34:	6039      	str	r1, [r7, #0]
 8000e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	db0a      	blt.n	8000e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	b2da      	uxtb	r2, r3
 8000e44:	490c      	ldr	r1, [pc, #48]	@ (8000e78 <__NVIC_SetPriority+0x4c>)
 8000e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4a:	0112      	lsls	r2, r2, #4
 8000e4c:	b2d2      	uxtb	r2, r2
 8000e4e:	440b      	add	r3, r1
 8000e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e54:	e00a      	b.n	8000e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	4908      	ldr	r1, [pc, #32]	@ (8000e7c <__NVIC_SetPriority+0x50>)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	f003 030f 	and.w	r3, r3, #15
 8000e62:	3b04      	subs	r3, #4
 8000e64:	0112      	lsls	r2, r2, #4
 8000e66:	b2d2      	uxtb	r2, r2
 8000e68:	440b      	add	r3, r1
 8000e6a:	761a      	strb	r2, [r3, #24]
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr
 8000e78:	e000e100 	.word	0xe000e100
 8000e7c:	e000ed00 	.word	0xe000ed00

08000e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b089      	sub	sp, #36	@ 0x24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	f1c3 0307 	rsb	r3, r3, #7
 8000e9a:	2b04      	cmp	r3, #4
 8000e9c:	bf28      	it	cs
 8000e9e:	2304      	movcs	r3, #4
 8000ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	2b06      	cmp	r3, #6
 8000ea8:	d902      	bls.n	8000eb0 <NVIC_EncodePriority+0x30>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3b03      	subs	r3, #3
 8000eae:	e000      	b.n	8000eb2 <NVIC_EncodePriority+0x32>
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb8:	69bb      	ldr	r3, [r7, #24]
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43da      	mvns	r2, r3
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	401a      	ands	r2, r3
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed2:	43d9      	mvns	r1, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	4313      	orrs	r3, r2
         );
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3724      	adds	r7, #36	@ 0x24
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff4c 	bl	8000d8c <__NVIC_SetPriorityGrouping>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
 8000f08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0e:	f7ff ff61 	bl	8000dd4 <__NVIC_GetPriorityGrouping>
 8000f12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f14:	687a      	ldr	r2, [r7, #4]
 8000f16:	68b9      	ldr	r1, [r7, #8]
 8000f18:	6978      	ldr	r0, [r7, #20]
 8000f1a:	f7ff ffb1 	bl	8000e80 <NVIC_EncodePriority>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f24:	4611      	mov	r1, r2
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ff80 	bl	8000e2c <__NVIC_SetPriority>
}
 8000f2c:	bf00      	nop
 8000f2e:	3718      	adds	r7, #24
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}

08000f34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ff54 	bl	8000df0 <__NVIC_EnableIRQ>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
 8000f6a:	e159      	b.n	8001220 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	f040 8148 	bne.w	800121a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d005      	beq.n	8000fa2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9e:	2b02      	cmp	r3, #2
 8000fa0:	d130      	bne.n	8001004 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	68da      	ldr	r2, [r3, #12]
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd8:	2201      	movs	r2, #1
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	091b      	lsrs	r3, r3, #4
 8000fee:	f003 0201 	and.w	r2, r3, #1
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	2b03      	cmp	r3, #3
 800100e:	d017      	beq.n	8001040 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	005b      	lsls	r3, r3, #1
 800101a:	2203      	movs	r2, #3
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	43db      	mvns	r3, r3
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4013      	ands	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	689a      	ldr	r2, [r3, #8]
 800102c:	69fb      	ldr	r3, [r7, #28]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4313      	orrs	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	2b02      	cmp	r3, #2
 800104a:	d123      	bne.n	8001094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	f003 0307 	and.w	r3, r3, #7
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	220f      	movs	r2, #15
 8001064:	fa02 f303 	lsl.w	r3, r2, r3
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	691a      	ldr	r2, [r3, #16]
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4313      	orrs	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	69b9      	ldr	r1, [r7, #24]
 8001090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	005b      	lsls	r3, r3, #1
 800109e:	2203      	movs	r2, #3
 80010a0:	fa02 f303 	lsl.w	r3, r2, r3
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f003 0203 	and.w	r2, r3, #3
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4313      	orrs	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f000 80a2 	beq.w	800121a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b57      	ldr	r3, [pc, #348]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a56      	ldr	r2, [pc, #344]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b54      	ldr	r3, [pc, #336]	@ (8001238 <HAL_GPIO_Init+0x2e8>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010f2:	4a52      	ldr	r2, [pc, #328]	@ (800123c <HAL_GPIO_Init+0x2ec>)
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	089b      	lsrs	r3, r3, #2
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0303 	and.w	r3, r3, #3
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	220f      	movs	r2, #15
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <HAL_GPIO_Init+0x2f0>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d019      	beq.n	8001152 <HAL_GPIO_Init+0x202>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a48      	ldr	r2, [pc, #288]	@ (8001244 <HAL_GPIO_Init+0x2f4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d013      	beq.n	800114e <HAL_GPIO_Init+0x1fe>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a47      	ldr	r2, [pc, #284]	@ (8001248 <HAL_GPIO_Init+0x2f8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d00d      	beq.n	800114a <HAL_GPIO_Init+0x1fa>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a46      	ldr	r2, [pc, #280]	@ (800124c <HAL_GPIO_Init+0x2fc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d007      	beq.n	8001146 <HAL_GPIO_Init+0x1f6>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a45      	ldr	r2, [pc, #276]	@ (8001250 <HAL_GPIO_Init+0x300>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d101      	bne.n	8001142 <HAL_GPIO_Init+0x1f2>
 800113e:	2304      	movs	r3, #4
 8001140:	e008      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001142:	2307      	movs	r3, #7
 8001144:	e006      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001146:	2303      	movs	r3, #3
 8001148:	e004      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114a:	2302      	movs	r3, #2
 800114c:	e002      	b.n	8001154 <HAL_GPIO_Init+0x204>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <HAL_GPIO_Init+0x204>
 8001152:	2300      	movs	r3, #0
 8001154:	69fa      	ldr	r2, [r7, #28]
 8001156:	f002 0203 	and.w	r2, r2, #3
 800115a:	0092      	lsls	r2, r2, #2
 800115c:	4093      	lsls	r3, r2
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	4313      	orrs	r3, r2
 8001162:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001164:	4935      	ldr	r1, [pc, #212]	@ (800123c <HAL_GPIO_Init+0x2ec>)
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	089b      	lsrs	r3, r3, #2
 800116a:	3302      	adds	r3, #2
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001172:	4b38      	ldr	r3, [pc, #224]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4313      	orrs	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001196:	4a2f      	ldr	r2, [pc, #188]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800119c:	4b2d      	ldr	r3, [pc, #180]	@ (8001254 <HAL_GPIO_Init+0x304>)
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	4013      	ands	r3, r2
 80011aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d003      	beq.n	80011c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	4313      	orrs	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011c0:	4a24      	ldr	r2, [pc, #144]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011c6:	4b23      	ldr	r3, [pc, #140]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	43db      	mvns	r3, r3
 80011d0:	69ba      	ldr	r2, [r7, #24]
 80011d2:	4013      	ands	r3, r2
 80011d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011d6:	683b      	ldr	r3, [r7, #0]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011e2:	69ba      	ldr	r2, [r7, #24]
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011ea:	4a1a      	ldr	r2, [pc, #104]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011f0:	4b18      	ldr	r3, [pc, #96]	@ (8001254 <HAL_GPIO_Init+0x304>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f6:	693b      	ldr	r3, [r7, #16]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	69ba      	ldr	r2, [r7, #24]
 80011fc:	4013      	ands	r3, r2
 80011fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001208:	2b00      	cmp	r3, #0
 800120a:	d003      	beq.n	8001214 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	4313      	orrs	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001214:	4a0f      	ldr	r2, [pc, #60]	@ (8001254 <HAL_GPIO_Init+0x304>)
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	3301      	adds	r3, #1
 800121e:	61fb      	str	r3, [r7, #28]
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	2b0f      	cmp	r3, #15
 8001224:	f67f aea2 	bls.w	8000f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	3724      	adds	r7, #36	@ 0x24
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40013800 	.word	0x40013800
 8001240:	40020000 	.word	0x40020000
 8001244:	40020400 	.word	0x40020400
 8001248:	40020800 	.word	0x40020800
 800124c:	40020c00 	.word	0x40020c00
 8001250:	40021000 	.word	0x40021000
 8001254:	40013c00 	.word	0x40013c00

08001258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	460b      	mov	r3, r1
 8001262:	807b      	strh	r3, [r7, #2]
 8001264:	4613      	mov	r3, r2
 8001266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001268:	787b      	ldrb	r3, [r7, #1]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d003      	beq.n	8001276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126e:	887a      	ldrh	r2, [r7, #2]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001274:	e003      	b.n	800127e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001276:	887b      	ldrh	r3, [r7, #2]
 8001278:	041a      	lsls	r2, r3, #16
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	619a      	str	r2, [r3, #24]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b086      	sub	sp, #24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e267      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d075      	beq.n	8001396 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012aa:	4b88      	ldr	r3, [pc, #544]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 030c 	and.w	r3, r3, #12
 80012b2:	2b04      	cmp	r3, #4
 80012b4:	d00c      	beq.n	80012d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012b6:	4b85      	ldr	r3, [pc, #532]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012be:	2b08      	cmp	r3, #8
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012c2:	4b82      	ldr	r3, [pc, #520]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012ce:	d10b      	bne.n	80012e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d0:	4b7e      	ldr	r3, [pc, #504]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d05b      	beq.n	8001394 <HAL_RCC_OscConfig+0x108>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d157      	bne.n	8001394 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e242      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012f0:	d106      	bne.n	8001300 <HAL_RCC_OscConfig+0x74>
 80012f2:	4b76      	ldr	r3, [pc, #472]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a75      	ldr	r2, [pc, #468]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80012f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	e01d      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x98>
 800130a:	4b70      	ldr	r3, [pc, #448]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a6f      	ldr	r2, [pc, #444]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001310:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b6d      	ldr	r3, [pc, #436]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a6c      	ldr	r2, [pc, #432]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800131c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e00b      	b.n	800133c <HAL_RCC_OscConfig+0xb0>
 8001324:	4b69      	ldr	r3, [pc, #420]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a68      	ldr	r2, [pc, #416]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800132a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b66      	ldr	r3, [pc, #408]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a65      	ldr	r2, [pc, #404]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001336:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800133a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d013      	beq.n	800136c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff fd16 	bl	8000d74 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800134c:	f7ff fd12 	bl	8000d74 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b64      	cmp	r3, #100	@ 0x64
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e207      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135e:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0xc0>
 800136a:	e014      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136c:	f7ff fd02 	bl	8000d74 <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001372:	e008      	b.n	8001386 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001374:	f7ff fcfe 	bl	8000d74 <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	2b64      	cmp	r3, #100	@ 0x64
 8001380:	d901      	bls.n	8001386 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001382:	2303      	movs	r3, #3
 8001384:	e1f3      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001386:	4b51      	ldr	r3, [pc, #324]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1f0      	bne.n	8001374 <HAL_RCC_OscConfig+0xe8>
 8001392:	e000      	b.n	8001396 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001394:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d063      	beq.n	800146a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013a2:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 030c 	and.w	r3, r3, #12
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d00b      	beq.n	80013c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ae:	4b47      	ldr	r3, [pc, #284]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013b6:	2b08      	cmp	r3, #8
 80013b8:	d11c      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ba:	4b44      	ldr	r3, [pc, #272]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d116      	bne.n	80013f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d005      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	68db      	ldr	r3, [r3, #12]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	d001      	beq.n	80013de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	e1c7      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013de:	4b3b      	ldr	r3, [pc, #236]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4937      	ldr	r1, [pc, #220]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80013ee:	4313      	orrs	r3, r2
 80013f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f2:	e03a      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d020      	beq.n	800143e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013fc:	4b34      	ldr	r3, [pc, #208]	@ (80014d0 <HAL_RCC_OscConfig+0x244>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fcb7 	bl	8000d74 <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800140a:	f7ff fcb3 	bl	8000d74 <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e1a8      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800141c:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691b      	ldr	r3, [r3, #16]
 8001434:	00db      	lsls	r3, r3, #3
 8001436:	4925      	ldr	r1, [pc, #148]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
 800143c:	e015      	b.n	800146a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800143e:	4b24      	ldr	r3, [pc, #144]	@ (80014d0 <HAL_RCC_OscConfig+0x244>)
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001444:	f7ff fc96 	bl	8000d74 <HAL_GetTick>
 8001448:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800144a:	e008      	b.n	800145e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800144c:	f7ff fc92 	bl	8000d74 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	2b02      	cmp	r3, #2
 8001458:	d901      	bls.n	800145e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800145a:	2303      	movs	r3, #3
 800145c:	e187      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f003 0302 	and.w	r3, r3, #2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d1f0      	bne.n	800144c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d036      	beq.n	80014e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	695b      	ldr	r3, [r3, #20]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d016      	beq.n	80014ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_RCC_OscConfig+0x248>)
 8001480:	2201      	movs	r2, #1
 8001482:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001484:	f7ff fc76 	bl	8000d74 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800148c:	f7ff fc72 	bl	8000d74 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e167      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_RCC_OscConfig+0x240>)
 80014a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0x200>
 80014aa:	e01b      	b.n	80014e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ac:	4b09      	ldr	r3, [pc, #36]	@ (80014d4 <HAL_RCC_OscConfig+0x248>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fc5f 	bl	8000d74 <HAL_GetTick>
 80014b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b8:	e00e      	b.n	80014d8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ba:	f7ff fc5b 	bl	8000d74 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d907      	bls.n	80014d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e150      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470000 	.word	0x42470000
 80014d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b88      	ldr	r3, [pc, #544]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80014da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1ea      	bne.n	80014ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 8097 	beq.w	8001620 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b81      	ldr	r3, [pc, #516]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10f      	bne.n	8001522 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b7d      	ldr	r3, [pc, #500]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	4a7c      	ldr	r2, [pc, #496]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800150c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	@ 0x40
 8001512:	4b7a      	ldr	r3, [pc, #488]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001516:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151e:	2301      	movs	r3, #1
 8001520:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001522:	4b77      	ldr	r3, [pc, #476]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152a:	2b00      	cmp	r3, #0
 800152c:	d118      	bne.n	8001560 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152e:	4b74      	ldr	r3, [pc, #464]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a73      	ldr	r2, [pc, #460]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001534:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800153a:	f7ff fc1b 	bl	8000d74 <HAL_GetTick>
 800153e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001542:	f7ff fc17 	bl	8000d74 <HAL_GetTick>
 8001546:	4602      	mov	r2, r0
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e10c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001554:	4b6a      	ldr	r3, [pc, #424]	@ (8001700 <HAL_RCC_OscConfig+0x474>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155c:	2b00      	cmp	r3, #0
 800155e:	d0f0      	beq.n	8001542 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d106      	bne.n	8001576 <HAL_RCC_OscConfig+0x2ea>
 8001568:	4b64      	ldr	r3, [pc, #400]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800156c:	4a63      	ldr	r2, [pc, #396]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800156e:	f043 0301 	orr.w	r3, r3, #1
 8001572:	6713      	str	r3, [r2, #112]	@ 0x70
 8001574:	e01c      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b05      	cmp	r3, #5
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x30c>
 800157e:	4b5f      	ldr	r3, [pc, #380]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001582:	4a5e      	ldr	r2, [pc, #376]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001584:	f043 0304 	orr.w	r3, r3, #4
 8001588:	6713      	str	r3, [r2, #112]	@ 0x70
 800158a:	4b5c      	ldr	r3, [pc, #368]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	4a5b      	ldr	r2, [pc, #364]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6713      	str	r3, [r2, #112]	@ 0x70
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0x324>
 8001598:	4b58      	ldr	r3, [pc, #352]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a57      	ldr	r2, [pc, #348]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	4b55      	ldr	r3, [pc, #340]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015a8:	4a54      	ldr	r2, [pc, #336]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015aa:	f023 0304 	bic.w	r3, r3, #4
 80015ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d015      	beq.n	80015e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b8:	f7ff fbdc 	bl	8000d74 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015be:	e00a      	b.n	80015d6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015c0:	f7ff fbd8 	bl	8000d74 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e0cb      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015d6:	4b49      	ldr	r3, [pc, #292]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80015d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d0ee      	beq.n	80015c0 <HAL_RCC_OscConfig+0x334>
 80015e2:	e014      	b.n	800160e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fbc6 	bl	8000d74 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ea:	e00a      	b.n	8001602 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ec:	f7ff fbc2 	bl	8000d74 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e0b5      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001602:	4b3e      	ldr	r3, [pc, #248]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ee      	bne.n	80015ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800160e:	7dfb      	ldrb	r3, [r7, #23]
 8001610:	2b01      	cmp	r3, #1
 8001612:	d105      	bne.n	8001620 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001614:	4b39      	ldr	r3, [pc, #228]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001618:	4a38      	ldr	r2, [pc, #224]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800161a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800161e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a1 	beq.w	800176c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800162a:	4b34      	ldr	r3, [pc, #208]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	f003 030c 	and.w	r3, r3, #12
 8001632:	2b08      	cmp	r3, #8
 8001634:	d05c      	beq.n	80016f0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d141      	bne.n	80016c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b31      	ldr	r3, [pc, #196]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fb96 	bl	8000d74 <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fb92 	bl	8000d74 <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e087      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165e:	4b27      	ldr	r3, [pc, #156]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69da      	ldr	r2, [r3, #28]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a1b      	ldr	r3, [r3, #32]
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	019b      	lsls	r3, r3, #6
 800167a:	431a      	orrs	r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	085b      	lsrs	r3, r3, #1
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168c:	061b      	lsls	r3, r3, #24
 800168e:	491b      	ldr	r1, [pc, #108]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001694:	4b1b      	ldr	r3, [pc, #108]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169a:	f7ff fb6b 	bl	8000d74 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a2:	f7ff fb67 	bl	8000d74 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e05c      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x416>
 80016c0:	e054      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016c2:	4b10      	ldr	r3, [pc, #64]	@ (8001704 <HAL_RCC_OscConfig+0x478>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c8:	f7ff fb54 	bl	8000d74 <HAL_GetTick>
 80016cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d0:	f7ff fb50 	bl	8000d74 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e045      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016e2:	4b06      	ldr	r3, [pc, #24]	@ (80016fc <HAL_RCC_OscConfig+0x470>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d1f0      	bne.n	80016d0 <HAL_RCC_OscConfig+0x444>
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e038      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
 80016fc:	40023800 	.word	0x40023800
 8001700:	40007000 	.word	0x40007000
 8001704:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001708:	4b1b      	ldr	r3, [pc, #108]	@ (8001778 <HAL_RCC_OscConfig+0x4ec>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d028      	beq.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001720:	429a      	cmp	r2, r3
 8001722:	d121      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800172e:	429a      	cmp	r2, r3
 8001730:	d11a      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001732:	68fa      	ldr	r2, [r7, #12]
 8001734:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001738:	4013      	ands	r3, r2
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800173e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001740:	4293      	cmp	r3, r2
 8001742:	d111      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	085b      	lsrs	r3, r3, #1
 8001750:	3b01      	subs	r3, #1
 8001752:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001754:	429a      	cmp	r2, r3
 8001756:	d107      	bne.n	8001768 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001762:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40023800 	.word	0x40023800

0800177c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e0cc      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001790:	4b68      	ldr	r3, [pc, #416]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	683a      	ldr	r2, [r7, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d90c      	bls.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179e:	4b65      	ldr	r3, [pc, #404]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017a6:	4b63      	ldr	r3, [pc, #396]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	683a      	ldr	r2, [r7, #0]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d001      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0b8      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d020      	beq.n	8001806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d005      	beq.n	80017dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d0:	4b59      	ldr	r3, [pc, #356]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	4a58      	ldr	r2, [pc, #352]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80017da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d005      	beq.n	80017f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017e8:	4b53      	ldr	r3, [pc, #332]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	4a52      	ldr	r2, [pc, #328]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f4:	4b50      	ldr	r3, [pc, #320]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	494d      	ldr	r1, [pc, #308]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	4313      	orrs	r3, r2
 8001804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d044      	beq.n	800189c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d107      	bne.n	800182a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181a:	4b47      	ldr	r3, [pc, #284]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d119      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e07f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d003      	beq.n	800183a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001836:	2b03      	cmp	r3, #3
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183a:	4b3f      	ldr	r3, [pc, #252]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001842:	2b00      	cmp	r3, #0
 8001844:	d109      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e06f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800184a:	4b3b      	ldr	r3, [pc, #236]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d101      	bne.n	800185a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e067      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800185a:	4b37      	ldr	r3, [pc, #220]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f023 0203 	bic.w	r2, r3, #3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	4934      	ldr	r1, [pc, #208]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 8001868:	4313      	orrs	r3, r2
 800186a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800186c:	f7ff fa82 	bl	8000d74 <HAL_GetTick>
 8001870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	e00a      	b.n	800188a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001874:	f7ff fa7e 	bl	8000d74 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001882:	4293      	cmp	r3, r2
 8001884:	d901      	bls.n	800188a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e04f      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800188a:	4b2b      	ldr	r3, [pc, #172]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f003 020c 	and.w	r2, r3, #12
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d1eb      	bne.n	8001874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800189c:	4b25      	ldr	r3, [pc, #148]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 0307 	and.w	r3, r3, #7
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d20c      	bcs.n	80018c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018aa:	4b22      	ldr	r3, [pc, #136]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	b2d2      	uxtb	r2, r2
 80018b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b2:	4b20      	ldr	r3, [pc, #128]	@ (8001934 <HAL_RCC_ClockConfig+0x1b8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	429a      	cmp	r2, r3
 80018be:	d001      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e032      	b.n	800192a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d008      	beq.n	80018e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d0:	4b19      	ldr	r3, [pc, #100]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	4916      	ldr	r1, [pc, #88]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018de:	4313      	orrs	r3, r2
 80018e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0308 	and.w	r3, r3, #8
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018ee:	4b12      	ldr	r3, [pc, #72]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	691b      	ldr	r3, [r3, #16]
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	490e      	ldr	r1, [pc, #56]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001902:	f000 f821 	bl	8001948 <HAL_RCC_GetSysClockFreq>
 8001906:	4602      	mov	r2, r0
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	091b      	lsrs	r3, r3, #4
 800190e:	f003 030f 	and.w	r3, r3, #15
 8001912:	490a      	ldr	r1, [pc, #40]	@ (800193c <HAL_RCC_ClockConfig+0x1c0>)
 8001914:	5ccb      	ldrb	r3, [r1, r3]
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	4a09      	ldr	r2, [pc, #36]	@ (8001940 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <HAL_RCC_ClockConfig+0x1c8>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f912 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40023c00 	.word	0x40023c00
 8001938:	40023800 	.word	0x40023800
 800193c:	080077a8 	.word	0x080077a8
 8001940:	20000000 	.word	0x20000000
 8001944:	20000004 	.word	0x20000004

08001948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800194c:	b094      	sub	sp, #80	@ 0x50
 800194e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001950:	2300      	movs	r3, #0
 8001952:	647b      	str	r3, [r7, #68]	@ 0x44
 8001954:	2300      	movs	r3, #0
 8001956:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001958:	2300      	movs	r3, #0
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800195c:	2300      	movs	r3, #0
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001960:	4b79      	ldr	r3, [pc, #484]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 030c 	and.w	r3, r3, #12
 8001968:	2b08      	cmp	r3, #8
 800196a:	d00d      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x40>
 800196c:	2b08      	cmp	r3, #8
 800196e:	f200 80e1 	bhi.w	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_RCC_GetSysClockFreq+0x34>
 8001976:	2b04      	cmp	r3, #4
 8001978:	d003      	beq.n	8001982 <HAL_RCC_GetSysClockFreq+0x3a>
 800197a:	e0db      	b.n	8001b34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800197c:	4b73      	ldr	r3, [pc, #460]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 800197e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001980:	e0db      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001982:	4b73      	ldr	r3, [pc, #460]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0x208>)
 8001984:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001986:	e0d8      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001988:	4b6f      	ldr	r3, [pc, #444]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001990:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001992:	4b6d      	ldr	r3, [pc, #436]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d063      	beq.n	8001a66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800199e:	4b6a      	ldr	r3, [pc, #424]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	099b      	lsrs	r3, r3, #6
 80019a4:	2200      	movs	r2, #0
 80019a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80019aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80019ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80019b2:	2300      	movs	r3, #0
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80019b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80019ba:	4622      	mov	r2, r4
 80019bc:	462b      	mov	r3, r5
 80019be:	f04f 0000 	mov.w	r0, #0
 80019c2:	f04f 0100 	mov.w	r1, #0
 80019c6:	0159      	lsls	r1, r3, #5
 80019c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019cc:	0150      	lsls	r0, r2, #5
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	4621      	mov	r1, r4
 80019d4:	1a51      	subs	r1, r2, r1
 80019d6:	6139      	str	r1, [r7, #16]
 80019d8:	4629      	mov	r1, r5
 80019da:	eb63 0301 	sbc.w	r3, r3, r1
 80019de:	617b      	str	r3, [r7, #20]
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	f04f 0300 	mov.w	r3, #0
 80019e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019ec:	4659      	mov	r1, fp
 80019ee:	018b      	lsls	r3, r1, #6
 80019f0:	4651      	mov	r1, sl
 80019f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f6:	4651      	mov	r1, sl
 80019f8:	018a      	lsls	r2, r1, #6
 80019fa:	4651      	mov	r1, sl
 80019fc:	ebb2 0801 	subs.w	r8, r2, r1
 8001a00:	4659      	mov	r1, fp
 8001a02:	eb63 0901 	sbc.w	r9, r3, r1
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a1a:	4690      	mov	r8, r2
 8001a1c:	4699      	mov	r9, r3
 8001a1e:	4623      	mov	r3, r4
 8001a20:	eb18 0303 	adds.w	r3, r8, r3
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	462b      	mov	r3, r5
 8001a28:	eb49 0303 	adc.w	r3, r9, r3
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	f04f 0200 	mov.w	r2, #0
 8001a32:	f04f 0300 	mov.w	r3, #0
 8001a36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	024b      	lsls	r3, r1, #9
 8001a3e:	4621      	mov	r1, r4
 8001a40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a44:	4621      	mov	r1, r4
 8001a46:	024a      	lsls	r2, r1, #9
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a4e:	2200      	movs	r2, #0
 8001a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a58:	f7fe fc62 	bl	8000320 <__aeabi_uldivmod>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4613      	mov	r3, r2
 8001a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a64:	e058      	b.n	8001b18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a66:	4b38      	ldr	r3, [pc, #224]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	099b      	lsrs	r3, r3, #6
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	4618      	mov	r0, r3
 8001a70:	4611      	mov	r1, r2
 8001a72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a76:	623b      	str	r3, [r7, #32]
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a80:	4642      	mov	r2, r8
 8001a82:	464b      	mov	r3, r9
 8001a84:	f04f 0000 	mov.w	r0, #0
 8001a88:	f04f 0100 	mov.w	r1, #0
 8001a8c:	0159      	lsls	r1, r3, #5
 8001a8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a92:	0150      	lsls	r0, r2, #5
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	4641      	mov	r1, r8
 8001a9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a9e:	4649      	mov	r1, r9
 8001aa0:	eb63 0b01 	sbc.w	fp, r3, r1
 8001aa4:	f04f 0200 	mov.w	r2, #0
 8001aa8:	f04f 0300 	mov.w	r3, #0
 8001aac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ab0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ab4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001ab8:	ebb2 040a 	subs.w	r4, r2, sl
 8001abc:	eb63 050b 	sbc.w	r5, r3, fp
 8001ac0:	f04f 0200 	mov.w	r2, #0
 8001ac4:	f04f 0300 	mov.w	r3, #0
 8001ac8:	00eb      	lsls	r3, r5, #3
 8001aca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ace:	00e2      	lsls	r2, r4, #3
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	4643      	mov	r3, r8
 8001ad6:	18e3      	adds	r3, r4, r3
 8001ad8:	603b      	str	r3, [r7, #0]
 8001ada:	464b      	mov	r3, r9
 8001adc:	eb45 0303 	adc.w	r3, r5, r3
 8001ae0:	607b      	str	r3, [r7, #4]
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	f04f 0300 	mov.w	r3, #0
 8001aea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aee:	4629      	mov	r1, r5
 8001af0:	028b      	lsls	r3, r1, #10
 8001af2:	4621      	mov	r1, r4
 8001af4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001af8:	4621      	mov	r1, r4
 8001afa:	028a      	lsls	r2, r1, #10
 8001afc:	4610      	mov	r0, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b02:	2200      	movs	r2, #0
 8001b04:	61bb      	str	r3, [r7, #24]
 8001b06:	61fa      	str	r2, [r7, #28]
 8001b08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b0c:	f7fe fc08 	bl	8000320 <__aeabi_uldivmod>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4613      	mov	r3, r2
 8001b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	0c1b      	lsrs	r3, r3, #16
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	3301      	adds	r3, #1
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001b28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b32:	e002      	b.n	8001b3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b34:	4b05      	ldr	r3, [pc, #20]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0x204>)
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3750      	adds	r7, #80	@ 0x50
 8001b40:	46bd      	mov	sp, r7
 8001b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b46:	bf00      	nop
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	00f42400 	.word	0x00f42400
 8001b50:	007a1200 	.word	0x007a1200

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b03      	ldr	r3, [pc, #12]	@ (8001b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000

08001b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b70:	f7ff fff0 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	0a9b      	lsrs	r3, r3, #10
 8001b7c:	f003 0307 	and.w	r3, r3, #7
 8001b80:	4903      	ldr	r1, [pc, #12]	@ (8001b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b82:	5ccb      	ldrb	r3, [r1, r3]
 8001b84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	bd80      	pop	{r7, pc}
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	080077b8 	.word	0x080077b8

08001b94 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
 8001b9c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	220f      	movs	r2, #15
 8001ba2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 0203 	and.w	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001bc8:	4b09      	ldr	r3, [pc, #36]	@ (8001bf0 <HAL_RCC_GetClockConfig+0x5c>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	08db      	lsrs	r3, r3, #3
 8001bce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_RCC_GetClockConfig+0x60>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0207 	and.w	r2, r3, #7
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	601a      	str	r2, [r3, #0]
}
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	40023c00 	.word	0x40023c00

08001bf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e041      	b.n	8001c8e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f839 	bl	8001c96 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	3304      	adds	r3, #4
 8001c34:	4619      	mov	r1, r3
 8001c36:	4610      	mov	r0, r2
 8001c38:	f000 f9b2 	bl	8001fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2201      	movs	r2, #1
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2201      	movs	r2, #1
 8001c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2201      	movs	r2, #1
 8001c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2201      	movs	r2, #1
 8001c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2201      	movs	r2, #1
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c9e:	bf00      	nop
 8001ca0:	370c      	adds	r7, #12
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d001      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e044      	b.n	8001d4e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f042 0201 	orr.w	r2, r2, #1
 8001cda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_TIM_Base_Start_IT+0xb0>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d018      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cee:	d013      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8001d60 <HAL_TIM_Base_Start_IT+0xb4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d00e      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a19      	ldr	r2, [pc, #100]	@ (8001d64 <HAL_TIM_Base_Start_IT+0xb8>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d009      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a17      	ldr	r2, [pc, #92]	@ (8001d68 <HAL_TIM_Base_Start_IT+0xbc>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d004      	beq.n	8001d18 <HAL_TIM_Base_Start_IT+0x6c>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a16      	ldr	r2, [pc, #88]	@ (8001d6c <HAL_TIM_Base_Start_IT+0xc0>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d111      	bne.n	8001d3c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d010      	beq.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f042 0201 	orr.w	r2, r2, #1
 8001d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d3a:	e007      	b.n	8001d4c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3714      	adds	r7, #20
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40010000 	.word	0x40010000
 8001d60:	40000400 	.word	0x40000400
 8001d64:	40000800 	.word	0x40000800
 8001d68:	40000c00 	.word	0x40000c00
 8001d6c:	40014000 	.word	0x40014000

08001d70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0302 	and.w	r3, r3, #2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0202 	mvn.w	r2, #2
 8001da4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2201      	movs	r2, #1
 8001daa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f003 0303 	and.w	r3, r3, #3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8d2 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f8c4 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8d5 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0204 	mvn.w	r2, #4
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2202      	movs	r2, #2
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	699b      	ldr	r3, [r3, #24]
 8001dfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f8ac 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f89e 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f8af 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0208 	mvn.w	r2, #8
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2204      	movs	r2, #4
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f886 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f878 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f889 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0310 	and.w	r3, r3, #16
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0310 	and.w	r3, r3, #16
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01b      	beq.n	8001eb8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0210 	mvn.w	r2, #16
 8001e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2208      	movs	r2, #8
 8001e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d003      	beq.n	8001ea6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f860 	bl	8001f64 <HAL_TIM_IC_CaptureCallback>
 8001ea4:	e005      	b.n	8001eb2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f000 f852 	bl	8001f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f863 	bl	8001f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d00c      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f06f 0201 	mvn.w	r2, #1
 8001ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7fe fdf8 	bl	8000acc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00c      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d007      	beq.n	8001f00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001ef8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f8e6 	bl	80020cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d00c      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f834 	bl	8001f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0320 	and.w	r3, r3, #32
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00c      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d007      	beq.n	8001f48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0220 	mvn.w	r2, #32
 8001f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f000 f8b8 	bl	80020b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f48:	bf00      	nop
 8001f4a:	3710      	adds	r7, #16
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f58:	bf00      	nop
 8001f5a:	370c      	adds	r7, #12
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f94:	bf00      	nop
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a3a      	ldr	r2, [pc, #232]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d00f      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fbe:	d00b      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a37      	ldr	r2, [pc, #220]	@ (80020a0 <TIM_Base_SetConfig+0x100>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a36      	ldr	r2, [pc, #216]	@ (80020a4 <TIM_Base_SetConfig+0x104>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d003      	beq.n	8001fd8 <TIM_Base_SetConfig+0x38>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a35      	ldr	r2, [pc, #212]	@ (80020a8 <TIM_Base_SetConfig+0x108>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d108      	bne.n	8001fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a2b      	ldr	r2, [pc, #172]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d01b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff8:	d017      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	4a28      	ldr	r2, [pc, #160]	@ (80020a0 <TIM_Base_SetConfig+0x100>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d013      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4a27      	ldr	r2, [pc, #156]	@ (80020a4 <TIM_Base_SetConfig+0x104>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00f      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	4a26      	ldr	r2, [pc, #152]	@ (80020a8 <TIM_Base_SetConfig+0x108>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d00b      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a25      	ldr	r2, [pc, #148]	@ (80020ac <TIM_Base_SetConfig+0x10c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d007      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	4a24      	ldr	r2, [pc, #144]	@ (80020b0 <TIM_Base_SetConfig+0x110>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d003      	beq.n	800202a <TIM_Base_SetConfig+0x8a>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <TIM_Base_SetConfig+0x114>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d108      	bne.n	800203c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	68fa      	ldr	r2, [r7, #12]
 8002038:	4313      	orrs	r3, r2
 800203a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	4313      	orrs	r3, r2
 8002048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a0e      	ldr	r2, [pc, #56]	@ (800209c <TIM_Base_SetConfig+0xfc>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d103      	bne.n	8002070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	691a      	ldr	r2, [r3, #16]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	2b01      	cmp	r3, #1
 8002080:	d105      	bne.n	800208e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f023 0201 	bic.w	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
  }
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	40010000 	.word	0x40010000
 80020a0:	40000400 	.word	0x40000400
 80020a4:	40000800 	.word	0x40000800
 80020a8:	40000c00 	.word	0x40000c00
 80020ac:	40014000 	.word	0x40014000
 80020b0:	40014400 	.word	0x40014400
 80020b4:	40014800 	.word	0x40014800

080020b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c0:	bf00      	nop
 80020c2:	370c      	adds	r7, #12
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d4:	bf00      	nop
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f103 0208 	add.w	r2, r3, #8
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295
 80020f8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f103 0208 	add.w	r2, r3, #8
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f103 0208 	add.w	r2, r3, #8
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8002114:	f240 1019 	movw	r0, #281	@ 0x119
 8002118:	f004 faa4 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8002132:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8002136:	f004 fa95 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d103      	bne.n	8002162 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	e00c      	b.n	800217c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	3308      	adds	r3, #8
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	e002      	b.n	8002170 <vListInsert+0x2e>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	429a      	cmp	r2, r3
 800217a:	d2f6      	bcs.n	800216a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	683a      	ldr	r2, [r7, #0]
 800218a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 80021a8:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80021ac:	f004 fa5a 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 80021b0:	bf00      	nop
 80021b2:	3710      	adds	r7, #16
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6892      	ldr	r2, [r2, #8]
 80021ce:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	6852      	ldr	r2, [r2, #4]
 80021d8:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d103      	bne.n	80021ec <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2200      	movs	r2, #0
 80021f0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	1e5a      	subs	r2, r3, #1
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4619      	mov	r1, r3
 8002202:	f240 101d 	movw	r0, #285	@ 0x11d
 8002206:	f004 fa69 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3710      	adds	r7, #16
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b086      	sub	sp, #24
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
 800221e:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002220:	2301      	movs	r3, #1
 8002222:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10b      	bne.n	8002246 <xQueueGenericReset+0x30>
    __asm volatile
 800222e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002232:	f383 8811 	msr	BASEPRI, r3
 8002236:	f3bf 8f6f 	isb	sy
 800223a:	f3bf 8f4f 	dsb	sy
 800223e:	60fb      	str	r3, [r7, #12]
}
 8002240:	bf00      	nop
 8002242:	bf00      	nop
 8002244:	e7fd      	b.n	8002242 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d052      	beq.n	80022f2 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002250:	2b00      	cmp	r3, #0
 8002252:	d04e      	beq.n	80022f2 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225c:	2100      	movs	r1, #0
 800225e:	fba3 2302 	umull	r2, r3, r3, r2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d000      	beq.n	8002268 <xQueueGenericReset+0x52>
 8002266:	2101      	movs	r1, #1
 8002268:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 800226a:	2b00      	cmp	r3, #0
 800226c:	d141      	bne.n	80022f2 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 800226e:	f002 f8c1 	bl	80043f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800227e:	fb01 f303 	mul.w	r3, r1, r3
 8002282:	441a      	add	r2, r3
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2200      	movs	r2, #0
 800228c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800229e:	3b01      	subs	r3, #1
 80022a0:	6939      	ldr	r1, [r7, #16]
 80022a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80022a4:	fb01 f303 	mul.w	r3, r1, r3
 80022a8:	441a      	add	r2, r3
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	22ff      	movs	r2, #255	@ 0xff
 80022b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	22ff      	movs	r2, #255	@ 0xff
 80022ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00f      	beq.n	80022ec <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	3310      	adds	r3, #16
 80022d0:	4618      	mov	r0, r3
 80022d2:	f001 f8bb 	bl	800344c <xTaskRemoveFromEventList>
 80022d6:	e009      	b.n	80022ec <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	3310      	adds	r3, #16
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff feff 	bl	80020e0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	3324      	adds	r3, #36	@ 0x24
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fefa 	bl	80020e0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022ec:	f002 f8b4 	bl	8004458 <vPortExitCritical>
 80022f0:	e001      	b.n	80022f6 <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d10b      	bne.n	8002314 <xQueueGenericReset+0xfe>
    __asm volatile
 80022fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002300:	f383 8811 	msr	BASEPRI, r3
 8002304:	f3bf 8f6f 	isb	sy
 8002308:	f3bf 8f4f 	dsb	sy
 800230c:	60bb      	str	r3, [r7, #8]
}
 800230e:	bf00      	nop
 8002310:	bf00      	nop
 8002312:	e7fd      	b.n	8002310 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	4619      	mov	r1, r3
 8002318:	2096      	movs	r0, #150	@ 0x96
 800231a:	f004 f9df 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800231e:	697b      	ldr	r3, [r7, #20]
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8002328:	b580      	push	{r7, lr}
 800232a:	b08c      	sub	sp, #48	@ 0x30
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8002336:	2300      	movs	r3, #0
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	623b      	str	r3, [r7, #32]
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d031      	beq.n	80023c2 <xQueueGenericCreateStatic+0x9a>
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02e      	beq.n	80023c2 <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d028      	beq.n	80023c2 <xQueueGenericCreateStatic+0x9a>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d122      	bne.n	80023c2 <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 800237c:	2350      	movs	r3, #80	@ 0x50
 800237e:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2b50      	cmp	r3, #80	@ 0x50
 8002384:	d00b      	beq.n	800239e <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8002386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800238a:	f383 8811 	msr	BASEPRI, r3
 800238e:	f3bf 8f6f 	isb	sy
 8002392:	f3bf 8f4f 	dsb	sy
 8002396:	61fb      	str	r3, [r7, #28]
}
 8002398:	bf00      	nop
 800239a:	bf00      	nop
 800239c:	e7fd      	b.n	800239a <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800239e:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80023a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80023ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80023b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	4613      	mov	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	68b9      	ldr	r1, [r7, #8]
 80023ba:	68f8      	ldr	r0, [r7, #12]
 80023bc:	f000 f81e 	bl	80023fc <prvInitialiseNewQueue>
 80023c0:	e00e      	b.n	80023e0 <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 80023c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023cc:	f383 8811 	msr	BASEPRI, r3
 80023d0:	f3bf 8f6f 	isb	sy
 80023d4:	f3bf 8f4f 	dsb	sy
 80023d8:	61bb      	str	r3, [r7, #24]
}
 80023da:	bf00      	nop
 80023dc:	bf00      	nop
 80023de:	e7fd      	b.n	80023dc <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	4618      	mov	r0, r3
 80023e4:	f004 fb14 	bl	8006a10 <SEGGER_SYSVIEW_ShrinkId>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4619      	mov	r1, r3
 80023ec:	2097      	movs	r0, #151	@ 0x97
 80023ee:	f004 f975 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80023f4:	4618      	mov	r0, r3
 80023f6:	3728      	adds	r7, #40	@ 0x28
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
 8002408:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d103      	bne.n	8002418 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	e002      	b.n	800241e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	68fa      	ldr	r2, [r7, #12]
 8002422:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800242a:	2101      	movs	r1, #1
 800242c:	69b8      	ldr	r0, [r7, #24]
 800242e:	f7ff fef2 	bl	8002216 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	78fa      	ldrb	r2, [r7, #3]
 8002436:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800243a:	bf00      	nop
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	@ 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10b      	bne.n	8002476 <xQueueReceive+0x32>
    __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	623b      	str	r3, [r7, #32]
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d103      	bne.n	8002484 <xQueueReceive+0x40>
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <xQueueReceive+0x44>
 8002484:	2301      	movs	r3, #1
 8002486:	e000      	b.n	800248a <xQueueReceive+0x46>
 8002488:	2300      	movs	r3, #0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d10b      	bne.n	80024a6 <xQueueReceive+0x62>
    __asm volatile
 800248e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002492:	f383 8811 	msr	BASEPRI, r3
 8002496:	f3bf 8f6f 	isb	sy
 800249a:	f3bf 8f4f 	dsb	sy
 800249e:	61fb      	str	r3, [r7, #28]
}
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	e7fd      	b.n	80024a2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a6:	f001 fa0d 	bl	80038c4 <xTaskGetSchedulerState>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d102      	bne.n	80024b6 <xQueueReceive+0x72>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d101      	bne.n	80024ba <xQueueReceive+0x76>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <xQueueReceive+0x78>
 80024ba:	2300      	movs	r3, #0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10b      	bne.n	80024d8 <xQueueReceive+0x94>
    __asm volatile
 80024c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024c4:	f383 8811 	msr	BASEPRI, r3
 80024c8:	f3bf 8f6f 	isb	sy
 80024cc:	f3bf 8f4f 	dsb	sy
 80024d0:	61bb      	str	r3, [r7, #24]
}
 80024d2:	bf00      	nop
 80024d4:	bf00      	nop
 80024d6:	e7fd      	b.n	80024d4 <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80024d8:	f001 ff8c 	bl	80043f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d018      	beq.n	800251a <xQueueReceive+0xd6>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024ec:	f000 f88e 	bl	800260c <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	1e5a      	subs	r2, r3, #1
 80024f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f6:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fa:	691b      	ldr	r3, [r3, #16]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d004      	beq.n	800250a <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002502:	3310      	adds	r3, #16
 8002504:	4618      	mov	r0, r3
 8002506:	f000 ffa1 	bl	800344c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800250a:	f001 ffa5 	bl	8004458 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 800250e:	2101      	movs	r1, #1
 8002510:	20a4      	movs	r0, #164	@ 0xa4
 8002512:	f004 f8e3 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 8002516:	2301      	movs	r3, #1
 8002518:	e071      	b.n	80025fe <xQueueReceive+0x1ba>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d107      	bne.n	8002530 <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002520:	f001 ff9a 	bl	8004458 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8002524:	2100      	movs	r1, #0
 8002526:	20a4      	movs	r0, #164	@ 0xa4
 8002528:	f004 f8d8 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800252c:	2300      	movs	r3, #0
 800252e:	e066      	b.n	80025fe <xQueueReceive+0x1ba>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f001 f866 	bl	800360c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002544:	f001 ff88 	bl	8004458 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002548:	f000 fc66 	bl	8002e18 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800254c:	f001 ff52 	bl	80043f4 <vPortEnterCritical>
 8002550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <xQueueReceive+0x122>
 800255e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d103      	bne.n	800257c <xQueueReceive+0x138>
 8002574:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800257c:	f001 ff6c 	bl	8004458 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002580:	1d3a      	adds	r2, r7, #4
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f857 	bl	800363c <xTaskCheckForTimeOut>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d123      	bne.n	80025dc <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002594:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002596:	f000 f8b1 	bl	80026fc <prvIsQueueEmpty>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	3324      	adds	r3, #36	@ 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fedd 	bl	8003368 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80025ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025b0:	f000 f852 	bl	8002658 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80025b4:	f000 fc3e 	bl	8002e34 <xTaskResumeAll>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d18c      	bne.n	80024d8 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 80025be:	4b12      	ldr	r3, [pc, #72]	@ (8002608 <xQueueReceive+0x1c4>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	e783      	b.n	80024d8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025d2:	f000 f841 	bl	8002658 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025d6:	f000 fc2d 	bl	8002e34 <xTaskResumeAll>
 80025da:	e77d      	b.n	80024d8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025de:	f000 f83b 	bl	8002658 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025e2:	f000 fc27 	bl	8002e34 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e8:	f000 f888 	bl	80026fc <prvIsQueueEmpty>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f43f af72 	beq.w	80024d8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80025f4:	2100      	movs	r1, #0
 80025f6:	20a4      	movs	r0, #164	@ 0xa4
 80025f8:	f004 f870 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80025fc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3730      	adds	r7, #48	@ 0x30
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261a:	2b00      	cmp	r3, #0
 800261c:	d018      	beq.n	8002650 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68da      	ldr	r2, [r3, #12]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002626:	441a      	add	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68da      	ldr	r2, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	429a      	cmp	r2, r3
 8002636:	d303      	bcc.n	8002640 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	68d9      	ldr	r1, [r3, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002648:	461a      	mov	r2, r3
 800264a:	6838      	ldr	r0, [r7, #0]
 800264c:	f004 fbb8 	bl	8006dc0 <memcpy>
    }
}
 8002650:	bf00      	nop
 8002652:	3708      	adds	r7, #8
 8002654:	46bd      	mov	sp, r7
 8002656:	bd80      	pop	{r7, pc}

08002658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002660:	f001 fec8 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800266a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800266c:	e011      	b.n	8002692 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002672:	2b00      	cmp	r3, #0
 8002674:	d012      	beq.n	800269c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3324      	adds	r3, #36	@ 0x24
 800267a:	4618      	mov	r0, r3
 800267c:	f000 fee6 	bl	800344c <xTaskRemoveFromEventList>
 8002680:	4603      	mov	r3, r0
 8002682:	2b00      	cmp	r3, #0
 8002684:	d001      	beq.n	800268a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002686:	f001 f845 	bl	8003714 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
 800268c:	3b01      	subs	r3, #1
 800268e:	b2db      	uxtb	r3, r3
 8002690:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002696:	2b00      	cmp	r3, #0
 8002698:	dce9      	bgt.n	800266e <prvUnlockQueue+0x16>
 800269a:	e000      	b.n	800269e <prvUnlockQueue+0x46>
                    break;
 800269c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	22ff      	movs	r2, #255	@ 0xff
 80026a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80026a6:	f001 fed7 	bl	8004458 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80026aa:	f001 fea3 	bl	80043f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026b4:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026b6:	e011      	b.n	80026dc <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d012      	beq.n	80026e6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3310      	adds	r3, #16
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 fec1 	bl	800344c <xTaskRemoveFromEventList>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026d0:	f001 f820 	bl	8003714 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026d4:	7bbb      	ldrb	r3, [r7, #14]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b2db      	uxtb	r3, r3
 80026da:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	dce9      	bgt.n	80026b8 <prvUnlockQueue+0x60>
 80026e4:	e000      	b.n	80026e8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026e6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	22ff      	movs	r2, #255	@ 0xff
 80026ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026f0:	f001 feb2 	bl	8004458 <vPortExitCritical>
}
 80026f4:	bf00      	nop
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002704:	f001 fe76 	bl	80043f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800270c:	2b00      	cmp	r3, #0
 800270e:	d102      	bne.n	8002716 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002710:	2301      	movs	r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	e001      	b.n	800271a <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 800271a:	f001 fe9d 	bl	8004458 <vPortExitCritical>

    return xReturn;
 800271e:	68fb      	ldr	r3, [r7, #12]
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10b      	bne.n	8002754 <vQueueAddToRegistry+0x2c>
    __asm volatile
 800273c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002740:	f383 8811 	msr	BASEPRI, r3
 8002744:	f3bf 8f6f 	isb	sy
 8002748:	f3bf 8f4f 	dsb	sy
 800274c:	60fb      	str	r3, [r7, #12]
}
 800274e:	bf00      	nop
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d024      	beq.n	80027a4 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
 800275e:	e01e      	b.n	800279e <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002760:	4a18      	ldr	r2, [pc, #96]	@ (80027c4 <vQueueAddToRegistry+0x9c>)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	429a      	cmp	r2, r3
 800276e:	d105      	bne.n	800277c <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4a13      	ldr	r2, [pc, #76]	@ (80027c4 <vQueueAddToRegistry+0x9c>)
 8002776:	4413      	add	r3, r2
 8002778:	613b      	str	r3, [r7, #16]
                    break;
 800277a:	e013      	b.n	80027a4 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d10a      	bne.n	8002798 <vQueueAddToRegistry+0x70>
 8002782:	4a10      	ldr	r2, [pc, #64]	@ (80027c4 <vQueueAddToRegistry+0x9c>)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d104      	bne.n	8002798 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4a0c      	ldr	r2, [pc, #48]	@ (80027c4 <vQueueAddToRegistry+0x9c>)
 8002794:	4413      	add	r3, r2
 8002796:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	3301      	adds	r3, #1
 800279c:	617b      	str	r3, [r7, #20]
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	2b07      	cmp	r3, #7
 80027a2:	d9dd      	bls.n	8002760 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 80027b6:	20b6      	movs	r0, #182	@ 0xb6
 80027b8:	f003 ff54 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	200000cc 	.word	0x200000cc

080027c8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b086      	sub	sp, #24
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027d8:	f001 fe0c 	bl	80043f4 <vPortEnterCritical>
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027e2:	b25b      	sxtb	r3, r3
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d103      	bne.n	80027f2 <vQueueWaitForMessageRestricted+0x2a>
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f8:	b25b      	sxtb	r3, r3
 80027fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fe:	d103      	bne.n	8002808 <vQueueWaitForMessageRestricted+0x40>
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002808:	f001 fe26 	bl	8004458 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002810:	2b00      	cmp	r3, #0
 8002812:	d106      	bne.n	8002822 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3324      	adds	r3, #36	@ 0x24
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	68b9      	ldr	r1, [r7, #8]
 800281c:	4618      	mov	r0, r3
 800281e:	f000 fdcb 	bl	80033b8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002822:	6978      	ldr	r0, [r7, #20]
 8002824:	f7ff ff18 	bl	8002658 <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8002828:	20b9      	movs	r0, #185	@ 0xb9
 800282a:	f003 ff1b 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800282e:	bf00      	nop
 8002830:	3718      	adds	r7, #24
 8002832:	46bd      	mov	sp, r7
 8002834:	bd80      	pop	{r7, pc}

08002836 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8002836:	b580      	push	{r7, lr}
 8002838:	b08e      	sub	sp, #56	@ 0x38
 800283a:	af04      	add	r7, sp, #16
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	607a      	str	r2, [r7, #4]
 8002842:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002844:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10b      	bne.n	8002862 <prvCreateStaticTask+0x2c>
    __asm volatile
 800284a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284e:	f383 8811 	msr	BASEPRI, r3
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	f3bf 8f4f 	dsb	sy
 800285a:	623b      	str	r3, [r7, #32]
}
 800285c:	bf00      	nop
 800285e:	bf00      	nop
 8002860:	e7fd      	b.n	800285e <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8002862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <prvCreateStaticTask+0x4a>
    __asm volatile
 8002868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286c:	f383 8811 	msr	BASEPRI, r3
 8002870:	f3bf 8f6f 	isb	sy
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	61fb      	str	r3, [r7, #28]
}
 800287a:	bf00      	nop
 800287c:	bf00      	nop
 800287e:	e7fd      	b.n	800287c <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002880:	2358      	movs	r3, #88	@ 0x58
 8002882:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b58      	cmp	r3, #88	@ 0x58
 8002888:	d00b      	beq.n	80028a2 <prvCreateStaticTask+0x6c>
    __asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	61bb      	str	r3, [r7, #24]
}
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	e7fd      	b.n	800289e <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 80028a2:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d01f      	beq.n	80028ea <prvCreateStaticTask+0xb4>
 80028aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01c      	beq.n	80028ea <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 80028b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b2:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80028b4:	2258      	movs	r2, #88	@ 0x58
 80028b6:	2100      	movs	r1, #0
 80028b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80028ba:	f004 fa53 	bl	8006d64 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80028c2:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80028c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c6:	2202      	movs	r2, #2
 80028c8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80028cc:	2300      	movs	r3, #0
 80028ce:	9303      	str	r3, [sp, #12]
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	9302      	str	r3, [sp, #8]
 80028d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028d6:	9301      	str	r3, [sp, #4]
 80028d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	68b9      	ldr	r1, [r7, #8]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	f000 f89d 	bl	8002a22 <prvInitialiseNewTask>
 80028e8:	e001      	b.n	80028ee <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 80028ea:	2300      	movs	r3, #0
 80028ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80028f0:	4618      	mov	r0, r3
 80028f2:	3728      	adds	r7, #40	@ 0x28
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b08a      	sub	sp, #40	@ 0x28
 80028fc:	af04      	add	r7, sp, #16
 80028fe:	60f8      	str	r0, [r7, #12]
 8002900:	60b9      	str	r1, [r7, #8]
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8002906:	2300      	movs	r3, #0
 8002908:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800290a:	f107 0310 	add.w	r3, r7, #16
 800290e:	9303      	str	r3, [sp, #12]
 8002910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002912:	9302      	str	r3, [sp, #8]
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff87 	bl	8002836 <prvCreateStaticTask>
 8002928:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002930:	6978      	ldr	r0, [r7, #20]
 8002932:	f000 f907 	bl	8002b44 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	4618      	mov	r0, r3
 800293a:	f004 f869 	bl	8006a10 <SEGGER_SYSVIEW_ShrinkId>
 800293e:	4603      	mov	r3, r0
 8002940:	4619      	mov	r1, r3
 8002942:	20bf      	movs	r0, #191	@ 0xbf
 8002944:	f003 feca 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002948:	693b      	ldr	r3, [r7, #16]
    }
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002952:	b580      	push	{r7, lr}
 8002954:	b08a      	sub	sp, #40	@ 0x28
 8002956:	af04      	add	r7, sp, #16
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4618      	mov	r0, r3
 8002966:	f001 fe73 	bl	8004650 <pvPortMalloc>
 800296a:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d013      	beq.n	800299a <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002972:	2058      	movs	r0, #88	@ 0x58
 8002974:	f001 fe6c 	bl	8004650 <pvPortMalloc>
 8002978:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002980:	2258      	movs	r2, #88	@ 0x58
 8002982:	2100      	movs	r1, #0
 8002984:	6978      	ldr	r0, [r7, #20]
 8002986:	f004 f9ed 	bl	8006d64 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002990:	e005      	b.n	800299e <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002992:	6938      	ldr	r0, [r7, #16]
 8002994:	f001 ff8e 	bl	80048b4 <vPortFree>
 8002998:	e001      	b.n	800299e <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d011      	beq.n	80029c8 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ac:	2300      	movs	r3, #0
 80029ae:	9303      	str	r3, [sp, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	9302      	str	r3, [sp, #8]
 80029b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b6:	9301      	str	r3, [sp, #4]
 80029b8:	6a3b      	ldr	r3, [r7, #32]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	68b9      	ldr	r1, [r7, #8]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 f82d 	bl	8002a22 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 80029c8:	697b      	ldr	r3, [r7, #20]
    }
 80029ca:	4618      	mov	r0, r3
 80029cc:	3718      	adds	r7, #24
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b088      	sub	sp, #32
 80029d6:	af02      	add	r7, sp, #8
 80029d8:	60f8      	str	r0, [r7, #12]
 80029da:	60b9      	str	r1, [r7, #8]
 80029dc:	607a      	str	r2, [r7, #4]
 80029de:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	6a3b      	ldr	r3, [r7, #32]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f7ff ffaf 	bl	8002952 <prvCreateTask>
 80029f4:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d005      	beq.n	8002a08 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80029fc:	6938      	ldr	r0, [r7, #16]
 80029fe:	f000 f8a1 	bl	8002b44 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a02:	2301      	movs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e002      	b.n	8002a0e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a08:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	4619      	mov	r1, r3
 8002a12:	20c2      	movs	r0, #194	@ 0xc2
 8002a14:	f003 fe62 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002a18:	697b      	ldr	r3, [r7, #20]
    }
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3718      	adds	r7, #24
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a22:	b580      	push	{r7, lr}
 8002a24:	b088      	sub	sp, #32
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a32:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	461a      	mov	r2, r3
 8002a3a:	21a5      	movs	r1, #165	@ 0xa5
 8002a3c:	f004 f992 	bl	8006d64 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002a40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a68:	f383 8811 	msr	BASEPRI, r3
 8002a6c:	f3bf 8f6f 	isb	sy
 8002a70:	f3bf 8f4f 	dsb	sy
 8002a74:	617b      	str	r3, [r7, #20]
}
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	e7fd      	b.n	8002a78 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01e      	beq.n	8002ac0 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e012      	b.n	8002aae <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7819      	ldrb	r1, [r3, #0]
 8002a90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	3334      	adds	r3, #52	@ 0x34
 8002a98:	460a      	mov	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b09      	cmp	r3, #9
 8002ab2:	d9e9      	bls.n	8002a88 <prvInitialiseNewTask+0x66>
 8002ab4:	e000      	b.n	8002ab8 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ab6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	d90b      	bls.n	8002ade <prvInitialiseNewTask+0xbc>
    __asm volatile
 8002ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aca:	f383 8811 	msr	BASEPRI, r3
 8002ace:	f3bf 8f6f 	isb	sy
 8002ad2:	f3bf 8f4f 	dsb	sy
 8002ad6:	613b      	str	r3, [r7, #16]
}
 8002ad8:	bf00      	nop
 8002ada:	bf00      	nop
 8002adc:	e7fd      	b.n	8002ada <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d901      	bls.n	8002ae8 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ae4:	2304      	movs	r3, #4
 8002ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002af2:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002af4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af6:	3304      	adds	r3, #4
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff fb13 	bl	8002124 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b00:	3318      	adds	r3, #24
 8002b02:	4618      	mov	r0, r3
 8002b04:	f7ff fb0e 	bl	8002124 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0c:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8002b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b10:	f1c3 0205 	rsb	r2, r3, #5
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b1c:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	69b8      	ldr	r0, [r7, #24]
 8002b24:	f001 fa6a 	bl	8003ffc <pxPortInitialiseStack>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2c:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002b2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b38:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b3a:	bf00      	nop
 8002b3c:	3720      	adds	r7, #32
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
	...

08002b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002b44:	b5b0      	push	{r4, r5, r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af02      	add	r7, sp, #8
 8002b4a:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002b4c:	f001 fc52 	bl	80043f4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002b50:	4b48      	ldr	r3, [pc, #288]	@ (8002c74 <prvAddNewTaskToReadyList+0x130>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	3301      	adds	r3, #1
 8002b56:	4a47      	ldr	r2, [pc, #284]	@ (8002c74 <prvAddNewTaskToReadyList+0x130>)
 8002b58:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002b5a:	4b47      	ldr	r3, [pc, #284]	@ (8002c78 <prvAddNewTaskToReadyList+0x134>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d109      	bne.n	8002b76 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002b62:	4a45      	ldr	r2, [pc, #276]	@ (8002c78 <prvAddNewTaskToReadyList+0x134>)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b68:	4b42      	ldr	r3, [pc, #264]	@ (8002c74 <prvAddNewTaskToReadyList+0x130>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d110      	bne.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002b70:	f000 fdee 	bl	8003750 <prvInitialiseTaskLists>
 8002b74:	e00d      	b.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8002b76:	4b41      	ldr	r3, [pc, #260]	@ (8002c7c <prvAddNewTaskToReadyList+0x138>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c78 <prvAddNewTaskToReadyList+0x134>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d802      	bhi.n	8002b92 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c78 <prvAddNewTaskToReadyList+0x134>)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002b92:	4b3b      	ldr	r3, [pc, #236]	@ (8002c80 <prvAddNewTaskToReadyList+0x13c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	3301      	adds	r3, #1
 8002b98:	4a39      	ldr	r2, [pc, #228]	@ (8002c80 <prvAddNewTaskToReadyList+0x13c>)
 8002b9a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b9c:	4b38      	ldr	r3, [pc, #224]	@ (8002c80 <prvAddNewTaskToReadyList+0x13c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d016      	beq.n	8002bd8 <prvAddNewTaskToReadyList+0x94>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fe09 	bl	80067c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	461c      	mov	r4, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	1ae3      	subs	r3, r4, r3
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	f002 f86c 	bl	8004cb0 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f003 fe76 	bl	80068cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be4:	2201      	movs	r2, #1
 8002be6:	409a      	lsls	r2, r3
 8002be8:	4b26      	ldr	r3, [pc, #152]	@ (8002c84 <prvAddNewTaskToReadyList+0x140>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	4a25      	ldr	r2, [pc, #148]	@ (8002c84 <prvAddNewTaskToReadyList+0x140>)
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf6:	4924      	ldr	r1, [pc, #144]	@ (8002c88 <prvAddNewTaskToReadyList+0x144>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3304      	adds	r3, #4
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	60fb      	str	r3, [r7, #12]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	609a      	str	r2, [r3, #8]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	3204      	adds	r2, #4
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	1d1a      	adds	r2, r3, #4
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4a14      	ldr	r2, [pc, #80]	@ (8002c88 <prvAddNewTaskToReadyList+0x144>)
 8002c36:	441a      	add	r2, r3
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	615a      	str	r2, [r3, #20]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c40:	4911      	ldr	r1, [pc, #68]	@ (8002c88 <prvAddNewTaskToReadyList+0x144>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c52:	1c59      	adds	r1, r3, #1
 8002c54:	480c      	ldr	r0, [pc, #48]	@ (8002c88 <prvAddNewTaskToReadyList+0x144>)
 8002c56:	4613      	mov	r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002c62:	f001 fbf9 	bl	8004458 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8002c66:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <prvAddNewTaskToReadyList+0x138>)
 8002c68:	681b      	ldr	r3, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002c6a:	bf00      	nop
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bdb0      	pop	{r4, r5, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	200001e4 	.word	0x200001e4
 8002c78:	2000010c 	.word	0x2000010c
 8002c7c:	200001f0 	.word	0x200001f0
 8002c80:	20000200 	.word	0x20000200
 8002c84:	200001ec 	.word	0x200001ec
 8002c88:	20000110 	.word	0x20000110

08002c8c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	@ 0x38
 8002c90:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002c92:	2301      	movs	r3, #1
 8002c94:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002c96:	2300      	movs	r3, #0
 8002c98:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	e013      	b.n	8002cc8 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <prvCreateIdleTasks+0xc4>)
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	7819      	ldrb	r1, [r3, #0]
 8002ca8:	f107 020c 	add.w	r2, r7, #12
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	4413      	add	r3, r2
 8002cb0:	460a      	mov	r2, r1
 8002cb2:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002cb4:	f107 020c 	add.w	r2, r7, #12
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	4413      	add	r3, r2
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d006      	beq.n	8002cd0 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b09      	cmp	r3, #9
 8002ccc:	dde8      	ble.n	8002ca0 <prvCreateIdleTasks+0x14>
 8002cce:	e000      	b.n	8002cd2 <prvCreateIdleTasks+0x46>
        {
            break;
 8002cd0:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	e030      	b.n	8002d3a <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002cd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002d54 <prvCreateIdleTasks+0xc8>)
 8002cda:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002ce4:	463a      	mov	r2, r7
 8002ce6:	1d39      	adds	r1, r7, #4
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fe99 	bl	8003a24 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002cf2:	6838      	ldr	r0, [r7, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f107 010c 	add.w	r1, r7, #12
 8002cfc:	9202      	str	r2, [sp, #8]
 8002cfe:	9301      	str	r3, [sp, #4]
 8002d00:	2300      	movs	r3, #0
 8002d02:	9300      	str	r3, [sp, #0]
 8002d04:	2300      	movs	r3, #0
 8002d06:	4602      	mov	r2, r0
 8002d08:	69b8      	ldr	r0, [r7, #24]
 8002d0a:	f7ff fdf5 	bl	80028f8 <xTaskCreateStatic>
 8002d0e:	4602      	mov	r2, r0
 8002d10:	4911      	ldr	r1, [pc, #68]	@ (8002d58 <prvCreateIdleTasks+0xcc>)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002d18:	4a0f      	ldr	r2, [pc, #60]	@ (8002d58 <prvCreateIdleTasks+0xcc>)
 8002d1a:	6a3b      	ldr	r3, [r7, #32]
 8002d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8002d24:	2301      	movs	r3, #1
 8002d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d28:	e001      	b.n	8002d2e <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002d34:	6a3b      	ldr	r3, [r7, #32]
 8002d36:	3301      	adds	r3, #1
 8002d38:	623b      	str	r3, [r7, #32]
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	ddcb      	ble.n	8002cd8 <prvCreateIdleTasks+0x4c>
 8002d40:	e000      	b.n	8002d44 <prvCreateIdleTasks+0xb8>
        {
            break;
 8002d42:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3728      	adds	r7, #40	@ 0x28
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	080076d0 	.word	0x080076d0
 8002d54:	0800372d 	.word	0x0800372d
 8002d58:	20000208 	.word	0x20000208

08002d5c <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002d62:	f7ff ff93 	bl	8002c8c <prvCreateIdleTasks>
 8002d66:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d102      	bne.n	8002d74 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 8002d6e:	f000 fe8d 	bl	8003a8c <xTimerCreateTimerTask>
 8002d72:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d129      	bne.n	8002dce <vTaskStartScheduler+0x72>
    __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	60bb      	str	r3, [r7, #8]
}
 8002d8c:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8002e00 <vTaskStartScheduler+0xa4>)
 8002d90:	f04f 32ff 	mov.w	r2, #4294967295
 8002d94:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002d96:	4b1b      	ldr	r3, [pc, #108]	@ (8002e04 <vTaskStartScheduler+0xa8>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <vTaskStartScheduler+0xac>)
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <vTaskStartScheduler+0xb0>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3334      	adds	r3, #52	@ 0x34
 8002da8:	2205      	movs	r2, #5
 8002daa:	4919      	ldr	r1, [pc, #100]	@ (8002e10 <vTaskStartScheduler+0xb4>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 ffc9 	bl	8006d44 <memcmp>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <vTaskStartScheduler+0x68>
 8002db8:	4b14      	ldr	r3, [pc, #80]	@ (8002e0c <vTaskStartScheduler+0xb0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f003 fd43 	bl	8006848 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002dc2:	e001      	b.n	8002dc8 <vTaskStartScheduler+0x6c>
 8002dc4:	f003 fce2 	bl	800678c <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002dc8:	f001 f9a4 	bl	8004114 <xPortStartScheduler>
 8002dcc:	e00f      	b.n	8002dee <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd4:	d10b      	bne.n	8002dee <vTaskStartScheduler+0x92>
    __asm volatile
 8002dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dda:	f383 8811 	msr	BASEPRI, r3
 8002dde:	f3bf 8f6f 	isb	sy
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	607b      	str	r3, [r7, #4]
}
 8002de8:	bf00      	nop
 8002dea:	bf00      	nop
 8002dec:	e7fd      	b.n	8002dea <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002dee:	4b09      	ldr	r3, [pc, #36]	@ (8002e14 <vTaskStartScheduler+0xb8>)
 8002df0:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002df2:	20cd      	movs	r0, #205	@ 0xcd
 8002df4:	f003 fc36 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002df8:	bf00      	nop
 8002dfa:	3710      	adds	r7, #16
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	bd80      	pop	{r7, pc}
 8002e00:	20000204 	.word	0x20000204
 8002e04:	200001f0 	.word	0x200001f0
 8002e08:	200001e8 	.word	0x200001e8
 8002e0c:	2000010c 	.word	0x2000010c
 8002e10:	080076d0 	.word	0x080076d0
 8002e14:	2000000c 	.word	0x2000000c

08002e18 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002e1c:	4b04      	ldr	r3, [pc, #16]	@ (8002e30 <vTaskSuspendAll+0x18>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	3301      	adds	r3, #1
 8002e22:	4a03      	ldr	r2, [pc, #12]	@ (8002e30 <vTaskSuspendAll+0x18>)
 8002e24:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002e26:	20cf      	movs	r0, #207	@ 0xcf
 8002e28:	f003 fc1c 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002e2c:	bf00      	nop
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	2000020c 	.word	0x2000020c

08002e34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002e42:	f001 fad7 	bl	80043f4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002e46:	2300      	movs	r3, #0
 8002e48:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002e4a:	4b73      	ldr	r3, [pc, #460]	@ (8003018 <xTaskResumeAll+0x1e4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10b      	bne.n	8002e6a <xTaskResumeAll+0x36>
    __asm volatile
 8002e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	603b      	str	r3, [r7, #0]
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	e7fd      	b.n	8002e66 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002e6a:	4b6b      	ldr	r3, [pc, #428]	@ (8003018 <xTaskResumeAll+0x1e4>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	4a69      	ldr	r2, [pc, #420]	@ (8003018 <xTaskResumeAll+0x1e4>)
 8002e72:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e74:	4b68      	ldr	r3, [pc, #416]	@ (8003018 <xTaskResumeAll+0x1e4>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f040 80c0 	bne.w	8002ffe <xTaskResumeAll+0x1ca>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002e7e:	4b67      	ldr	r3, [pc, #412]	@ (800301c <xTaskResumeAll+0x1e8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 80bb 	beq.w	8002ffe <xTaskResumeAll+0x1ca>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e88:	e092      	b.n	8002fb0 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002e8a:	4b65      	ldr	r3, [pc, #404]	@ (8003020 <xTaskResumeAll+0x1ec>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e96:	60fb      	str	r3, [r7, #12]
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	69db      	ldr	r3, [r3, #28]
 8002e9c:	69fa      	ldr	r2, [r7, #28]
 8002e9e:	6a12      	ldr	r2, [r2, #32]
 8002ea0:	609a      	str	r2, [r3, #8]
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	69d2      	ldr	r2, [r2, #28]
 8002eaa:	605a      	str	r2, [r3, #4]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685a      	ldr	r2, [r3, #4]
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	3318      	adds	r3, #24
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d103      	bne.n	8002ec0 <xTaskResumeAll+0x8c>
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	6a1a      	ldr	r2, [r3, #32]
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	1e5a      	subs	r2, r3, #1
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	69fa      	ldr	r2, [r7, #28]
 8002edc:	68d2      	ldr	r2, [r2, #12]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	69fa      	ldr	r2, [r7, #28]
 8002ee6:	6892      	ldr	r2, [r2, #8]
 8002ee8:	605a      	str	r2, [r3, #4]
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	3304      	adds	r3, #4
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	d103      	bne.n	8002efe <xTaskResumeAll+0xca>
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	605a      	str	r2, [r3, #4]
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	2200      	movs	r2, #0
 8002f02:	615a      	str	r2, [r3, #20]
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	4618      	mov	r0, r3
 8002f12:	f003 fcdb 	bl	80068cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	409a      	lsls	r2, r3
 8002f1e:	4b41      	ldr	r3, [pc, #260]	@ (8003024 <xTaskResumeAll+0x1f0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	4a3f      	ldr	r2, [pc, #252]	@ (8003024 <xTaskResumeAll+0x1f0>)
 8002f26:	6013      	str	r3, [r2, #0]
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f2c:	493e      	ldr	r1, [pc, #248]	@ (8003028 <xTaskResumeAll+0x1f4>)
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3304      	adds	r3, #4
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	607b      	str	r3, [r7, #4]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	609a      	str	r2, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689a      	ldr	r2, [r3, #8]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	60da      	str	r2, [r3, #12]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	3204      	adds	r2, #4
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	1d1a      	adds	r2, r3, #4
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003028 <xTaskResumeAll+0x1f4>)
 8002f6c:	441a      	add	r2, r3
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	615a      	str	r2, [r3, #20]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f76:	492c      	ldr	r1, [pc, #176]	@ (8003028 <xTaskResumeAll+0x1f4>)
 8002f78:	4613      	mov	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002f88:	1c59      	adds	r1, r3, #1
 8002f8a:	4827      	ldr	r0, [pc, #156]	@ (8003028 <xTaskResumeAll+0x1f4>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	4403      	add	r3, r0
 8002f96:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	4b23      	ldr	r3, [pc, #140]	@ (800302c <xTaskResumeAll+0x1f8>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d904      	bls.n	8002fb0 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002fa6:	4a22      	ldr	r2, [pc, #136]	@ (8003030 <xTaskResumeAll+0x1fc>)
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2101      	movs	r1, #1
 8002fac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003020 <xTaskResumeAll+0x1ec>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f47f af68 	bne.w	8002e8a <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d001      	beq.n	8002fc4 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002fc0:	f000 fc64 	bl	800388c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002fc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003034 <xTaskResumeAll+0x200>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	61bb      	str	r3, [r7, #24]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d012      	beq.n	8002ff6 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002fd0:	f000 f85a 	bl	8003088 <xTaskIncrementTick>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002fda:	4a15      	ldr	r2, [pc, #84]	@ (8003030 <xTaskResumeAll+0x1fc>)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2101      	movs	r1, #1
 8002fe0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	3b01      	subs	r3, #1
 8002fe8:	61bb      	str	r3, [r7, #24]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ef      	bne.n	8002fd0 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002ff0:	4b10      	ldr	r3, [pc, #64]	@ (8003034 <xTaskResumeAll+0x200>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8003030 <xTaskResumeAll+0x1fc>)
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002ffe:	f001 fa2b 	bl	8004458 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	4619      	mov	r1, r3
 8003006:	20d0      	movs	r0, #208	@ 0xd0
 8003008:	f003 fb68 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 800300c:	697b      	ldr	r3, [r7, #20]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	2000020c 	.word	0x2000020c
 800301c:	200001e4 	.word	0x200001e4
 8003020:	200001a4 	.word	0x200001a4
 8003024:	200001ec 	.word	0x200001ec
 8003028:	20000110 	.word	0x20000110
 800302c:	2000010c 	.word	0x2000010c
 8003030:	200001f8 	.word	0x200001f8
 8003034:	200001f4 	.word	0x200001f4

08003038 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800303e:	4b06      	ldr	r3, [pc, #24]	@ (8003058 <xTaskGetTickCount+0x20>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	20d1      	movs	r0, #209	@ 0xd1
 8003048:	f003 fb48 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 800304c:	687b      	ldr	r3, [r7, #4]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200001e8 	.word	0x200001e8

0800305c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003062:	f001 fab3 	bl	80045cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800306a:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <xTaskGetTickCountFromISR+0x28>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8003070:	6839      	ldr	r1, [r7, #0]
 8003072:	20d2      	movs	r0, #210	@ 0xd2
 8003074:	f003 fb32 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003078:	683b      	ldr	r3, [r7, #0]
}
 800307a:	4618      	mov	r0, r3
 800307c:	3708      	adds	r7, #8
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200001e8 	.word	0x200001e8

08003088 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08a      	sub	sp, #40	@ 0x28
 800308c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800308e:	2300      	movs	r3, #0
 8003090:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003092:	4b74      	ldr	r3, [pc, #464]	@ (8003264 <xTaskIncrementTick+0x1dc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f040 80d4 	bne.w	8003244 <xTaskIncrementTick+0x1bc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800309c:	4b72      	ldr	r3, [pc, #456]	@ (8003268 <xTaskIncrementTick+0x1e0>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80030a4:	4a70      	ldr	r2, [pc, #448]	@ (8003268 <xTaskIncrementTick+0x1e0>)
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80030aa:	6a3b      	ldr	r3, [r7, #32]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80030b0:	4b6e      	ldr	r3, [pc, #440]	@ (800326c <xTaskIncrementTick+0x1e4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00b      	beq.n	80030d2 <xTaskIncrementTick+0x4a>
    __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	607b      	str	r3, [r7, #4]
}
 80030cc:	bf00      	nop
 80030ce:	bf00      	nop
 80030d0:	e7fd      	b.n	80030ce <xTaskIncrementTick+0x46>
 80030d2:	4b66      	ldr	r3, [pc, #408]	@ (800326c <xTaskIncrementTick+0x1e4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <xTaskIncrementTick+0x1e8>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a63      	ldr	r2, [pc, #396]	@ (800326c <xTaskIncrementTick+0x1e4>)
 80030de:	6013      	str	r3, [r2, #0]
 80030e0:	4a63      	ldr	r2, [pc, #396]	@ (8003270 <xTaskIncrementTick+0x1e8>)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	4b63      	ldr	r3, [pc, #396]	@ (8003274 <xTaskIncrementTick+0x1ec>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a61      	ldr	r2, [pc, #388]	@ (8003274 <xTaskIncrementTick+0x1ec>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	f000 fbcc 	bl	800388c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80030f4:	4b60      	ldr	r3, [pc, #384]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	f0c0 80a7 	bcc.w	800324e <xTaskIncrementTick+0x1c6>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003100:	4b5a      	ldr	r3, [pc, #360]	@ (800326c <xTaskIncrementTick+0x1e4>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d104      	bne.n	8003114 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800310a:	4b5b      	ldr	r3, [pc, #364]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 800310c:	f04f 32ff 	mov.w	r2, #4294967295
 8003110:	601a      	str	r2, [r3, #0]
                    break;
 8003112:	e09c      	b.n	800324e <xTaskIncrementTick+0x1c6>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003114:	4b55      	ldr	r3, [pc, #340]	@ (800326c <xTaskIncrementTick+0x1e4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003124:	6a3a      	ldr	r2, [r7, #32]
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	429a      	cmp	r2, r3
 800312a:	d203      	bcs.n	8003134 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800312c:	4a52      	ldr	r2, [pc, #328]	@ (8003278 <xTaskIncrementTick+0x1f0>)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	6013      	str	r3, [r2, #0]
                        break;
 8003132:	e08c      	b.n	800324e <xTaskIncrementTick+0x1c6>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	695b      	ldr	r3, [r3, #20]
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	68d2      	ldr	r2, [r2, #12]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	6892      	ldr	r2, [r2, #8]
 800314c:	605a      	str	r2, [r3, #4]
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3304      	adds	r3, #4
 8003156:	429a      	cmp	r2, r3
 8003158:	d103      	bne.n	8003162 <xTaskIncrementTick+0xda>
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	2200      	movs	r2, #0
 8003166:	615a      	str	r2, [r3, #20]
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	1e5a      	subs	r2, r3, #1
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003176:	2b00      	cmp	r3, #0
 8003178:	d01e      	beq.n	80031b8 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800317a:	69bb      	ldr	r3, [r7, #24]
 800317c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	6a12      	ldr	r2, [r2, #32]
 8003188:	609a      	str	r2, [r3, #8]
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	69d2      	ldr	r2, [r2, #28]
 8003192:	605a      	str	r2, [r3, #4]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	3318      	adds	r3, #24
 800319c:	429a      	cmp	r2, r3
 800319e:	d103      	bne.n	80031a8 <xTaskIncrementTick+0x120>
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	6a1a      	ldr	r2, [r3, #32]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	605a      	str	r2, [r3, #4]
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	2200      	movs	r2, #0
 80031ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	1e5a      	subs	r2, r3, #1
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f003 fb86 	bl	80068cc <SEGGER_SYSVIEW_OnTaskStartReady>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	4b2c      	ldr	r3, [pc, #176]	@ (800327c <xTaskIncrementTick+0x1f4>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	4a2b      	ldr	r2, [pc, #172]	@ (800327c <xTaskIncrementTick+0x1f4>)
 80031d0:	6013      	str	r3, [r2, #0]
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d6:	492a      	ldr	r1, [pc, #168]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 80031d8:	4613      	mov	r3, r2
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	4413      	add	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	440b      	add	r3, r1
 80031e2:	3304      	adds	r3, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	60bb      	str	r3, [r7, #8]
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	609a      	str	r2, [r3, #8]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	60da      	str	r2, [r3, #12]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	69ba      	ldr	r2, [r7, #24]
 80031fc:	3204      	adds	r2, #4
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	1d1a      	adds	r2, r3, #4
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800320c:	4613      	mov	r3, r2
 800320e:	009b      	lsls	r3, r3, #2
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4a1a      	ldr	r2, [pc, #104]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 8003216:	441a      	add	r2, r3
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	615a      	str	r2, [r3, #20]
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003220:	4917      	ldr	r1, [pc, #92]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 8003222:	4613      	mov	r3, r2
 8003224:	009b      	lsls	r3, r3, #2
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003232:	1c59      	adds	r1, r3, #1
 8003234:	4812      	ldr	r0, [pc, #72]	@ (8003280 <xTaskIncrementTick+0x1f8>)
 8003236:	4613      	mov	r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	4413      	add	r3, r2
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4403      	add	r3, r0
 8003240:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003242:	e75d      	b.n	8003100 <xTaskIncrementTick+0x78>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003244:	4b0f      	ldr	r3, [pc, #60]	@ (8003284 <xTaskIncrementTick+0x1fc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	3301      	adds	r3, #1
 800324a:	4a0e      	ldr	r2, [pc, #56]	@ (8003284 <xTaskIncrementTick+0x1fc>)
 800324c:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 800324e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	20db      	movs	r0, #219	@ 0xdb
 8003254:	f003 fa42 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8003258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800325a:	4618      	mov	r0, r3
 800325c:	3728      	adds	r7, #40	@ 0x28
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}
 8003262:	bf00      	nop
 8003264:	2000020c 	.word	0x2000020c
 8003268:	200001e8 	.word	0x200001e8
 800326c:	2000019c 	.word	0x2000019c
 8003270:	200001a0 	.word	0x200001a0
 8003274:	200001fc 	.word	0x200001fc
 8003278:	20000204 	.word	0x20000204
 800327c:	200001ec 	.word	0x200001ec
 8003280:	20000110 	.word	0x20000110
 8003284:	200001f4 	.word	0x200001f4

08003288 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 800328e:	4b30      	ldr	r3, [pc, #192]	@ (8003350 <vTaskSwitchContext+0xc8>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003296:	4b2f      	ldr	r3, [pc, #188]	@ (8003354 <vTaskSwitchContext+0xcc>)
 8003298:	2201      	movs	r2, #1
 800329a:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 800329c:	e054      	b.n	8003348 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 800329e:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <vTaskSwitchContext+0xcc>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80032a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003358 <vTaskSwitchContext+0xd0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	fab3 f383 	clz	r3, r3
 80032b0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
 80032b4:	f1c3 031f 	rsb	r3, r3, #31
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	4928      	ldr	r1, [pc, #160]	@ (800335c <vTaskSwitchContext+0xd4>)
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	4613      	mov	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10b      	bne.n	80032e6 <vTaskSwitchContext+0x5e>
    __asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	607b      	str	r3, [r7, #4]
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	e7fd      	b.n	80032e2 <vTaskSwitchContext+0x5a>
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	4613      	mov	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4413      	add	r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4a1a      	ldr	r2, [pc, #104]	@ (800335c <vTaskSwitchContext+0xd4>)
 80032f2:	4413      	add	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	685a      	ldr	r2, [r3, #4]
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3308      	adds	r3, #8
 8003308:	429a      	cmp	r2, r3
 800330a:	d103      	bne.n	8003314 <vTaskSwitchContext+0x8c>
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68db      	ldr	r3, [r3, #12]
 800331a:	4a11      	ldr	r2, [pc, #68]	@ (8003360 <vTaskSwitchContext+0xd8>)
 800331c:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800331e:	4b10      	ldr	r3, [pc, #64]	@ (8003360 <vTaskSwitchContext+0xd8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3334      	adds	r3, #52	@ 0x34
 8003324:	2205      	movs	r2, #5
 8003326:	490f      	ldr	r1, [pc, #60]	@ (8003364 <vTaskSwitchContext+0xdc>)
 8003328:	4618      	mov	r0, r3
 800332a:	f003 fd0b 	bl	8006d44 <memcmp>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d005      	beq.n	8003340 <vTaskSwitchContext+0xb8>
 8003334:	4b0a      	ldr	r3, [pc, #40]	@ (8003360 <vTaskSwitchContext+0xd8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f003 fa85 	bl	8006848 <SEGGER_SYSVIEW_OnTaskStartExec>
 800333e:	e001      	b.n	8003344 <vTaskSwitchContext+0xbc>
 8003340:	f003 fa24 	bl	800678c <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003344:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <vTaskSwitchContext+0xd8>)
 8003346:	681b      	ldr	r3, [r3, #0]
    }
 8003348:	bf00      	nop
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	2000020c 	.word	0x2000020c
 8003354:	200001f8 	.word	0x200001f8
 8003358:	200001ec 	.word	0x200001ec
 800335c:	20000110 	.word	0x20000110
 8003360:	2000010c 	.word	0x2000010c
 8003364:	080076d0 	.word	0x080076d0

08003368 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d10b      	bne.n	8003390 <vTaskPlaceOnEventList+0x28>
    __asm volatile
 8003378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800337c:	f383 8811 	msr	BASEPRI, r3
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	f3bf 8f4f 	dsb	sy
 8003388:	60fb      	str	r3, [r7, #12]
}
 800338a:	bf00      	nop
 800338c:	bf00      	nop
 800338e:	e7fd      	b.n	800338c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003390:	4b08      	ldr	r3, [pc, #32]	@ (80033b4 <vTaskPlaceOnEventList+0x4c>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3318      	adds	r3, #24
 8003396:	4619      	mov	r1, r3
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fe fed2 	bl	8002142 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800339e:	2101      	movs	r1, #1
 80033a0:	6838      	ldr	r0, [r7, #0]
 80033a2:	f000 fab1 	bl	8003908 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 80033a6:	20e1      	movs	r0, #225	@ 0xe1
 80033a8:	f003 f95c 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 80033ac:	bf00      	nop
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	2000010c 	.word	0x2000010c

080033b8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b086      	sub	sp, #24
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d10b      	bne.n	80033e2 <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 80033ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ce:	f383 8811 	msr	BASEPRI, r3
 80033d2:	f3bf 8f6f 	isb	sy
 80033d6:	f3bf 8f4f 	dsb	sy
 80033da:	613b      	str	r3, [r7, #16]
}
 80033dc:	bf00      	nop
 80033de:	bf00      	nop
 80033e0:	e7fd      	b.n	80033de <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	617b      	str	r3, [r7, #20]
 80033e8:	4b17      	ldr	r3, [pc, #92]	@ (8003448 <vTaskPlaceOnEventListRestricted+0x90>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	61da      	str	r2, [r3, #28]
 80033f0:	4b15      	ldr	r3, [pc, #84]	@ (8003448 <vTaskPlaceOnEventListRestricted+0x90>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	6892      	ldr	r2, [r2, #8]
 80033f8:	621a      	str	r2, [r3, #32]
 80033fa:	4b13      	ldr	r3, [pc, #76]	@ (8003448 <vTaskPlaceOnEventListRestricted+0x90>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	3218      	adds	r2, #24
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <vTaskPlaceOnEventListRestricted+0x90>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f103 0218 	add.w	r2, r3, #24
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	609a      	str	r2, [r3, #8]
 8003412:	4b0d      	ldr	r3, [pc, #52]	@ (8003448 <vTaskPlaceOnEventListRestricted+0x90>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	629a      	str	r2, [r3, #40]	@ 0x28
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	1c5a      	adds	r2, r3, #1
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d002      	beq.n	8003430 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800342a:	f04f 33ff 	mov.w	r3, #4294967295
 800342e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003430:	6879      	ldr	r1, [r7, #4]
 8003432:	68b8      	ldr	r0, [r7, #8]
 8003434:	f000 fa68 	bl	8003908 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8003438:	20e3      	movs	r0, #227	@ 0xe3
 800343a:	f003 f913 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
    }
 800343e:	bf00      	nop
 8003440:	3718      	adds	r7, #24
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	2000010c 	.word	0x2000010c

0800344c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	@ 0x28
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d10b      	bne.n	800347a <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 8003462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003466:	f383 8811 	msr	BASEPRI, r3
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	60fb      	str	r3, [r7, #12]
}
 8003474:	bf00      	nop
 8003476:	bf00      	nop
 8003478:	e7fd      	b.n	8003476 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347e:	61fb      	str	r3, [r7, #28]
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	6a3a      	ldr	r2, [r7, #32]
 8003486:	6a12      	ldr	r2, [r2, #32]
 8003488:	609a      	str	r2, [r3, #8]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	6a1b      	ldr	r3, [r3, #32]
 800348e:	6a3a      	ldr	r2, [r7, #32]
 8003490:	69d2      	ldr	r2, [r2, #28]
 8003492:	605a      	str	r2, [r3, #4]
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	6a3b      	ldr	r3, [r7, #32]
 800349a:	3318      	adds	r3, #24
 800349c:	429a      	cmp	r2, r3
 800349e:	d103      	bne.n	80034a8 <xTaskRemoveFromEventList+0x5c>
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	6a1a      	ldr	r2, [r3, #32]
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	6a3b      	ldr	r3, [r7, #32]
 80034aa:	2200      	movs	r2, #0
 80034ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80034b8:	4b4e      	ldr	r3, [pc, #312]	@ (80035f4 <xTaskRemoveFromEventList+0x1a8>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d164      	bne.n	800358a <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	6a3a      	ldr	r2, [r7, #32]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	609a      	str	r2, [r3, #8]
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	6a3a      	ldr	r2, [r7, #32]
 80034d6:	6892      	ldr	r2, [r2, #8]
 80034d8:	605a      	str	r2, [r3, #4]
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	685a      	ldr	r2, [r3, #4]
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	3304      	adds	r3, #4
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d103      	bne.n	80034ee <xTaskRemoveFromEventList+0xa2>
 80034e6:	6a3b      	ldr	r3, [r7, #32]
 80034e8:	68da      	ldr	r2, [r3, #12]
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	605a      	str	r2, [r3, #4]
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	2200      	movs	r2, #0
 80034f2:	615a      	str	r2, [r3, #20]
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	1e5a      	subs	r2, r3, #1
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	4618      	mov	r0, r3
 8003502:	f003 f9e3 	bl	80068cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350a:	2201      	movs	r2, #1
 800350c:	409a      	lsls	r2, r3
 800350e:	4b3a      	ldr	r3, [pc, #232]	@ (80035f8 <xTaskRemoveFromEventList+0x1ac>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4313      	orrs	r3, r2
 8003514:	4a38      	ldr	r2, [pc, #224]	@ (80035f8 <xTaskRemoveFromEventList+0x1ac>)
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800351c:	4937      	ldr	r1, [pc, #220]	@ (80035fc <xTaskRemoveFromEventList+0x1b0>)
 800351e:	4613      	mov	r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	4413      	add	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	440b      	add	r3, r1
 8003528:	3304      	adds	r3, #4
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	613b      	str	r3, [r7, #16]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	60da      	str	r2, [r3, #12]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	6a3a      	ldr	r2, [r7, #32]
 8003542:	3204      	adds	r2, #4
 8003544:	605a      	str	r2, [r3, #4]
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	1d1a      	adds	r2, r3, #4
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003552:	4613      	mov	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	4413      	add	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4a28      	ldr	r2, [pc, #160]	@ (80035fc <xTaskRemoveFromEventList+0x1b0>)
 800355c:	441a      	add	r2, r3
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	615a      	str	r2, [r3, #20]
 8003562:	6a3b      	ldr	r3, [r7, #32]
 8003564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003566:	4925      	ldr	r1, [pc, #148]	@ (80035fc <xTaskRemoveFromEventList+0x1b0>)
 8003568:	4613      	mov	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	4820      	ldr	r0, [pc, #128]	@ (80035fc <xTaskRemoveFromEventList+0x1b0>)
 800357c:	4613      	mov	r3, r2
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4413      	add	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4403      	add	r3, r0
 8003586:	6019      	str	r1, [r3, #0]
 8003588:	e01b      	b.n	80035c2 <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800358a:	4b1d      	ldr	r3, [pc, #116]	@ (8003600 <xTaskRemoveFromEventList+0x1b4>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	61bb      	str	r3, [r7, #24]
 8003590:	6a3b      	ldr	r3, [r7, #32]
 8003592:	69ba      	ldr	r2, [r7, #24]
 8003594:	61da      	str	r2, [r3, #28]
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	621a      	str	r2, [r3, #32]
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	6a3a      	ldr	r2, [r7, #32]
 80035a4:	3218      	adds	r2, #24
 80035a6:	605a      	str	r2, [r3, #4]
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f103 0218 	add.w	r2, r3, #24
 80035ae:	69bb      	ldr	r3, [r7, #24]
 80035b0:	609a      	str	r2, [r3, #8]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	4a12      	ldr	r2, [pc, #72]	@ (8003600 <xTaskRemoveFromEventList+0x1b4>)
 80035b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80035b8:	4b11      	ldr	r3, [pc, #68]	@ (8003600 <xTaskRemoveFromEventList+0x1b4>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3301      	adds	r3, #1
 80035be:	4a10      	ldr	r2, [pc, #64]	@ (8003600 <xTaskRemoveFromEventList+0x1b4>)
 80035c0:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003604 <xTaskRemoveFromEventList+0x1b8>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d905      	bls.n	80035dc <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <xTaskRemoveFromEventList+0x1bc>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]
 80035da:	e001      	b.n	80035e0 <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 80035dc:	2300      	movs	r3, #0
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 80035e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e2:	4619      	mov	r1, r3
 80035e4:	20e4      	movs	r0, #228	@ 0xe4
 80035e6:	f003 f879 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 80035ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3728      	adds	r7, #40	@ 0x28
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	2000020c 	.word	0x2000020c
 80035f8:	200001ec 	.word	0x200001ec
 80035fc:	20000110 	.word	0x20000110
 8003600:	200001a4 	.word	0x200001a4
 8003604:	2000010c 	.word	0x2000010c
 8003608:	200001f8 	.word	0x200001f8

0800360c <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003614:	4b07      	ldr	r3, [pc, #28]	@ (8003634 <vTaskInternalSetTimeOutState+0x28>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800361c:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <vTaskInternalSetTimeOutState+0x2c>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8003624:	20e7      	movs	r0, #231	@ 0xe7
 8003626:	f003 f81d 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 800362a:	bf00      	nop
 800362c:	3708      	adds	r7, #8
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200001fc 	.word	0x200001fc
 8003638:	200001e8 	.word	0x200001e8

0800363c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	613b      	str	r3, [r7, #16]
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <xTaskCheckForTimeOut+0x46>
    __asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	60fb      	str	r3, [r7, #12]
}
 800367c:	bf00      	nop
 800367e:	bf00      	nop
 8003680:	e7fd      	b.n	800367e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003682:	f000 feb7 	bl	80043f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003686:	4b21      	ldr	r3, [pc, #132]	@ (800370c <xTaskCheckForTimeOut+0xd0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369e:	d102      	bne.n	80036a6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036a0:	2300      	movs	r3, #0
 80036a2:	61fb      	str	r3, [r7, #28]
 80036a4:	e026      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <xTaskCheckForTimeOut+0xd4>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d00a      	beq.n	80036c8 <xTaskCheckForTimeOut+0x8c>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d305      	bcc.n	80036c8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036bc:	2301      	movs	r3, #1
 80036be:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2200      	movs	r2, #0
 80036c4:	601a      	str	r2, [r3, #0]
 80036c6:	e015      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d20b      	bcs.n	80036ea <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	1ad2      	subs	r2, r2, r3
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7ff ff94 	bl	800360c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e004      	b.n	80036f4 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80036f0:	2301      	movs	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80036f4:	f000 feb0 	bl	8004458 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	4619      	mov	r1, r3
 80036fc:	20e8      	movs	r0, #232	@ 0xe8
 80036fe:	f002 ffed 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8003702:	69fb      	ldr	r3, [r7, #28]
}
 8003704:	4618      	mov	r0, r3
 8003706:	3720      	adds	r7, #32
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	200001e8 	.word	0x200001e8
 8003710:	200001fc 	.word	0x200001fc

08003714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8003718:	4b03      	ldr	r3, [pc, #12]	@ (8003728 <vTaskMissedYield+0x14>)
 800371a:	2201      	movs	r2, #1
 800371c:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 800371e:	20e9      	movs	r0, #233	@ 0xe9
 8003720:	f002 ffa0 	bl	8006664 <SEGGER_SYSVIEW_RecordEndCall>
}
 8003724:	bf00      	nop
 8003726:	bd80      	pop	{r7, pc}
 8003728:	200001f8 	.word	0x200001f8

0800372c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003734:	f000 f84c 	bl	80037d0 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003738:	4b04      	ldr	r3, [pc, #16]	@ (800374c <prvIdleTask+0x20>)
 800373a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	f3bf 8f4f 	dsb	sy
 8003744:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003748:	bf00      	nop
 800374a:	e7f3      	b.n	8003734 <prvIdleTask+0x8>
 800374c:	e000ed04 	.word	0xe000ed04

08003750 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003756:	2300      	movs	r3, #0
 8003758:	607b      	str	r3, [r7, #4]
 800375a:	e00c      	b.n	8003776 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4413      	add	r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4a12      	ldr	r2, [pc, #72]	@ (80037b0 <prvInitialiseTaskLists+0x60>)
 8003768:	4413      	add	r3, r2
 800376a:	4618      	mov	r0, r3
 800376c:	f7fe fcb8 	bl	80020e0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3301      	adds	r3, #1
 8003774:	607b      	str	r3, [r7, #4]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2b04      	cmp	r3, #4
 800377a:	d9ef      	bls.n	800375c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800377c:	480d      	ldr	r0, [pc, #52]	@ (80037b4 <prvInitialiseTaskLists+0x64>)
 800377e:	f7fe fcaf 	bl	80020e0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003782:	480d      	ldr	r0, [pc, #52]	@ (80037b8 <prvInitialiseTaskLists+0x68>)
 8003784:	f7fe fcac 	bl	80020e0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003788:	480c      	ldr	r0, [pc, #48]	@ (80037bc <prvInitialiseTaskLists+0x6c>)
 800378a:	f7fe fca9 	bl	80020e0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800378e:	480c      	ldr	r0, [pc, #48]	@ (80037c0 <prvInitialiseTaskLists+0x70>)
 8003790:	f7fe fca6 	bl	80020e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003794:	480b      	ldr	r0, [pc, #44]	@ (80037c4 <prvInitialiseTaskLists+0x74>)
 8003796:	f7fe fca3 	bl	80020e0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800379a:	4b0b      	ldr	r3, [pc, #44]	@ (80037c8 <prvInitialiseTaskLists+0x78>)
 800379c:	4a05      	ldr	r2, [pc, #20]	@ (80037b4 <prvInitialiseTaskLists+0x64>)
 800379e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037a0:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <prvInitialiseTaskLists+0x7c>)
 80037a2:	4a05      	ldr	r2, [pc, #20]	@ (80037b8 <prvInitialiseTaskLists+0x68>)
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	bf00      	nop
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000110 	.word	0x20000110
 80037b4:	20000174 	.word	0x20000174
 80037b8:	20000188 	.word	0x20000188
 80037bc:	200001a4 	.word	0x200001a4
 80037c0:	200001b8 	.word	0x200001b8
 80037c4:	200001d0 	.word	0x200001d0
 80037c8:	2000019c 	.word	0x2000019c
 80037cc:	200001a0 	.word	0x200001a0

080037d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037d6:	e019      	b.n	800380c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80037d8:	f000 fe0c 	bl	80043f4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80037dc:	4b10      	ldr	r3, [pc, #64]	@ (8003820 <prvCheckTasksWaitingTermination+0x50>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7fe fce5 	bl	80021b8 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80037ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003824 <prvCheckTasksWaitingTermination+0x54>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3b01      	subs	r3, #1
 80037f4:	4a0b      	ldr	r2, [pc, #44]	@ (8003824 <prvCheckTasksWaitingTermination+0x54>)
 80037f6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003828 <prvCheckTasksWaitingTermination+0x58>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3b01      	subs	r3, #1
 80037fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003828 <prvCheckTasksWaitingTermination+0x58>)
 8003800:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003802:	f000 fe29 	bl	8004458 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f000 f810 	bl	800382c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800380c:	4b06      	ldr	r3, [pc, #24]	@ (8003828 <prvCheckTasksWaitingTermination+0x58>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1e1      	bne.n	80037d8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003814:	bf00      	nop
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200001b8 	.word	0x200001b8
 8003824:	200001e4 	.word	0x200001e4
 8003828:	200001cc 	.word	0x200001cc

0800382c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800383a:	2b00      	cmp	r3, #0
 800383c:	d108      	bne.n	8003850 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003842:	4618      	mov	r0, r3
 8003844:	f001 f836 	bl	80048b4 <vPortFree>
                vPortFree( pxTCB );
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f001 f833 	bl	80048b4 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800384e:	e019      	b.n	8003884 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003856:	2b01      	cmp	r3, #1
 8003858:	d103      	bne.n	8003862 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f001 f82a 	bl	80048b4 <vPortFree>
    }
 8003860:	e010      	b.n	8003884 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003868:	2b02      	cmp	r3, #2
 800386a:	d00b      	beq.n	8003884 <prvDeleteTCB+0x58>
    __asm volatile
 800386c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003870:	f383 8811 	msr	BASEPRI, r3
 8003874:	f3bf 8f6f 	isb	sy
 8003878:	f3bf 8f4f 	dsb	sy
 800387c:	60fb      	str	r3, [r7, #12]
}
 800387e:	bf00      	nop
 8003880:	bf00      	nop
 8003882:	e7fd      	b.n	8003880 <prvDeleteTCB+0x54>
    }
 8003884:	bf00      	nop
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003890:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <prvResetNextTaskUnblockTime+0x30>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d104      	bne.n	80038a4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800389a:	4b09      	ldr	r3, [pc, #36]	@ (80038c0 <prvResetNextTaskUnblockTime+0x34>)
 800389c:	f04f 32ff 	mov.w	r2, #4294967295
 80038a0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038a2:	e005      	b.n	80038b0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038a4:	4b05      	ldr	r3, [pc, #20]	@ (80038bc <prvResetNextTaskUnblockTime+0x30>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <prvResetNextTaskUnblockTime+0x34>)
 80038ae:	6013      	str	r3, [r2, #0]
}
 80038b0:	bf00      	nop
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr
 80038ba:	bf00      	nop
 80038bc:	2000019c 	.word	0x2000019c
 80038c0:	20000204 	.word	0x20000204

080038c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 80038ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003900 <xTaskGetSchedulerState+0x3c>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80038d2:	2301      	movs	r3, #1
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	e008      	b.n	80038ea <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80038d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003904 <xTaskGetSchedulerState+0x40>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d102      	bne.n	80038e6 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80038e0:	2302      	movs	r3, #2
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	e001      	b.n	80038ea <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4619      	mov	r1, r3
 80038ee:	20f5      	movs	r0, #245	@ 0xf5
 80038f0:	f002 fef4 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80038f4:	687b      	ldr	r3, [r7, #4]
    }
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	200001f0 	.word	0x200001f0
 8003904:	2000020c 	.word	0x2000020c

08003908 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b088      	sub	sp, #32
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003912:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <prvAddCurrentTaskToDelayedList+0x100>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003918:	4b3c      	ldr	r3, [pc, #240]	@ (8003a0c <prvAddCurrentTaskToDelayedList+0x104>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 800391e:	4b3c      	ldr	r3, [pc, #240]	@ (8003a10 <prvAddCurrentTaskToDelayedList+0x108>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003924:	4b3b      	ldr	r3, [pc, #236]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3304      	adds	r3, #4
 800392a:	4618      	mov	r0, r3
 800392c:	f7fe fc44 	bl	80021b8 <uxListRemove>
 8003930:	4603      	mov	r3, r0
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10b      	bne.n	800394e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003936:	4b37      	ldr	r3, [pc, #220]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	2201      	movs	r2, #1
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43da      	mvns	r2, r3
 8003944:	4b34      	ldr	r3, [pc, #208]	@ (8003a18 <prvAddCurrentTaskToDelayedList+0x110>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4013      	ands	r3, r2
 800394a:	4a33      	ldr	r2, [pc, #204]	@ (8003a18 <prvAddCurrentTaskToDelayedList+0x110>)
 800394c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003954:	d124      	bne.n	80039a0 <prvAddCurrentTaskToDelayedList+0x98>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d021      	beq.n	80039a0 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800395c:	4b2f      	ldr	r3, [pc, #188]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0x114>)
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	613b      	str	r3, [r7, #16]
 8003962:	4b2c      	ldr	r3, [pc, #176]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	609a      	str	r2, [r3, #8]
 800396a:	4b2a      	ldr	r3, [pc, #168]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	693a      	ldr	r2, [r7, #16]
 8003970:	6892      	ldr	r2, [r2, #8]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	4b27      	ldr	r3, [pc, #156]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	3204      	adds	r2, #4
 800397e:	605a      	str	r2, [r3, #4]
 8003980:	4b24      	ldr	r3, [pc, #144]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	1d1a      	adds	r2, r3, #4
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	4b22      	ldr	r3, [pc, #136]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a23      	ldr	r2, [pc, #140]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003990:	615a      	str	r2, [r3, #20]
 8003992:	4b22      	ldr	r3, [pc, #136]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0x114>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a20      	ldr	r2, [pc, #128]	@ (8003a1c <prvAddCurrentTaskToDelayedList+0x114>)
 800399a:	6013      	str	r3, [r2, #0]
 800399c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800399e:	e02e      	b.n	80039fe <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80039a0:	69fa      	ldr	r2, [r7, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4413      	add	r3, r2
 80039a6:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80039a8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d20d      	bcs.n	80039d4 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80039b8:	4b16      	ldr	r3, [pc, #88]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2104      	movs	r1, #4
 80039be:	4618      	mov	r0, r3
 80039c0:	f002 ffc6 	bl	8006950 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039c4:	4b13      	ldr	r3, [pc, #76]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3304      	adds	r3, #4
 80039ca:	4619      	mov	r1, r3
 80039cc:	6978      	ldr	r0, [r7, #20]
 80039ce:	f7fe fbb8 	bl	8002142 <vListInsert>
}
 80039d2:	e014      	b.n	80039fe <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80039d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2104      	movs	r1, #4
 80039da:	4618      	mov	r0, r3
 80039dc:	f002 ffb8 	bl	8006950 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80039e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003a14 <prvAddCurrentTaskToDelayedList+0x10c>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3304      	adds	r3, #4
 80039e6:	4619      	mov	r1, r3
 80039e8:	69b8      	ldr	r0, [r7, #24]
 80039ea:	f7fe fbaa 	bl	8002142 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80039ee:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <prvAddCurrentTaskToDelayedList+0x118>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d202      	bcs.n	80039fe <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 80039f8:	4a09      	ldr	r2, [pc, #36]	@ (8003a20 <prvAddCurrentTaskToDelayedList+0x118>)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6013      	str	r3, [r2, #0]
}
 80039fe:	bf00      	nop
 8003a00:	3720      	adds	r7, #32
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	200001e8 	.word	0x200001e8
 8003a0c:	2000019c 	.word	0x2000019c
 8003a10:	200001a0 	.word	0x200001a0
 8003a14:	2000010c 	.word	0x2000010c
 8003a18:	200001ec 	.word	0x200001ec
 8003a1c:	200001d0 	.word	0x200001d0
 8003a20:	20000204 	.word	0x20000204

08003a24 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4a07      	ldr	r2, [pc, #28]	@ (8003a50 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a34:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	4a06      	ldr	r2, [pc, #24]	@ (8003a54 <vApplicationGetIdleTaskMemory+0x30>)
 8003a3a:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2282      	movs	r2, #130	@ 0x82
 8003a40:	601a      	str	r2, [r3, #0]
    }
 8003a42:	bf00      	nop
 8003a44:	3714      	adds	r7, #20
 8003a46:	46bd      	mov	sp, r7
 8003a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4c:	4770      	bx	lr
 8003a4e:	bf00      	nop
 8003a50:	20000210 	.word	0x20000210
 8003a54:	20000268 	.word	0x20000268

08003a58 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a07      	ldr	r2, [pc, #28]	@ (8003a84 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a68:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	4a06      	ldr	r2, [pc, #24]	@ (8003a88 <vApplicationGetTimerTaskMemory+0x30>)
 8003a6e:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a76:	601a      	str	r2, [r3, #0]
    }
 8003a78:	bf00      	nop
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	20000470 	.word	0x20000470
 8003a88:	200004c8 	.word	0x200004c8

08003a8c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b08a      	sub	sp, #40	@ 0x28
 8003a90:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 8003a92:	2300      	movs	r3, #0
 8003a94:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003a96:	f000 fa71 	bl	8003f7c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003a9a:	4b20      	ldr	r3, [pc, #128]	@ (8003b1c <xTimerCreateTimerTask+0x90>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d021      	beq.n	8003ae6 <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 8003aaa:	1d3a      	adds	r2, r7, #4
 8003aac:	f107 0108 	add.w	r1, r7, #8
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff ffcf 	bl	8003a58 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	9202      	str	r2, [sp, #8]
 8003ac2:	9301      	str	r3, [sp, #4]
 8003ac4:	2302      	movs	r3, #2
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	2300      	movs	r3, #0
 8003aca:	460a      	mov	r2, r1
 8003acc:	4914      	ldr	r1, [pc, #80]	@ (8003b20 <xTimerCreateTimerTask+0x94>)
 8003ace:	4815      	ldr	r0, [pc, #84]	@ (8003b24 <xTimerCreateTimerTask+0x98>)
 8003ad0:	f7fe ff12 	bl	80028f8 <xTaskCreateStatic>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	4a14      	ldr	r2, [pc, #80]	@ (8003b28 <xTimerCreateTimerTask+0x9c>)
 8003ad8:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8003ada:	4b13      	ldr	r3, [pc, #76]	@ (8003b28 <xTimerCreateTimerTask+0x9c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d10b      	bne.n	8003b04 <xTimerCreateTimerTask+0x78>
    __asm volatile
 8003aec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af0:	f383 8811 	msr	BASEPRI, r3
 8003af4:	f3bf 8f6f 	isb	sy
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	613b      	str	r3, [r7, #16]
}
 8003afe:	bf00      	nop
 8003b00:	bf00      	nop
 8003b02:	e7fd      	b.n	8003b00 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	4619      	mov	r1, r3
 8003b08:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8003b0c:	f002 fde6 	bl	80066dc <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003b10:	697b      	ldr	r3, [r7, #20]
    }
 8003b12:	4618      	mov	r0, r3
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000908 	.word	0x20000908
 8003b20:	080076d8 	.word	0x080076d8
 8003b24:	08003bd1 	.word	0x08003bd1
 8003b28:	2000090c 	.word	0x2000090c

08003b2c <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b084      	sub	sp, #16
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	60f8      	str	r0, [r7, #12]
 8003b34:	60b9      	str	r1, [r7, #8]
 8003b36:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b38:	e008      	b.n	8003b4c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4413      	add	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	18d1      	adds	r1, r2, r3
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	68f8      	ldr	r0, [r7, #12]
 8003b5a:	f000 f8df 	bl	8003d1c <prvInsertTimerInActiveList>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1ea      	bne.n	8003b3a <prvReloadTimer+0xe>
        }
    }
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b084      	sub	sp, #16
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b7a:	4b14      	ldr	r3, [pc, #80]	@ (8003bcc <prvProcessExpiredTimer+0x5c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3304      	adds	r3, #4
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fe fb15 	bl	80021b8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f7ff ffc3 	bl	8003b2c <prvReloadTimer>
 8003ba6:	e008      	b.n	8003bba <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	b2da      	uxtb	r2, r3
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	4798      	blx	r3
    }
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000900 	.word	0x20000900

08003bd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bd8:	f107 0308 	add.w	r3, r7, #8
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f000 f859 	bl	8003c94 <prvGetNextExpireTime>
 8003be2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4619      	mov	r1, r3
 8003be8:	68f8      	ldr	r0, [r7, #12]
 8003bea:	f000 f805 	bl	8003bf8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003bee:	f000 f8d7 	bl	8003da0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003bf2:	bf00      	nop
 8003bf4:	e7f0      	b.n	8003bd8 <prvTimerTask+0x8>
	...

08003bf8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003c02:	f7ff f909 	bl	8002e18 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c06:	f107 0308 	add.w	r3, r7, #8
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f866 	bl	8003cdc <prvSampleTimeNow>
 8003c10:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d130      	bne.n	8003c7a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d10a      	bne.n	8003c34 <prvProcessTimerOrBlockTask+0x3c>
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d806      	bhi.n	8003c34 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003c26:	f7ff f905 	bl	8002e34 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f7ff ff9f 	bl	8003b70 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003c32:	e024      	b.n	8003c7e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d008      	beq.n	8003c4c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c3a:	4b13      	ldr	r3, [pc, #76]	@ (8003c88 <prvProcessTimerOrBlockTask+0x90>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <prvProcessTimerOrBlockTask+0x50>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <prvProcessTimerOrBlockTask+0x52>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c8c <prvProcessTimerOrBlockTask+0x94>)
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	1ad3      	subs	r3, r2, r3
 8003c56:	683a      	ldr	r2, [r7, #0]
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f7fe fdb5 	bl	80027c8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003c5e:	f7ff f8e9 	bl	8002e34 <xTaskResumeAll>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d10a      	bne.n	8003c7e <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8003c68:	4b09      	ldr	r3, [pc, #36]	@ (8003c90 <prvProcessTimerOrBlockTask+0x98>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
    }
 8003c78:	e001      	b.n	8003c7e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003c7a:	f7ff f8db 	bl	8002e34 <xTaskResumeAll>
    }
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000904 	.word	0x20000904
 8003c8c:	20000908 	.word	0x20000908
 8003c90:	e000ed04 	.word	0xe000ed04

08003c94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003c9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003cd8 <prvGetNextExpireTime+0x44>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <prvGetNextExpireTime+0x16>
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	e000      	b.n	8003cac <prvGetNextExpireTime+0x18>
 8003caa:	2200      	movs	r2, #0
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d105      	bne.n	8003cc4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003cb8:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <prvGetNextExpireTime+0x44>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60fb      	str	r3, [r7, #12]
 8003cc2:	e001      	b.n	8003cc8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
    }
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	20000900 	.word	0x20000900

08003cdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8003ce4:	f7ff f9a8 	bl	8003038 <xTaskGetTickCount>
 8003ce8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003cea:	4b0b      	ldr	r3, [pc, #44]	@ (8003d18 <prvSampleTimeNow+0x3c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	68fa      	ldr	r2, [r7, #12]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d205      	bcs.n	8003d00 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003cf4:	f000 f91c 	bl	8003f30 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	e002      	b.n	8003d06 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003d06:	4a04      	ldr	r2, [pc, #16]	@ (8003d18 <prvSampleTimeNow+0x3c>)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
    }
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3710      	adds	r7, #16
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000910 	.word	0x20000910

08003d1c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003d3a:	68ba      	ldr	r2, [r7, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d812      	bhi.n	8003d68 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	1ad2      	subs	r2, r2, r3
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d302      	bcc.n	8003d56 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003d50:	2301      	movs	r3, #1
 8003d52:	617b      	str	r3, [r7, #20]
 8003d54:	e01b      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003d56:	4b10      	ldr	r3, [pc, #64]	@ (8003d98 <prvInsertTimerInActiveList+0x7c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	4619      	mov	r1, r3
 8003d60:	4610      	mov	r0, r2
 8003d62:	f7fe f9ee 	bl	8002142 <vListInsert>
 8003d66:	e012      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003d68:	687a      	ldr	r2, [r7, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d206      	bcs.n	8003d7e <prvInsertTimerInActiveList+0x62>
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d302      	bcc.n	8003d7e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e007      	b.n	8003d8e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003d7e:	4b07      	ldr	r3, [pc, #28]	@ (8003d9c <prvInsertTimerInActiveList+0x80>)
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f7fe f9da 	bl	8002142 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003d8e:	697b      	ldr	r3, [r7, #20]
    }
 8003d90:	4618      	mov	r0, r3
 8003d92:	3718      	adds	r7, #24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}
 8003d98:	20000904 	.word	0x20000904
 8003d9c:	20000900 	.word	0x20000900

08003da0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8003da6:	f107 0308 	add.w	r3, r7, #8
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003db2:	e0a9      	b.n	8003f08 <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f2c0 80a6 	blt.w	8003f08 <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d004      	beq.n	8003dd2 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fe f9f3 	bl	80021b8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dd2:	1d3b      	adds	r3, r7, #4
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff ff81 	bl	8003cdc <prvSampleTimeNow>
 8003dda:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	2b08      	cmp	r3, #8
 8003de2:	f200 808e 	bhi.w	8003f02 <prvProcessReceivedCommands+0x162>
 8003de6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dec <prvProcessReceivedCommands+0x4c>)
 8003de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dec:	08003e11 	.word	0x08003e11
 8003df0:	08003e11 	.word	0x08003e11
 8003df4:	08003e79 	.word	0x08003e79
 8003df8:	08003e8d 	.word	0x08003e8d
 8003dfc:	08003ed9 	.word	0x08003ed9
 8003e00:	08003e11 	.word	0x08003e11
 8003e04:	08003e11 	.word	0x08003e11
 8003e08:	08003e79 	.word	0x08003e79
 8003e0c:	08003e8d 	.word	0x08003e8d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e16:	f043 0301 	orr.w	r3, r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	18d1      	adds	r1, r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	69f8      	ldr	r0, [r7, #28]
 8003e30:	f7ff ff74 	bl	8003d1c <prvInsertTimerInActiveList>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d065      	beq.n	8003f06 <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e40:	f003 0304 	and.w	r3, r3, #4
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d009      	beq.n	8003e5c <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	4413      	add	r3, r2
 8003e50:	69ba      	ldr	r2, [r7, #24]
 8003e52:	4619      	mov	r1, r3
 8003e54:	69f8      	ldr	r0, [r7, #28]
 8003e56:	f7ff fe69 	bl	8003b2c <prvReloadTimer>
 8003e5a:	e008      	b.n	8003e6e <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e62:	f023 0301 	bic.w	r3, r3, #1
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	69f8      	ldr	r0, [r7, #28]
 8003e74:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003e76:	e046      	b.n	8003f06 <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003e78:	69fb      	ldr	r3, [r7, #28]
 8003e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e7e:	f023 0301 	bic.w	r3, r3, #1
 8003e82:	b2da      	uxtb	r2, r3
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003e8a:	e03d      	b.n	8003f08 <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e92:	f043 0301 	orr.w	r3, r3, #1
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	699b      	ldr	r3, [r3, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10b      	bne.n	8003ec4 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8003eac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	617b      	str	r3, [r7, #20]
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	e7fd      	b.n	8003ec0 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	699a      	ldr	r2, [r3, #24]
 8003ec8:	69bb      	ldr	r3, [r7, #24]
 8003eca:	18d1      	adds	r1, r2, r3
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	69f8      	ldr	r0, [r7, #28]
 8003ed2:	f7ff ff23 	bl	8003d1c <prvInsertTimerInActiveList>
                        break;
 8003ed6:	e017      	b.n	8003f08 <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d103      	bne.n	8003eee <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8003ee6:	69f8      	ldr	r0, [r7, #28]
 8003ee8:	f000 fce4 	bl	80048b4 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003eec:	e00c      	b.n	8003f08 <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f00:	e002      	b.n	8003f08 <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <prvProcessReceivedCommands+0x168>
                        break;
 8003f06:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8003f08:	4b08      	ldr	r3, [pc, #32]	@ (8003f2c <prvProcessReceivedCommands+0x18c>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f107 0108 	add.w	r1, r7, #8
 8003f10:	2200      	movs	r2, #0
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fe fa96 	bl	8002444 <xQueueReceive>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f af4a 	bne.w	8003db4 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8003f20:	bf00      	nop
 8003f22:	bf00      	nop
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000908 	.word	0x20000908

08003f30 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f36:	e009      	b.n	8003f4c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003f38:	4b0e      	ldr	r3, [pc, #56]	@ (8003f74 <prvSwitchTimerLists+0x44>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003f42:	f04f 31ff 	mov.w	r1, #4294967295
 8003f46:	6838      	ldr	r0, [r7, #0]
 8003f48:	f7ff fe12 	bl	8003b70 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003f4c:	4b09      	ldr	r3, [pc, #36]	@ (8003f74 <prvSwitchTimerLists+0x44>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d1f0      	bne.n	8003f38 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003f56:	4b07      	ldr	r3, [pc, #28]	@ (8003f74 <prvSwitchTimerLists+0x44>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003f5c:	4b06      	ldr	r3, [pc, #24]	@ (8003f78 <prvSwitchTimerLists+0x48>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a04      	ldr	r2, [pc, #16]	@ (8003f74 <prvSwitchTimerLists+0x44>)
 8003f62:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003f64:	4a04      	ldr	r2, [pc, #16]	@ (8003f78 <prvSwitchTimerLists+0x48>)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6013      	str	r3, [r2, #0]
    }
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000900 	.word	0x20000900
 8003f78:	20000904 	.word	0x20000904

08003f7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b082      	sub	sp, #8
 8003f80:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003f82:	f000 fa37 	bl	80043f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003f86:	4b15      	ldr	r3, [pc, #84]	@ (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d120      	bne.n	8003fd0 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8003f8e:	4814      	ldr	r0, [pc, #80]	@ (8003fe0 <prvCheckForValidListAndQueue+0x64>)
 8003f90:	f7fe f8a6 	bl	80020e0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003f94:	4813      	ldr	r0, [pc, #76]	@ (8003fe4 <prvCheckForValidListAndQueue+0x68>)
 8003f96:	f7fe f8a3 	bl	80020e0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003f9a:	4b13      	ldr	r3, [pc, #76]	@ (8003fe8 <prvCheckForValidListAndQueue+0x6c>)
 8003f9c:	4a10      	ldr	r2, [pc, #64]	@ (8003fe0 <prvCheckForValidListAndQueue+0x64>)
 8003f9e:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003fa0:	4b12      	ldr	r3, [pc, #72]	@ (8003fec <prvCheckForValidListAndQueue+0x70>)
 8003fa2:	4a10      	ldr	r2, [pc, #64]	@ (8003fe4 <prvCheckForValidListAndQueue+0x68>)
 8003fa4:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	9300      	str	r3, [sp, #0]
 8003faa:	4b11      	ldr	r3, [pc, #68]	@ (8003ff0 <prvCheckForValidListAndQueue+0x74>)
 8003fac:	4a11      	ldr	r2, [pc, #68]	@ (8003ff4 <prvCheckForValidListAndQueue+0x78>)
 8003fae:	210c      	movs	r1, #12
 8003fb0:	200a      	movs	r0, #10
 8003fb2:	f7fe f9b9 	bl	8002328 <xQueueGenericCreateStatic>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4a08      	ldr	r2, [pc, #32]	@ (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fba:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003fbc:	4b07      	ldr	r3, [pc, #28]	@ (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d005      	beq.n	8003fd0 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003fc4:	4b05      	ldr	r3, [pc, #20]	@ (8003fdc <prvCheckForValidListAndQueue+0x60>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	490b      	ldr	r1, [pc, #44]	@ (8003ff8 <prvCheckForValidListAndQueue+0x7c>)
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7fe fbac 	bl	8002728 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003fd0:	f000 fa42 	bl	8004458 <vPortExitCritical>
    }
 8003fd4:	bf00      	nop
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	20000908 	.word	0x20000908
 8003fe0:	200008d8 	.word	0x200008d8
 8003fe4:	200008ec 	.word	0x200008ec
 8003fe8:	20000900 	.word	0x20000900
 8003fec:	20000904 	.word	0x20000904
 8003ff0:	2000098c 	.word	0x2000098c
 8003ff4:	20000914 	.word	0x20000914
 8003ff8:	080076e0 	.word	0x080076e0

08003ffc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	3b04      	subs	r3, #4
 800400c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004014:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	3b04      	subs	r3, #4
 800401a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f023 0201 	bic.w	r2, r3, #1
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b04      	subs	r3, #4
 800402a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800402c:	4a0c      	ldr	r2, [pc, #48]	@ (8004060 <pxPortInitialiseStack+0x64>)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	3b14      	subs	r3, #20
 8004036:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	3b04      	subs	r3, #4
 8004042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f06f 0202 	mvn.w	r2, #2
 800404a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b20      	subs	r3, #32
 8004050:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004052:	68fb      	ldr	r3, [r7, #12]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	08004065 	.word	0x08004065

08004064 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800406e:	4b13      	ldr	r3, [pc, #76]	@ (80040bc <prvTaskExitError+0x58>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004076:	d00b      	beq.n	8004090 <prvTaskExitError+0x2c>
    __asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	60fb      	str	r3, [r7, #12]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <prvTaskExitError+0x28>
    __asm volatile
 8004090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004094:	f383 8811 	msr	BASEPRI, r3
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	f3bf 8f4f 	dsb	sy
 80040a0:	60bb      	str	r3, [r7, #8]
}
 80040a2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80040a4:	bf00      	nop
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d0fc      	beq.n	80040a6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80040ac:	bf00      	nop
 80040ae:	bf00      	nop
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	20000010 	.word	0x20000010

080040c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80040c0:	4b07      	ldr	r3, [pc, #28]	@ (80040e0 <pxCurrentTCBConst2>)
 80040c2:	6819      	ldr	r1, [r3, #0]
 80040c4:	6808      	ldr	r0, [r1, #0]
 80040c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	f380 8809 	msr	PSP, r0
 80040ce:	f3bf 8f6f 	isb	sy
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8811 	msr	BASEPRI, r0
 80040da:	4770      	bx	lr
 80040dc:	f3af 8000 	nop.w

080040e0 <pxCurrentTCBConst2>:
 80040e0:	2000010c 	.word	0x2000010c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop

080040e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80040e8:	4808      	ldr	r0, [pc, #32]	@ (800410c <prvPortStartFirstTask+0x24>)
 80040ea:	6800      	ldr	r0, [r0, #0]
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f380 8808 	msr	MSP, r0
 80040f2:	f04f 0000 	mov.w	r0, #0
 80040f6:	f380 8814 	msr	CONTROL, r0
 80040fa:	b662      	cpsie	i
 80040fc:	b661      	cpsie	f
 80040fe:	f3bf 8f4f 	dsb	sy
 8004102:	f3bf 8f6f 	isb	sy
 8004106:	df00      	svc	0
 8004108:	bf00      	nop
 800410a:	0000      	.short	0x0000
 800410c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8004110:	bf00      	nop
 8004112:	bf00      	nop

08004114 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b08c      	sub	sp, #48	@ 0x30
 8004118:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800411a:	4b69      	ldr	r3, [pc, #420]	@ (80042c0 <xPortStartScheduler+0x1ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a69      	ldr	r2, [pc, #420]	@ (80042c4 <xPortStartScheduler+0x1b0>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d10b      	bne.n	800413c <xPortStartScheduler+0x28>
    __asm volatile
 8004124:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004128:	f383 8811 	msr	BASEPRI, r3
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f3bf 8f4f 	dsb	sy
 8004134:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004136:	bf00      	nop
 8004138:	bf00      	nop
 800413a:	e7fd      	b.n	8004138 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800413c:	4b60      	ldr	r3, [pc, #384]	@ (80042c0 <xPortStartScheduler+0x1ac>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a61      	ldr	r2, [pc, #388]	@ (80042c8 <xPortStartScheduler+0x1b4>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10b      	bne.n	800415e <xPortStartScheduler+0x4a>
    __asm volatile
 8004146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800414a:	f383 8811 	msr	BASEPRI, r3
 800414e:	f3bf 8f6f 	isb	sy
 8004152:	f3bf 8f4f 	dsb	sy
 8004156:	623b      	str	r3, [r7, #32]
}
 8004158:	bf00      	nop
 800415a:	bf00      	nop
 800415c:	e7fd      	b.n	800415a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800415e:	4b5b      	ldr	r3, [pc, #364]	@ (80042cc <xPortStartScheduler+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8004164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004166:	332c      	adds	r3, #44	@ 0x2c
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a59      	ldr	r2, [pc, #356]	@ (80042d0 <xPortStartScheduler+0x1bc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d00b      	beq.n	8004188 <xPortStartScheduler+0x74>
    __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	61fb      	str	r3, [r7, #28]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8004188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800418a:	3338      	adds	r3, #56	@ 0x38
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a51      	ldr	r2, [pc, #324]	@ (80042d4 <xPortStartScheduler+0x1c0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d00b      	beq.n	80041ac <xPortStartScheduler+0x98>
    __asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	61bb      	str	r3, [r7, #24]
}
 80041a6:	bf00      	nop
 80041a8:	bf00      	nop
 80041aa:	e7fd      	b.n	80041a8 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80041b0:	4b49      	ldr	r3, [pc, #292]	@ (80042d8 <xPortStartScheduler+0x1c4>)
 80041b2:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 80041b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	22ff      	movs	r2, #255	@ 0xff
 80041c0:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80041c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80041ca:	79fb      	ldrb	r3, [r7, #7]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	4b41      	ldr	r3, [pc, #260]	@ (80042dc <xPortStartScheduler+0x1c8>)
 80041d6:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 80041d8:	4b40      	ldr	r3, [pc, #256]	@ (80042dc <xPortStartScheduler+0x1c8>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <xPortStartScheduler+0xe4>
    __asm volatile
 80041e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e4:	f383 8811 	msr	BASEPRI, r3
 80041e8:	f3bf 8f6f 	isb	sy
 80041ec:	f3bf 8f4f 	dsb	sy
 80041f0:	617b      	str	r3, [r7, #20]
}
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
 80041f6:	e7fd      	b.n	80041f4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80041f8:	79fb      	ldrb	r3, [r7, #7]
 80041fa:	b2db      	uxtb	r3, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004202:	2b00      	cmp	r3, #0
 8004204:	d013      	beq.n	800422e <xPortStartScheduler+0x11a>
    __asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	613b      	str	r3, [r7, #16]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	3301      	adds	r3, #1
 8004222:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004224:	79fb      	ldrb	r3, [r7, #7]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	005b      	lsls	r3, r3, #1
 800422a:	b2db      	uxtb	r3, r3
 800422c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800422e:	79fb      	ldrb	r3, [r7, #7]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004236:	2b80      	cmp	r3, #128	@ 0x80
 8004238:	d0f1      	beq.n	800421e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d103      	bne.n	8004248 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8004240:	4b27      	ldr	r3, [pc, #156]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]
 8004246:	e004      	b.n	8004252 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	f1c3 0307 	rsb	r3, r3, #7
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 8004250:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004252:	4b23      	ldr	r3, [pc, #140]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	021b      	lsls	r3, r3, #8
 8004258:	4a21      	ldr	r2, [pc, #132]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 800425a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800425c:	4b20      	ldr	r3, [pc, #128]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004264:	4a1e      	ldr	r2, [pc, #120]	@ (80042e0 <xPortStartScheduler+0x1cc>)
 8004266:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8004268:	7bfb      	ldrb	r3, [r7, #15]
 800426a:	b2da      	uxtb	r2, r3
 800426c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004270:	4b1c      	ldr	r3, [pc, #112]	@ (80042e4 <xPortStartScheduler+0x1d0>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a1b      	ldr	r2, [pc, #108]	@ (80042e4 <xPortStartScheduler+0x1d0>)
 8004276:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800427a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800427c:	4b19      	ldr	r3, [pc, #100]	@ (80042e4 <xPortStartScheduler+0x1d0>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <xPortStartScheduler+0x1d0>)
 8004282:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8004286:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8004288:	4b17      	ldr	r3, [pc, #92]	@ (80042e8 <xPortStartScheduler+0x1d4>)
 800428a:	2200      	movs	r2, #0
 800428c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800428e:	f000 f96d 	bl	800456c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004292:	4b16      	ldr	r3, [pc, #88]	@ (80042ec <xPortStartScheduler+0x1d8>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004298:	f000 f98c 	bl	80045b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800429c:	4b14      	ldr	r3, [pc, #80]	@ (80042f0 <xPortStartScheduler+0x1dc>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	4a13      	ldr	r2, [pc, #76]	@ (80042f0 <xPortStartScheduler+0x1dc>)
 80042a2:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80042a6:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80042a8:	f7ff ff1e 	bl	80040e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80042ac:	f7fe ffec 	bl	8003288 <vTaskSwitchContext>
    prvTaskExitError();
 80042b0:	f7ff fed8 	bl	8004064 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3730      	adds	r7, #48	@ 0x30
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000ed00 	.word	0xe000ed00
 80042c4:	410fc271 	.word	0x410fc271
 80042c8:	410fc270 	.word	0x410fc270
 80042cc:	e000ed08 	.word	0xe000ed08
 80042d0:	080040c1 	.word	0x080040c1
 80042d4:	080044b1 	.word	0x080044b1
 80042d8:	e000e400 	.word	0xe000e400
 80042dc:	200009dc 	.word	0x200009dc
 80042e0:	200009e0 	.word	0x200009e0
 80042e4:	e000ed20 	.word	0xe000ed20
 80042e8:	e000ed1c 	.word	0xe000ed1c
 80042ec:	20000010 	.word	0x20000010
 80042f0:	e000ef34 	.word	0xe000ef34

080042f4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b087      	sub	sp, #28
 80042f8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80042fa:	4b38      	ldr	r3, [pc, #224]	@ (80043dc <vInitPrioGroupValue+0xe8>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a38      	ldr	r2, [pc, #224]	@ (80043e0 <vInitPrioGroupValue+0xec>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d10b      	bne.n	800431c <vInitPrioGroupValue+0x28>
    __asm volatile
 8004304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004308:	f383 8811 	msr	BASEPRI, r3
 800430c:	f3bf 8f6f 	isb	sy
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	613b      	str	r3, [r7, #16]
}
 8004316:	bf00      	nop
 8004318:	bf00      	nop
 800431a:	e7fd      	b.n	8004318 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800431c:	4b2f      	ldr	r3, [pc, #188]	@ (80043dc <vInitPrioGroupValue+0xe8>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a30      	ldr	r2, [pc, #192]	@ (80043e4 <vInitPrioGroupValue+0xf0>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d10b      	bne.n	800433e <vInitPrioGroupValue+0x4a>
    __asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60fb      	str	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	bf00      	nop
 800433c:	e7fd      	b.n	800433a <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800433e:	4b2a      	ldr	r3, [pc, #168]	@ (80043e8 <vInitPrioGroupValue+0xf4>)
 8004340:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	b2db      	uxtb	r3, r3
 8004348:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	22ff      	movs	r2, #255	@ 0xff
 800434e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	b2db      	uxtb	r3, r3
 8004356:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004360:	b2da      	uxtb	r2, r3
 8004362:	4b22      	ldr	r3, [pc, #136]	@ (80043ec <vInitPrioGroupValue+0xf8>)
 8004364:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004366:	4b22      	ldr	r3, [pc, #136]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 8004368:	2207      	movs	r2, #7
 800436a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800436c:	e009      	b.n	8004382 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800436e:	4b20      	ldr	r3, [pc, #128]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3b01      	subs	r3, #1
 8004374:	4a1e      	ldr	r2, [pc, #120]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 8004376:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	b2db      	uxtb	r3, r3
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004382:	78fb      	ldrb	r3, [r7, #3]
 8004384:	b2db      	uxtb	r3, r3
 8004386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800438a:	2b80      	cmp	r3, #128	@ 0x80
 800438c:	d0ef      	beq.n	800436e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800438e:	4b18      	ldr	r3, [pc, #96]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f1c3 0307 	rsb	r3, r3, #7
 8004396:	2b04      	cmp	r3, #4
 8004398:	d00b      	beq.n	80043b2 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80043b2:	4b0f      	ldr	r3, [pc, #60]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	021b      	lsls	r3, r3, #8
 80043b8:	4a0d      	ldr	r2, [pc, #52]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 80043ba:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80043bc:	4b0c      	ldr	r3, [pc, #48]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80043c4:	4a0a      	ldr	r2, [pc, #40]	@ (80043f0 <vInitPrioGroupValue+0xfc>)
 80043c6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80043d0:	bf00      	nop
 80043d2:	371c      	adds	r7, #28
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr
 80043dc:	e000ed00 	.word	0xe000ed00
 80043e0:	410fc271 	.word	0x410fc271
 80043e4:	410fc270 	.word	0x410fc270
 80043e8:	e000e400 	.word	0xe000e400
 80043ec:	200009dc 	.word	0x200009dc
 80043f0:	200009e0 	.word	0x200009e0

080043f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
    __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	607b      	str	r3, [r7, #4]
}
 800440c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800440e:	4b10      	ldr	r3, [pc, #64]	@ (8004450 <vPortEnterCritical+0x5c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3301      	adds	r3, #1
 8004414:	4a0e      	ldr	r2, [pc, #56]	@ (8004450 <vPortEnterCritical+0x5c>)
 8004416:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004418:	4b0d      	ldr	r3, [pc, #52]	@ (8004450 <vPortEnterCritical+0x5c>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2b01      	cmp	r3, #1
 800441e:	d110      	bne.n	8004442 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004420:	4b0c      	ldr	r3, [pc, #48]	@ (8004454 <vPortEnterCritical+0x60>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00b      	beq.n	8004442 <vPortEnterCritical+0x4e>
    __asm volatile
 800442a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800442e:	f383 8811 	msr	BASEPRI, r3
 8004432:	f3bf 8f6f 	isb	sy
 8004436:	f3bf 8f4f 	dsb	sy
 800443a:	603b      	str	r3, [r7, #0]
}
 800443c:	bf00      	nop
 800443e:	bf00      	nop
 8004440:	e7fd      	b.n	800443e <vPortEnterCritical+0x4a>
    }
}
 8004442:	bf00      	nop
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	20000010 	.word	0x20000010
 8004454:	e000ed04 	.word	0xe000ed04

08004458 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004458:	b480      	push	{r7}
 800445a:	b083      	sub	sp, #12
 800445c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800445e:	4b12      	ldr	r3, [pc, #72]	@ (80044a8 <vPortExitCritical+0x50>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <vPortExitCritical+0x26>
    __asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	607b      	str	r3, [r7, #4]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <vPortExitCritical+0x50>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	3b01      	subs	r3, #1
 8004484:	4a08      	ldr	r2, [pc, #32]	@ (80044a8 <vPortExitCritical+0x50>)
 8004486:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004488:	4b07      	ldr	r3, [pc, #28]	@ (80044a8 <vPortExitCritical+0x50>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d105      	bne.n	800449c <vPortExitCritical+0x44>
 8004490:	2300      	movs	r3, #0
 8004492:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800449a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr
 80044a8:	20000010 	.word	0x20000010
 80044ac:	00000000 	.word	0x00000000

080044b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80044b0:	f3ef 8009 	mrs	r0, PSP
 80044b4:	f3bf 8f6f 	isb	sy
 80044b8:	4b15      	ldr	r3, [pc, #84]	@ (8004510 <pxCurrentTCBConst>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f01e 0f10 	tst.w	lr, #16
 80044c0:	bf08      	it	eq
 80044c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80044c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ca:	6010      	str	r0, [r2, #0]
 80044cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80044d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80044d4:	f380 8811 	msr	BASEPRI, r0
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
 80044e0:	f7fe fed2 	bl	8003288 <vTaskSwitchContext>
 80044e4:	f04f 0000 	mov.w	r0, #0
 80044e8:	f380 8811 	msr	BASEPRI, r0
 80044ec:	bc09      	pop	{r0, r3}
 80044ee:	6819      	ldr	r1, [r3, #0]
 80044f0:	6808      	ldr	r0, [r1, #0]
 80044f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f6:	f01e 0f10 	tst.w	lr, #16
 80044fa:	bf08      	it	eq
 80044fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004500:	f380 8809 	msr	PSP, r0
 8004504:	f3bf 8f6f 	isb	sy
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst>:
 8004510:	2000010c 	.word	0x2000010c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
    __asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	607b      	str	r3, [r7, #4]
}
 8004530:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8004532:	f002 f81d 	bl	8006570 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004536:	f7fe fda7 	bl	8003088 <xTaskIncrementTick>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d006      	beq.n	800454e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8004540:	f002 f874 	bl	800662c <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004544:	4b08      	ldr	r3, [pc, #32]	@ (8004568 <SysTick_Handler+0x50>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	e001      	b.n	8004552 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800454e:	f002 f851 	bl	80065f4 <SEGGER_SYSVIEW_RecordExitISR>
 8004552:	2300      	movs	r3, #0
 8004554:	603b      	str	r3, [r7, #0]
    __asm volatile
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	f383 8811 	msr	BASEPRI, r3
}
 800455c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	e000ed04 	.word	0xe000ed04

0800456c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800456c:	b480      	push	{r7}
 800456e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004572:	2200      	movs	r2, #0
 8004574:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <vPortSetupTimerInterrupt+0x38>)
 8004578:	2200      	movs	r2, #0
 800457a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800457c:	4b0a      	ldr	r3, [pc, #40]	@ (80045a8 <vPortSetupTimerInterrupt+0x3c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a0a      	ldr	r2, [pc, #40]	@ (80045ac <vPortSetupTimerInterrupt+0x40>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	099b      	lsrs	r3, r3, #6
 8004588:	4a09      	ldr	r2, [pc, #36]	@ (80045b0 <vPortSetupTimerInterrupt+0x44>)
 800458a:	3b01      	subs	r3, #1
 800458c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800458e:	4b04      	ldr	r3, [pc, #16]	@ (80045a0 <vPortSetupTimerInterrupt+0x34>)
 8004590:	2207      	movs	r2, #7
 8004592:	601a      	str	r2, [r3, #0]
}
 8004594:	bf00      	nop
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010
 80045a4:	e000e018 	.word	0xe000e018
 80045a8:	20000000 	.word	0x20000000
 80045ac:	10624dd3 	.word	0x10624dd3
 80045b0:	e000e014 	.word	0xe000e014

080045b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80045b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80045c4 <vPortEnableVFP+0x10>
 80045b8:	6801      	ldr	r1, [r0, #0]
 80045ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80045be:	6001      	str	r1, [r0, #0]
 80045c0:	4770      	bx	lr
 80045c2:	0000      	.short	0x0000
 80045c4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop

080045cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80045d2:	f3ef 8305 	mrs	r3, IPSR
 80045d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2b0f      	cmp	r3, #15
 80045dc:	d915      	bls.n	800460a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80045de:	4a18      	ldr	r2, [pc, #96]	@ (8004640 <vPortValidateInterruptPriority+0x74>)
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4413      	add	r3, r2
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80045e8:	4b16      	ldr	r3, [pc, #88]	@ (8004644 <vPortValidateInterruptPriority+0x78>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	7afa      	ldrb	r2, [r7, #11]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d20b      	bcs.n	800460a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80045f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f6:	f383 8811 	msr	BASEPRI, r3
 80045fa:	f3bf 8f6f 	isb	sy
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	607b      	str	r3, [r7, #4]
}
 8004604:	bf00      	nop
 8004606:	bf00      	nop
 8004608:	e7fd      	b.n	8004606 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800460a:	4b0f      	ldr	r3, [pc, #60]	@ (8004648 <vPortValidateInterruptPriority+0x7c>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004612:	4b0e      	ldr	r3, [pc, #56]	@ (800464c <vPortValidateInterruptPriority+0x80>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d90b      	bls.n	8004632 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800461a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800461e:	f383 8811 	msr	BASEPRI, r3
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	f3bf 8f4f 	dsb	sy
 800462a:	603b      	str	r3, [r7, #0]
}
 800462c:	bf00      	nop
 800462e:	bf00      	nop
 8004630:	e7fd      	b.n	800462e <vPortValidateInterruptPriority+0x62>
    }
 8004632:	bf00      	nop
 8004634:	3714      	adds	r7, #20
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	e000e3f0 	.word	0xe000e3f0
 8004644:	200009dc 	.word	0x200009dc
 8004648:	e000ed0c 	.word	0xe000ed0c
 800464c:	200009e0 	.word	0x200009e0

08004650 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004658:	2300      	movs	r3, #0
 800465a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d022      	beq.n	80046a8 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8004662:	2308      	movs	r3, #8
 8004664:	43db      	mvns	r3, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d81b      	bhi.n	80046a4 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800466c:	2208      	movs	r2, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b00      	cmp	r3, #0
 800467c:	d014      	beq.n	80046a8 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f003 0307 	and.w	r3, r3, #7
 8004684:	f1c3 0308 	rsb	r3, r3, #8
 8004688:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800468a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800468c:	43db      	mvns	r3, r3
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	429a      	cmp	r2, r3
 8004692:	d804      	bhi.n	800469e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	4413      	add	r3, r2
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	e004      	b.n	80046a8 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800469e:	2300      	movs	r3, #0
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	e001      	b.n	80046a8 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80046a4:	2300      	movs	r3, #0
 80046a6:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80046a8:	f7fe fbb6 	bl	8002e18 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80046ac:	4b7a      	ldr	r3, [pc, #488]	@ (8004898 <pvPortMalloc+0x248>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 80046b4:	f000 f978 	bl	80049a8 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	f2c0 80d3 	blt.w	8004866 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	f000 80cf 	beq.w	8004866 <pvPortMalloc+0x216>
 80046c8:	4b74      	ldr	r3, [pc, #464]	@ (800489c <pvPortMalloc+0x24c>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	f200 80c9 	bhi.w	8004866 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80046d4:	4b72      	ldr	r3, [pc, #456]	@ (80048a0 <pvPortMalloc+0x250>)
 80046d6:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80046d8:	4b71      	ldr	r3, [pc, #452]	@ (80048a0 <pvPortMalloc+0x250>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 80046de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e0:	4a70      	ldr	r2, [pc, #448]	@ (80048a4 <pvPortMalloc+0x254>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d305      	bcc.n	80046f2 <pvPortMalloc+0xa2>
 80046e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046e8:	4a6f      	ldr	r2, [pc, #444]	@ (80048a8 <pvPortMalloc+0x258>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d801      	bhi.n	80046f2 <pvPortMalloc+0xa2>
 80046ee:	2301      	movs	r3, #1
 80046f0:	e000      	b.n	80046f4 <pvPortMalloc+0xa4>
 80046f2:	2300      	movs	r3, #0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d129      	bne.n	800474c <pvPortMalloc+0xfc>
    __asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	e7fd      	b.n	800470c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004712:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800471a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800471c:	4a61      	ldr	r2, [pc, #388]	@ (80048a4 <pvPortMalloc+0x254>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d305      	bcc.n	800472e <pvPortMalloc+0xde>
 8004722:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004724:	4a60      	ldr	r2, [pc, #384]	@ (80048a8 <pvPortMalloc+0x258>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d801      	bhi.n	800472e <pvPortMalloc+0xde>
 800472a:	2301      	movs	r3, #1
 800472c:	e000      	b.n	8004730 <pvPortMalloc+0xe0>
 800472e:	2300      	movs	r3, #0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10b      	bne.n	800474c <pvPortMalloc+0xfc>
    __asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61fb      	str	r3, [r7, #28]
}
 8004746:	bf00      	nop
 8004748:	bf00      	nop
 800474a:	e7fd      	b.n	8004748 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800474c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	429a      	cmp	r2, r3
 8004754:	d903      	bls.n	800475e <pvPortMalloc+0x10e>
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1d8      	bne.n	8004710 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <pvPortMalloc+0x248>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004764:	429a      	cmp	r2, r3
 8004766:	d07e      	beq.n	8004866 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	2208      	movs	r2, #8
 800476e:	4413      	add	r3, r2
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004774:	4a4b      	ldr	r2, [pc, #300]	@ (80048a4 <pvPortMalloc+0x254>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d305      	bcc.n	8004786 <pvPortMalloc+0x136>
 800477a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800477c:	4a4a      	ldr	r2, [pc, #296]	@ (80048a8 <pvPortMalloc+0x258>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d801      	bhi.n	8004786 <pvPortMalloc+0x136>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <pvPortMalloc+0x138>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10b      	bne.n	80047a4 <pvPortMalloc+0x154>
    __asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61bb      	str	r3, [r7, #24]
}
 800479e:	bf00      	nop
 80047a0:	bf00      	nop
 80047a2:	e7fd      	b.n	80047a0 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 80047ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d90b      	bls.n	80047ce <pvPortMalloc+0x17e>
    __asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	617b      	str	r3, [r7, #20]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	1ad2      	subs	r2, r2, r3
 80047d6:	2308      	movs	r3, #8
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	429a      	cmp	r2, r3
 80047dc:	d924      	bls.n	8004828 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4413      	add	r3, r2
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00b      	beq.n	8004808 <pvPortMalloc+0x1b8>
    __asm volatile
 80047f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f4:	f383 8811 	msr	BASEPRI, r3
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	f3bf 8f4f 	dsb	sy
 8004800:	613b      	str	r3, [r7, #16]
}
 8004802:	bf00      	nop
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	1ad2      	subs	r2, r2, r3
 8004810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004812:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800481a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004820:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004826:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004828:	4b1c      	ldr	r3, [pc, #112]	@ (800489c <pvPortMalloc+0x24c>)
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	4a1a      	ldr	r2, [pc, #104]	@ (800489c <pvPortMalloc+0x24c>)
 8004834:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <pvPortMalloc+0x24c>)
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	4b1c      	ldr	r3, [pc, #112]	@ (80048ac <pvPortMalloc+0x25c>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	429a      	cmp	r2, r3
 8004840:	d203      	bcs.n	800484a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004842:	4b16      	ldr	r3, [pc, #88]	@ (800489c <pvPortMalloc+0x24c>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a19      	ldr	r2, [pc, #100]	@ (80048ac <pvPortMalloc+0x25c>)
 8004848:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800484a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004854:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800485c:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <pvPortMalloc+0x260>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3301      	adds	r3, #1
 8004862:	4a13      	ldr	r2, [pc, #76]	@ (80048b0 <pvPortMalloc+0x260>)
 8004864:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004866:	f7fe fae5 	bl	8002e34 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	f003 0307 	and.w	r3, r3, #7
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <pvPortMalloc+0x23c>
    __asm volatile
 8004874:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004878:	f383 8811 	msr	BASEPRI, r3
 800487c:	f3bf 8f6f 	isb	sy
 8004880:	f3bf 8f4f 	dsb	sy
 8004884:	60fb      	str	r3, [r7, #12]
}
 8004886:	bf00      	nop
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <pvPortMalloc+0x238>
    return pvReturn;
 800488c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800488e:	4618      	mov	r0, r3
 8004890:	3738      	adds	r7, #56	@ 0x38
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200199ec 	.word	0x200199ec
 800489c:	200199f0 	.word	0x200199f0
 80048a0:	200199e4 	.word	0x200199e4
 80048a4:	200009e4 	.word	0x200009e4
 80048a8:	200199e3 	.word	0x200199e3
 80048ac:	200199f4 	.word	0x200199f4
 80048b0:	200199f8 	.word	0x200199f8

080048b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b088      	sub	sp, #32
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d064      	beq.n	8004990 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048c6:	2308      	movs	r3, #8
 80048c8:	425b      	negs	r3, r3
 80048ca:	69fa      	ldr	r2, [r7, #28]
 80048cc:	4413      	add	r3, r2
 80048ce:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	4a30      	ldr	r2, [pc, #192]	@ (8004998 <vPortFree+0xe4>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d305      	bcc.n	80048e8 <vPortFree+0x34>
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	4a2f      	ldr	r2, [pc, #188]	@ (800499c <vPortFree+0xe8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d801      	bhi.n	80048e8 <vPortFree+0x34>
 80048e4:	2301      	movs	r3, #1
 80048e6:	e000      	b.n	80048ea <vPortFree+0x36>
 80048e8:	2300      	movs	r3, #0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d10b      	bne.n	8004906 <vPortFree+0x52>
    __asm volatile
 80048ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f2:	f383 8811 	msr	BASEPRI, r3
 80048f6:	f3bf 8f6f 	isb	sy
 80048fa:	f3bf 8f4f 	dsb	sy
 80048fe:	617b      	str	r3, [r7, #20]
}
 8004900:	bf00      	nop
 8004902:	bf00      	nop
 8004904:	e7fd      	b.n	8004902 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004906:	69bb      	ldr	r3, [r7, #24]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db0b      	blt.n	8004926 <vPortFree+0x72>
    __asm volatile
 800490e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004912:	f383 8811 	msr	BASEPRI, r3
 8004916:	f3bf 8f6f 	isb	sy
 800491a:	f3bf 8f4f 	dsb	sy
 800491e:	613b      	str	r3, [r7, #16]
}
 8004920:	bf00      	nop
 8004922:	bf00      	nop
 8004924:	e7fd      	b.n	8004922 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <vPortFree+0x92>
    __asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	60fb      	str	r3, [r7, #12]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	0fdb      	lsrs	r3, r3, #31
 800494c:	f003 0301 	and.w	r3, r3, #1
 8004950:	b2db      	uxtb	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d01c      	beq.n	8004990 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004956:	69bb      	ldr	r3, [r7, #24]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d118      	bne.n	8004990 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800496a:	f7fe fa55 	bl	8002e18 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	685a      	ldr	r2, [r3, #4]
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <vPortFree+0xec>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4413      	add	r3, r2
 8004978:	4a09      	ldr	r2, [pc, #36]	@ (80049a0 <vPortFree+0xec>)
 800497a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800497c:	69b8      	ldr	r0, [r7, #24]
 800497e:	f000 f86d 	bl	8004a5c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004982:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <vPortFree+0xf0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	3301      	adds	r3, #1
 8004988:	4a06      	ldr	r2, [pc, #24]	@ (80049a4 <vPortFree+0xf0>)
 800498a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800498c:	f7fe fa52 	bl	8002e34 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004990:	bf00      	nop
 8004992:	3720      	adds	r7, #32
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	200009e4 	.word	0x200009e4
 800499c:	200199e3 	.word	0x200199e3
 80049a0:	200199f0 	.word	0x200199f0
 80049a4:	200199fc 	.word	0x200199fc

080049a8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80049ae:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 80049b2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80049b4:	4b24      	ldr	r3, [pc, #144]	@ (8004a48 <prvHeapInit+0xa0>)
 80049b6:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f003 0307 	and.w	r3, r3, #7
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	3307      	adds	r3, #7
 80049c6:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a48 <prvHeapInit+0xa0>)
 80049d8:	4413      	add	r3, r2
 80049da:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4a1b      	ldr	r2, [pc, #108]	@ (8004a4c <prvHeapInit+0xa4>)
 80049e0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049e2:	4b1a      	ldr	r3, [pc, #104]	@ (8004a4c <prvHeapInit+0xa4>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	4413      	add	r3, r2
 80049ee:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80049f0:	2208      	movs	r2, #8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	f023 0307 	bic.w	r3, r3, #7
 80049fe:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a13      	ldr	r2, [pc, #76]	@ (8004a50 <prvHeapInit+0xa8>)
 8004a04:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004a06:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <prvHeapInit+0xa8>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8004a0e:	4b10      	ldr	r3, [pc, #64]	@ (8004a50 <prvHeapInit+0xa8>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	1ad2      	subs	r2, r2, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004a24:	4b0a      	ldr	r3, [pc, #40]	@ (8004a50 <prvHeapInit+0xa8>)
 8004a26:	681a      	ldr	r2, [r3, #0]
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	4a08      	ldr	r2, [pc, #32]	@ (8004a54 <prvHeapInit+0xac>)
 8004a32:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	685b      	ldr	r3, [r3, #4]
 8004a38:	4a07      	ldr	r2, [pc, #28]	@ (8004a58 <prvHeapInit+0xb0>)
 8004a3a:	6013      	str	r3, [r2, #0]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	200009e4 	.word	0x200009e4
 8004a4c:	200199e4 	.word	0x200199e4
 8004a50:	200199ec 	.word	0x200199ec
 8004a54:	200199f4 	.word	0x200199f4
 8004a58:	200199f0 	.word	0x200199f0

08004a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	b087      	sub	sp, #28
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004a64:	4b36      	ldr	r3, [pc, #216]	@ (8004b40 <prvInsertBlockIntoFreeList+0xe4>)
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	e002      	b.n	8004a70 <prvInsertBlockIntoFreeList+0x14>
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d8f7      	bhi.n	8004a6a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4a30      	ldr	r2, [pc, #192]	@ (8004b40 <prvInsertBlockIntoFreeList+0xe4>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d018      	beq.n	8004ab4 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	4a2f      	ldr	r2, [pc, #188]	@ (8004b44 <prvInsertBlockIntoFreeList+0xe8>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d305      	bcc.n	8004a96 <prvInsertBlockIntoFreeList+0x3a>
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004b48 <prvInsertBlockIntoFreeList+0xec>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d801      	bhi.n	8004a96 <prvInsertBlockIntoFreeList+0x3a>
 8004a92:	2301      	movs	r3, #1
 8004a94:	e000      	b.n	8004a98 <prvInsertBlockIntoFreeList+0x3c>
 8004a96:	2300      	movs	r3, #0
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d10b      	bne.n	8004ab4 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	60fb      	str	r3, [r7, #12]
}
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4413      	add	r3, r2
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d108      	bne.n	8004ad8 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	441a      	add	r2, r3
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	441a      	add	r2, r3
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d118      	bne.n	8004b1e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <prvInsertBlockIntoFreeList+0xf0>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d00d      	beq.n	8004b14 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	441a      	add	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	601a      	str	r2, [r3, #0]
 8004b12:	e008      	b.n	8004b26 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004b14:	4b0d      	ldr	r3, [pc, #52]	@ (8004b4c <prvInsertBlockIntoFreeList+0xf0>)
 8004b16:	681a      	ldr	r2, [r3, #0]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e003      	b.n	8004b26 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d002      	beq.n	8004b34 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b34:	bf00      	nop
 8004b36:	371c      	adds	r7, #28
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	200199e4 	.word	0x200199e4
 8004b44:	200009e4 	.word	0x200009e4
 8004b48:	200199e3 	.word	0x200199e3
 8004b4c:	200199ec 	.word	0x200199ec

08004b50 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b54:	4803      	ldr	r0, [pc, #12]	@ (8004b64 <_cbSendSystemDesc+0x14>)
 8004b56:	f001 fcb5 	bl	80064c4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b5a:	4803      	ldr	r0, [pc, #12]	@ (8004b68 <_cbSendSystemDesc+0x18>)
 8004b5c:	f001 fcb2 	bl	80064c4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b60:	bf00      	nop
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	080076e8 	.word	0x080076e8
 8004b68:	08007724 	.word	0x08007724

08004b6c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b70:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <SEGGER_SYSVIEW_Conf+0x20>)
 8004b72:	6818      	ldr	r0, [r3, #0]
 8004b74:	4b05      	ldr	r3, [pc, #20]	@ (8004b8c <SEGGER_SYSVIEW_Conf+0x20>)
 8004b76:	6819      	ldr	r1, [r3, #0]
 8004b78:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b7a:	4a06      	ldr	r2, [pc, #24]	@ (8004b94 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b7c:	f001 f928 	bl	8005dd0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b80:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b84:	f001 f968 	bl	8005e58 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b88:	bf00      	nop
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20000000 	.word	0x20000000
 8004b90:	08004b51 	.word	0x08004b51
 8004b94:	080077c0 	.word	0x080077c0

08004b98 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	607b      	str	r3, [r7, #4]
 8004ba2:	e033      	b.n	8004c0c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004ba4:	491e      	ldr	r1, [pc, #120]	@ (8004c20 <_cbSendTaskList+0x88>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	6818      	ldr	r0, [r3, #0]
 8004bb4:	491a      	ldr	r1, [pc, #104]	@ (8004c20 <_cbSendTaskList+0x88>)
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4413      	add	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	6819      	ldr	r1, [r3, #0]
 8004bc6:	4c16      	ldr	r4, [pc, #88]	@ (8004c20 <_cbSendTaskList+0x88>)
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	4423      	add	r3, r4
 8004bd4:	3308      	adds	r3, #8
 8004bd6:	681c      	ldr	r4, [r3, #0]
 8004bd8:	4d11      	ldr	r5, [pc, #68]	@ (8004c20 <_cbSendTaskList+0x88>)
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	442b      	add	r3, r5
 8004be6:	330c      	adds	r3, #12
 8004be8:	681d      	ldr	r5, [r3, #0]
 8004bea:	4e0d      	ldr	r6, [pc, #52]	@ (8004c20 <_cbSendTaskList+0x88>)
 8004bec:	687a      	ldr	r2, [r7, #4]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	4413      	add	r3, r2
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	4433      	add	r3, r6
 8004bf8:	3310      	adds	r3, #16
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	462b      	mov	r3, r5
 8004c00:	4622      	mov	r2, r4
 8004c02:	f000 f8bd 	bl	8004d80 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	607b      	str	r3, [r7, #4]
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <_cbSendTaskList+0x8c>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	687a      	ldr	r2, [r7, #4]
 8004c12:	429a      	cmp	r2, r3
 8004c14:	d3c6      	bcc.n	8004ba4 <_cbSendTaskList+0xc>
  }
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c20:	20019a00 	.word	0x20019a00
 8004c24:	20019aa0 	.word	0x20019aa0

08004c28 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004c30:	f7fe fa14 	bl	800305c <xTaskGetTickCountFromISR>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2200      	movs	r2, #0
 8004c38:	469a      	mov	sl, r3
 8004c3a:	4693      	mov	fp, r2
 8004c3c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004c40:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004c44:	4602      	mov	r2, r0
 8004c46:	460b      	mov	r3, r1
 8004c48:	f04f 0a00 	mov.w	sl, #0
 8004c4c:	f04f 0b00 	mov.w	fp, #0
 8004c50:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c54:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c58:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c5c:	4652      	mov	r2, sl
 8004c5e:	465b      	mov	r3, fp
 8004c60:	1a14      	subs	r4, r2, r0
 8004c62:	eb63 0501 	sbc.w	r5, r3, r1
 8004c66:	f04f 0200 	mov.w	r2, #0
 8004c6a:	f04f 0300 	mov.w	r3, #0
 8004c6e:	00ab      	lsls	r3, r5, #2
 8004c70:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c74:	00a2      	lsls	r2, r4, #2
 8004c76:	4614      	mov	r4, r2
 8004c78:	461d      	mov	r5, r3
 8004c7a:	eb14 0800 	adds.w	r8, r4, r0
 8004c7e:	eb45 0901 	adc.w	r9, r5, r1
 8004c82:	f04f 0200 	mov.w	r2, #0
 8004c86:	f04f 0300 	mov.w	r3, #0
 8004c8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c96:	4690      	mov	r8, r2
 8004c98:	4699      	mov	r9, r3
 8004c9a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	3708      	adds	r7, #8
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004cb0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af02      	add	r7, sp, #8
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	492b      	ldr	r1, [pc, #172]	@ (8004d70 <SYSVIEW_AddTask+0xc0>)
 8004cc2:	68b8      	ldr	r0, [r7, #8]
 8004cc4:	f002 f83e 	bl	8006d44 <memcmp>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d04b      	beq.n	8004d66 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004cce:	4b29      	ldr	r3, [pc, #164]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b07      	cmp	r3, #7
 8004cd4:	d903      	bls.n	8004cde <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004cd6:	4828      	ldr	r0, [pc, #160]	@ (8004d78 <SYSVIEW_AddTask+0xc8>)
 8004cd8:	f001 ffa4 	bl	8006c24 <SEGGER_SYSVIEW_Warn>
    return;
 8004cdc:	e044      	b.n	8004d68 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004cde:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	4926      	ldr	r1, [pc, #152]	@ (8004d7c <SYSVIEW_AddTask+0xcc>)
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	4413      	add	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	440b      	add	r3, r1
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004cf2:	4b20      	ldr	r3, [pc, #128]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	4921      	ldr	r1, [pc, #132]	@ (8004d7c <SYSVIEW_AddTask+0xcc>)
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009b      	lsls	r3, r3, #2
 8004d00:	440b      	add	r3, r1
 8004d02:	3304      	adds	r3, #4
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004d08:	4b1a      	ldr	r3, [pc, #104]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	491b      	ldr	r1, [pc, #108]	@ (8004d7c <SYSVIEW_AddTask+0xcc>)
 8004d0e:	4613      	mov	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	4413      	add	r3, r2
 8004d14:	009b      	lsls	r3, r3, #2
 8004d16:	440b      	add	r3, r1
 8004d18:	3308      	adds	r3, #8
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004d1e:	4b15      	ldr	r3, [pc, #84]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	4916      	ldr	r1, [pc, #88]	@ (8004d7c <SYSVIEW_AddTask+0xcc>)
 8004d24:	4613      	mov	r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	4413      	add	r3, r2
 8004d2a:	009b      	lsls	r3, r3, #2
 8004d2c:	440b      	add	r3, r1
 8004d2e:	330c      	adds	r3, #12
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004d34:	4b0f      	ldr	r3, [pc, #60]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	4910      	ldr	r1, [pc, #64]	@ (8004d7c <SYSVIEW_AddTask+0xcc>)
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	440b      	add	r3, r1
 8004d44:	3310      	adds	r3, #16
 8004d46:	69ba      	ldr	r2, [r7, #24]
 8004d48:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	4a08      	ldr	r2, [pc, #32]	@ (8004d74 <SYSVIEW_AddTask+0xc4>)
 8004d52:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d54:	69bb      	ldr	r3, [r7, #24]
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68b9      	ldr	r1, [r7, #8]
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 f80e 	bl	8004d80 <SYSVIEW_SendTaskInfo>
 8004d64:	e000      	b.n	8004d68 <SYSVIEW_AddTask+0xb8>
    return;
 8004d66:	bf00      	nop

}
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	08007734 	.word	0x08007734
 8004d74:	20019aa0 	.word	0x20019aa0
 8004d78:	0800773c 	.word	0x0800773c
 8004d7c:	20019a00 	.word	0x20019a00

08004d80 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	@ 0x28
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	607a      	str	r2, [r7, #4]
 8004d8c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d8e:	f107 0310 	add.w	r3, r7, #16
 8004d92:	2218      	movs	r2, #24
 8004d94:	2100      	movs	r1, #0
 8004d96:	4618      	mov	r0, r3
 8004d98:	f001 ffe4 	bl	8006d64 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004db0:	f107 0310 	add.w	r3, r7, #16
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fa8d 	bl	80062d4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004dba:	bf00      	nop
 8004dbc:	3728      	adds	r7, #40	@ 0x28
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004dca:	4b26      	ldr	r3, [pc, #152]	@ (8004e64 <_DoInit+0xa0>)
 8004dcc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8004dce:	22a8      	movs	r2, #168	@ 0xa8
 8004dd0:	2100      	movs	r1, #0
 8004dd2:	6838      	ldr	r0, [r7, #0]
 8004dd4:	f001 ffc6 	bl	8006d64 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	2203      	movs	r2, #3
 8004ddc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	2203      	movs	r2, #3
 8004de2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	4a20      	ldr	r2, [pc, #128]	@ (8004e68 <_DoInit+0xa4>)
 8004de8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	4a1f      	ldr	r2, [pc, #124]	@ (8004e6c <_DoInit+0xa8>)
 8004dee:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004df6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	2200      	movs	r2, #0
 8004e02:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2200      	movs	r2, #0
 8004e08:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	4a16      	ldr	r2, [pc, #88]	@ (8004e68 <_DoInit+0xa4>)
 8004e0e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	4a17      	ldr	r2, [pc, #92]	@ (8004e70 <_DoInit+0xac>)
 8004e14:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	2210      	movs	r2, #16
 8004e1a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2200      	movs	r2, #0
 8004e26:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e2e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e32:	2300      	movs	r3, #0
 8004e34:	607b      	str	r3, [r7, #4]
 8004e36:	e00c      	b.n	8004e52 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f1c3 030f 	rsb	r3, r3, #15
 8004e3e:	4a0d      	ldr	r2, [pc, #52]	@ (8004e74 <_DoInit+0xb0>)
 8004e40:	5cd1      	ldrb	r1, [r2, r3]
 8004e42:	683a      	ldr	r2, [r7, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	4413      	add	r3, r2
 8004e48:	460a      	mov	r2, r1
 8004e4a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3301      	adds	r3, #1
 8004e50:	607b      	str	r3, [r7, #4]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b0f      	cmp	r3, #15
 8004e56:	d9ef      	bls.n	8004e38 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004e58:	f3bf 8f5f 	dmb	sy
}
 8004e5c:	bf00      	nop
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20019aa4 	.word	0x20019aa4
 8004e68:	0800778c 	.word	0x0800778c
 8004e6c:	20019b4c 	.word	0x20019b4c
 8004e70:	20019f4c 	.word	0x20019f4c
 8004e74:	080077c8 	.word	0x080077c8

08004e78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	@ 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004e84:	4b3e      	ldr	r3, [pc, #248]	@ (8004f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b53      	cmp	r3, #83	@ 0x53
 8004e90:	d001      	beq.n	8004e96 <SEGGER_RTT_ReadNoLock+0x1e>
 8004e92:	f7ff ff97 	bl	8004dc4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	4413      	add	r3, r2
 8004e9e:	00db      	lsls	r3, r3, #3
 8004ea0:	3360      	adds	r3, #96	@ 0x60
 8004ea2:	4a37      	ldr	r2, [pc, #220]	@ (8004f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	691b      	ldr	r3, [r3, #16]
 8004eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	429a      	cmp	r2, r3
 8004ec2:	d92b      	bls.n	8004f1c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eca:	1ad3      	subs	r3, r2, r3
 8004ecc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004ece:	697a      	ldr	r2, [r7, #20]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	bf28      	it	cs
 8004ed6:	4613      	movcs	r3, r2
 8004ed8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004eda:	69fb      	ldr	r3, [r7, #28]
 8004edc:	685a      	ldr	r2, [r3, #4]
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	4413      	add	r3, r2
 8004ee2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	6939      	ldr	r1, [r7, #16]
 8004ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004eea:	f001 ff69 	bl	8006dc0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	4413      	add	r3, r2
 8004ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	4413      	add	r3, r2
 8004efc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004f0e:	69fb      	ldr	r3, [r7, #28]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d101      	bne.n	8004f1c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	bf28      	it	cs
 8004f2c:	4613      	movcs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d019      	beq.n	8004f6a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	4413      	add	r3, r2
 8004f3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004f40:	697a      	ldr	r2, [r7, #20]
 8004f42:	6939      	ldr	r1, [r7, #16]
 8004f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004f46:	f001 ff3b 	bl	8006dc0 <memcpy>
    NumBytesRead += NumBytesRem;
 8004f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	4413      	add	r3, r2
 8004f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	4413      	add	r3, r2
 8004f58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	4413      	add	r3, r2
 8004f68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d002      	beq.n	8004f76 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f74:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3730      	adds	r7, #48	@ 0x30
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}
 8004f80:	20019aa4 	.word	0x20019aa4

08004f84 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b088      	sub	sp, #32
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f92:	4b3d      	ldr	r3, [pc, #244]	@ (8005088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f94:	61bb      	str	r3, [r7, #24]
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	b2db      	uxtb	r3, r3
 8004f9c:	2b53      	cmp	r3, #83	@ 0x53
 8004f9e:	d001      	beq.n	8004fa4 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004fa0:	f7ff ff10 	bl	8004dc4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004fa4:	f3ef 8311 	mrs	r3, BASEPRI
 8004fa8:	f04f 0120 	mov.w	r1, #32
 8004fac:	f381 8811 	msr	BASEPRI, r1
 8004fb0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004fb2:	4b35      	ldr	r3, [pc, #212]	@ (8005088 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004fb4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004fba:	6939      	ldr	r1, [r7, #16]
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	4413      	add	r3, r2
 8004fc6:	00db      	lsls	r3, r3, #3
 8004fc8:	440b      	add	r3, r1
 8004fca:	3304      	adds	r3, #4
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d008      	beq.n	8004fe4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	dbeb      	blt.n	8004fba <SEGGER_RTT_AllocUpBuffer+0x36>
 8004fe2:	e000      	b.n	8004fe6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004fe4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	69fa      	ldr	r2, [r7, #28]
 8004fec:	429a      	cmp	r2, r3
 8004fee:	da3f      	bge.n	8005070 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004ff0:	6939      	ldr	r1, [r7, #16]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	005b      	lsls	r3, r3, #1
 8004ffa:	4413      	add	r3, r2
 8004ffc:	00db      	lsls	r3, r3, #3
 8004ffe:	440b      	add	r3, r1
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005004:	6939      	ldr	r1, [r7, #16]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	1c5a      	adds	r2, r3, #1
 800500a:	4613      	mov	r3, r2
 800500c:	005b      	lsls	r3, r3, #1
 800500e:	4413      	add	r3, r2
 8005010:	00db      	lsls	r3, r3, #3
 8005012:	440b      	add	r3, r1
 8005014:	3304      	adds	r3, #4
 8005016:	68ba      	ldr	r2, [r7, #8]
 8005018:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800501a:	6939      	ldr	r1, [r7, #16]
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	4613      	mov	r3, r2
 8005020:	005b      	lsls	r3, r3, #1
 8005022:	4413      	add	r3, r2
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	440b      	add	r3, r1
 8005028:	3320      	adds	r3, #32
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800502e:	6939      	ldr	r1, [r7, #16]
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	4613      	mov	r3, r2
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	4413      	add	r3, r2
 8005038:	00db      	lsls	r3, r3, #3
 800503a:	440b      	add	r3, r1
 800503c:	3328      	adds	r3, #40	@ 0x28
 800503e:	2200      	movs	r2, #0
 8005040:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005042:	6939      	ldr	r1, [r7, #16]
 8005044:	69fa      	ldr	r2, [r7, #28]
 8005046:	4613      	mov	r3, r2
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	4413      	add	r3, r2
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	440b      	add	r3, r1
 8005050:	3324      	adds	r3, #36	@ 0x24
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005056:	6939      	ldr	r1, [r7, #16]
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	4613      	mov	r3, r2
 800505c:	005b      	lsls	r3, r3, #1
 800505e:	4413      	add	r3, r2
 8005060:	00db      	lsls	r3, r3, #3
 8005062:	440b      	add	r3, r1
 8005064:	332c      	adds	r3, #44	@ 0x2c
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800506a:	f3bf 8f5f 	dmb	sy
 800506e:	e002      	b.n	8005076 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005070:	f04f 33ff 	mov.w	r3, #4294967295
 8005074:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800507c:	69fb      	ldr	r3, [r7, #28]
}
 800507e:	4618      	mov	r0, r3
 8005080:	3720      	adds	r7, #32
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	20019aa4 	.word	0x20019aa4

0800508c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b08a      	sub	sp, #40	@ 0x28
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
 8005098:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800509a:	4b21      	ldr	r3, [pc, #132]	@ (8005120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800509c:	623b      	str	r3, [r7, #32]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	2b53      	cmp	r3, #83	@ 0x53
 80050a6:	d001      	beq.n	80050ac <SEGGER_RTT_ConfigDownBuffer+0x20>
 80050a8:	f7ff fe8c 	bl	8004dc4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005120 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80050ae:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d82c      	bhi.n	8005110 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80050b6:	f3ef 8311 	mrs	r3, BASEPRI
 80050ba:	f04f 0120 	mov.w	r1, #32
 80050be:	f381 8811 	msr	BASEPRI, r1
 80050c2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	4413      	add	r3, r2
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	3360      	adds	r3, #96	@ 0x60
 80050d0:	69fa      	ldr	r2, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	687a      	ldr	r2, [r7, #4]
 80050e6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	2200      	movs	r2, #0
 80050f2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050fe:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005100:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800510a:	2300      	movs	r3, #0
 800510c:	627b      	str	r3, [r7, #36]	@ 0x24
 800510e:	e002      	b.n	8005116 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005110:	f04f 33ff 	mov.w	r3, #4294967295
 8005114:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005118:	4618      	mov	r0, r3
 800511a:	3728      	adds	r7, #40	@ 0x28
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	20019aa4 	.word	0x20019aa4

08005124 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d105      	bne.n	8005142 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	1c5a      	adds	r2, r3, #1
 800513a:	60fa      	str	r2, [r7, #12]
 800513c:	2200      	movs	r2, #0
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	e022      	b.n	8005188 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	60fa      	str	r2, [r7, #12]
 800514c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b80      	cmp	r3, #128	@ 0x80
 8005152:	d90a      	bls.n	800516a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8005154:	2380      	movs	r3, #128	@ 0x80
 8005156:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8005158:	e007      	b.n	800516a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	1c53      	adds	r3, r2, #1
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	1c59      	adds	r1, r3, #1
 8005164:	60f9      	str	r1, [r7, #12]
 8005166:	7812      	ldrb	r2, [r2, #0]
 8005168:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	1e5a      	subs	r2, r3, #1
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d003      	beq.n	800517c <_EncodeStr+0x58>
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1ee      	bne.n	800515a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	b2da      	uxtb	r2, r3
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8005188:	68fb      	ldr	r3, [r7, #12]
}
 800518a:	4618      	mov	r0, r3
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3307      	adds	r3, #7
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80051b6:	4b34      	ldr	r3, [pc, #208]	@ (8005288 <_HandleIncomingPacket+0xd8>)
 80051b8:	7e1b      	ldrb	r3, [r3, #24]
 80051ba:	4618      	mov	r0, r3
 80051bc:	1cfb      	adds	r3, r7, #3
 80051be:	2201      	movs	r2, #1
 80051c0:	4619      	mov	r1, r3
 80051c2:	f7ff fe59 	bl	8004e78 <SEGGER_RTT_ReadNoLock>
 80051c6:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d057      	beq.n	800527e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	2b80      	cmp	r3, #128	@ 0x80
 80051d2:	d031      	beq.n	8005238 <_HandleIncomingPacket+0x88>
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	dc40      	bgt.n	800525a <_HandleIncomingPacket+0xaa>
 80051d8:	2b07      	cmp	r3, #7
 80051da:	dc15      	bgt.n	8005208 <_HandleIncomingPacket+0x58>
 80051dc:	2b00      	cmp	r3, #0
 80051de:	dd3c      	ble.n	800525a <_HandleIncomingPacket+0xaa>
 80051e0:	3b01      	subs	r3, #1
 80051e2:	2b06      	cmp	r3, #6
 80051e4:	d839      	bhi.n	800525a <_HandleIncomingPacket+0xaa>
 80051e6:	a201      	add	r2, pc, #4	@ (adr r2, 80051ec <_HandleIncomingPacket+0x3c>)
 80051e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ec:	0800520f 	.word	0x0800520f
 80051f0:	08005215 	.word	0x08005215
 80051f4:	0800521b 	.word	0x0800521b
 80051f8:	08005221 	.word	0x08005221
 80051fc:	08005227 	.word	0x08005227
 8005200:	0800522d 	.word	0x0800522d
 8005204:	08005233 	.word	0x08005233
 8005208:	2b7f      	cmp	r3, #127	@ 0x7f
 800520a:	d033      	beq.n	8005274 <_HandleIncomingPacket+0xc4>
 800520c:	e025      	b.n	800525a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800520e:	f000 fee7 	bl	8005fe0 <SEGGER_SYSVIEW_Start>
      break;
 8005212:	e034      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005214:	f000 ff9e 	bl	8006154 <SEGGER_SYSVIEW_Stop>
      break;
 8005218:	e031      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800521a:	f001 f977 	bl	800650c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800521e:	e02e      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005220:	f001 f93c 	bl	800649c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005224:	e02b      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005226:	f000 ffbb 	bl	80061a0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800522a:	e028      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800522c:	f001 fca8 	bl	8006b80 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005230:	e025      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005232:	f001 fc87 	bl	8006b44 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005236:	e022      	b.n	800527e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005238:	4b13      	ldr	r3, [pc, #76]	@ (8005288 <_HandleIncomingPacket+0xd8>)
 800523a:	7e1b      	ldrb	r3, [r3, #24]
 800523c:	4618      	mov	r0, r3
 800523e:	1cfb      	adds	r3, r7, #3
 8005240:	2201      	movs	r2, #1
 8005242:	4619      	mov	r1, r3
 8005244:	f7ff fe18 	bl	8004e78 <SEGGER_RTT_ReadNoLock>
 8005248:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d013      	beq.n	8005278 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005250:	78fb      	ldrb	r3, [r7, #3]
 8005252:	4618      	mov	r0, r3
 8005254:	f001 fbec 	bl	8006a30 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005258:	e00e      	b.n	8005278 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800525a:	78fb      	ldrb	r3, [r7, #3]
 800525c:	b25b      	sxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	da0c      	bge.n	800527c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005262:	4b09      	ldr	r3, [pc, #36]	@ (8005288 <_HandleIncomingPacket+0xd8>)
 8005264:	7e1b      	ldrb	r3, [r3, #24]
 8005266:	4618      	mov	r0, r3
 8005268:	1cfb      	adds	r3, r7, #3
 800526a:	2201      	movs	r2, #1
 800526c:	4619      	mov	r1, r3
 800526e:	f7ff fe03 	bl	8004e78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005272:	e003      	b.n	800527c <_HandleIncomingPacket+0xcc>
      break;
 8005274:	bf00      	nop
 8005276:	e002      	b.n	800527e <_HandleIncomingPacket+0xce>
      break;
 8005278:	bf00      	nop
 800527a:	e000      	b.n	800527e <_HandleIncomingPacket+0xce>
      break;
 800527c:	bf00      	nop
    }
  }
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	2001af64 	.word	0x2001af64

0800528c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b08c      	sub	sp, #48	@ 0x30
 8005290:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005292:	2301      	movs	r3, #1
 8005294:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005296:	1d3b      	adds	r3, r7, #4
 8005298:	3301      	adds	r3, #1
 800529a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052a0:	4b31      	ldr	r3, [pc, #196]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052a6:	e00b      	b.n	80052c0 <_TrySendOverflowPacket+0x34>
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	b2da      	uxtb	r2, r3
 80052ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ae:	1c59      	adds	r1, r3, #1
 80052b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80052b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052bc:	09db      	lsrs	r3, r3, #7
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80052c4:	d8f0      	bhi.n	80052a8 <_TrySendOverflowPacket+0x1c>
 80052c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
 80052d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052d6:	4b25      	ldr	r3, [pc, #148]	@ (800536c <_TrySendOverflowPacket+0xe0>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80052dc:	4b22      	ldr	r3, [pc, #136]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	69ba      	ldr	r2, [r7, #24]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	623b      	str	r3, [r7, #32]
 80052ee:	e00b      	b.n	8005308 <_TrySendOverflowPacket+0x7c>
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	b2da      	uxtb	r2, r3
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	1c59      	adds	r1, r3, #1
 80052f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80052fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	09db      	lsrs	r3, r3, #7
 8005306:	623b      	str	r3, [r7, #32]
 8005308:	6a3b      	ldr	r3, [r7, #32]
 800530a:	2b7f      	cmp	r3, #127	@ 0x7f
 800530c:	d8f0      	bhi.n	80052f0 <_TrySendOverflowPacket+0x64>
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	1c5a      	adds	r2, r3, #1
 8005312:	627a      	str	r2, [r7, #36]	@ 0x24
 8005314:	6a3a      	ldr	r2, [r7, #32]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800531e:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 8005320:	785b      	ldrb	r3, [r3, #1]
 8005322:	4618      	mov	r0, r3
 8005324:	1d3b      	adds	r3, r7, #4
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	461a      	mov	r2, r3
 800532c:	1d3b      	adds	r3, r7, #4
 800532e:	4619      	mov	r1, r3
 8005330:	f7fa ff56 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005334:	4603      	mov	r3, r0
 8005336:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d009      	beq.n	8005352 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800533e:	4a0a      	ldr	r2, [pc, #40]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005344:	4b08      	ldr	r3, [pc, #32]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	b2da      	uxtb	r2, r3
 800534c:	4b06      	ldr	r3, [pc, #24]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 800534e:	701a      	strb	r2, [r3, #0]
 8005350:	e004      	b.n	800535c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005352:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	3301      	adds	r3, #1
 8005358:	4a03      	ldr	r2, [pc, #12]	@ (8005368 <_TrySendOverflowPacket+0xdc>)
 800535a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800535c:	693b      	ldr	r3, [r7, #16]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3730      	adds	r7, #48	@ 0x30
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	2001af64 	.word	0x2001af64
 800536c:	e0001004 	.word	0xe0001004

08005370 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005370:	b580      	push	{r7, lr}
 8005372:	b08a      	sub	sp, #40	@ 0x28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800537c:	4b98      	ldr	r3, [pc, #608]	@ (80055e0 <_SendPacket+0x270>)
 800537e:	781b      	ldrb	r3, [r3, #0]
 8005380:	2b01      	cmp	r3, #1
 8005382:	d010      	beq.n	80053a6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005384:	4b96      	ldr	r3, [pc, #600]	@ (80055e0 <_SendPacket+0x270>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	f000 812d 	beq.w	80055e8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800538e:	4b94      	ldr	r3, [pc, #592]	@ (80055e0 <_SendPacket+0x270>)
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d109      	bne.n	80053aa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005396:	f7ff ff79 	bl	800528c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800539a:	4b91      	ldr	r3, [pc, #580]	@ (80055e0 <_SendPacket+0x270>)
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	f040 8124 	bne.w	80055ec <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80053a4:	e001      	b.n	80053aa <_SendPacket+0x3a>
    goto Send;
 80053a6:	bf00      	nop
 80053a8:	e000      	b.n	80053ac <_SendPacket+0x3c>
Send:
 80053aa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b1f      	cmp	r3, #31
 80053b0:	d809      	bhi.n	80053c6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80053b2:	4b8b      	ldr	r3, [pc, #556]	@ (80055e0 <_SendPacket+0x270>)
 80053b4:	69da      	ldr	r2, [r3, #28]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	fa22 f303 	lsr.w	r3, r2, r3
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	f040 8115 	bne.w	80055f0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b17      	cmp	r3, #23
 80053ca:	d807      	bhi.n	80053dc <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3b01      	subs	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	701a      	strb	r2, [r3, #0]
 80053da:	e0c4      	b.n	8005566 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80053dc:	68ba      	ldr	r2, [r7, #8]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80053e4:	69fb      	ldr	r3, [r7, #28]
 80053e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80053e8:	d912      	bls.n	8005410 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	09da      	lsrs	r2, r3, #7
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	60fb      	str	r3, [r7, #12]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	b2db      	uxtb	r3, r3
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	3a01      	subs	r2, #1
 8005402:	60fa      	str	r2, [r7, #12]
 8005404:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005408:	b2da      	uxtb	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	701a      	strb	r2, [r3, #0]
 800540e:	e006      	b.n	800541e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	3b01      	subs	r3, #1
 8005414:	60fb      	str	r3, [r7, #12]
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	b2da      	uxtb	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2b7e      	cmp	r3, #126	@ 0x7e
 8005422:	d807      	bhi.n	8005434 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	3b01      	subs	r3, #1
 8005428:	60fb      	str	r3, [r7, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	b2da      	uxtb	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e098      	b.n	8005566 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800543a:	d212      	bcs.n	8005462 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	09da      	lsrs	r2, r3, #7
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	3b01      	subs	r3, #1
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	68fa      	ldr	r2, [r7, #12]
 8005452:	3a01      	subs	r2, #1
 8005454:	60fa      	str	r2, [r7, #12]
 8005456:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800545a:	b2da      	uxtb	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	701a      	strb	r2, [r3, #0]
 8005460:	e081      	b.n	8005566 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005468:	d21d      	bcs.n	80054a6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	0b9a      	lsrs	r2, r3, #14
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3b01      	subs	r3, #1
 8005472:	60fb      	str	r3, [r7, #12]
 8005474:	b2d2      	uxtb	r2, r2
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	09db      	lsrs	r3, r3, #7
 800547e:	b2db      	uxtb	r3, r3
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	3a01      	subs	r2, #1
 8005484:	60fa      	str	r2, [r7, #12]
 8005486:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800548a:	b2da      	uxtb	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	3a01      	subs	r2, #1
 8005498:	60fa      	str	r2, [r7, #12]
 800549a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	701a      	strb	r2, [r3, #0]
 80054a4:	e05f      	b.n	8005566 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80054ac:	d228      	bcs.n	8005500 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0d5a      	lsrs	r2, r3, #21
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	3b01      	subs	r3, #1
 80054b6:	60fb      	str	r3, [r7, #12]
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	0b9b      	lsrs	r3, r3, #14
 80054c2:	b2db      	uxtb	r3, r3
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	3a01      	subs	r2, #1
 80054c8:	60fa      	str	r2, [r7, #12]
 80054ca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	09db      	lsrs	r3, r3, #7
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	3a01      	subs	r2, #1
 80054de:	60fa      	str	r2, [r7, #12]
 80054e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054e4:	b2da      	uxtb	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	3a01      	subs	r2, #1
 80054f2:	60fa      	str	r2, [r7, #12]
 80054f4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80054f8:	b2da      	uxtb	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	e032      	b.n	8005566 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	0f1a      	lsrs	r2, r3, #28
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3b01      	subs	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	b2d2      	uxtb	r2, r2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	0d5b      	lsrs	r3, r3, #21
 8005514:	b2db      	uxtb	r3, r3
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	3a01      	subs	r2, #1
 800551a:	60fa      	str	r2, [r7, #12]
 800551c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005520:	b2da      	uxtb	r2, r3
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	0b9b      	lsrs	r3, r3, #14
 800552a:	b2db      	uxtb	r3, r3
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	3a01      	subs	r2, #1
 8005530:	60fa      	str	r2, [r7, #12]
 8005532:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005536:	b2da      	uxtb	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	09db      	lsrs	r3, r3, #7
 8005540:	b2db      	uxtb	r3, r3
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	3a01      	subs	r2, #1
 8005546:	60fa      	str	r2, [r7, #12]
 8005548:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	b2db      	uxtb	r3, r3
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	3a01      	subs	r2, #1
 800555a:	60fa      	str	r2, [r7, #12]
 800555c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005566:	4b1f      	ldr	r3, [pc, #124]	@ (80055e4 <_SendPacket+0x274>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800556c:	4b1c      	ldr	r3, [pc, #112]	@ (80055e0 <_SendPacket+0x270>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	627b      	str	r3, [r7, #36]	@ 0x24
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	623b      	str	r3, [r7, #32]
 800557e:	e00b      	b.n	8005598 <_SendPacket+0x228>
 8005580:	6a3b      	ldr	r3, [r7, #32]
 8005582:	b2da      	uxtb	r2, r3
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	6279      	str	r1, [r7, #36]	@ 0x24
 800558a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	09db      	lsrs	r3, r3, #7
 8005596:	623b      	str	r3, [r7, #32]
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	2b7f      	cmp	r3, #127	@ 0x7f
 800559c:	d8f0      	bhi.n	8005580 <_SendPacket+0x210>
 800559e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a0:	1c5a      	adds	r2, r3, #1
 80055a2:	627a      	str	r2, [r7, #36]	@ 0x24
 80055a4:	6a3a      	ldr	r2, [r7, #32]
 80055a6:	b2d2      	uxtb	r2, r2
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80055ae:	4b0c      	ldr	r3, [pc, #48]	@ (80055e0 <_SendPacket+0x270>)
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	4618      	mov	r0, r3
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	461a      	mov	r2, r3
 80055bc:	68f9      	ldr	r1, [r7, #12]
 80055be:	f7fa fe0f 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055c2:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80055ca:	4a05      	ldr	r2, [pc, #20]	@ (80055e0 <_SendPacket+0x270>)
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	60d3      	str	r3, [r2, #12]
 80055d0:	e00f      	b.n	80055f2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80055d2:	4b03      	ldr	r3, [pc, #12]	@ (80055e0 <_SendPacket+0x270>)
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	3301      	adds	r3, #1
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	4b01      	ldr	r3, [pc, #4]	@ (80055e0 <_SendPacket+0x270>)
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	e008      	b.n	80055f2 <_SendPacket+0x282>
 80055e0:	2001af64 	.word	0x2001af64
 80055e4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <_SendPacket+0x282>
      goto SendDone;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <_SendPacket+0x282>
      goto SendDone;
 80055f0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80055f2:	4b14      	ldr	r3, [pc, #80]	@ (8005644 <_SendPacket+0x2d4>)
 80055f4:	7e1b      	ldrb	r3, [r3, #24]
 80055f6:	4619      	mov	r1, r3
 80055f8:	4a13      	ldr	r2, [pc, #76]	@ (8005648 <_SendPacket+0x2d8>)
 80055fa:	460b      	mov	r3, r1
 80055fc:	005b      	lsls	r3, r3, #1
 80055fe:	440b      	add	r3, r1
 8005600:	00db      	lsls	r3, r3, #3
 8005602:	4413      	add	r3, r2
 8005604:	336c      	adds	r3, #108	@ 0x6c
 8005606:	681a      	ldr	r2, [r3, #0]
 8005608:	4b0e      	ldr	r3, [pc, #56]	@ (8005644 <_SendPacket+0x2d4>)
 800560a:	7e1b      	ldrb	r3, [r3, #24]
 800560c:	4618      	mov	r0, r3
 800560e:	490e      	ldr	r1, [pc, #56]	@ (8005648 <_SendPacket+0x2d8>)
 8005610:	4603      	mov	r3, r0
 8005612:	005b      	lsls	r3, r3, #1
 8005614:	4403      	add	r3, r0
 8005616:	00db      	lsls	r3, r3, #3
 8005618:	440b      	add	r3, r1
 800561a:	3370      	adds	r3, #112	@ 0x70
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d00b      	beq.n	800563a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005622:	4b08      	ldr	r3, [pc, #32]	@ (8005644 <_SendPacket+0x2d4>)
 8005624:	789b      	ldrb	r3, [r3, #2]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d107      	bne.n	800563a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800562a:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <_SendPacket+0x2d4>)
 800562c:	2201      	movs	r2, #1
 800562e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005630:	f7ff fdbe 	bl	80051b0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005634:	4b03      	ldr	r3, [pc, #12]	@ (8005644 <_SendPacket+0x2d4>)
 8005636:	2200      	movs	r2, #0
 8005638:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800563a:	bf00      	nop
 800563c:	3728      	adds	r7, #40	@ 0x28
 800563e:	46bd      	mov	sp, r7
 8005640:	bd80      	pop	{r7, pc}
 8005642:	bf00      	nop
 8005644:	2001af64 	.word	0x2001af64
 8005648:	20019aa4 	.word	0x20019aa4

0800564c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800564c:	b580      	push	{r7, lr}
 800564e:	b08a      	sub	sp, #40	@ 0x28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	3301      	adds	r3, #1
 8005662:	2b80      	cmp	r3, #128	@ 0x80
 8005664:	d80a      	bhi.n	800567c <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	1c59      	adds	r1, r3, #1
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6051      	str	r1, [r2, #4]
 8005670:	78fa      	ldrb	r2, [r7, #3]
 8005672:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	1c5a      	adds	r2, r3, #1
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b80      	cmp	r3, #128	@ 0x80
 8005682:	d15a      	bne.n	800573a <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	691a      	ldr	r2, [r3, #16]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	b2d2      	uxtb	r2, r2
 800568e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	627b      	str	r3, [r7, #36]	@ 0x24
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	623b      	str	r3, [r7, #32]
 80056a4:	e00b      	b.n	80056be <_StoreChar+0x72>
 80056a6:	6a3b      	ldr	r3, [r7, #32]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	1c59      	adds	r1, r3, #1
 80056ae:	6279      	str	r1, [r7, #36]	@ 0x24
 80056b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056b4:	b2d2      	uxtb	r2, r2
 80056b6:	701a      	strb	r2, [r3, #0]
 80056b8:	6a3b      	ldr	r3, [r7, #32]
 80056ba:	09db      	lsrs	r3, r3, #7
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2b7f      	cmp	r3, #127	@ 0x7f
 80056c2:	d8f0      	bhi.n	80056a6 <_StoreChar+0x5a>
 80056c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	701a      	strb	r2, [r3, #0]
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	61fb      	str	r3, [r7, #28]
 80056d8:	2300      	movs	r3, #0
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	e00b      	b.n	80056f6 <_StoreChar+0xaa>
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	1c59      	adds	r1, r3, #1
 80056e6:	61f9      	str	r1, [r7, #28]
 80056e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	701a      	strb	r2, [r3, #0]
 80056f0:	69bb      	ldr	r3, [r7, #24]
 80056f2:	09db      	lsrs	r3, r3, #7
 80056f4:	61bb      	str	r3, [r7, #24]
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056fa:	d8f0      	bhi.n	80056de <_StoreChar+0x92>
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	1c5a      	adds	r2, r3, #1
 8005700:	61fa      	str	r2, [r7, #28]
 8005702:	69ba      	ldr	r2, [r7, #24]
 8005704:	b2d2      	uxtb	r2, r2
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	221a      	movs	r2, #26
 8005712:	6939      	ldr	r1, [r7, #16]
 8005714:	4618      	mov	r0, r3
 8005716:	f7ff fe2b 	bl	8005370 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4618      	mov	r0, r3
 8005720:	f7ff fd39 	bl	8005196 <_PreparePacket>
 8005724:	4602      	mov	r2, r0
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	611a      	str	r2, [r3, #16]
  }
}
 800573a:	bf00      	nop
 800573c:	3728      	adds	r7, #40	@ 0x28
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b08a      	sub	sp, #40	@ 0x28
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005756:	2301      	movs	r3, #1
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800575a:	2301      	movs	r3, #1
 800575c:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800575e:	e007      	b.n	8005770 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005760:	6a3a      	ldr	r2, [r7, #32]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	fbb2 f3f3 	udiv	r3, r2, r3
 8005768:	623b      	str	r3, [r7, #32]
    Width++;
 800576a:	69fb      	ldr	r3, [r7, #28]
 800576c:	3301      	adds	r3, #1
 800576e:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005770:	6a3a      	ldr	r2, [r7, #32]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	429a      	cmp	r2, r3
 8005776:	d2f3      	bcs.n	8005760 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	429a      	cmp	r2, r3
 800577e:	d901      	bls.n	8005784 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005784:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d000      	beq.n	8005790 <_PrintUnsigned+0x4c>
 800578e:	e01f      	b.n	80057d0 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005790:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005792:	2b00      	cmp	r3, #0
 8005794:	d01c      	beq.n	80057d0 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d005      	beq.n	80057ac <_PrintUnsigned+0x68>
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <_PrintUnsigned+0x68>
        c = '0';
 80057a6:	2330      	movs	r3, #48	@ 0x30
 80057a8:	76fb      	strb	r3, [r7, #27]
 80057aa:	e001      	b.n	80057b0 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80057ac:	2320      	movs	r3, #32
 80057ae:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057b0:	e007      	b.n	80057c2 <_PrintUnsigned+0x7e>
        FieldWidth--;
 80057b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057b4:	3b01      	subs	r3, #1
 80057b6:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80057b8:	7efb      	ldrb	r3, [r7, #27]
 80057ba:	4619      	mov	r1, r3
 80057bc:	68f8      	ldr	r0, [r7, #12]
 80057be:	f7ff ff45 	bl	800564c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d003      	beq.n	80057d0 <_PrintUnsigned+0x8c>
 80057c8:	69fa      	ldr	r2, [r7, #28]
 80057ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d3f0      	bcc.n	80057b2 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d903      	bls.n	80057de <_PrintUnsigned+0x9a>
      NumDigits--;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	3b01      	subs	r3, #1
 80057da:	603b      	str	r3, [r7, #0]
 80057dc:	e009      	b.n	80057f2 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d200      	bcs.n	80057f2 <_PrintUnsigned+0xae>
        break;
 80057f0:	e005      	b.n	80057fe <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	fb02 f303 	mul.w	r3, r2, r3
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80057fc:	e7e8      	b.n	80057d0 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005802:	fbb2 f3f3 	udiv	r3, r2, r3
 8005806:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005816:	4a15      	ldr	r2, [pc, #84]	@ (800586c <_PrintUnsigned+0x128>)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	4413      	add	r3, r2
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	4619      	mov	r1, r3
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f7ff ff13 	bl	800564c <_StoreChar>
    Digit /= Base;
 8005826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	fbb2 f3f3 	udiv	r3, r2, r3
 800582e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1e3      	bne.n	80057fe <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d011      	beq.n	8005864 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00e      	beq.n	8005864 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005846:	e006      	b.n	8005856 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584a:	3b01      	subs	r3, #1
 800584c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800584e:	2120      	movs	r1, #32
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fefb 	bl	800564c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <_PrintUnsigned+0x120>
 800585c:	69fa      	ldr	r2, [r7, #28]
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	429a      	cmp	r2, r3
 8005862:	d3f1      	bcc.n	8005848 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005864:	bf00      	nop
 8005866:	3728      	adds	r7, #40	@ 0x28
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	080077e8 	.word	0x080077e8

08005870 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af02      	add	r7, sp, #8
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	2b00      	cmp	r3, #0
 8005882:	bfb8      	it	lt
 8005884:	425b      	neglt	r3, r3
 8005886:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005888:	2301      	movs	r3, #1
 800588a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800588c:	e007      	b.n	800589e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	fb92 f3f3 	sdiv	r3, r2, r3
 8005896:	613b      	str	r3, [r7, #16]
    Width++;
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	3301      	adds	r3, #1
 800589c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	daf3      	bge.n	800588e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d901      	bls.n	80058b2 <_PrintInt+0x42>
    Width = NumDigits;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80058b2:	6a3b      	ldr	r3, [r7, #32]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <_PrintInt+0x5e>
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	db04      	blt.n	80058c8 <_PrintInt+0x58>
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	f003 0304 	and.w	r3, r3, #4
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d002      	beq.n	80058ce <_PrintInt+0x5e>
    FieldWidth--;
 80058c8:	6a3b      	ldr	r3, [r7, #32]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80058ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d002      	beq.n	80058de <_PrintInt+0x6e>
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d016      	beq.n	800590c <_PrintInt+0x9c>
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d111      	bne.n	800590c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80058e8:	6a3b      	ldr	r3, [r7, #32]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00e      	beq.n	800590c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058ee:	e006      	b.n	80058fe <_PrintInt+0x8e>
        FieldWidth--;
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	3b01      	subs	r3, #1
 80058f4:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80058f6:	2120      	movs	r1, #32
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fea7 	bl	800564c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d003      	beq.n	800590c <_PrintInt+0x9c>
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	429a      	cmp	r2, r3
 800590a:	d3f1      	bcc.n	80058f0 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	da07      	bge.n	8005922 <_PrintInt+0xb2>
    v = -v;
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	425b      	negs	r3, r3
 8005916:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005918:	212d      	movs	r1, #45	@ 0x2d
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f7ff fe96 	bl	800564c <_StoreChar>
 8005920:	e008      	b.n	8005934 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d003      	beq.n	8005934 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800592c:	212b      	movs	r1, #43	@ 0x2b
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f7ff fe8c 	bl	800564c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d019      	beq.n	8005972 <_PrintInt+0x102>
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	2b00      	cmp	r3, #0
 8005946:	d114      	bne.n	8005972 <_PrintInt+0x102>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d111      	bne.n	8005972 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800594e:	6a3b      	ldr	r3, [r7, #32]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00e      	beq.n	8005972 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005954:	e006      	b.n	8005964 <_PrintInt+0xf4>
        FieldWidth--;
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	3b01      	subs	r3, #1
 800595a:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 800595c:	2130      	movs	r1, #48	@ 0x30
 800595e:	68f8      	ldr	r0, [r7, #12]
 8005960:	f7ff fe74 	bl	800564c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005964:	6a3b      	ldr	r3, [r7, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <_PrintInt+0x102>
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	6a3b      	ldr	r3, [r7, #32]
 800596e:	429a      	cmp	r2, r3
 8005970:	d3f1      	bcc.n	8005956 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005972:	68b9      	ldr	r1, [r7, #8]
 8005974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005976:	9301      	str	r3, [sp, #4]
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	9300      	str	r3, [sp, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f7ff fedf 	bl	8005744 <_PrintUnsigned>
}
 8005986:	bf00      	nop
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b098      	sub	sp, #96	@ 0x60
 8005994:	af02      	add	r7, sp, #8
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800599c:	f3ef 8311 	mrs	r3, BASEPRI
 80059a0:	f04f 0120 	mov.w	r1, #32
 80059a4:	f381 8811 	msr	BASEPRI, r1
 80059a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059aa:	48b7      	ldr	r0, [pc, #732]	@ (8005c88 <_VPrintTarget+0x2f8>)
 80059ac:	f7ff fbf3 	bl	8005196 <_PreparePacket>
 80059b0:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80059b2:	4bb5      	ldr	r3, [pc, #724]	@ (8005c88 <_VPrintTarget+0x2f8>)
 80059b4:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80059b6:	2300      	movs	r3, #0
 80059b8:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80059be:	69bb      	ldr	r3, [r7, #24]
 80059c0:	3301      	adds	r3, #1
 80059c2:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80059d6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 81a8 	beq.w	8005d30 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80059e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059e4:	2b25      	cmp	r3, #37	@ 0x25
 80059e6:	f040 8195 	bne.w	8005d14 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80059ea:	2300      	movs	r3, #0
 80059ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80059ee:	2301      	movs	r3, #1
 80059f0:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 80059fa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059fe:	3b23      	subs	r3, #35	@ 0x23
 8005a00:	2b0d      	cmp	r3, #13
 8005a02:	d83f      	bhi.n	8005a84 <_VPrintTarget+0xf4>
 8005a04:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <_VPrintTarget+0x7c>)
 8005a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0a:	bf00      	nop
 8005a0c:	08005a75 	.word	0x08005a75
 8005a10:	08005a85 	.word	0x08005a85
 8005a14:	08005a85 	.word	0x08005a85
 8005a18:	08005a85 	.word	0x08005a85
 8005a1c:	08005a85 	.word	0x08005a85
 8005a20:	08005a85 	.word	0x08005a85
 8005a24:	08005a85 	.word	0x08005a85
 8005a28:	08005a85 	.word	0x08005a85
 8005a2c:	08005a65 	.word	0x08005a65
 8005a30:	08005a85 	.word	0x08005a85
 8005a34:	08005a45 	.word	0x08005a45
 8005a38:	08005a85 	.word	0x08005a85
 8005a3c:	08005a85 	.word	0x08005a85
 8005a40:	08005a55 	.word	0x08005a55
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a46:	f043 0301 	orr.w	r3, r3, #1
 8005a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	e01a      	b.n	8005a8a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005a54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a56:	f043 0302 	orr.w	r3, r3, #2
 8005a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	3301      	adds	r3, #1
 8005a60:	60fb      	str	r3, [r7, #12]
 8005a62:	e012      	b.n	8005a8a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005a64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a66:	f043 0304 	orr.w	r3, r3, #4
 8005a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
 8005a72:	e00a      	b.n	8005a8a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005a76:	f043 0308 	orr.w	r3, r3, #8
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	60fb      	str	r3, [r7, #12]
 8005a82:	e002      	b.n	8005a8a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005a84:	2300      	movs	r3, #0
 8005a86:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a88:	bf00      	nop
        }
      } while (v);
 8005a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1b0      	bne.n	80059f2 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005a90:	2300      	movs	r3, #0
 8005a92:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005a9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005aa2:	d912      	bls.n	8005aca <_VPrintTarget+0x13a>
 8005aa4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa8:	2b39      	cmp	r3, #57	@ 0x39
 8005aaa:	d80e      	bhi.n	8005aca <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	3301      	adds	r3, #1
 8005ab0:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005ab2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ab4:	4613      	mov	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4413      	add	r3, r2
 8005aba:	005b      	lsls	r3, r3, #1
 8005abc:	461a      	mov	r2, r3
 8005abe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3b30      	subs	r3, #48	@ 0x30
 8005ac6:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005ac8:	e7e4      	b.n	8005a94 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005aca:	2300      	movs	r3, #0
 8005acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005ad6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ada:	2b2e      	cmp	r3, #46	@ 0x2e
 8005adc:	d11d      	bne.n	8005b1a <_VPrintTarget+0x18a>
        sFormat++;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005aec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af0:	2b2f      	cmp	r3, #47	@ 0x2f
 8005af2:	d912      	bls.n	8005b1a <_VPrintTarget+0x18a>
 8005af4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005af8:	2b39      	cmp	r3, #57	@ 0x39
 8005afa:	d80e      	bhi.n	8005b1a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	3301      	adds	r3, #1
 8005b00:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005b02:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b12:	4413      	add	r3, r2
 8005b14:	3b30      	subs	r3, #48	@ 0x30
 8005b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005b18:	e7e4      	b.n	8005ae4 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005b22:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b26:	2b6c      	cmp	r3, #108	@ 0x6c
 8005b28:	d003      	beq.n	8005b32 <_VPrintTarget+0x1a2>
 8005b2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b2e:	2b68      	cmp	r3, #104	@ 0x68
 8005b30:	d107      	bne.n	8005b42 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005b40:	e7ef      	b.n	8005b22 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005b42:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b46:	2b25      	cmp	r3, #37	@ 0x25
 8005b48:	f000 80d8 	beq.w	8005cfc <_VPrintTarget+0x36c>
 8005b4c:	2b25      	cmp	r3, #37	@ 0x25
 8005b4e:	f2c0 80dc 	blt.w	8005d0a <_VPrintTarget+0x37a>
 8005b52:	2b78      	cmp	r3, #120	@ 0x78
 8005b54:	f300 80d9 	bgt.w	8005d0a <_VPrintTarget+0x37a>
 8005b58:	2b58      	cmp	r3, #88	@ 0x58
 8005b5a:	f2c0 80d6 	blt.w	8005d0a <_VPrintTarget+0x37a>
 8005b5e:	3b58      	subs	r3, #88	@ 0x58
 8005b60:	2b20      	cmp	r3, #32
 8005b62:	f200 80d2 	bhi.w	8005d0a <_VPrintTarget+0x37a>
 8005b66:	a201      	add	r2, pc, #4	@ (adr r2, 8005b6c <_VPrintTarget+0x1dc>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005c63 	.word	0x08005c63
 8005b70:	08005d0b 	.word	0x08005d0b
 8005b74:	08005d0b 	.word	0x08005d0b
 8005b78:	08005d0b 	.word	0x08005d0b
 8005b7c:	08005d0b 	.word	0x08005d0b
 8005b80:	08005d0b 	.word	0x08005d0b
 8005b84:	08005d0b 	.word	0x08005d0b
 8005b88:	08005d0b 	.word	0x08005d0b
 8005b8c:	08005d0b 	.word	0x08005d0b
 8005b90:	08005d0b 	.word	0x08005d0b
 8005b94:	08005d0b 	.word	0x08005d0b
 8005b98:	08005bf1 	.word	0x08005bf1
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005d0b 	.word	0x08005d0b
 8005ba4:	08005d0b 	.word	0x08005d0b
 8005ba8:	08005d0b 	.word	0x08005d0b
 8005bac:	08005d0b 	.word	0x08005d0b
 8005bb0:	08005d0b 	.word	0x08005d0b
 8005bb4:	08005d0b 	.word	0x08005d0b
 8005bb8:	08005d0b 	.word	0x08005d0b
 8005bbc:	08005d0b 	.word	0x08005d0b
 8005bc0:	08005d0b 	.word	0x08005d0b
 8005bc4:	08005d0b 	.word	0x08005d0b
 8005bc8:	08005d0b 	.word	0x08005d0b
 8005bcc:	08005cd7 	.word	0x08005cd7
 8005bd0:	08005d0b 	.word	0x08005d0b
 8005bd4:	08005d0b 	.word	0x08005d0b
 8005bd8:	08005c8d 	.word	0x08005c8d
 8005bdc:	08005d0b 	.word	0x08005d0b
 8005be0:	08005c3d 	.word	0x08005c3d
 8005be4:	08005d0b 	.word	0x08005d0b
 8005be8:	08005d0b 	.word	0x08005d0b
 8005bec:	08005c63 	.word	0x08005c63
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	1d19      	adds	r1, r3, #4
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6011      	str	r1, [r2, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005bfe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005c04:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005c08:	f107 0310 	add.w	r3, r7, #16
 8005c0c:	4611      	mov	r1, r2
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7ff fd1c 	bl	800564c <_StoreChar>
        break;
 8005c14:	e07a      	b.n	8005d0c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	1d19      	adds	r1, r3, #4
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6011      	str	r1, [r2, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c24:	f107 0010 	add.w	r0, r7, #16
 8005c28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2a:	9301      	str	r3, [sp, #4]
 8005c2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c2e:	9300      	str	r3, [sp, #0]
 8005c30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c32:	220a      	movs	r2, #10
 8005c34:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c36:	f7ff fe1b 	bl	8005870 <_PrintInt>
        break;
 8005c3a:	e067      	b.n	8005d0c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	1d19      	adds	r1, r3, #4
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	6011      	str	r1, [r2, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005c4a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c4c:	f107 0010 	add.w	r0, r7, #16
 8005c50:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c52:	9301      	str	r3, [sp, #4]
 8005c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c56:	9300      	str	r3, [sp, #0]
 8005c58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c5a:	220a      	movs	r2, #10
 8005c5c:	f7ff fd72 	bl	8005744 <_PrintUnsigned>
        break;
 8005c60:	e054      	b.n	8005d0c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	1d19      	adds	r1, r3, #4
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	6011      	str	r1, [r2, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005c70:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005c72:	f107 0010 	add.w	r0, r7, #16
 8005c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c7c:	9300      	str	r3, [sp, #0]
 8005c7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c80:	2210      	movs	r2, #16
 8005c82:	f7ff fd5f 	bl	8005744 <_PrintUnsigned>
        break;
 8005c86:	e041      	b.n	8005d0c <_VPrintTarget+0x37c>
 8005c88:	2001af94 	.word	0x2001af94
      case 's':
        s = va_arg(*pParamList, const char*);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	1d19      	adds	r1, r3, #4
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	6011      	str	r1, [r2, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d101      	bne.n	8005ca4 <_VPrintTarget+0x314>
          s = "(null)";
 8005ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8005dcc <_VPrintTarget+0x43c>)
 8005ca2:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005ca4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 8005cac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005cae:	3301      	adds	r3, #1
 8005cb0:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005cb2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 8005cba:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005cbe:	f107 0310 	add.w	r3, r7, #16
 8005cc2:	4611      	mov	r1, r2
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7ff fcc1 	bl	800564c <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cce:	d9e9      	bls.n	8005ca4 <_VPrintTarget+0x314>
        break;
 8005cd0:	e01c      	b.n	8005d0c <_VPrintTarget+0x37c>
            break;
 8005cd2:	bf00      	nop
        break;
 8005cd4:	e01a      	b.n	8005d0c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	1d19      	adds	r1, r3, #4
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	6011      	str	r1, [r2, #0]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005ce4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ce6:	f107 0010 	add.w	r0, r7, #16
 8005cea:	2300      	movs	r3, #0
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	2308      	movs	r3, #8
 8005cf0:	9300      	str	r3, [sp, #0]
 8005cf2:	2308      	movs	r3, #8
 8005cf4:	2210      	movs	r2, #16
 8005cf6:	f7ff fd25 	bl	8005744 <_PrintUnsigned>
        break;
 8005cfa:	e007      	b.n	8005d0c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005cfc:	f107 0310 	add.w	r3, r7, #16
 8005d00:	2125      	movs	r1, #37	@ 0x25
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7ff fca2 	bl	800564c <_StoreChar>
        break;
 8005d08:	e000      	b.n	8005d0c <_VPrintTarget+0x37c>
      default:
        break;
 8005d0a:	bf00      	nop
      }
      sFormat++;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e007      	b.n	8005d24 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005d14:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d18:	f107 0310 	add.w	r3, r7, #16
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7ff fc94 	bl	800564c <_StoreChar>
    }
  } while (*sFormat);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f47f ae4d 	bne.w	80059c8 <_VPrintTarget+0x38>
 8005d2e:	e000      	b.n	8005d32 <_VPrintTarget+0x3a2>
      break;
 8005d30:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d041      	beq.n	8005dbc <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005d38:	6a3a      	ldr	r2, [r7, #32]
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	e00b      	b.n	8005d62 <_VPrintTarget+0x3d2>
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005d54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d66:	d8f0      	bhi.n	8005d4a <_VPrintTarget+0x3ba>
 8005d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d80:	e00b      	b.n	8005d9a <_VPrintTarget+0x40a>
 8005d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d84:	b2da      	uxtb	r2, r3
 8005d86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	6379      	str	r1, [r7, #52]	@ 0x34
 8005d8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d90:	b2d2      	uxtb	r2, r2
 8005d92:	701a      	strb	r2, [r3, #0]
 8005d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d96:	09db      	lsrs	r3, r3, #7
 8005d98:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d9e:	d8f0      	bhi.n	8005d82 <_VPrintTarget+0x3f2>
 8005da0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005da2:	1c5a      	adds	r2, r3, #1
 8005da4:	637a      	str	r2, [r7, #52]	@ 0x34
 8005da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	701a      	strb	r2, [r3, #0]
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	6979      	ldr	r1, [r7, #20]
 8005db4:	221a      	movs	r2, #26
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7ff fada 	bl	8005370 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005dbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dbe:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005dc2:	bf00      	nop
 8005dc4:	3758      	adds	r7, #88	@ 0x58
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	08007798 	.word	0x08007798

08005dd0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af02      	add	r7, sp, #8
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005dde:	2300      	movs	r3, #0
 8005de0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005de4:	4917      	ldr	r1, [pc, #92]	@ (8005e44 <SEGGER_SYSVIEW_Init+0x74>)
 8005de6:	4818      	ldr	r0, [pc, #96]	@ (8005e48 <SEGGER_SYSVIEW_Init+0x78>)
 8005de8:	f7ff f8cc 	bl	8004f84 <SEGGER_RTT_AllocUpBuffer>
 8005dec:	4603      	mov	r3, r0
 8005dee:	b2da      	uxtb	r2, r3
 8005df0:	4b16      	ldr	r3, [pc, #88]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005df2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005df4:	4b15      	ldr	r3, [pc, #84]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005df6:	785a      	ldrb	r2, [r3, #1]
 8005df8:	4b14      	ldr	r3, [pc, #80]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005dfa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005dfc:	4b13      	ldr	r3, [pc, #76]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005dfe:	7e1b      	ldrb	r3, [r3, #24]
 8005e00:	4618      	mov	r0, r3
 8005e02:	2300      	movs	r3, #0
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2308      	movs	r3, #8
 8005e08:	4a11      	ldr	r2, [pc, #68]	@ (8005e50 <SEGGER_SYSVIEW_Init+0x80>)
 8005e0a:	490f      	ldr	r1, [pc, #60]	@ (8005e48 <SEGGER_SYSVIEW_Init+0x78>)
 8005e0c:	f7ff f93e 	bl	800508c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005e10:	4b0e      	ldr	r3, [pc, #56]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e12:	2200      	movs	r2, #0
 8005e14:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005e16:	4b0f      	ldr	r3, [pc, #60]	@ (8005e54 <SEGGER_SYSVIEW_Init+0x84>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a0c      	ldr	r2, [pc, #48]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e1c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005e1e:	4a0b      	ldr	r2, [pc, #44]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005e24:	4a09      	ldr	r2, [pc, #36]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005e2a:	4a08      	ldr	r2, [pc, #32]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005e30:	4a06      	ldr	r2, [pc, #24]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005e36:	4b05      	ldr	r3, [pc, #20]	@ (8005e4c <SEGGER_SYSVIEW_Init+0x7c>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005e3c:	bf00      	nop
 8005e3e:	3710      	adds	r7, #16
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}
 8005e44:	20019f5c 	.word	0x20019f5c
 8005e48:	080077a0 	.word	0x080077a0
 8005e4c:	2001af64 	.word	0x2001af64
 8005e50:	2001af5c 	.word	0x2001af5c
 8005e54:	e0001004 	.word	0xe0001004

08005e58 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005e58:	b480      	push	{r7}
 8005e5a:	b083      	sub	sp, #12
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005e60:	4a04      	ldr	r2, [pc, #16]	@ (8005e74 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6113      	str	r3, [r2, #16]
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	2001af64 	.word	0x2001af64

08005e78 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005e80:	f3ef 8311 	mrs	r3, BASEPRI
 8005e84:	f04f 0120 	mov.w	r1, #32
 8005e88:	f381 8811 	msr	BASEPRI, r1
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	4808      	ldr	r0, [pc, #32]	@ (8005eb0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005e90:	f7ff f981 	bl	8005196 <_PreparePacket>
 8005e94:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	68b9      	ldr	r1, [r7, #8]
 8005e9a:	68b8      	ldr	r0, [r7, #8]
 8005e9c:	f7ff fa68 	bl	8005370 <_SendPacket>
  RECORD_END();
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f383 8811 	msr	BASEPRI, r3
}
 8005ea6:	bf00      	nop
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2001af94 	.word	0x2001af94

08005eb4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
 8005ebc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ebe:	f3ef 8311 	mrs	r3, BASEPRI
 8005ec2:	f04f 0120 	mov.w	r1, #32
 8005ec6:	f381 8811 	msr	BASEPRI, r1
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	4816      	ldr	r0, [pc, #88]	@ (8005f28 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005ece:	f7ff f962 	bl	8005196 <_PreparePacket>
 8005ed2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	61bb      	str	r3, [r7, #24]
 8005ee0:	e00b      	b.n	8005efa <SEGGER_SYSVIEW_RecordU32+0x46>
 8005ee2:	69bb      	ldr	r3, [r7, #24]
 8005ee4:	b2da      	uxtb	r2, r3
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	1c59      	adds	r1, r3, #1
 8005eea:	61f9      	str	r1, [r7, #28]
 8005eec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef0:	b2d2      	uxtb	r2, r2
 8005ef2:	701a      	strb	r2, [r3, #0]
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	09db      	lsrs	r3, r3, #7
 8005ef8:	61bb      	str	r3, [r7, #24]
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005efe:	d8f0      	bhi.n	8005ee2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	61fa      	str	r2, [r7, #28]
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	6938      	ldr	r0, [r7, #16]
 8005f16:	f7ff fa2b 	bl	8005370 <_SendPacket>
  RECORD_END();
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f383 8811 	msr	BASEPRI, r3
}
 8005f20:	bf00      	nop
 8005f22:	3720      	adds	r7, #32
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	2001af94 	.word	0x2001af94

08005f2c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b08c      	sub	sp, #48	@ 0x30
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f38:	f3ef 8311 	mrs	r3, BASEPRI
 8005f3c:	f04f 0120 	mov.w	r1, #32
 8005f40:	f381 8811 	msr	BASEPRI, r1
 8005f44:	61fb      	str	r3, [r7, #28]
 8005f46:	4825      	ldr	r0, [pc, #148]	@ (8005fdc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005f48:	f7ff f925 	bl	8005196 <_PreparePacket>
 8005f4c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f5a:	e00b      	b.n	8005f74 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f62:	1c59      	adds	r1, r3, #1
 8005f64:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f6a:	b2d2      	uxtb	r2, r2
 8005f6c:	701a      	strb	r2, [r3, #0]
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	09db      	lsrs	r3, r3, #7
 8005f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f78:	d8f0      	bhi.n	8005f5c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f82:	b2d2      	uxtb	r2, r2
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	623b      	str	r3, [r7, #32]
 8005f92:	e00b      	b.n	8005fac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9a:	1c59      	adds	r1, r3, #1
 8005f9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005f9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fa2:	b2d2      	uxtb	r2, r2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	09db      	lsrs	r3, r3, #7
 8005faa:	623b      	str	r3, [r7, #32]
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fb0:	d8f0      	bhi.n	8005f94 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1c5a      	adds	r2, r3, #1
 8005fb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fb8:	6a3a      	ldr	r2, [r7, #32]
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	69b8      	ldr	r0, [r7, #24]
 8005fc8:	f7ff f9d2 	bl	8005370 <_SendPacket>
  RECORD_END();
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	f383 8811 	msr	BASEPRI, r3
}
 8005fd2:	bf00      	nop
 8005fd4:	3730      	adds	r7, #48	@ 0x30
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	2001af94 	.word	0x2001af94

08005fe0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08c      	sub	sp, #48	@ 0x30
 8005fe4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005fe6:	4b58      	ldr	r3, [pc, #352]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005fec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff0:	f04f 0120 	mov.w	r1, #32
 8005ff4:	f381 8811 	msr	BASEPRI, r1
 8005ff8:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005ffa:	4b53      	ldr	r3, [pc, #332]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 8005ffc:	785b      	ldrb	r3, [r3, #1]
 8005ffe:	220a      	movs	r2, #10
 8006000:	4952      	ldr	r1, [pc, #328]	@ (800614c <SEGGER_SYSVIEW_Start+0x16c>)
 8006002:	4618      	mov	r0, r3
 8006004:	f7fa f8ec 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800600e:	200a      	movs	r0, #10
 8006010:	f7ff ff32 	bl	8005e78 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006014:	f3ef 8311 	mrs	r3, BASEPRI
 8006018:	f04f 0120 	mov.w	r1, #32
 800601c:	f381 8811 	msr	BASEPRI, r1
 8006020:	60bb      	str	r3, [r7, #8]
 8006022:	484b      	ldr	r0, [pc, #300]	@ (8006150 <SEGGER_SYSVIEW_Start+0x170>)
 8006024:	f7ff f8b7 	bl	8005196 <_PreparePacket>
 8006028:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006032:	4b45      	ldr	r3, [pc, #276]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006038:	e00b      	b.n	8006052 <SEGGER_SYSVIEW_Start+0x72>
 800603a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603c:	b2da      	uxtb	r2, r3
 800603e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006040:	1c59      	adds	r1, r3, #1
 8006042:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006044:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006048:	b2d2      	uxtb	r2, r2
 800604a:	701a      	strb	r2, [r3, #0]
 800604c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604e:	09db      	lsrs	r3, r3, #7
 8006050:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006054:	2b7f      	cmp	r3, #127	@ 0x7f
 8006056:	d8f0      	bhi.n	800603a <SEGGER_SYSVIEW_Start+0x5a>
 8006058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800605a:	1c5a      	adds	r2, r3, #1
 800605c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800605e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006060:	b2d2      	uxtb	r2, r2
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006066:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	627b      	str	r3, [r7, #36]	@ 0x24
 800606c:	4b36      	ldr	r3, [pc, #216]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	623b      	str	r3, [r7, #32]
 8006072:	e00b      	b.n	800608c <SEGGER_SYSVIEW_Start+0xac>
 8006074:	6a3b      	ldr	r3, [r7, #32]
 8006076:	b2da      	uxtb	r2, r3
 8006078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	6279      	str	r1, [r7, #36]	@ 0x24
 800607e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	6a3b      	ldr	r3, [r7, #32]
 8006088:	09db      	lsrs	r3, r3, #7
 800608a:	623b      	str	r3, [r7, #32]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006090:	d8f0      	bhi.n	8006074 <SEGGER_SYSVIEW_Start+0x94>
 8006092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006094:	1c5a      	adds	r2, r3, #1
 8006096:	627a      	str	r2, [r7, #36]	@ 0x24
 8006098:	6a3a      	ldr	r2, [r7, #32]
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	61fb      	str	r3, [r7, #28]
 80060a6:	4b28      	ldr	r3, [pc, #160]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e00b      	b.n	80060c6 <SEGGER_SYSVIEW_Start+0xe6>
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	b2da      	uxtb	r2, r3
 80060b2:	69fb      	ldr	r3, [r7, #28]
 80060b4:	1c59      	adds	r1, r3, #1
 80060b6:	61f9      	str	r1, [r7, #28]
 80060b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
 80060c0:	69bb      	ldr	r3, [r7, #24]
 80060c2:	09db      	lsrs	r3, r3, #7
 80060c4:	61bb      	str	r3, [r7, #24]
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060ca:	d8f0      	bhi.n	80060ae <SEGGER_SYSVIEW_Start+0xce>
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	61fa      	str	r2, [r7, #28]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	b2d2      	uxtb	r2, r2
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	69fb      	ldr	r3, [r7, #28]
 80060da:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	617b      	str	r3, [r7, #20]
 80060e0:	2300      	movs	r3, #0
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	e00b      	b.n	80060fe <SEGGER_SYSVIEW_Start+0x11e>
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	b2da      	uxtb	r2, r3
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	1c59      	adds	r1, r3, #1
 80060ee:	6179      	str	r1, [r7, #20]
 80060f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	09db      	lsrs	r3, r3, #7
 80060fc:	613b      	str	r3, [r7, #16]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b7f      	cmp	r3, #127	@ 0x7f
 8006102:	d8f0      	bhi.n	80060e6 <SEGGER_SYSVIEW_Start+0x106>
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	1c5a      	adds	r2, r3, #1
 8006108:	617a      	str	r2, [r7, #20]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	b2d2      	uxtb	r2, r2
 800610e:	701a      	strb	r2, [r3, #0]
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006114:	2218      	movs	r2, #24
 8006116:	6839      	ldr	r1, [r7, #0]
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f7ff f929 	bl	8005370 <_SendPacket>
      RECORD_END();
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006124:	4b08      	ldr	r3, [pc, #32]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 8006126:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006128:	2b00      	cmp	r3, #0
 800612a:	d002      	beq.n	8006132 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800612c:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <SEGGER_SYSVIEW_Start+0x168>)
 800612e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006130:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006132:	f000 f9eb 	bl	800650c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006136:	f000 f9b1 	bl	800649c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800613a:	f000 fd21 	bl	8006b80 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800613e:	bf00      	nop
 8006140:	3730      	adds	r7, #48	@ 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2001af64 	.word	0x2001af64
 800614c:	080077dc 	.word	0x080077dc
 8006150:	2001af94 	.word	0x2001af94

08006154 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800615a:	f3ef 8311 	mrs	r3, BASEPRI
 800615e:	f04f 0120 	mov.w	r1, #32
 8006162:	f381 8811 	msr	BASEPRI, r1
 8006166:	607b      	str	r3, [r7, #4]
 8006168:	480b      	ldr	r0, [pc, #44]	@ (8006198 <SEGGER_SYSVIEW_Stop+0x44>)
 800616a:	f7ff f814 	bl	8005196 <_PreparePacket>
 800616e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006170:	4b0a      	ldr	r3, [pc, #40]	@ (800619c <SEGGER_SYSVIEW_Stop+0x48>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d007      	beq.n	8006188 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006178:	220b      	movs	r2, #11
 800617a:	6839      	ldr	r1, [r7, #0]
 800617c:	6838      	ldr	r0, [r7, #0]
 800617e:	f7ff f8f7 	bl	8005370 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006182:	4b06      	ldr	r3, [pc, #24]	@ (800619c <SEGGER_SYSVIEW_Stop+0x48>)
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f383 8811 	msr	BASEPRI, r3
}
 800618e:	bf00      	nop
 8006190:	3708      	adds	r7, #8
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	2001af94 	.word	0x2001af94
 800619c:	2001af64 	.word	0x2001af64

080061a0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08c      	sub	sp, #48	@ 0x30
 80061a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061a6:	f3ef 8311 	mrs	r3, BASEPRI
 80061aa:	f04f 0120 	mov.w	r1, #32
 80061ae:	f381 8811 	msr	BASEPRI, r1
 80061b2:	60fb      	str	r3, [r7, #12]
 80061b4:	4845      	ldr	r0, [pc, #276]	@ (80062cc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061b6:	f7fe ffee 	bl	8005196 <_PreparePacket>
 80061ba:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061c4:	4b42      	ldr	r3, [pc, #264]	@ (80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ca:	e00b      	b.n	80061e4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ce:	b2da      	uxtb	r2, r3
 80061d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d2:	1c59      	adds	r1, r3, #1
 80061d4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e0:	09db      	lsrs	r3, r3, #7
 80061e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061e8:	d8f0      	bhi.n	80061cc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061fe:	4b34      	ldr	r3, [pc, #208]	@ (80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	623b      	str	r3, [r7, #32]
 8006204:	e00b      	b.n	800621e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620c:	1c59      	adds	r1, r3, #1
 800620e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006210:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	09db      	lsrs	r3, r3, #7
 800621c:	623b      	str	r3, [r7, #32]
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	2b7f      	cmp	r3, #127	@ 0x7f
 8006222:	d8f0      	bhi.n	8006206 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	627a      	str	r2, [r7, #36]	@ 0x24
 800622a:	6a3a      	ldr	r2, [r7, #32]
 800622c:	b2d2      	uxtb	r2, r2
 800622e:	701a      	strb	r2, [r3, #0]
 8006230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006232:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	61fb      	str	r3, [r7, #28]
 8006238:	4b25      	ldr	r3, [pc, #148]	@ (80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e00b      	b.n	8006258 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	b2da      	uxtb	r2, r3
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	1c59      	adds	r1, r3, #1
 8006248:	61f9      	str	r1, [r7, #28]
 800624a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800624e:	b2d2      	uxtb	r2, r2
 8006250:	701a      	strb	r2, [r3, #0]
 8006252:	69bb      	ldr	r3, [r7, #24]
 8006254:	09db      	lsrs	r3, r3, #7
 8006256:	61bb      	str	r3, [r7, #24]
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b7f      	cmp	r3, #127	@ 0x7f
 800625c:	d8f0      	bhi.n	8006240 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	1c5a      	adds	r2, r3, #1
 8006262:	61fa      	str	r2, [r7, #28]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	b2d2      	uxtb	r2, r2
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	617b      	str	r3, [r7, #20]
 8006272:	2300      	movs	r3, #0
 8006274:	613b      	str	r3, [r7, #16]
 8006276:	e00b      	b.n	8006290 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	1c59      	adds	r1, r3, #1
 8006280:	6179      	str	r1, [r7, #20]
 8006282:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	09db      	lsrs	r3, r3, #7
 800628e:	613b      	str	r3, [r7, #16]
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	2b7f      	cmp	r3, #127	@ 0x7f
 8006294:	d8f0      	bhi.n	8006278 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	1c5a      	adds	r2, r3, #1
 800629a:	617a      	str	r2, [r7, #20]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062a6:	2218      	movs	r2, #24
 80062a8:	6879      	ldr	r1, [r7, #4]
 80062aa:	68b8      	ldr	r0, [r7, #8]
 80062ac:	f7ff f860 	bl	8005370 <_SendPacket>
  RECORD_END();
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062b6:	4b06      	ldr	r3, [pc, #24]	@ (80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062be:	4b04      	ldr	r3, [pc, #16]	@ (80062d0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062c2:	4798      	blx	r3
  }
}
 80062c4:	bf00      	nop
 80062c6:	3730      	adds	r7, #48	@ 0x30
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2001af94 	.word	0x2001af94
 80062d0:	2001af64 	.word	0x2001af64

080062d4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b092      	sub	sp, #72	@ 0x48
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	f04f 0120 	mov.w	r1, #32
 80062e4:	f381 8811 	msr	BASEPRI, r1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	486a      	ldr	r0, [pc, #424]	@ (8006494 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062ec:	f7fe ff53 	bl	8005196 <_PreparePacket>
 80062f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	4b66      	ldr	r3, [pc, #408]	@ (8006498 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	643b      	str	r3, [r7, #64]	@ 0x40
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006308:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	6479      	str	r1, [r7, #68]	@ 0x44
 8006312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006322:	2b7f      	cmp	r3, #127	@ 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	647a      	str	r2, [r7, #68]	@ 0x44
 800632c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006340:	e00b      	b.n	800635a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006342:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006344:	b2da      	uxtb	r2, r3
 8006346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800634c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006350:	b2d2      	uxtb	r2, r2
 8006352:	701a      	strb	r2, [r3, #0]
 8006354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006356:	09db      	lsrs	r3, r3, #7
 8006358:	63bb      	str	r3, [r7, #56]	@ 0x38
 800635a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635c:	2b7f      	cmp	r3, #127	@ 0x7f
 800635e:	d8f0      	bhi.n	8006342 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006360:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006368:	b2d2      	uxtb	r2, r2
 800636a:	701a      	strb	r2, [r3, #0]
 800636c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800636e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	2220      	movs	r2, #32
 8006376:	4619      	mov	r1, r3
 8006378:	68f8      	ldr	r0, [r7, #12]
 800637a:	f7fe fed3 	bl	8005124 <_EncodeStr>
 800637e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006380:	2209      	movs	r2, #9
 8006382:	68f9      	ldr	r1, [r7, #12]
 8006384:	6938      	ldr	r0, [r7, #16]
 8006386:	f7fe fff3 	bl	8005370 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	637b      	str	r3, [r7, #52]	@ 0x34
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	4b40      	ldr	r3, [pc, #256]	@ (8006498 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	1ad3      	subs	r3, r2, r3
 800639c:	633b      	str	r3, [r7, #48]	@ 0x30
 800639e:	e00b      	b.n	80063b8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063a6:	1c59      	adds	r1, r3, #1
 80063a8:	6379      	str	r1, [r7, #52]	@ 0x34
 80063aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	701a      	strb	r2, [r3, #0]
 80063b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b4:	09db      	lsrs	r3, r3, #7
 80063b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80063bc:	d8f0      	bhi.n	80063a0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063c0:	1c5a      	adds	r2, r3, #1
 80063c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80063c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c6:	b2d2      	uxtb	r2, r2
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	68db      	ldr	r3, [r3, #12]
 80063d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063d8:	e00b      	b.n	80063f2 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e0:	1c59      	adds	r1, r3, #1
 80063e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063e8:	b2d2      	uxtb	r2, r2
 80063ea:	701a      	strb	r2, [r3, #0]
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	09db      	lsrs	r3, r3, #7
 80063f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063f6:	d8f0      	bhi.n	80063da <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	1c5a      	adds	r2, r3, #1
 80063fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006406:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	627b      	str	r3, [r7, #36]	@ 0x24
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	623b      	str	r3, [r7, #32]
 8006412:	e00b      	b.n	800642c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	b2da      	uxtb	r2, r3
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	1c59      	adds	r1, r3, #1
 800641c:	6279      	str	r1, [r7, #36]	@ 0x24
 800641e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006422:	b2d2      	uxtb	r2, r2
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	6a3b      	ldr	r3, [r7, #32]
 8006428:	09db      	lsrs	r3, r3, #7
 800642a:	623b      	str	r3, [r7, #32]
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006430:	d8f0      	bhi.n	8006414 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	627a      	str	r2, [r7, #36]	@ 0x24
 8006438:	6a3a      	ldr	r2, [r7, #32]
 800643a:	b2d2      	uxtb	r2, r2
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006440:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	61bb      	str	r3, [r7, #24]
 800644c:	e00b      	b.n	8006466 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	b2da      	uxtb	r2, r3
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	1c59      	adds	r1, r3, #1
 8006456:	61f9      	str	r1, [r7, #28]
 8006458:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	09db      	lsrs	r3, r3, #7
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b7f      	cmp	r3, #127	@ 0x7f
 800646a:	d8f0      	bhi.n	800644e <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	1c5a      	adds	r2, r3, #1
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	69ba      	ldr	r2, [r7, #24]
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800647c:	2215      	movs	r2, #21
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	6938      	ldr	r0, [r7, #16]
 8006482:	f7fe ff75 	bl	8005370 <_SendPacket>
  RECORD_END();
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f383 8811 	msr	BASEPRI, r3
}
 800648c:	bf00      	nop
 800648e:	3748      	adds	r7, #72	@ 0x48
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	2001af94 	.word	0x2001af94
 8006498:	2001af64 	.word	0x2001af64

0800649c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800649c:	b580      	push	{r7, lr}
 800649e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064a0:	4b07      	ldr	r3, [pc, #28]	@ (80064c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064a2:	6a1b      	ldr	r3, [r3, #32]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064aa:	6a1b      	ldr	r3, [r3, #32]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d003      	beq.n	80064ba <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064b2:	4b03      	ldr	r3, [pc, #12]	@ (80064c0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	4798      	blx	r3
  }
}
 80064ba:	bf00      	nop
 80064bc:	bd80      	pop	{r7, pc}
 80064be:	bf00      	nop
 80064c0:	2001af64 	.word	0x2001af64

080064c4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064cc:	f3ef 8311 	mrs	r3, BASEPRI
 80064d0:	f04f 0120 	mov.w	r1, #32
 80064d4:	f381 8811 	msr	BASEPRI, r1
 80064d8:	617b      	str	r3, [r7, #20]
 80064da:	480b      	ldr	r0, [pc, #44]	@ (8006508 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064dc:	f7fe fe5b 	bl	8005196 <_PreparePacket>
 80064e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064e2:	2280      	movs	r2, #128	@ 0x80
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	6938      	ldr	r0, [r7, #16]
 80064e8:	f7fe fe1c 	bl	8005124 <_EncodeStr>
 80064ec:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064ee:	220e      	movs	r2, #14
 80064f0:	68f9      	ldr	r1, [r7, #12]
 80064f2:	6938      	ldr	r0, [r7, #16]
 80064f4:	f7fe ff3c 	bl	8005370 <_SendPacket>
  RECORD_END();
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f383 8811 	msr	BASEPRI, r3
}
 80064fe:	bf00      	nop
 8006500:	3718      	adds	r7, #24
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
 8006506:	bf00      	nop
 8006508:	2001af94 	.word	0x2001af94

0800650c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006512:	4b15      	ldr	r3, [pc, #84]	@ (8006568 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d01a      	beq.n	8006550 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800651a:	4b13      	ldr	r3, [pc, #76]	@ (8006568 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800651c:	6a1b      	ldr	r3, [r3, #32]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d015      	beq.n	8006550 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006524:	4b10      	ldr	r3, [pc, #64]	@ (8006568 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006526:	6a1b      	ldr	r3, [r3, #32]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4798      	blx	r3
 800652c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006530:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006532:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006536:	f04f 0200 	mov.w	r2, #0
 800653a:	f04f 0300 	mov.w	r3, #0
 800653e:	000a      	movs	r2, r1
 8006540:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006542:	4613      	mov	r3, r2
 8006544:	461a      	mov	r2, r3
 8006546:	4621      	mov	r1, r4
 8006548:	200d      	movs	r0, #13
 800654a:	f7ff fcef 	bl	8005f2c <SEGGER_SYSVIEW_RecordU32x2>
 800654e:	e006      	b.n	800655e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006550:	4b06      	ldr	r3, [pc, #24]	@ (800656c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4619      	mov	r1, r3
 8006556:	200c      	movs	r0, #12
 8006558:	f7ff fcac 	bl	8005eb4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800655c:	bf00      	nop
 800655e:	bf00      	nop
 8006560:	370c      	adds	r7, #12
 8006562:	46bd      	mov	sp, r7
 8006564:	bd90      	pop	{r4, r7, pc}
 8006566:	bf00      	nop
 8006568:	2001af64 	.word	0x2001af64
 800656c:	e0001004 	.word	0xe0001004

08006570 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006576:	f3ef 8311 	mrs	r3, BASEPRI
 800657a:	f04f 0120 	mov.w	r1, #32
 800657e:	f381 8811 	msr	BASEPRI, r1
 8006582:	60fb      	str	r3, [r7, #12]
 8006584:	4819      	ldr	r0, [pc, #100]	@ (80065ec <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006586:	f7fe fe06 	bl	8005196 <_PreparePacket>
 800658a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006590:	4b17      	ldr	r3, [pc, #92]	@ (80065f0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	617b      	str	r3, [r7, #20]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	e00b      	b.n	80065bc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	1c59      	adds	r1, r3, #1
 80065ac:	6179      	str	r1, [r7, #20]
 80065ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	09db      	lsrs	r3, r3, #7
 80065ba:	613b      	str	r3, [r7, #16]
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b7f      	cmp	r3, #127	@ 0x7f
 80065c0:	d8f0      	bhi.n	80065a4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	617a      	str	r2, [r7, #20]
 80065c8:	693a      	ldr	r2, [r7, #16]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065d2:	2202      	movs	r2, #2
 80065d4:	6879      	ldr	r1, [r7, #4]
 80065d6:	68b8      	ldr	r0, [r7, #8]
 80065d8:	f7fe feca 	bl	8005370 <_SendPacket>
  RECORD_END();
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	f383 8811 	msr	BASEPRI, r3
}
 80065e2:	bf00      	nop
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	2001af94 	.word	0x2001af94
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b082      	sub	sp, #8
 80065f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80065fa:	f3ef 8311 	mrs	r3, BASEPRI
 80065fe:	f04f 0120 	mov.w	r1, #32
 8006602:	f381 8811 	msr	BASEPRI, r1
 8006606:	607b      	str	r3, [r7, #4]
 8006608:	4807      	ldr	r0, [pc, #28]	@ (8006628 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800660a:	f7fe fdc4 	bl	8005196 <_PreparePacket>
 800660e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006610:	2203      	movs	r2, #3
 8006612:	6839      	ldr	r1, [r7, #0]
 8006614:	6838      	ldr	r0, [r7, #0]
 8006616:	f7fe feab 	bl	8005370 <_SendPacket>
  RECORD_END();
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f383 8811 	msr	BASEPRI, r3
}
 8006620:	bf00      	nop
 8006622:	3708      	adds	r7, #8
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	2001af94 	.word	0x2001af94

0800662c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b082      	sub	sp, #8
 8006630:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006632:	f3ef 8311 	mrs	r3, BASEPRI
 8006636:	f04f 0120 	mov.w	r1, #32
 800663a:	f381 8811 	msr	BASEPRI, r1
 800663e:	607b      	str	r3, [r7, #4]
 8006640:	4807      	ldr	r0, [pc, #28]	@ (8006660 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006642:	f7fe fda8 	bl	8005196 <_PreparePacket>
 8006646:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006648:	2212      	movs	r2, #18
 800664a:	6839      	ldr	r1, [r7, #0]
 800664c:	6838      	ldr	r0, [r7, #0]
 800664e:	f7fe fe8f 	bl	8005370 <_SendPacket>
  RECORD_END();
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f383 8811 	msr	BASEPRI, r3
}
 8006658:	bf00      	nop
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	2001af94 	.word	0x2001af94

08006664 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8006664:	b580      	push	{r7, lr}
 8006666:	b088      	sub	sp, #32
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800666c:	f3ef 8311 	mrs	r3, BASEPRI
 8006670:	f04f 0120 	mov.w	r1, #32
 8006674:	f381 8811 	msr	BASEPRI, r1
 8006678:	617b      	str	r3, [r7, #20]
 800667a:	4817      	ldr	r0, [pc, #92]	@ (80066d8 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 800667c:	f7fe fd8b 	bl	8005196 <_PreparePacket>
 8006680:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	61bb      	str	r3, [r7, #24]
 800668e:	e00b      	b.n	80066a8 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	b2da      	uxtb	r2, r3
 8006694:	69fb      	ldr	r3, [r7, #28]
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	61f9      	str	r1, [r7, #28]
 800669a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	09db      	lsrs	r3, r3, #7
 80066a6:	61bb      	str	r3, [r7, #24]
 80066a8:	69bb      	ldr	r3, [r7, #24]
 80066aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ac:	d8f0      	bhi.n	8006690 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	61fa      	str	r2, [r7, #28]
 80066b4:	69ba      	ldr	r2, [r7, #24]
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	69fb      	ldr	r3, [r7, #28]
 80066bc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80066be:	221c      	movs	r2, #28
 80066c0:	68f9      	ldr	r1, [r7, #12]
 80066c2:	6938      	ldr	r0, [r7, #16]
 80066c4:	f7fe fe54 	bl	8005370 <_SendPacket>
  RECORD_END();
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f383 8811 	msr	BASEPRI, r3
}
 80066ce:	bf00      	nop
 80066d0:	3720      	adds	r7, #32
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	2001af94 	.word	0x2001af94

080066dc <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b08a      	sub	sp, #40	@ 0x28
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80066e6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ea:	f04f 0120 	mov.w	r1, #32
 80066ee:	f381 8811 	msr	BASEPRI, r1
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	4824      	ldr	r0, [pc, #144]	@ (8006788 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80066f6:	f7fe fd4e 	bl	8005196 <_PreparePacket>
 80066fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	623b      	str	r3, [r7, #32]
 8006708:	e00b      	b.n	8006722 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	6279      	str	r1, [r7, #36]	@ 0x24
 8006714:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	2b7f      	cmp	r3, #127	@ 0x7f
 8006726:	d8f0      	bhi.n	800670a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	627a      	str	r2, [r7, #36]	@ 0x24
 800672e:	6a3a      	ldr	r2, [r7, #32]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	61bb      	str	r3, [r7, #24]
 8006740:	e00b      	b.n	800675a <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	b2da      	uxtb	r2, r3
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	1c59      	adds	r1, r3, #1
 800674a:	61f9      	str	r1, [r7, #28]
 800674c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006750:	b2d2      	uxtb	r2, r2
 8006752:	701a      	strb	r2, [r3, #0]
 8006754:	69bb      	ldr	r3, [r7, #24]
 8006756:	09db      	lsrs	r3, r3, #7
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	2b7f      	cmp	r3, #127	@ 0x7f
 800675e:	d8f0      	bhi.n	8006742 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006760:	69fb      	ldr	r3, [r7, #28]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	61fa      	str	r2, [r7, #28]
 8006766:	69ba      	ldr	r2, [r7, #24]
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006770:	221c      	movs	r2, #28
 8006772:	68f9      	ldr	r1, [r7, #12]
 8006774:	6938      	ldr	r0, [r7, #16]
 8006776:	f7fe fdfb 	bl	8005370 <_SendPacket>
  RECORD_END();
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f383 8811 	msr	BASEPRI, r3
}
 8006780:	bf00      	nop
 8006782:	3728      	adds	r7, #40	@ 0x28
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	2001af94 	.word	0x2001af94

0800678c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006792:	f3ef 8311 	mrs	r3, BASEPRI
 8006796:	f04f 0120 	mov.w	r1, #32
 800679a:	f381 8811 	msr	BASEPRI, r1
 800679e:	607b      	str	r3, [r7, #4]
 80067a0:	4807      	ldr	r0, [pc, #28]	@ (80067c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80067a2:	f7fe fcf8 	bl	8005196 <_PreparePacket>
 80067a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80067a8:	2211      	movs	r2, #17
 80067aa:	6839      	ldr	r1, [r7, #0]
 80067ac:	6838      	ldr	r0, [r7, #0]
 80067ae:	f7fe fddf 	bl	8005370 <_SendPacket>
  RECORD_END();
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f383 8811 	msr	BASEPRI, r3
}
 80067b8:	bf00      	nop
 80067ba:	3708      	adds	r7, #8
 80067bc:	46bd      	mov	sp, r7
 80067be:	bd80      	pop	{r7, pc}
 80067c0:	2001af94 	.word	0x2001af94

080067c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b088      	sub	sp, #32
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067cc:	f3ef 8311 	mrs	r3, BASEPRI
 80067d0:	f04f 0120 	mov.w	r1, #32
 80067d4:	f381 8811 	msr	BASEPRI, r1
 80067d8:	617b      	str	r3, [r7, #20]
 80067da:	4819      	ldr	r0, [pc, #100]	@ (8006840 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80067dc:	f7fe fcdb 	bl	8005196 <_PreparePacket>
 80067e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067e6:	4b17      	ldr	r3, [pc, #92]	@ (8006844 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	61fb      	str	r3, [r7, #28]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	61bb      	str	r3, [r7, #24]
 80067f8:	e00b      	b.n	8006812 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80067fa:	69bb      	ldr	r3, [r7, #24]
 80067fc:	b2da      	uxtb	r2, r3
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	1c59      	adds	r1, r3, #1
 8006802:	61f9      	str	r1, [r7, #28]
 8006804:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006808:	b2d2      	uxtb	r2, r2
 800680a:	701a      	strb	r2, [r3, #0]
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	09db      	lsrs	r3, r3, #7
 8006810:	61bb      	str	r3, [r7, #24]
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b7f      	cmp	r3, #127	@ 0x7f
 8006816:	d8f0      	bhi.n	80067fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	61fa      	str	r2, [r7, #28]
 800681e:	69ba      	ldr	r2, [r7, #24]
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006828:	2208      	movs	r2, #8
 800682a:	68f9      	ldr	r1, [r7, #12]
 800682c:	6938      	ldr	r0, [r7, #16]
 800682e:	f7fe fd9f 	bl	8005370 <_SendPacket>
  RECORD_END();
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f383 8811 	msr	BASEPRI, r3
}
 8006838:	bf00      	nop
 800683a:	3720      	adds	r7, #32
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	2001af94 	.word	0x2001af94
 8006844:	2001af64 	.word	0x2001af64

08006848 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b088      	sub	sp, #32
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006850:	f3ef 8311 	mrs	r3, BASEPRI
 8006854:	f04f 0120 	mov.w	r1, #32
 8006858:	f381 8811 	msr	BASEPRI, r1
 800685c:	617b      	str	r3, [r7, #20]
 800685e:	4819      	ldr	r0, [pc, #100]	@ (80068c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006860:	f7fe fc99 	bl	8005196 <_PreparePacket>
 8006864:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800686a:	4b17      	ldr	r3, [pc, #92]	@ (80068c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	61fb      	str	r3, [r7, #28]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	e00b      	b.n	8006896 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800687e:	69bb      	ldr	r3, [r7, #24]
 8006880:	b2da      	uxtb	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	1c59      	adds	r1, r3, #1
 8006886:	61f9      	str	r1, [r7, #28]
 8006888:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	09db      	lsrs	r3, r3, #7
 8006894:	61bb      	str	r3, [r7, #24]
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	2b7f      	cmp	r3, #127	@ 0x7f
 800689a:	d8f0      	bhi.n	800687e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	1c5a      	adds	r2, r3, #1
 80068a0:	61fa      	str	r2, [r7, #28]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	b2d2      	uxtb	r2, r2
 80068a6:	701a      	strb	r2, [r3, #0]
 80068a8:	69fb      	ldr	r3, [r7, #28]
 80068aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80068ac:	2204      	movs	r2, #4
 80068ae:	68f9      	ldr	r1, [r7, #12]
 80068b0:	6938      	ldr	r0, [r7, #16]
 80068b2:	f7fe fd5d 	bl	8005370 <_SendPacket>
  RECORD_END();
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f383 8811 	msr	BASEPRI, r3
}
 80068bc:	bf00      	nop
 80068be:	3720      	adds	r7, #32
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	2001af94 	.word	0x2001af94
 80068c8:	2001af64 	.word	0x2001af64

080068cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068d4:	f3ef 8311 	mrs	r3, BASEPRI
 80068d8:	f04f 0120 	mov.w	r1, #32
 80068dc:	f381 8811 	msr	BASEPRI, r1
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	4819      	ldr	r0, [pc, #100]	@ (8006948 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80068e4:	f7fe fc57 	bl	8005196 <_PreparePacket>
 80068e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80068ee:	4b17      	ldr	r3, [pc, #92]	@ (800694c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	61fb      	str	r3, [r7, #28]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	61bb      	str	r3, [r7, #24]
 8006900:	e00b      	b.n	800691a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	b2da      	uxtb	r2, r3
 8006906:	69fb      	ldr	r3, [r7, #28]
 8006908:	1c59      	adds	r1, r3, #1
 800690a:	61f9      	str	r1, [r7, #28]
 800690c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006910:	b2d2      	uxtb	r2, r2
 8006912:	701a      	strb	r2, [r3, #0]
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	09db      	lsrs	r3, r3, #7
 8006918:	61bb      	str	r3, [r7, #24]
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b7f      	cmp	r3, #127	@ 0x7f
 800691e:	d8f0      	bhi.n	8006902 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	61fa      	str	r2, [r7, #28]
 8006926:	69ba      	ldr	r2, [r7, #24]
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	69fb      	ldr	r3, [r7, #28]
 800692e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006930:	2206      	movs	r2, #6
 8006932:	68f9      	ldr	r1, [r7, #12]
 8006934:	6938      	ldr	r0, [r7, #16]
 8006936:	f7fe fd1b 	bl	8005370 <_SendPacket>
  RECORD_END();
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	f383 8811 	msr	BASEPRI, r3
}
 8006940:	bf00      	nop
 8006942:	3720      	adds	r7, #32
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	2001af94 	.word	0x2001af94
 800694c:	2001af64 	.word	0x2001af64

08006950 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006950:	b580      	push	{r7, lr}
 8006952:	b08a      	sub	sp, #40	@ 0x28
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	4827      	ldr	r0, [pc, #156]	@ (8006a08 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800696a:	f7fe fc14 	bl	8005196 <_PreparePacket>
 800696e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006974:	4b25      	ldr	r3, [pc, #148]	@ (8006a0c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	687a      	ldr	r2, [r7, #4]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	e00b      	b.n	80069a0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006988:	6a3b      	ldr	r3, [r7, #32]
 800698a:	b2da      	uxtb	r2, r3
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	1c59      	adds	r1, r3, #1
 8006990:	6279      	str	r1, [r7, #36]	@ 0x24
 8006992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006996:	b2d2      	uxtb	r2, r2
 8006998:	701a      	strb	r2, [r3, #0]
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	09db      	lsrs	r3, r3, #7
 800699e:	623b      	str	r3, [r7, #32]
 80069a0:	6a3b      	ldr	r3, [r7, #32]
 80069a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a4:	d8f0      	bhi.n	8006988 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80069a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069a8:	1c5a      	adds	r2, r3, #1
 80069aa:	627a      	str	r2, [r7, #36]	@ 0x24
 80069ac:	6a3a      	ldr	r2, [r7, #32]
 80069ae:	b2d2      	uxtb	r2, r2
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	61fb      	str	r3, [r7, #28]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	e00b      	b.n	80069d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	b2da      	uxtb	r2, r3
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	1c59      	adds	r1, r3, #1
 80069c8:	61f9      	str	r1, [r7, #28]
 80069ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ce:	b2d2      	uxtb	r2, r2
 80069d0:	701a      	strb	r2, [r3, #0]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	09db      	lsrs	r3, r3, #7
 80069d6:	61bb      	str	r3, [r7, #24]
 80069d8:	69bb      	ldr	r3, [r7, #24]
 80069da:	2b7f      	cmp	r3, #127	@ 0x7f
 80069dc:	d8f0      	bhi.n	80069c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	1c5a      	adds	r2, r3, #1
 80069e2:	61fa      	str	r2, [r7, #28]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80069ee:	2207      	movs	r2, #7
 80069f0:	68f9      	ldr	r1, [r7, #12]
 80069f2:	6938      	ldr	r0, [r7, #16]
 80069f4:	f7fe fcbc 	bl	8005370 <_SendPacket>
  RECORD_END();
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f383 8811 	msr	BASEPRI, r3
}
 80069fe:	bf00      	nop
 8006a00:	3728      	adds	r7, #40	@ 0x28
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	2001af94 	.word	0x2001af94
 8006a0c:	2001af64 	.word	0x2001af64

08006a10 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006a18:	4b04      	ldr	r3, [pc, #16]	@ (8006a2c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006a1a:	691b      	ldr	r3, [r3, #16]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	1ad3      	subs	r3, r2, r3
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	370c      	adds	r7, #12
 8006a24:	46bd      	mov	sp, r7
 8006a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2a:	4770      	bx	lr
 8006a2c:	2001af64 	.word	0x2001af64

08006a30 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08c      	sub	sp, #48	@ 0x30
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006a3a:	4b40      	ldr	r3, [pc, #256]	@ (8006b3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d077      	beq.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8006a42:	4b3e      	ldr	r3, [pc, #248]	@ (8006b3c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006a48:	2300      	movs	r3, #0
 8006a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a4c:	e008      	b.n	8006a60 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d007      	beq.n	8006a6a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d3f2      	bcc.n	8006a4e <SEGGER_SYSVIEW_SendModule+0x1e>
 8006a68:	e000      	b.n	8006a6c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006a6a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d055      	beq.n	8006b1e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006a72:	f3ef 8311 	mrs	r3, BASEPRI
 8006a76:	f04f 0120 	mov.w	r1, #32
 8006a7a:	f381 8811 	msr	BASEPRI, r1
 8006a7e:	617b      	str	r3, [r7, #20]
 8006a80:	482f      	ldr	r0, [pc, #188]	@ (8006b40 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006a82:	f7fe fb88 	bl	8005196 <_PreparePacket>
 8006a86:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a90:	79fb      	ldrb	r3, [r7, #7]
 8006a92:	623b      	str	r3, [r7, #32]
 8006a94:	e00b      	b.n	8006aae <SEGGER_SYSVIEW_SendModule+0x7e>
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a9c:	1c59      	adds	r1, r3, #1
 8006a9e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006aa0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006aa4:	b2d2      	uxtb	r2, r2
 8006aa6:	701a      	strb	r2, [r3, #0]
 8006aa8:	6a3b      	ldr	r3, [r7, #32]
 8006aaa:	09db      	lsrs	r3, r3, #7
 8006aac:	623b      	str	r3, [r7, #32]
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ab2:	d8f0      	bhi.n	8006a96 <SEGGER_SYSVIEW_SendModule+0x66>
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	1c5a      	adds	r2, r3, #1
 8006ab8:	627a      	str	r2, [r7, #36]	@ 0x24
 8006aba:	6a3a      	ldr	r2, [r7, #32]
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	61fb      	str	r3, [r7, #28]
 8006ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	e00b      	b.n	8006ae8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	1c59      	adds	r1, r3, #1
 8006ad8:	61f9      	str	r1, [r7, #28]
 8006ada:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ade:	b2d2      	uxtb	r2, r2
 8006ae0:	701a      	strb	r2, [r3, #0]
 8006ae2:	69bb      	ldr	r3, [r7, #24]
 8006ae4:	09db      	lsrs	r3, r3, #7
 8006ae6:	61bb      	str	r3, [r7, #24]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aec:	d8f0      	bhi.n	8006ad0 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	1c5a      	adds	r2, r3, #1
 8006af2:	61fa      	str	r2, [r7, #28]
 8006af4:	69ba      	ldr	r2, [r7, #24]
 8006af6:	b2d2      	uxtb	r2, r2
 8006af8:	701a      	strb	r2, [r3, #0]
 8006afa:	69fb      	ldr	r3, [r7, #28]
 8006afc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	2280      	movs	r2, #128	@ 0x80
 8006b04:	4619      	mov	r1, r3
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7fe fb0c 	bl	8005124 <_EncodeStr>
 8006b0c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006b0e:	2216      	movs	r2, #22
 8006b10:	68f9      	ldr	r1, [r7, #12]
 8006b12:	6938      	ldr	r0, [r7, #16]
 8006b14:	f7fe fc2c 	bl	8005370 <_SendPacket>
      RECORD_END();
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d006      	beq.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x102>
 8006b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b26:	68db      	ldr	r3, [r3, #12]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	4798      	blx	r3
    }
  }
}
 8006b32:	bf00      	nop
 8006b34:	3730      	adds	r7, #48	@ 0x30
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2001af8c 	.word	0x2001af8c
 8006b40:	2001af94 	.word	0x2001af94

08006b44 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006b4a:	4b0c      	ldr	r3, [pc, #48]	@ (8006b7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00f      	beq.n	8006b72 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006b52:	4b0a      	ldr	r3, [pc, #40]	@ (8006b7c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d002      	beq.n	8006b66 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	691b      	ldr	r3, [r3, #16]
 8006b6a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1f2      	bne.n	8006b58 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006b72:	bf00      	nop
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	2001af8c 	.word	0x2001af8c

08006b80 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006b86:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8a:	f04f 0120 	mov.w	r1, #32
 8006b8e:	f381 8811 	msr	BASEPRI, r1
 8006b92:	60fb      	str	r3, [r7, #12]
 8006b94:	4817      	ldr	r0, [pc, #92]	@ (8006bf4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006b96:	f7fe fafe 	bl	8005196 <_PreparePacket>
 8006b9a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	4b14      	ldr	r3, [pc, #80]	@ (8006bf8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	613b      	str	r3, [r7, #16]
 8006baa:	e00b      	b.n	8006bc4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	b2da      	uxtb	r2, r3
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	1c59      	adds	r1, r3, #1
 8006bb4:	6179      	str	r1, [r7, #20]
 8006bb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	09db      	lsrs	r3, r3, #7
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bc8:	d8f0      	bhi.n	8006bac <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	1c5a      	adds	r2, r3, #1
 8006bce:	617a      	str	r2, [r7, #20]
 8006bd0:	693a      	ldr	r2, [r7, #16]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006bda:	221b      	movs	r2, #27
 8006bdc:	6879      	ldr	r1, [r7, #4]
 8006bde:	68b8      	ldr	r0, [r7, #8]
 8006be0:	f7fe fbc6 	bl	8005370 <_SendPacket>
  RECORD_END();
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f383 8811 	msr	BASEPRI, r3
}
 8006bea:	bf00      	nop
 8006bec:	3718      	adds	r7, #24
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	2001af94 	.word	0x2001af94
 8006bf8:	2001af90 	.word	0x2001af90

08006bfc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006bfc:	b40f      	push	{r0, r1, r2, r3}
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006c04:	f107 0314 	add.w	r3, r7, #20
 8006c08:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006c0a:	1d3b      	adds	r3, r7, #4
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	2100      	movs	r1, #0
 8006c10:	6938      	ldr	r0, [r7, #16]
 8006c12:	f7fe febd 	bl	8005990 <_VPrintTarget>
  va_end(ParamList);
}
 8006c16:	bf00      	nop
 8006c18:	3708      	adds	r7, #8
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c20:	b004      	add	sp, #16
 8006c22:	4770      	bx	lr

08006c24 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b08a      	sub	sp, #40	@ 0x28
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	f04f 0120 	mov.w	r1, #32
 8006c34:	f381 8811 	msr	BASEPRI, r1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4827      	ldr	r0, [pc, #156]	@ (8006cd8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006c3c:	f7fe faab 	bl	8005196 <_PreparePacket>
 8006c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c42:	2280      	movs	r2, #128	@ 0x80
 8006c44:	6879      	ldr	r1, [r7, #4]
 8006c46:	6938      	ldr	r0, [r7, #16]
 8006c48:	f7fe fa6c 	bl	8005124 <_EncodeStr>
 8006c4c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c52:	2301      	movs	r3, #1
 8006c54:	623b      	str	r3, [r7, #32]
 8006c56:	e00b      	b.n	8006c70 <SEGGER_SYSVIEW_Warn+0x4c>
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5e:	1c59      	adds	r1, r3, #1
 8006c60:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	6a3b      	ldr	r3, [r7, #32]
 8006c6c:	09db      	lsrs	r3, r3, #7
 8006c6e:	623b      	str	r3, [r7, #32]
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c74:	d8f0      	bhi.n	8006c58 <SEGGER_SYSVIEW_Warn+0x34>
 8006c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c78:	1c5a      	adds	r2, r3, #1
 8006c7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c7c:	6a3a      	ldr	r2, [r7, #32]
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	701a      	strb	r2, [r3, #0]
 8006c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	61fb      	str	r3, [r7, #28]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	61bb      	str	r3, [r7, #24]
 8006c8e:	e00b      	b.n	8006ca8 <SEGGER_SYSVIEW_Warn+0x84>
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	b2da      	uxtb	r2, r3
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	1c59      	adds	r1, r3, #1
 8006c98:	61f9      	str	r1, [r7, #28]
 8006c9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	701a      	strb	r2, [r3, #0]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	09db      	lsrs	r3, r3, #7
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cac:	d8f0      	bhi.n	8006c90 <SEGGER_SYSVIEW_Warn+0x6c>
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	1c5a      	adds	r2, r3, #1
 8006cb2:	61fa      	str	r2, [r7, #28]
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	b2d2      	uxtb	r2, r2
 8006cb8:	701a      	strb	r2, [r3, #0]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006cbe:	221a      	movs	r2, #26
 8006cc0:	68f9      	ldr	r1, [r7, #12]
 8006cc2:	6938      	ldr	r0, [r7, #16]
 8006cc4:	f7fe fb54 	bl	8005370 <_SendPacket>
  RECORD_END();
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f383 8811 	msr	BASEPRI, r3
}
 8006cce:	bf00      	nop
 8006cd0:	3728      	adds	r7, #40	@ 0x28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	2001af94 	.word	0x2001af94

08006cdc <sniprintf>:
 8006cdc:	b40c      	push	{r2, r3}
 8006cde:	b530      	push	{r4, r5, lr}
 8006ce0:	4b17      	ldr	r3, [pc, #92]	@ (8006d40 <sniprintf+0x64>)
 8006ce2:	1e0c      	subs	r4, r1, #0
 8006ce4:	681d      	ldr	r5, [r3, #0]
 8006ce6:	b09d      	sub	sp, #116	@ 0x74
 8006ce8:	da08      	bge.n	8006cfc <sniprintf+0x20>
 8006cea:	238b      	movs	r3, #139	@ 0x8b
 8006cec:	602b      	str	r3, [r5, #0]
 8006cee:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf2:	b01d      	add	sp, #116	@ 0x74
 8006cf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006cf8:	b002      	add	sp, #8
 8006cfa:	4770      	bx	lr
 8006cfc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006d00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006d04:	bf14      	ite	ne
 8006d06:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006d0a:	4623      	moveq	r3, r4
 8006d0c:	9304      	str	r3, [sp, #16]
 8006d0e:	9307      	str	r3, [sp, #28]
 8006d10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006d14:	9002      	str	r0, [sp, #8]
 8006d16:	9006      	str	r0, [sp, #24]
 8006d18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006d1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006d1e:	ab21      	add	r3, sp, #132	@ 0x84
 8006d20:	a902      	add	r1, sp, #8
 8006d22:	4628      	mov	r0, r5
 8006d24:	9301      	str	r3, [sp, #4]
 8006d26:	f000 f9ad 	bl	8007084 <_svfiprintf_r>
 8006d2a:	1c43      	adds	r3, r0, #1
 8006d2c:	bfbc      	itt	lt
 8006d2e:	238b      	movlt	r3, #139	@ 0x8b
 8006d30:	602b      	strlt	r3, [r5, #0]
 8006d32:	2c00      	cmp	r4, #0
 8006d34:	d0dd      	beq.n	8006cf2 <sniprintf+0x16>
 8006d36:	9b02      	ldr	r3, [sp, #8]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
 8006d3c:	e7d9      	b.n	8006cf2 <sniprintf+0x16>
 8006d3e:	bf00      	nop
 8006d40:	20000014 	.word	0x20000014

08006d44 <memcmp>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	3901      	subs	r1, #1
 8006d48:	4402      	add	r2, r0
 8006d4a:	4290      	cmp	r0, r2
 8006d4c:	d101      	bne.n	8006d52 <memcmp+0xe>
 8006d4e:	2000      	movs	r0, #0
 8006d50:	e005      	b.n	8006d5e <memcmp+0x1a>
 8006d52:	7803      	ldrb	r3, [r0, #0]
 8006d54:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006d58:	42a3      	cmp	r3, r4
 8006d5a:	d001      	beq.n	8006d60 <memcmp+0x1c>
 8006d5c:	1b18      	subs	r0, r3, r4
 8006d5e:	bd10      	pop	{r4, pc}
 8006d60:	3001      	adds	r0, #1
 8006d62:	e7f2      	b.n	8006d4a <memcmp+0x6>

08006d64 <memset>:
 8006d64:	4402      	add	r2, r0
 8006d66:	4603      	mov	r3, r0
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d100      	bne.n	8006d6e <memset+0xa>
 8006d6c:	4770      	bx	lr
 8006d6e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d72:	e7f9      	b.n	8006d68 <memset+0x4>

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4d0d      	ldr	r5, [pc, #52]	@ (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	@ (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	42a6      	cmp	r6, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4d0b      	ldr	r5, [pc, #44]	@ (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	@ (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 fc74 	bl	8007674 <_init>
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2600      	movs	r6, #0
 8006d92:	42a6      	cmp	r6, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9c:	4798      	blx	r3
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da6:	4798      	blx	r3
 8006da8:	3601      	adds	r6, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	08007834 	.word	0x08007834
 8006db0:	08007834 	.word	0x08007834
 8006db4:	08007834 	.word	0x08007834
 8006db8:	08007838 	.word	0x08007838

08006dbc <__retarget_lock_acquire_recursive>:
 8006dbc:	4770      	bx	lr

08006dbe <__retarget_lock_release_recursive>:
 8006dbe:	4770      	bx	lr

08006dc0 <memcpy>:
 8006dc0:	440a      	add	r2, r1
 8006dc2:	4291      	cmp	r1, r2
 8006dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dc8:	d100      	bne.n	8006dcc <memcpy+0xc>
 8006dca:	4770      	bx	lr
 8006dcc:	b510      	push	{r4, lr}
 8006dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dd6:	4291      	cmp	r1, r2
 8006dd8:	d1f9      	bne.n	8006dce <memcpy+0xe>
 8006dda:	bd10      	pop	{r4, pc}

08006ddc <_free_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4605      	mov	r5, r0
 8006de0:	2900      	cmp	r1, #0
 8006de2:	d041      	beq.n	8006e68 <_free_r+0x8c>
 8006de4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de8:	1f0c      	subs	r4, r1, #4
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	bfb8      	it	lt
 8006dee:	18e4      	addlt	r4, r4, r3
 8006df0:	f000 f8e0 	bl	8006fb4 <__malloc_lock>
 8006df4:	4a1d      	ldr	r2, [pc, #116]	@ (8006e6c <_free_r+0x90>)
 8006df6:	6813      	ldr	r3, [r2, #0]
 8006df8:	b933      	cbnz	r3, 8006e08 <_free_r+0x2c>
 8006dfa:	6063      	str	r3, [r4, #4]
 8006dfc:	6014      	str	r4, [r2, #0]
 8006dfe:	4628      	mov	r0, r5
 8006e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e04:	f000 b8dc 	b.w	8006fc0 <__malloc_unlock>
 8006e08:	42a3      	cmp	r3, r4
 8006e0a:	d908      	bls.n	8006e1e <_free_r+0x42>
 8006e0c:	6820      	ldr	r0, [r4, #0]
 8006e0e:	1821      	adds	r1, r4, r0
 8006e10:	428b      	cmp	r3, r1
 8006e12:	bf01      	itttt	eq
 8006e14:	6819      	ldreq	r1, [r3, #0]
 8006e16:	685b      	ldreq	r3, [r3, #4]
 8006e18:	1809      	addeq	r1, r1, r0
 8006e1a:	6021      	streq	r1, [r4, #0]
 8006e1c:	e7ed      	b.n	8006dfa <_free_r+0x1e>
 8006e1e:	461a      	mov	r2, r3
 8006e20:	685b      	ldr	r3, [r3, #4]
 8006e22:	b10b      	cbz	r3, 8006e28 <_free_r+0x4c>
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	d9fa      	bls.n	8006e1e <_free_r+0x42>
 8006e28:	6811      	ldr	r1, [r2, #0]
 8006e2a:	1850      	adds	r0, r2, r1
 8006e2c:	42a0      	cmp	r0, r4
 8006e2e:	d10b      	bne.n	8006e48 <_free_r+0x6c>
 8006e30:	6820      	ldr	r0, [r4, #0]
 8006e32:	4401      	add	r1, r0
 8006e34:	1850      	adds	r0, r2, r1
 8006e36:	4283      	cmp	r3, r0
 8006e38:	6011      	str	r1, [r2, #0]
 8006e3a:	d1e0      	bne.n	8006dfe <_free_r+0x22>
 8006e3c:	6818      	ldr	r0, [r3, #0]
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	6053      	str	r3, [r2, #4]
 8006e42:	4408      	add	r0, r1
 8006e44:	6010      	str	r0, [r2, #0]
 8006e46:	e7da      	b.n	8006dfe <_free_r+0x22>
 8006e48:	d902      	bls.n	8006e50 <_free_r+0x74>
 8006e4a:	230c      	movs	r3, #12
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	e7d6      	b.n	8006dfe <_free_r+0x22>
 8006e50:	6820      	ldr	r0, [r4, #0]
 8006e52:	1821      	adds	r1, r4, r0
 8006e54:	428b      	cmp	r3, r1
 8006e56:	bf04      	itt	eq
 8006e58:	6819      	ldreq	r1, [r3, #0]
 8006e5a:	685b      	ldreq	r3, [r3, #4]
 8006e5c:	6063      	str	r3, [r4, #4]
 8006e5e:	bf04      	itt	eq
 8006e60:	1809      	addeq	r1, r1, r0
 8006e62:	6021      	streq	r1, [r4, #0]
 8006e64:	6054      	str	r4, [r2, #4]
 8006e66:	e7ca      	b.n	8006dfe <_free_r+0x22>
 8006e68:	bd38      	pop	{r3, r4, r5, pc}
 8006e6a:	bf00      	nop
 8006e6c:	2001b1bc 	.word	0x2001b1bc

08006e70 <sbrk_aligned>:
 8006e70:	b570      	push	{r4, r5, r6, lr}
 8006e72:	4e0f      	ldr	r6, [pc, #60]	@ (8006eb0 <sbrk_aligned+0x40>)
 8006e74:	460c      	mov	r4, r1
 8006e76:	6831      	ldr	r1, [r6, #0]
 8006e78:	4605      	mov	r5, r0
 8006e7a:	b911      	cbnz	r1, 8006e82 <sbrk_aligned+0x12>
 8006e7c:	f000 fba6 	bl	80075cc <_sbrk_r>
 8006e80:	6030      	str	r0, [r6, #0]
 8006e82:	4621      	mov	r1, r4
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 fba1 	bl	80075cc <_sbrk_r>
 8006e8a:	1c43      	adds	r3, r0, #1
 8006e8c:	d103      	bne.n	8006e96 <sbrk_aligned+0x26>
 8006e8e:	f04f 34ff 	mov.w	r4, #4294967295
 8006e92:	4620      	mov	r0, r4
 8006e94:	bd70      	pop	{r4, r5, r6, pc}
 8006e96:	1cc4      	adds	r4, r0, #3
 8006e98:	f024 0403 	bic.w	r4, r4, #3
 8006e9c:	42a0      	cmp	r0, r4
 8006e9e:	d0f8      	beq.n	8006e92 <sbrk_aligned+0x22>
 8006ea0:	1a21      	subs	r1, r4, r0
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	f000 fb92 	bl	80075cc <_sbrk_r>
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d1f2      	bne.n	8006e92 <sbrk_aligned+0x22>
 8006eac:	e7ef      	b.n	8006e8e <sbrk_aligned+0x1e>
 8006eae:	bf00      	nop
 8006eb0:	2001b1b8 	.word	0x2001b1b8

08006eb4 <_malloc_r>:
 8006eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eb8:	1ccd      	adds	r5, r1, #3
 8006eba:	f025 0503 	bic.w	r5, r5, #3
 8006ebe:	3508      	adds	r5, #8
 8006ec0:	2d0c      	cmp	r5, #12
 8006ec2:	bf38      	it	cc
 8006ec4:	250c      	movcc	r5, #12
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	4606      	mov	r6, r0
 8006eca:	db01      	blt.n	8006ed0 <_malloc_r+0x1c>
 8006ecc:	42a9      	cmp	r1, r5
 8006ece:	d904      	bls.n	8006eda <_malloc_r+0x26>
 8006ed0:	230c      	movs	r3, #12
 8006ed2:	6033      	str	r3, [r6, #0]
 8006ed4:	2000      	movs	r0, #0
 8006ed6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006eda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fb0 <_malloc_r+0xfc>
 8006ede:	f000 f869 	bl	8006fb4 <__malloc_lock>
 8006ee2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ee6:	461c      	mov	r4, r3
 8006ee8:	bb44      	cbnz	r4, 8006f3c <_malloc_r+0x88>
 8006eea:	4629      	mov	r1, r5
 8006eec:	4630      	mov	r0, r6
 8006eee:	f7ff ffbf 	bl	8006e70 <sbrk_aligned>
 8006ef2:	1c43      	adds	r3, r0, #1
 8006ef4:	4604      	mov	r4, r0
 8006ef6:	d158      	bne.n	8006faa <_malloc_r+0xf6>
 8006ef8:	f8d8 4000 	ldr.w	r4, [r8]
 8006efc:	4627      	mov	r7, r4
 8006efe:	2f00      	cmp	r7, #0
 8006f00:	d143      	bne.n	8006f8a <_malloc_r+0xd6>
 8006f02:	2c00      	cmp	r4, #0
 8006f04:	d04b      	beq.n	8006f9e <_malloc_r+0xea>
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	4639      	mov	r1, r7
 8006f0a:	4630      	mov	r0, r6
 8006f0c:	eb04 0903 	add.w	r9, r4, r3
 8006f10:	f000 fb5c 	bl	80075cc <_sbrk_r>
 8006f14:	4581      	cmp	r9, r0
 8006f16:	d142      	bne.n	8006f9e <_malloc_r+0xea>
 8006f18:	6821      	ldr	r1, [r4, #0]
 8006f1a:	1a6d      	subs	r5, r5, r1
 8006f1c:	4629      	mov	r1, r5
 8006f1e:	4630      	mov	r0, r6
 8006f20:	f7ff ffa6 	bl	8006e70 <sbrk_aligned>
 8006f24:	3001      	adds	r0, #1
 8006f26:	d03a      	beq.n	8006f9e <_malloc_r+0xea>
 8006f28:	6823      	ldr	r3, [r4, #0]
 8006f2a:	442b      	add	r3, r5
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8006f32:	685a      	ldr	r2, [r3, #4]
 8006f34:	bb62      	cbnz	r2, 8006f90 <_malloc_r+0xdc>
 8006f36:	f8c8 7000 	str.w	r7, [r8]
 8006f3a:	e00f      	b.n	8006f5c <_malloc_r+0xa8>
 8006f3c:	6822      	ldr	r2, [r4, #0]
 8006f3e:	1b52      	subs	r2, r2, r5
 8006f40:	d420      	bmi.n	8006f84 <_malloc_r+0xd0>
 8006f42:	2a0b      	cmp	r2, #11
 8006f44:	d917      	bls.n	8006f76 <_malloc_r+0xc2>
 8006f46:	1961      	adds	r1, r4, r5
 8006f48:	42a3      	cmp	r3, r4
 8006f4a:	6025      	str	r5, [r4, #0]
 8006f4c:	bf18      	it	ne
 8006f4e:	6059      	strne	r1, [r3, #4]
 8006f50:	6863      	ldr	r3, [r4, #4]
 8006f52:	bf08      	it	eq
 8006f54:	f8c8 1000 	streq.w	r1, [r8]
 8006f58:	5162      	str	r2, [r4, r5]
 8006f5a:	604b      	str	r3, [r1, #4]
 8006f5c:	4630      	mov	r0, r6
 8006f5e:	f000 f82f 	bl	8006fc0 <__malloc_unlock>
 8006f62:	f104 000b 	add.w	r0, r4, #11
 8006f66:	1d23      	adds	r3, r4, #4
 8006f68:	f020 0007 	bic.w	r0, r0, #7
 8006f6c:	1ac2      	subs	r2, r0, r3
 8006f6e:	bf1c      	itt	ne
 8006f70:	1a1b      	subne	r3, r3, r0
 8006f72:	50a3      	strne	r3, [r4, r2]
 8006f74:	e7af      	b.n	8006ed6 <_malloc_r+0x22>
 8006f76:	6862      	ldr	r2, [r4, #4]
 8006f78:	42a3      	cmp	r3, r4
 8006f7a:	bf0c      	ite	eq
 8006f7c:	f8c8 2000 	streq.w	r2, [r8]
 8006f80:	605a      	strne	r2, [r3, #4]
 8006f82:	e7eb      	b.n	8006f5c <_malloc_r+0xa8>
 8006f84:	4623      	mov	r3, r4
 8006f86:	6864      	ldr	r4, [r4, #4]
 8006f88:	e7ae      	b.n	8006ee8 <_malloc_r+0x34>
 8006f8a:	463c      	mov	r4, r7
 8006f8c:	687f      	ldr	r7, [r7, #4]
 8006f8e:	e7b6      	b.n	8006efe <_malloc_r+0x4a>
 8006f90:	461a      	mov	r2, r3
 8006f92:	685b      	ldr	r3, [r3, #4]
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	d1fb      	bne.n	8006f90 <_malloc_r+0xdc>
 8006f98:	2300      	movs	r3, #0
 8006f9a:	6053      	str	r3, [r2, #4]
 8006f9c:	e7de      	b.n	8006f5c <_malloc_r+0xa8>
 8006f9e:	230c      	movs	r3, #12
 8006fa0:	6033      	str	r3, [r6, #0]
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	f000 f80c 	bl	8006fc0 <__malloc_unlock>
 8006fa8:	e794      	b.n	8006ed4 <_malloc_r+0x20>
 8006faa:	6005      	str	r5, [r0, #0]
 8006fac:	e7d6      	b.n	8006f5c <_malloc_r+0xa8>
 8006fae:	bf00      	nop
 8006fb0:	2001b1bc 	.word	0x2001b1bc

08006fb4 <__malloc_lock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	@ (8006fbc <__malloc_lock+0x8>)
 8006fb6:	f7ff bf01 	b.w	8006dbc <__retarget_lock_acquire_recursive>
 8006fba:	bf00      	nop
 8006fbc:	2001b1b4 	.word	0x2001b1b4

08006fc0 <__malloc_unlock>:
 8006fc0:	4801      	ldr	r0, [pc, #4]	@ (8006fc8 <__malloc_unlock+0x8>)
 8006fc2:	f7ff befc 	b.w	8006dbe <__retarget_lock_release_recursive>
 8006fc6:	bf00      	nop
 8006fc8:	2001b1b4 	.word	0x2001b1b4

08006fcc <__ssputs_r>:
 8006fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd0:	688e      	ldr	r6, [r1, #8]
 8006fd2:	461f      	mov	r7, r3
 8006fd4:	42be      	cmp	r6, r7
 8006fd6:	680b      	ldr	r3, [r1, #0]
 8006fd8:	4682      	mov	sl, r0
 8006fda:	460c      	mov	r4, r1
 8006fdc:	4690      	mov	r8, r2
 8006fde:	d82d      	bhi.n	800703c <__ssputs_r+0x70>
 8006fe0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006fe4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006fe8:	d026      	beq.n	8007038 <__ssputs_r+0x6c>
 8006fea:	6965      	ldr	r5, [r4, #20]
 8006fec:	6909      	ldr	r1, [r1, #16]
 8006fee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ff2:	eba3 0901 	sub.w	r9, r3, r1
 8006ff6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ffa:	1c7b      	adds	r3, r7, #1
 8006ffc:	444b      	add	r3, r9
 8006ffe:	106d      	asrs	r5, r5, #1
 8007000:	429d      	cmp	r5, r3
 8007002:	bf38      	it	cc
 8007004:	461d      	movcc	r5, r3
 8007006:	0553      	lsls	r3, r2, #21
 8007008:	d527      	bpl.n	800705a <__ssputs_r+0x8e>
 800700a:	4629      	mov	r1, r5
 800700c:	f7ff ff52 	bl	8006eb4 <_malloc_r>
 8007010:	4606      	mov	r6, r0
 8007012:	b360      	cbz	r0, 800706e <__ssputs_r+0xa2>
 8007014:	6921      	ldr	r1, [r4, #16]
 8007016:	464a      	mov	r2, r9
 8007018:	f7ff fed2 	bl	8006dc0 <memcpy>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007022:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	6126      	str	r6, [r4, #16]
 800702a:	6165      	str	r5, [r4, #20]
 800702c:	444e      	add	r6, r9
 800702e:	eba5 0509 	sub.w	r5, r5, r9
 8007032:	6026      	str	r6, [r4, #0]
 8007034:	60a5      	str	r5, [r4, #8]
 8007036:	463e      	mov	r6, r7
 8007038:	42be      	cmp	r6, r7
 800703a:	d900      	bls.n	800703e <__ssputs_r+0x72>
 800703c:	463e      	mov	r6, r7
 800703e:	6820      	ldr	r0, [r4, #0]
 8007040:	4632      	mov	r2, r6
 8007042:	4641      	mov	r1, r8
 8007044:	f000 faa8 	bl	8007598 <memmove>
 8007048:	68a3      	ldr	r3, [r4, #8]
 800704a:	1b9b      	subs	r3, r3, r6
 800704c:	60a3      	str	r3, [r4, #8]
 800704e:	6823      	ldr	r3, [r4, #0]
 8007050:	4433      	add	r3, r6
 8007052:	6023      	str	r3, [r4, #0]
 8007054:	2000      	movs	r0, #0
 8007056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705a:	462a      	mov	r2, r5
 800705c:	f000 fac6 	bl	80075ec <_realloc_r>
 8007060:	4606      	mov	r6, r0
 8007062:	2800      	cmp	r0, #0
 8007064:	d1e0      	bne.n	8007028 <__ssputs_r+0x5c>
 8007066:	6921      	ldr	r1, [r4, #16]
 8007068:	4650      	mov	r0, sl
 800706a:	f7ff feb7 	bl	8006ddc <_free_r>
 800706e:	230c      	movs	r3, #12
 8007070:	f8ca 3000 	str.w	r3, [sl]
 8007074:	89a3      	ldrh	r3, [r4, #12]
 8007076:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	f04f 30ff 	mov.w	r0, #4294967295
 8007080:	e7e9      	b.n	8007056 <__ssputs_r+0x8a>
	...

08007084 <_svfiprintf_r>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	4698      	mov	r8, r3
 800708a:	898b      	ldrh	r3, [r1, #12]
 800708c:	061b      	lsls	r3, r3, #24
 800708e:	b09d      	sub	sp, #116	@ 0x74
 8007090:	4607      	mov	r7, r0
 8007092:	460d      	mov	r5, r1
 8007094:	4614      	mov	r4, r2
 8007096:	d510      	bpl.n	80070ba <_svfiprintf_r+0x36>
 8007098:	690b      	ldr	r3, [r1, #16]
 800709a:	b973      	cbnz	r3, 80070ba <_svfiprintf_r+0x36>
 800709c:	2140      	movs	r1, #64	@ 0x40
 800709e:	f7ff ff09 	bl	8006eb4 <_malloc_r>
 80070a2:	6028      	str	r0, [r5, #0]
 80070a4:	6128      	str	r0, [r5, #16]
 80070a6:	b930      	cbnz	r0, 80070b6 <_svfiprintf_r+0x32>
 80070a8:	230c      	movs	r3, #12
 80070aa:	603b      	str	r3, [r7, #0]
 80070ac:	f04f 30ff 	mov.w	r0, #4294967295
 80070b0:	b01d      	add	sp, #116	@ 0x74
 80070b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070b6:	2340      	movs	r3, #64	@ 0x40
 80070b8:	616b      	str	r3, [r5, #20]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80070be:	2320      	movs	r3, #32
 80070c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80070c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c8:	2330      	movs	r3, #48	@ 0x30
 80070ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007268 <_svfiprintf_r+0x1e4>
 80070ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80070d2:	f04f 0901 	mov.w	r9, #1
 80070d6:	4623      	mov	r3, r4
 80070d8:	469a      	mov	sl, r3
 80070da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070de:	b10a      	cbz	r2, 80070e4 <_svfiprintf_r+0x60>
 80070e0:	2a25      	cmp	r2, #37	@ 0x25
 80070e2:	d1f9      	bne.n	80070d8 <_svfiprintf_r+0x54>
 80070e4:	ebba 0b04 	subs.w	fp, sl, r4
 80070e8:	d00b      	beq.n	8007102 <_svfiprintf_r+0x7e>
 80070ea:	465b      	mov	r3, fp
 80070ec:	4622      	mov	r2, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	4638      	mov	r0, r7
 80070f2:	f7ff ff6b 	bl	8006fcc <__ssputs_r>
 80070f6:	3001      	adds	r0, #1
 80070f8:	f000 80a7 	beq.w	800724a <_svfiprintf_r+0x1c6>
 80070fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070fe:	445a      	add	r2, fp
 8007100:	9209      	str	r2, [sp, #36]	@ 0x24
 8007102:	f89a 3000 	ldrb.w	r3, [sl]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 809f 	beq.w	800724a <_svfiprintf_r+0x1c6>
 800710c:	2300      	movs	r3, #0
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007116:	f10a 0a01 	add.w	sl, sl, #1
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	9307      	str	r3, [sp, #28]
 800711e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007122:	931a      	str	r3, [sp, #104]	@ 0x68
 8007124:	4654      	mov	r4, sl
 8007126:	2205      	movs	r2, #5
 8007128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712c:	484e      	ldr	r0, [pc, #312]	@ (8007268 <_svfiprintf_r+0x1e4>)
 800712e:	f7f9 f8a7 	bl	8000280 <memchr>
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	b9d8      	cbnz	r0, 800716e <_svfiprintf_r+0xea>
 8007136:	06d0      	lsls	r0, r2, #27
 8007138:	bf44      	itt	mi
 800713a:	2320      	movmi	r3, #32
 800713c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007140:	0711      	lsls	r1, r2, #28
 8007142:	bf44      	itt	mi
 8007144:	232b      	movmi	r3, #43	@ 0x2b
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800714a:	f89a 3000 	ldrb.w	r3, [sl]
 800714e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007150:	d015      	beq.n	800717e <_svfiprintf_r+0xfa>
 8007152:	9a07      	ldr	r2, [sp, #28]
 8007154:	4654      	mov	r4, sl
 8007156:	2000      	movs	r0, #0
 8007158:	f04f 0c0a 	mov.w	ip, #10
 800715c:	4621      	mov	r1, r4
 800715e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007162:	3b30      	subs	r3, #48	@ 0x30
 8007164:	2b09      	cmp	r3, #9
 8007166:	d94b      	bls.n	8007200 <_svfiprintf_r+0x17c>
 8007168:	b1b0      	cbz	r0, 8007198 <_svfiprintf_r+0x114>
 800716a:	9207      	str	r2, [sp, #28]
 800716c:	e014      	b.n	8007198 <_svfiprintf_r+0x114>
 800716e:	eba0 0308 	sub.w	r3, r0, r8
 8007172:	fa09 f303 	lsl.w	r3, r9, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	46a2      	mov	sl, r4
 800717c:	e7d2      	b.n	8007124 <_svfiprintf_r+0xa0>
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	1d19      	adds	r1, r3, #4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	9103      	str	r1, [sp, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfbb      	ittet	lt
 800718a:	425b      	neglt	r3, r3
 800718c:	f042 0202 	orrlt.w	r2, r2, #2
 8007190:	9307      	strge	r3, [sp, #28]
 8007192:	9307      	strlt	r3, [sp, #28]
 8007194:	bfb8      	it	lt
 8007196:	9204      	strlt	r2, [sp, #16]
 8007198:	7823      	ldrb	r3, [r4, #0]
 800719a:	2b2e      	cmp	r3, #46	@ 0x2e
 800719c:	d10a      	bne.n	80071b4 <_svfiprintf_r+0x130>
 800719e:	7863      	ldrb	r3, [r4, #1]
 80071a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80071a2:	d132      	bne.n	800720a <_svfiprintf_r+0x186>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80071b0:	3402      	adds	r4, #2
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007278 <_svfiprintf_r+0x1f4>
 80071b8:	7821      	ldrb	r1, [r4, #0]
 80071ba:	2203      	movs	r2, #3
 80071bc:	4650      	mov	r0, sl
 80071be:	f7f9 f85f 	bl	8000280 <memchr>
 80071c2:	b138      	cbz	r0, 80071d4 <_svfiprintf_r+0x150>
 80071c4:	9b04      	ldr	r3, [sp, #16]
 80071c6:	eba0 000a 	sub.w	r0, r0, sl
 80071ca:	2240      	movs	r2, #64	@ 0x40
 80071cc:	4082      	lsls	r2, r0
 80071ce:	4313      	orrs	r3, r2
 80071d0:	3401      	adds	r4, #1
 80071d2:	9304      	str	r3, [sp, #16]
 80071d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071d8:	4824      	ldr	r0, [pc, #144]	@ (800726c <_svfiprintf_r+0x1e8>)
 80071da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80071de:	2206      	movs	r2, #6
 80071e0:	f7f9 f84e 	bl	8000280 <memchr>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d036      	beq.n	8007256 <_svfiprintf_r+0x1d2>
 80071e8:	4b21      	ldr	r3, [pc, #132]	@ (8007270 <_svfiprintf_r+0x1ec>)
 80071ea:	bb1b      	cbnz	r3, 8007234 <_svfiprintf_r+0x1b0>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	3307      	adds	r3, #7
 80071f0:	f023 0307 	bic.w	r3, r3, #7
 80071f4:	3308      	adds	r3, #8
 80071f6:	9303      	str	r3, [sp, #12]
 80071f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071fa:	4433      	add	r3, r6
 80071fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80071fe:	e76a      	b.n	80070d6 <_svfiprintf_r+0x52>
 8007200:	fb0c 3202 	mla	r2, ip, r2, r3
 8007204:	460c      	mov	r4, r1
 8007206:	2001      	movs	r0, #1
 8007208:	e7a8      	b.n	800715c <_svfiprintf_r+0xd8>
 800720a:	2300      	movs	r3, #0
 800720c:	3401      	adds	r4, #1
 800720e:	9305      	str	r3, [sp, #20]
 8007210:	4619      	mov	r1, r3
 8007212:	f04f 0c0a 	mov.w	ip, #10
 8007216:	4620      	mov	r0, r4
 8007218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800721c:	3a30      	subs	r2, #48	@ 0x30
 800721e:	2a09      	cmp	r2, #9
 8007220:	d903      	bls.n	800722a <_svfiprintf_r+0x1a6>
 8007222:	2b00      	cmp	r3, #0
 8007224:	d0c6      	beq.n	80071b4 <_svfiprintf_r+0x130>
 8007226:	9105      	str	r1, [sp, #20]
 8007228:	e7c4      	b.n	80071b4 <_svfiprintf_r+0x130>
 800722a:	fb0c 2101 	mla	r1, ip, r1, r2
 800722e:	4604      	mov	r4, r0
 8007230:	2301      	movs	r3, #1
 8007232:	e7f0      	b.n	8007216 <_svfiprintf_r+0x192>
 8007234:	ab03      	add	r3, sp, #12
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	462a      	mov	r2, r5
 800723a:	4b0e      	ldr	r3, [pc, #56]	@ (8007274 <_svfiprintf_r+0x1f0>)
 800723c:	a904      	add	r1, sp, #16
 800723e:	4638      	mov	r0, r7
 8007240:	f3af 8000 	nop.w
 8007244:	1c42      	adds	r2, r0, #1
 8007246:	4606      	mov	r6, r0
 8007248:	d1d6      	bne.n	80071f8 <_svfiprintf_r+0x174>
 800724a:	89ab      	ldrh	r3, [r5, #12]
 800724c:	065b      	lsls	r3, r3, #25
 800724e:	f53f af2d 	bmi.w	80070ac <_svfiprintf_r+0x28>
 8007252:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007254:	e72c      	b.n	80070b0 <_svfiprintf_r+0x2c>
 8007256:	ab03      	add	r3, sp, #12
 8007258:	9300      	str	r3, [sp, #0]
 800725a:	462a      	mov	r2, r5
 800725c:	4b05      	ldr	r3, [pc, #20]	@ (8007274 <_svfiprintf_r+0x1f0>)
 800725e:	a904      	add	r1, sp, #16
 8007260:	4638      	mov	r0, r7
 8007262:	f000 f879 	bl	8007358 <_printf_i>
 8007266:	e7ed      	b.n	8007244 <_svfiprintf_r+0x1c0>
 8007268:	080077f8 	.word	0x080077f8
 800726c:	08007802 	.word	0x08007802
 8007270:	00000000 	.word	0x00000000
 8007274:	08006fcd 	.word	0x08006fcd
 8007278:	080077fe 	.word	0x080077fe

0800727c <_printf_common>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	4616      	mov	r6, r2
 8007282:	4698      	mov	r8, r3
 8007284:	688a      	ldr	r2, [r1, #8]
 8007286:	690b      	ldr	r3, [r1, #16]
 8007288:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800728c:	4293      	cmp	r3, r2
 800728e:	bfb8      	it	lt
 8007290:	4613      	movlt	r3, r2
 8007292:	6033      	str	r3, [r6, #0]
 8007294:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007298:	4607      	mov	r7, r0
 800729a:	460c      	mov	r4, r1
 800729c:	b10a      	cbz	r2, 80072a2 <_printf_common+0x26>
 800729e:	3301      	adds	r3, #1
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	0699      	lsls	r1, r3, #26
 80072a6:	bf42      	ittt	mi
 80072a8:	6833      	ldrmi	r3, [r6, #0]
 80072aa:	3302      	addmi	r3, #2
 80072ac:	6033      	strmi	r3, [r6, #0]
 80072ae:	6825      	ldr	r5, [r4, #0]
 80072b0:	f015 0506 	ands.w	r5, r5, #6
 80072b4:	d106      	bne.n	80072c4 <_printf_common+0x48>
 80072b6:	f104 0a19 	add.w	sl, r4, #25
 80072ba:	68e3      	ldr	r3, [r4, #12]
 80072bc:	6832      	ldr	r2, [r6, #0]
 80072be:	1a9b      	subs	r3, r3, r2
 80072c0:	42ab      	cmp	r3, r5
 80072c2:	dc26      	bgt.n	8007312 <_printf_common+0x96>
 80072c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80072c8:	6822      	ldr	r2, [r4, #0]
 80072ca:	3b00      	subs	r3, #0
 80072cc:	bf18      	it	ne
 80072ce:	2301      	movne	r3, #1
 80072d0:	0692      	lsls	r2, r2, #26
 80072d2:	d42b      	bmi.n	800732c <_printf_common+0xb0>
 80072d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80072d8:	4641      	mov	r1, r8
 80072da:	4638      	mov	r0, r7
 80072dc:	47c8      	blx	r9
 80072de:	3001      	adds	r0, #1
 80072e0:	d01e      	beq.n	8007320 <_printf_common+0xa4>
 80072e2:	6823      	ldr	r3, [r4, #0]
 80072e4:	6922      	ldr	r2, [r4, #16]
 80072e6:	f003 0306 	and.w	r3, r3, #6
 80072ea:	2b04      	cmp	r3, #4
 80072ec:	bf02      	ittt	eq
 80072ee:	68e5      	ldreq	r5, [r4, #12]
 80072f0:	6833      	ldreq	r3, [r6, #0]
 80072f2:	1aed      	subeq	r5, r5, r3
 80072f4:	68a3      	ldr	r3, [r4, #8]
 80072f6:	bf0c      	ite	eq
 80072f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072fc:	2500      	movne	r5, #0
 80072fe:	4293      	cmp	r3, r2
 8007300:	bfc4      	itt	gt
 8007302:	1a9b      	subgt	r3, r3, r2
 8007304:	18ed      	addgt	r5, r5, r3
 8007306:	2600      	movs	r6, #0
 8007308:	341a      	adds	r4, #26
 800730a:	42b5      	cmp	r5, r6
 800730c:	d11a      	bne.n	8007344 <_printf_common+0xc8>
 800730e:	2000      	movs	r0, #0
 8007310:	e008      	b.n	8007324 <_printf_common+0xa8>
 8007312:	2301      	movs	r3, #1
 8007314:	4652      	mov	r2, sl
 8007316:	4641      	mov	r1, r8
 8007318:	4638      	mov	r0, r7
 800731a:	47c8      	blx	r9
 800731c:	3001      	adds	r0, #1
 800731e:	d103      	bne.n	8007328 <_printf_common+0xac>
 8007320:	f04f 30ff 	mov.w	r0, #4294967295
 8007324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007328:	3501      	adds	r5, #1
 800732a:	e7c6      	b.n	80072ba <_printf_common+0x3e>
 800732c:	18e1      	adds	r1, r4, r3
 800732e:	1c5a      	adds	r2, r3, #1
 8007330:	2030      	movs	r0, #48	@ 0x30
 8007332:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007336:	4422      	add	r2, r4
 8007338:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800733c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007340:	3302      	adds	r3, #2
 8007342:	e7c7      	b.n	80072d4 <_printf_common+0x58>
 8007344:	2301      	movs	r3, #1
 8007346:	4622      	mov	r2, r4
 8007348:	4641      	mov	r1, r8
 800734a:	4638      	mov	r0, r7
 800734c:	47c8      	blx	r9
 800734e:	3001      	adds	r0, #1
 8007350:	d0e6      	beq.n	8007320 <_printf_common+0xa4>
 8007352:	3601      	adds	r6, #1
 8007354:	e7d9      	b.n	800730a <_printf_common+0x8e>
	...

08007358 <_printf_i>:
 8007358:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800735c:	7e0f      	ldrb	r7, [r1, #24]
 800735e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007360:	2f78      	cmp	r7, #120	@ 0x78
 8007362:	4691      	mov	r9, r2
 8007364:	4680      	mov	r8, r0
 8007366:	460c      	mov	r4, r1
 8007368:	469a      	mov	sl, r3
 800736a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800736e:	d807      	bhi.n	8007380 <_printf_i+0x28>
 8007370:	2f62      	cmp	r7, #98	@ 0x62
 8007372:	d80a      	bhi.n	800738a <_printf_i+0x32>
 8007374:	2f00      	cmp	r7, #0
 8007376:	f000 80d2 	beq.w	800751e <_printf_i+0x1c6>
 800737a:	2f58      	cmp	r7, #88	@ 0x58
 800737c:	f000 80b9 	beq.w	80074f2 <_printf_i+0x19a>
 8007380:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007384:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007388:	e03a      	b.n	8007400 <_printf_i+0xa8>
 800738a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800738e:	2b15      	cmp	r3, #21
 8007390:	d8f6      	bhi.n	8007380 <_printf_i+0x28>
 8007392:	a101      	add	r1, pc, #4	@ (adr r1, 8007398 <_printf_i+0x40>)
 8007394:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007398:	080073f1 	.word	0x080073f1
 800739c:	08007405 	.word	0x08007405
 80073a0:	08007381 	.word	0x08007381
 80073a4:	08007381 	.word	0x08007381
 80073a8:	08007381 	.word	0x08007381
 80073ac:	08007381 	.word	0x08007381
 80073b0:	08007405 	.word	0x08007405
 80073b4:	08007381 	.word	0x08007381
 80073b8:	08007381 	.word	0x08007381
 80073bc:	08007381 	.word	0x08007381
 80073c0:	08007381 	.word	0x08007381
 80073c4:	08007505 	.word	0x08007505
 80073c8:	0800742f 	.word	0x0800742f
 80073cc:	080074bf 	.word	0x080074bf
 80073d0:	08007381 	.word	0x08007381
 80073d4:	08007381 	.word	0x08007381
 80073d8:	08007527 	.word	0x08007527
 80073dc:	08007381 	.word	0x08007381
 80073e0:	0800742f 	.word	0x0800742f
 80073e4:	08007381 	.word	0x08007381
 80073e8:	08007381 	.word	0x08007381
 80073ec:	080074c7 	.word	0x080074c7
 80073f0:	6833      	ldr	r3, [r6, #0]
 80073f2:	1d1a      	adds	r2, r3, #4
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	6032      	str	r2, [r6, #0]
 80073f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80073fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007400:	2301      	movs	r3, #1
 8007402:	e09d      	b.n	8007540 <_printf_i+0x1e8>
 8007404:	6833      	ldr	r3, [r6, #0]
 8007406:	6820      	ldr	r0, [r4, #0]
 8007408:	1d19      	adds	r1, r3, #4
 800740a:	6031      	str	r1, [r6, #0]
 800740c:	0606      	lsls	r6, r0, #24
 800740e:	d501      	bpl.n	8007414 <_printf_i+0xbc>
 8007410:	681d      	ldr	r5, [r3, #0]
 8007412:	e003      	b.n	800741c <_printf_i+0xc4>
 8007414:	0645      	lsls	r5, r0, #25
 8007416:	d5fb      	bpl.n	8007410 <_printf_i+0xb8>
 8007418:	f9b3 5000 	ldrsh.w	r5, [r3]
 800741c:	2d00      	cmp	r5, #0
 800741e:	da03      	bge.n	8007428 <_printf_i+0xd0>
 8007420:	232d      	movs	r3, #45	@ 0x2d
 8007422:	426d      	negs	r5, r5
 8007424:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007428:	4859      	ldr	r0, [pc, #356]	@ (8007590 <_printf_i+0x238>)
 800742a:	230a      	movs	r3, #10
 800742c:	e011      	b.n	8007452 <_printf_i+0xfa>
 800742e:	6821      	ldr	r1, [r4, #0]
 8007430:	6833      	ldr	r3, [r6, #0]
 8007432:	0608      	lsls	r0, r1, #24
 8007434:	f853 5b04 	ldr.w	r5, [r3], #4
 8007438:	d402      	bmi.n	8007440 <_printf_i+0xe8>
 800743a:	0649      	lsls	r1, r1, #25
 800743c:	bf48      	it	mi
 800743e:	b2ad      	uxthmi	r5, r5
 8007440:	2f6f      	cmp	r7, #111	@ 0x6f
 8007442:	4853      	ldr	r0, [pc, #332]	@ (8007590 <_printf_i+0x238>)
 8007444:	6033      	str	r3, [r6, #0]
 8007446:	bf14      	ite	ne
 8007448:	230a      	movne	r3, #10
 800744a:	2308      	moveq	r3, #8
 800744c:	2100      	movs	r1, #0
 800744e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007452:	6866      	ldr	r6, [r4, #4]
 8007454:	60a6      	str	r6, [r4, #8]
 8007456:	2e00      	cmp	r6, #0
 8007458:	bfa2      	ittt	ge
 800745a:	6821      	ldrge	r1, [r4, #0]
 800745c:	f021 0104 	bicge.w	r1, r1, #4
 8007460:	6021      	strge	r1, [r4, #0]
 8007462:	b90d      	cbnz	r5, 8007468 <_printf_i+0x110>
 8007464:	2e00      	cmp	r6, #0
 8007466:	d04b      	beq.n	8007500 <_printf_i+0x1a8>
 8007468:	4616      	mov	r6, r2
 800746a:	fbb5 f1f3 	udiv	r1, r5, r3
 800746e:	fb03 5711 	mls	r7, r3, r1, r5
 8007472:	5dc7      	ldrb	r7, [r0, r7]
 8007474:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007478:	462f      	mov	r7, r5
 800747a:	42bb      	cmp	r3, r7
 800747c:	460d      	mov	r5, r1
 800747e:	d9f4      	bls.n	800746a <_printf_i+0x112>
 8007480:	2b08      	cmp	r3, #8
 8007482:	d10b      	bne.n	800749c <_printf_i+0x144>
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	07df      	lsls	r7, r3, #31
 8007488:	d508      	bpl.n	800749c <_printf_i+0x144>
 800748a:	6923      	ldr	r3, [r4, #16]
 800748c:	6861      	ldr	r1, [r4, #4]
 800748e:	4299      	cmp	r1, r3
 8007490:	bfde      	ittt	le
 8007492:	2330      	movle	r3, #48	@ 0x30
 8007494:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007498:	f106 36ff 	addle.w	r6, r6, #4294967295
 800749c:	1b92      	subs	r2, r2, r6
 800749e:	6122      	str	r2, [r4, #16]
 80074a0:	f8cd a000 	str.w	sl, [sp]
 80074a4:	464b      	mov	r3, r9
 80074a6:	aa03      	add	r2, sp, #12
 80074a8:	4621      	mov	r1, r4
 80074aa:	4640      	mov	r0, r8
 80074ac:	f7ff fee6 	bl	800727c <_printf_common>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d14a      	bne.n	800754a <_printf_i+0x1f2>
 80074b4:	f04f 30ff 	mov.w	r0, #4294967295
 80074b8:	b004      	add	sp, #16
 80074ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074be:	6823      	ldr	r3, [r4, #0]
 80074c0:	f043 0320 	orr.w	r3, r3, #32
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	4833      	ldr	r0, [pc, #204]	@ (8007594 <_printf_i+0x23c>)
 80074c8:	2778      	movs	r7, #120	@ 0x78
 80074ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80074ce:	6823      	ldr	r3, [r4, #0]
 80074d0:	6831      	ldr	r1, [r6, #0]
 80074d2:	061f      	lsls	r7, r3, #24
 80074d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80074d8:	d402      	bmi.n	80074e0 <_printf_i+0x188>
 80074da:	065f      	lsls	r7, r3, #25
 80074dc:	bf48      	it	mi
 80074de:	b2ad      	uxthmi	r5, r5
 80074e0:	6031      	str	r1, [r6, #0]
 80074e2:	07d9      	lsls	r1, r3, #31
 80074e4:	bf44      	itt	mi
 80074e6:	f043 0320 	orrmi.w	r3, r3, #32
 80074ea:	6023      	strmi	r3, [r4, #0]
 80074ec:	b11d      	cbz	r5, 80074f6 <_printf_i+0x19e>
 80074ee:	2310      	movs	r3, #16
 80074f0:	e7ac      	b.n	800744c <_printf_i+0xf4>
 80074f2:	4827      	ldr	r0, [pc, #156]	@ (8007590 <_printf_i+0x238>)
 80074f4:	e7e9      	b.n	80074ca <_printf_i+0x172>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	f023 0320 	bic.w	r3, r3, #32
 80074fc:	6023      	str	r3, [r4, #0]
 80074fe:	e7f6      	b.n	80074ee <_printf_i+0x196>
 8007500:	4616      	mov	r6, r2
 8007502:	e7bd      	b.n	8007480 <_printf_i+0x128>
 8007504:	6833      	ldr	r3, [r6, #0]
 8007506:	6825      	ldr	r5, [r4, #0]
 8007508:	6961      	ldr	r1, [r4, #20]
 800750a:	1d18      	adds	r0, r3, #4
 800750c:	6030      	str	r0, [r6, #0]
 800750e:	062e      	lsls	r6, r5, #24
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	d501      	bpl.n	8007518 <_printf_i+0x1c0>
 8007514:	6019      	str	r1, [r3, #0]
 8007516:	e002      	b.n	800751e <_printf_i+0x1c6>
 8007518:	0668      	lsls	r0, r5, #25
 800751a:	d5fb      	bpl.n	8007514 <_printf_i+0x1bc>
 800751c:	8019      	strh	r1, [r3, #0]
 800751e:	2300      	movs	r3, #0
 8007520:	6123      	str	r3, [r4, #16]
 8007522:	4616      	mov	r6, r2
 8007524:	e7bc      	b.n	80074a0 <_printf_i+0x148>
 8007526:	6833      	ldr	r3, [r6, #0]
 8007528:	1d1a      	adds	r2, r3, #4
 800752a:	6032      	str	r2, [r6, #0]
 800752c:	681e      	ldr	r6, [r3, #0]
 800752e:	6862      	ldr	r2, [r4, #4]
 8007530:	2100      	movs	r1, #0
 8007532:	4630      	mov	r0, r6
 8007534:	f7f8 fea4 	bl	8000280 <memchr>
 8007538:	b108      	cbz	r0, 800753e <_printf_i+0x1e6>
 800753a:	1b80      	subs	r0, r0, r6
 800753c:	6060      	str	r0, [r4, #4]
 800753e:	6863      	ldr	r3, [r4, #4]
 8007540:	6123      	str	r3, [r4, #16]
 8007542:	2300      	movs	r3, #0
 8007544:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007548:	e7aa      	b.n	80074a0 <_printf_i+0x148>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	4632      	mov	r2, r6
 800754e:	4649      	mov	r1, r9
 8007550:	4640      	mov	r0, r8
 8007552:	47d0      	blx	sl
 8007554:	3001      	adds	r0, #1
 8007556:	d0ad      	beq.n	80074b4 <_printf_i+0x15c>
 8007558:	6823      	ldr	r3, [r4, #0]
 800755a:	079b      	lsls	r3, r3, #30
 800755c:	d413      	bmi.n	8007586 <_printf_i+0x22e>
 800755e:	68e0      	ldr	r0, [r4, #12]
 8007560:	9b03      	ldr	r3, [sp, #12]
 8007562:	4298      	cmp	r0, r3
 8007564:	bfb8      	it	lt
 8007566:	4618      	movlt	r0, r3
 8007568:	e7a6      	b.n	80074b8 <_printf_i+0x160>
 800756a:	2301      	movs	r3, #1
 800756c:	4632      	mov	r2, r6
 800756e:	4649      	mov	r1, r9
 8007570:	4640      	mov	r0, r8
 8007572:	47d0      	blx	sl
 8007574:	3001      	adds	r0, #1
 8007576:	d09d      	beq.n	80074b4 <_printf_i+0x15c>
 8007578:	3501      	adds	r5, #1
 800757a:	68e3      	ldr	r3, [r4, #12]
 800757c:	9903      	ldr	r1, [sp, #12]
 800757e:	1a5b      	subs	r3, r3, r1
 8007580:	42ab      	cmp	r3, r5
 8007582:	dcf2      	bgt.n	800756a <_printf_i+0x212>
 8007584:	e7eb      	b.n	800755e <_printf_i+0x206>
 8007586:	2500      	movs	r5, #0
 8007588:	f104 0619 	add.w	r6, r4, #25
 800758c:	e7f5      	b.n	800757a <_printf_i+0x222>
 800758e:	bf00      	nop
 8007590:	08007809 	.word	0x08007809
 8007594:	0800781a 	.word	0x0800781a

08007598 <memmove>:
 8007598:	4288      	cmp	r0, r1
 800759a:	b510      	push	{r4, lr}
 800759c:	eb01 0402 	add.w	r4, r1, r2
 80075a0:	d902      	bls.n	80075a8 <memmove+0x10>
 80075a2:	4284      	cmp	r4, r0
 80075a4:	4623      	mov	r3, r4
 80075a6:	d807      	bhi.n	80075b8 <memmove+0x20>
 80075a8:	1e43      	subs	r3, r0, #1
 80075aa:	42a1      	cmp	r1, r4
 80075ac:	d008      	beq.n	80075c0 <memmove+0x28>
 80075ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075b6:	e7f8      	b.n	80075aa <memmove+0x12>
 80075b8:	4402      	add	r2, r0
 80075ba:	4601      	mov	r1, r0
 80075bc:	428a      	cmp	r2, r1
 80075be:	d100      	bne.n	80075c2 <memmove+0x2a>
 80075c0:	bd10      	pop	{r4, pc}
 80075c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075ca:	e7f7      	b.n	80075bc <memmove+0x24>

080075cc <_sbrk_r>:
 80075cc:	b538      	push	{r3, r4, r5, lr}
 80075ce:	4d06      	ldr	r5, [pc, #24]	@ (80075e8 <_sbrk_r+0x1c>)
 80075d0:	2300      	movs	r3, #0
 80075d2:	4604      	mov	r4, r0
 80075d4:	4608      	mov	r0, r1
 80075d6:	602b      	str	r3, [r5, #0]
 80075d8:	f000 f83e 	bl	8007658 <_sbrk>
 80075dc:	1c43      	adds	r3, r0, #1
 80075de:	d102      	bne.n	80075e6 <_sbrk_r+0x1a>
 80075e0:	682b      	ldr	r3, [r5, #0]
 80075e2:	b103      	cbz	r3, 80075e6 <_sbrk_r+0x1a>
 80075e4:	6023      	str	r3, [r4, #0]
 80075e6:	bd38      	pop	{r3, r4, r5, pc}
 80075e8:	2001b1b0 	.word	0x2001b1b0

080075ec <_realloc_r>:
 80075ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075f0:	4680      	mov	r8, r0
 80075f2:	4615      	mov	r5, r2
 80075f4:	460c      	mov	r4, r1
 80075f6:	b921      	cbnz	r1, 8007602 <_realloc_r+0x16>
 80075f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	4611      	mov	r1, r2
 80075fe:	f7ff bc59 	b.w	8006eb4 <_malloc_r>
 8007602:	b92a      	cbnz	r2, 8007610 <_realloc_r+0x24>
 8007604:	f7ff fbea 	bl	8006ddc <_free_r>
 8007608:	2400      	movs	r4, #0
 800760a:	4620      	mov	r0, r4
 800760c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007610:	f000 f81a 	bl	8007648 <_malloc_usable_size_r>
 8007614:	4285      	cmp	r5, r0
 8007616:	4606      	mov	r6, r0
 8007618:	d802      	bhi.n	8007620 <_realloc_r+0x34>
 800761a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800761e:	d8f4      	bhi.n	800760a <_realloc_r+0x1e>
 8007620:	4629      	mov	r1, r5
 8007622:	4640      	mov	r0, r8
 8007624:	f7ff fc46 	bl	8006eb4 <_malloc_r>
 8007628:	4607      	mov	r7, r0
 800762a:	2800      	cmp	r0, #0
 800762c:	d0ec      	beq.n	8007608 <_realloc_r+0x1c>
 800762e:	42b5      	cmp	r5, r6
 8007630:	462a      	mov	r2, r5
 8007632:	4621      	mov	r1, r4
 8007634:	bf28      	it	cs
 8007636:	4632      	movcs	r2, r6
 8007638:	f7ff fbc2 	bl	8006dc0 <memcpy>
 800763c:	4621      	mov	r1, r4
 800763e:	4640      	mov	r0, r8
 8007640:	f7ff fbcc 	bl	8006ddc <_free_r>
 8007644:	463c      	mov	r4, r7
 8007646:	e7e0      	b.n	800760a <_realloc_r+0x1e>

08007648 <_malloc_usable_size_r>:
 8007648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800764c:	1f18      	subs	r0, r3, #4
 800764e:	2b00      	cmp	r3, #0
 8007650:	bfbc      	itt	lt
 8007652:	580b      	ldrlt	r3, [r1, r0]
 8007654:	18c0      	addlt	r0, r0, r3
 8007656:	4770      	bx	lr

08007658 <_sbrk>:
 8007658:	4a04      	ldr	r2, [pc, #16]	@ (800766c <_sbrk+0x14>)
 800765a:	6811      	ldr	r1, [r2, #0]
 800765c:	4603      	mov	r3, r0
 800765e:	b909      	cbnz	r1, 8007664 <_sbrk+0xc>
 8007660:	4903      	ldr	r1, [pc, #12]	@ (8007670 <_sbrk+0x18>)
 8007662:	6011      	str	r1, [r2, #0]
 8007664:	6810      	ldr	r0, [r2, #0]
 8007666:	4403      	add	r3, r0
 8007668:	6013      	str	r3, [r2, #0]
 800766a:	4770      	bx	lr
 800766c:	2001b1c0 	.word	0x2001b1c0
 8007670:	2001b1c8 	.word	0x2001b1c8

08007674 <_init>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr

08007680 <_fini>:
 8007680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007682:	bf00      	nop
 8007684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007686:	bc08      	pop	{r3}
 8007688:	469e      	mov	lr, r3
 800768a:	4770      	bx	lr
