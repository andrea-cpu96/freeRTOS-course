
004LED_Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006568  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068b0  080068b0  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  080068b0  080068b0  000078b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068b8  080068b8  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068b8  080068b8  000078b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068bc  080068bc  000078bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080068c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c67c  20000014  080068d4  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c690  080068d4  00008690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012932  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029b8  00000000  00000000  0001a976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  0001d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db0  00000000  00000000  0001e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001f2a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014224  00000000  00000000  00038448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab22  00000000  00000000  0004c66c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f718e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a18  00000000  00000000  000f71d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f7  00000000  00000000  000fbbec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080066f0 	.word	0x080066f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	080066f0 	.word	0x080066f0

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194bc 	.word	0x200194bc

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fc69 	bl	8000e40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f895 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8fd 	bl	8000770 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <main+0x108>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a3c      	ldr	r2, [pc, #240]	@ (800066c <main+0x108>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000582:	f003 ffb3 	bl	80044ec <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 8000586:	f005 f9eb 	bl	8005960 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED-Green-Task", 200, NULL, 3, &led_green_h);
 800058a:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <main+0x10c>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	4937      	ldr	r1, [pc, #220]	@ (8000674 <main+0x110>)
 8000598:	4837      	ldr	r0, [pc, #220]	@ (8000678 <main+0x114>)
 800059a:	f001 fffe 	bl	800259a <xTaskCreate>
 800059e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>

  next_task_handle = led_green_h;
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <main+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <main+0x118>)
 80005c4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED-Green-Task", 200, NULL, 2, &led_orange_h);
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <main+0x11c>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	4928      	ldr	r1, [pc, #160]	@ (8000674 <main+0x110>)
 80005d4:	482b      	ldr	r0, [pc, #172]	@ (8000684 <main+0x120>)
 80005d6:	f001 ffe0 	bl	800259a <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
    __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  status = xTaskCreate(led_red_handler, "LED-Green-Task", 200, NULL, 1, &led_red_h);
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <main+0x124>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	@ 0xc8
 8000606:	491b      	ldr	r1, [pc, #108]	@ (8000674 <main+0x110>)
 8000608:	4820      	ldr	r0, [pc, #128]	@ (800068c <main+0x128>)
 800060a:	f001 ffc6 	bl	800259a <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0xca>
    __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	60bb      	str	r3, [r7, #8]
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xc6>

  status = xTaskCreate(button_handler, "Button-Task", 200, NULL, 4, &button_h);
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <main+0x12c>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	4916      	ldr	r1, [pc, #88]	@ (8000694 <main+0x130>)
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0x134>)
 800063e:	f001 ffac 	bl	800259a <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xfe>
    __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xfa>

  /* USER CODE END 2 */

  vTaskStartScheduler();
 8000662:	f002 fb25 	bl	8002cb0 <vTaskStartScheduler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x102>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000030 	.word	0x20000030
 8000674:	08006708 	.word	0x08006708
 8000678:	08000a2d 	.word	0x08000a2d
 800067c:	20000040 	.word	0x20000040
 8000680:	20000034 	.word	0x20000034
 8000684:	08000a9d 	.word	0x08000a9d
 8000688:	20000038 	.word	0x20000038
 800068c:	08000b0d 	.word	0x08000b0d
 8000690:	2000003c 	.word	0x2000003c
 8000694:	08006718 	.word	0x08006718
 8000698:	08000b79 	.word	0x08000b79

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 ffe6 	bl	800667c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fe81 	bl	8001428 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 fa7c 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2103      	movs	r1, #3
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f8e2 	bl	8001918 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 fa65 	bl	8000c28 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4ba2      	ldr	r3, [pc, #648]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4aa1      	ldr	r2, [pc, #644]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b9f      	ldr	r3, [pc, #636]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b9b      	ldr	r3, [pc, #620]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a9a      	ldr	r2, [pc, #616]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b98      	ldr	r3, [pc, #608]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b94      	ldr	r3, [pc, #592]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a93      	ldr	r2, [pc, #588]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b91      	ldr	r3, [pc, #580]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b8d      	ldr	r3, [pc, #564]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a8c      	ldr	r2, [pc, #560]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b8a      	ldr	r3, [pc, #552]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b86      	ldr	r3, [pc, #536]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a85      	ldr	r2, [pc, #532]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b83      	ldr	r3, [pc, #524]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b7f      	ldr	r3, [pc, #508]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a7e      	ldr	r2, [pc, #504]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b7c      	ldr	r3, [pc, #496]	@ (8000a14 <MX_GPIO_Init+0x2a4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	4879      	ldr	r0, [pc, #484]	@ (8000a18 <MX_GPIO_Init+0x2a8>)
 8000834:	f000 fdc4 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	4877      	ldr	r0, [pc, #476]	@ (8000a1c <MX_GPIO_Init+0x2ac>)
 800083e:	f000 fdbf 	bl	80013c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000848:	4875      	ldr	r0, [pc, #468]	@ (8000a20 <MX_GPIO_Init+0x2b0>)
 800084a:	f000 fdb9 	bl	80013c0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084e:	2304      	movs	r3, #4
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	486d      	ldr	r0, [pc, #436]	@ (8000a18 <MX_GPIO_Init+0x2a8>)
 8000862:	f000 fc11 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4866      	ldr	r0, [pc, #408]	@ (8000a18 <MX_GPIO_Init+0x2a8>)
 800087e:	f000 fc03 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000882:	2332      	movs	r3, #50	@ 0x32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000886:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4860      	ldr	r0, [pc, #384]	@ (8000a18 <MX_GPIO_Init+0x2a8>)
 8000898:	f000 fbf6 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	485a      	ldr	r0, [pc, #360]	@ (8000a1c <MX_GPIO_Init+0x2ac>)
 80008b4:	f000 fbe8 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b8:	2308      	movs	r3, #8
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c8:	2305      	movs	r3, #5
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4852      	ldr	r0, [pc, #328]	@ (8000a1c <MX_GPIO_Init+0x2ac>)
 80008d4:	f000 fbd8 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80008dc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	484d      	ldr	r0, [pc, #308]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80008ee:	f000 fbcb 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008f2:	2310      	movs	r3, #16
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000902:	2306      	movs	r3, #6
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4845      	ldr	r0, [pc, #276]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 800090e:	f000 fbbb 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000912:	23e0      	movs	r3, #224	@ 0xe0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	483d      	ldr	r0, [pc, #244]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 800092e:	f000 fbab 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000932:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4836      	ldr	r0, [pc, #216]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 8000950:	f000 fb9a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000954:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000958:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	482c      	ldr	r0, [pc, #176]	@ (8000a20 <MX_GPIO_Init+0x2b0>)
 800096e:	f000 fb8b 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000972:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000984:	2306      	movs	r3, #6
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4823      	ldr	r0, [pc, #140]	@ (8000a1c <MX_GPIO_Init+0x2ac>)
 8000990:	f000 fb7a 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	481e      	ldr	r0, [pc, #120]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80009aa:	f000 fb6d 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c0:	230a      	movs	r3, #10
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4816      	ldr	r0, [pc, #88]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80009cc:	f000 fb5c 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <MX_GPIO_Init+0x2b0>)
 80009e4:	f000 fb50 	bl	8001088 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fa:	2304      	movs	r3, #4
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4808      	ldr	r0, [pc, #32]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 8000a06:	f000 fb3f 	bl	8001088 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3730      	adds	r7, #48	@ 0x30
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40021000 	.word	0x40021000
 8000a1c:	40020800 	.word	0x40020800
 8000a20:	40020c00 	.word	0x40020c00
 8000a24:	40020000 	.word	0x40020000
 8000a28:	40020400 	.word	0x40020400

08000a2c <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a34:	4814      	ldr	r0, [pc, #80]	@ (8000a88 <led_green_handler+0x5c>)
 8000a36:	f005 fda1 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a3e:	4813      	ldr	r0, [pc, #76]	@ (8000a8c <led_green_handler+0x60>)
 8000a40:	f000 fcd7 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	2100      	movs	r1, #0
 8000a50:	2000      	movs	r0, #0
 8000a52:	f002 fd1f 	bl	8003494 <xTaskGenericNotifyWait>
 8000a56:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2b01      	cmp	r3, #1
 8000a5c:	d1ea      	bne.n	8000a34 <led_green_handler+0x8>
		{

			vTaskSuspendAll();
 8000a5e:	f002 f97f 	bl	8002d60 <vTaskSuspendAll>
			next_task_handle = led_orange_h;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	@ (8000a90 <led_green_handler+0x64>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4a0b      	ldr	r2, [pc, #44]	@ (8000a94 <led_green_handler+0x68>)
 8000a68:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a6a:	f002 f987 	bl	8002d7c <xTaskResumeAll>

			SEGGER_SYSVIEW_PrintfTarget("Delete green LED");
 8000a6e:	480a      	ldr	r0, [pc, #40]	@ (8000a98 <led_green_handler+0x6c>)
 8000a70:	f005 fd84 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000a74:	2201      	movs	r2, #1
 8000a76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a7a:	4804      	ldr	r0, [pc, #16]	@ (8000a8c <led_green_handler+0x60>)
 8000a7c:	f000 fca0 	bl	80013c0 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8000a80:	2000      	movs	r0, #0
 8000a82:	f001 ff31 	bl	80028e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a86:	e7d5      	b.n	8000a34 <led_green_handler+0x8>
 8000a88:	08006724 	.word	0x08006724
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	20000034 	.word	0x20000034
 8000a94:	20000040 	.word	0x20000040
 8000a98:	08006738 	.word	0x08006738

08000a9c <led_orange_handler>:
	}

}

static void led_orange_handler(void *parameters)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af02      	add	r7, sp, #8
 8000aa2:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aa4:	4814      	ldr	r0, [pc, #80]	@ (8000af8 <led_orange_handler+0x5c>)
 8000aa6:	f005 fd69 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000aaa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aae:	4813      	ldr	r0, [pc, #76]	@ (8000afc <led_orange_handler+0x60>)
 8000ab0:	f000 fc9f 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000ab4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ab8:	9300      	str	r3, [sp, #0]
 8000aba:	2300      	movs	r3, #0
 8000abc:	2200      	movs	r2, #0
 8000abe:	2100      	movs	r1, #0
 8000ac0:	2000      	movs	r0, #0
 8000ac2:	f002 fce7 	bl	8003494 <xTaskGenericNotifyWait>
 8000ac6:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d1ea      	bne.n	8000aa4 <led_orange_handler+0x8>
		{

			vTaskSuspendAll();
 8000ace:	f002 f947 	bl	8002d60 <vTaskSuspendAll>
			next_task_handle = led_red_h;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b00 <led_orange_handler+0x64>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <led_orange_handler+0x68>)
 8000ad8:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000ada:	f002 f94f 	bl	8002d7c <xTaskResumeAll>

			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED");
 8000ade:	480a      	ldr	r0, [pc, #40]	@ (8000b08 <led_orange_handler+0x6c>)
 8000ae0:	f005 fd4c 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000aea:	4804      	ldr	r0, [pc, #16]	@ (8000afc <led_orange_handler+0x60>)
 8000aec:	f000 fc68 	bl	80013c0 <HAL_GPIO_WritePin>
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8000af0:	2000      	movs	r0, #0
 8000af2:	f001 fef9 	bl	80028e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000af6:	e7d5      	b.n	8000aa4 <led_orange_handler+0x8>
 8000af8:	0800674c 	.word	0x0800674c
 8000afc:	40020c00 	.word	0x40020c00
 8000b00:	20000038 	.word	0x20000038
 8000b04:	20000040 	.word	0x20000040
 8000b08:	08006760 	.word	0x08006760

08000b0c <led_red_handler>:
	}

}

static void led_red_handler(void *parameters)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af02      	add	r7, sp, #8
 8000b12:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b14:	4814      	ldr	r0, [pc, #80]	@ (8000b68 <led_red_handler+0x5c>)
 8000b16:	f005 fd31 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000b1a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b1e:	4813      	ldr	r0, [pc, #76]	@ (8000b6c <led_red_handler+0x60>)
 8000b20:	f000 fc67 	bl	80013f2 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b24:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b28:	9300      	str	r3, [sp, #0]
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2000      	movs	r0, #0
 8000b32:	f002 fcaf 	bl	8003494 <xTaskGenericNotifyWait>
 8000b36:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	2b01      	cmp	r3, #1
 8000b3c:	d1ea      	bne.n	8000b14 <led_red_handler+0x8>
		{

			vTaskSuspendAll();
 8000b3e:	f002 f90f 	bl	8002d60 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b42:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <led_red_handler+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b48:	f002 f918 	bl	8002d7c <xTaskResumeAll>

			SEGGER_SYSVIEW_PrintfTarget("Delete red LED");
 8000b4c:	4809      	ldr	r0, [pc, #36]	@ (8000b74 <led_red_handler+0x68>)
 8000b4e:	f005 fd15 	bl	800657c <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000b52:	2201      	movs	r2, #1
 8000b54:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <led_red_handler+0x60>)
 8000b5a:	f000 fc31 	bl	80013c0 <HAL_GPIO_WritePin>
			//vTaskDelete(button_h);
			//vTaskDelete(NULL);
			vTaskSuspend(NULL);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f001 fec2 	bl	80028e8 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b64:	e7d6      	b.n	8000b14 <led_red_handler+0x8>
 8000b66:	bf00      	nop
 8000b68:	08006774 	.word	0x08006774
 8000b6c:	40020c00 	.word	0x40020c00
 8000b70:	20000040 	.word	0x20000040
 8000b74:	08006788 	.word	0x08006788

08000b78 <button_handler>:
	}

}

static void button_handler(void *parameters)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af02      	add	r7, sp, #8
 8000b7e:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	73bb      	strb	r3, [r7, #14]
	uint8_t btn_prev_read = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	73fb      	strb	r3, [r7, #15]


	while(1)
	{

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000b88:	2101      	movs	r1, #1
 8000b8a:	4819      	ldr	r0, [pc, #100]	@ (8000bf0 <button_handler+0x78>)
 8000b8c:	f000 fc00 	bl	8001390 <HAL_GPIO_ReadPin>
 8000b90:	4603      	mov	r3, r0
 8000b92:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000b94:	7bbb      	ldrb	r3, [r7, #14]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d023      	beq.n	8000be2 <button_handler+0x6a>
		{

			if(!btn_prev_read)
 8000b9a:	7bfb      	ldrb	r3, [r7, #15]
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d120      	bne.n	8000be2 <button_handler+0x6a>
			{

				if(next_task_handle != NULL)
 8000ba0:	4b14      	ldr	r3, [pc, #80]	@ (8000bf4 <button_handler+0x7c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d009      	beq.n	8000bbc <button_handler+0x44>
				{
					xTaskNotify(next_task_handle, 0, eNoAction);
 8000ba8:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <button_handler+0x7c>)
 8000baa:	6818      	ldr	r0, [r3, #0]
 8000bac:	2300      	movs	r3, #0
 8000bae:	9300      	str	r3, [sp, #0]
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f002 fd05 	bl	80035c4 <xTaskGenericNotify>
 8000bba:	e012      	b.n	8000be2 <button_handler+0x6a>
				}
				else
				{

					vTaskResume(led_green_h);
 8000bbc:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <button_handler+0x80>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f001 ff7d 	bl	8002ac0 <vTaskResume>
					vTaskResume(led_orange_h);
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <button_handler+0x84>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f001 ff78 	bl	8002ac0 <vTaskResume>
					vTaskResume(led_red_h);
 8000bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8000c00 <button_handler+0x88>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f001 ff73 	bl	8002ac0 <vTaskResume>

					next_task_handle = led_green_h;
 8000bda:	4b07      	ldr	r3, [pc, #28]	@ (8000bf8 <button_handler+0x80>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a05      	ldr	r2, [pc, #20]	@ (8000bf4 <button_handler+0x7c>)
 8000be0:	6013      	str	r3, [r2, #0]

			}

		}

			btn_prev_read = btn_read;
 8000be2:	7bbb      	ldrb	r3, [r7, #14]
 8000be4:	73fb      	strb	r3, [r7, #15]

			vTaskDelay(pdMS_TO_TICKS(10));
 8000be6:	200a      	movs	r0, #10
 8000be8:	f001 fe46 	bl	8002878 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bec:	e7cc      	b.n	8000b88 <button_handler+0x10>
 8000bee:	bf00      	nop
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	20000040 	.word	0x20000040
 8000bf8:	20000030 	.word	0x20000030
 8000bfc:	20000034 	.word	0x20000034
 8000c00:	20000038 	.word	0x20000038

08000c04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a04      	ldr	r2, [pc, #16]	@ (8000c24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c16:	f000 f935 	bl	8000e84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	40000c00 	.word	0x40000c00

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c42:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	2300      	movs	r3, #0
 8000c58:	603b      	str	r3, [r7, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c5e:	4a08      	ldr	r2, [pc, #32]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <HAL_MspInit+0x4c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	603b      	str	r3, [r7, #0]
 8000c70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c72:	f002 ffff 	bl	8003c74 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800

08000c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08e      	sub	sp, #56	@ 0x38
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c94:	2300      	movs	r3, #0
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	4b33      	ldr	r3, [pc, #204]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c9c:	4a32      	ldr	r2, [pc, #200]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000c9e:	f043 0308 	orr.w	r3, r3, #8
 8000ca2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ca4:	4b30      	ldr	r3, [pc, #192]	@ (8000d68 <HAL_InitTick+0xe4>)
 8000ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca8:	f003 0308 	and.w	r3, r3, #8
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 0210 	add.w	r2, r7, #16
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f001 f838 	bl	8001d30 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d103      	bne.n	8000cd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cca:	f001 f81d 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8000cce:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cd0:	e004      	b.n	8000cdc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cd2:	f001 f819 	bl	8001d08 <HAL_RCC_GetPCLK1Freq>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cde:	4a23      	ldr	r2, [pc, #140]	@ (8000d6c <HAL_InitTick+0xe8>)
 8000ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce4:	0c9b      	lsrs	r3, r3, #18
 8000ce6:	3b01      	subs	r3, #1
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cea:	4b21      	ldr	r3, [pc, #132]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	@ (8000d74 <HAL_InitTick+0xf0>)
 8000cee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000cf8:	4a1d      	ldr	r2, [pc, #116]	@ (8000d70 <HAL_InitTick+0xec>)
 8000cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000cfc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d04:	4b1a      	ldr	r3, [pc, #104]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000d10:	4817      	ldr	r0, [pc, #92]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d12:	f001 f83f 	bl	8001d94 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d11b      	bne.n	8000d5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d24:	4812      	ldr	r0, [pc, #72]	@ (8000d70 <HAL_InitTick+0xec>)
 8000d26:	f001 f88f 	bl	8001e48 <HAL_TIM_Base_Start_IT>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d30:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d111      	bne.n	8000d5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d38:	2032      	movs	r0, #50	@ 0x32
 8000d3a:	f000 f997 	bl	800106c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b0f      	cmp	r3, #15
 8000d42:	d808      	bhi.n	8000d56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d44:	2200      	movs	r2, #0
 8000d46:	6879      	ldr	r1, [r7, #4]
 8000d48:	2032      	movs	r0, #50	@ 0x32
 8000d4a:	f000 f973 	bl	8001034 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d78 <HAL_InitTick+0xf4>)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	6013      	str	r3, [r2, #0]
 8000d54:	e002      	b.n	8000d5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
 8000d58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d5c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	3738      	adds	r7, #56	@ 0x38
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	40023800 	.word	0x40023800
 8000d6c:	431bde83 	.word	0x431bde83
 8000d70:	20000044 	.word	0x20000044
 8000d74:	40000c00 	.word	0x40000c00
 8000d78:	20000004 	.word	0x20000004

08000d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d80:	bf00      	nop
 8000d82:	e7fd      	b.n	8000d80 <NMI_Handler+0x4>

08000d84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <HardFault_Handler+0x4>

08000d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <MemManage_Handler+0x4>

08000d94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000db8:	4802      	ldr	r0, [pc, #8]	@ (8000dc4 <TIM5_IRQHandler+0x10>)
 8000dba:	f001 f8a7 	bl	8001f0c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	20000044 	.word	0x20000044

08000dc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dcc:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <SystemInit+0x20>)
 8000dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dd2:	4a05      	ldr	r2, [pc, #20]	@ (8000de8 <SystemInit+0x20>)
 8000dd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ddc:	bf00      	nop
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000df0:	f7ff ffea 	bl	8000dc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480c      	ldr	r0, [pc, #48]	@ (8000e28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000df6:	490d      	ldr	r1, [pc, #52]	@ (8000e2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000df8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e0c:	4c0a      	ldr	r4, [pc, #40]	@ (8000e38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e1a:	f005 fc37 	bl	800668c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e1e:	f7ff fba1 	bl	8000564 <main>
  bx  lr    
 8000e22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e2c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e30:	080068c0 	.word	0x080068c0
  ldr r2, =_sbss
 8000e34:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e38:	2001c690 	.word	0x2001c690

08000e3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e3c:	e7fe      	b.n	8000e3c <ADC_IRQHandler>
	...

08000e40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e44:	4b0e      	ldr	r3, [pc, #56]	@ (8000e80 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0d      	ldr	r2, [pc, #52]	@ (8000e80 <HAL_Init+0x40>)
 8000e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_Init+0x40>)
 8000e56:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e5c:	4b08      	ldr	r3, [pc, #32]	@ (8000e80 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a07      	ldr	r2, [pc, #28]	@ (8000e80 <HAL_Init+0x40>)
 8000e62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e68:	2003      	movs	r0, #3
 8000e6a:	f000 f8d8 	bl	800101e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e6e:	2000      	movs	r0, #0
 8000e70:	f7ff ff08 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e74:	f7ff fede 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023c00 	.word	0x40023c00

08000e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a04      	ldr	r2, [pc, #16]	@ (8000ea8 <HAL_IncTick+0x24>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	2000008c 	.word	0x2000008c

08000eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetTick+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	2000008c 	.word	0x2000008c

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef6:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	60d3      	str	r3, [r2, #12]
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	79fb      	ldrb	r3, [r7, #7]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	79fb      	ldrb	r3, [r7, #7]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ff4c 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001046:	f7ff ff61 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800104a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	68b9      	ldr	r1, [r7, #8]
 8001050:	6978      	ldr	r0, [r7, #20]
 8001052:	f7ff ffb1 	bl	8000fb8 <NVIC_EncodePriority>
 8001056:	4602      	mov	r2, r0
 8001058:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800105c:	4611      	mov	r1, r2
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff80 	bl	8000f64 <__NVIC_SetPriority>
}
 8001064:	bf00      	nop
 8001066:	3718      	adds	r7, #24
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff54 	bl	8000f28 <__NVIC_EnableIRQ>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001088:	b480      	push	{r7}
 800108a:	b089      	sub	sp, #36	@ 0x24
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001096:	2300      	movs	r3, #0
 8001098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800109a:	2300      	movs	r3, #0
 800109c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	e159      	b.n	8001358 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4013      	ands	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	429a      	cmp	r2, r3
 80010be:	f040 8148 	bne.w	8001352 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d005      	beq.n	80010da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d130      	bne.n	800113c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	689b      	ldr	r3, [r3, #8]
 80010de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	2203      	movs	r2, #3
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43db      	mvns	r3, r3
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	4013      	ands	r3, r2
 80010f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	68da      	ldr	r2, [r3, #12]
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4313      	orrs	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001110:	2201      	movs	r2, #1
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 0201 	and.w	r2, r3, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	2b03      	cmp	r3, #3
 8001146:	d017      	beq.n	8001178 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	005b      	lsls	r3, r3, #1
 8001152:	2203      	movs	r2, #3
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	689a      	ldr	r2, [r3, #8]
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d123      	bne.n	80011cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	08da      	lsrs	r2, r3, #3
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3208      	adds	r2, #8
 800118c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001190:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	f003 0307 	and.w	r3, r3, #7
 8001198:	009b      	lsls	r3, r3, #2
 800119a:	220f      	movs	r2, #15
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	43db      	mvns	r3, r3
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	4013      	ands	r3, r2
 80011a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	691a      	ldr	r2, [r3, #16]
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	fa02 f303 	lsl.w	r3, r2, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	08da      	lsrs	r2, r3, #3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3208      	adds	r2, #8
 80011c6:	69b9      	ldr	r1, [r7, #24]
 80011c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0203 	and.w	r2, r3, #3
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	005b      	lsls	r3, r3, #1
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001208:	2b00      	cmp	r3, #0
 800120a:	f000 80a2 	beq.w	8001352 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b57      	ldr	r3, [pc, #348]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	4a56      	ldr	r2, [pc, #344]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001218:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121c:	6453      	str	r3, [r2, #68]	@ 0x44
 800121e:	4b54      	ldr	r3, [pc, #336]	@ (8001370 <HAL_GPIO_Init+0x2e8>)
 8001220:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001222:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800122a:	4a52      	ldr	r2, [pc, #328]	@ (8001374 <HAL_GPIO_Init+0x2ec>)
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	089b      	lsrs	r3, r3, #2
 8001230:	3302      	adds	r3, #2
 8001232:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f003 0303 	and.w	r3, r3, #3
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	220f      	movs	r2, #15
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a49      	ldr	r2, [pc, #292]	@ (8001378 <HAL_GPIO_Init+0x2f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d019      	beq.n	800128a <HAL_GPIO_Init+0x202>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a48      	ldr	r2, [pc, #288]	@ (800137c <HAL_GPIO_Init+0x2f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d013      	beq.n	8001286 <HAL_GPIO_Init+0x1fe>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a47      	ldr	r2, [pc, #284]	@ (8001380 <HAL_GPIO_Init+0x2f8>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d00d      	beq.n	8001282 <HAL_GPIO_Init+0x1fa>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	4a46      	ldr	r2, [pc, #280]	@ (8001384 <HAL_GPIO_Init+0x2fc>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d007      	beq.n	800127e <HAL_GPIO_Init+0x1f6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a45      	ldr	r2, [pc, #276]	@ (8001388 <HAL_GPIO_Init+0x300>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d101      	bne.n	800127a <HAL_GPIO_Init+0x1f2>
 8001276:	2304      	movs	r3, #4
 8001278:	e008      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127a:	2307      	movs	r3, #7
 800127c:	e006      	b.n	800128c <HAL_GPIO_Init+0x204>
 800127e:	2303      	movs	r3, #3
 8001280:	e004      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001282:	2302      	movs	r3, #2
 8001284:	e002      	b.n	800128c <HAL_GPIO_Init+0x204>
 8001286:	2301      	movs	r3, #1
 8001288:	e000      	b.n	800128c <HAL_GPIO_Init+0x204>
 800128a:	2300      	movs	r3, #0
 800128c:	69fa      	ldr	r2, [r7, #28]
 800128e:	f002 0203 	and.w	r2, r2, #3
 8001292:	0092      	lsls	r2, r2, #2
 8001294:	4093      	lsls	r3, r2
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800129c:	4935      	ldr	r1, [pc, #212]	@ (8001374 <HAL_GPIO_Init+0x2ec>)
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	3302      	adds	r3, #2
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012aa:	4b38      	ldr	r3, [pc, #224]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4013      	ands	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ce:	4a2f      	ldr	r2, [pc, #188]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d4:	4b2d      	ldr	r3, [pc, #180]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	693b      	ldr	r3, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012f8:	4a24      	ldr	r2, [pc, #144]	@ (800138c <HAL_GPIO_Init+0x304>)
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_GPIO_Init+0x304>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001304:	693b      	ldr	r3, [r7, #16]
 8001306:	43db      	mvns	r3, r3
 8001308:	69ba      	ldr	r2, [r7, #24]
 800130a:	4013      	ands	r3, r2
 800130c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001322:	4a1a      	ldr	r2, [pc, #104]	@ (800138c <HAL_GPIO_Init+0x304>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001328:	4b18      	ldr	r3, [pc, #96]	@ (800138c <HAL_GPIO_Init+0x304>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	43db      	mvns	r3, r3
 8001332:	69ba      	ldr	r2, [r7, #24]
 8001334:	4013      	ands	r3, r2
 8001336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	4313      	orrs	r3, r2
 800134a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800134c:	4a0f      	ldr	r2, [pc, #60]	@ (800138c <HAL_GPIO_Init+0x304>)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3301      	adds	r3, #1
 8001356:	61fb      	str	r3, [r7, #28]
 8001358:	69fb      	ldr	r3, [r7, #28]
 800135a:	2b0f      	cmp	r3, #15
 800135c:	f67f aea2 	bls.w	80010a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001360:	bf00      	nop
 8001362:	bf00      	nop
 8001364:	3724      	adds	r7, #36	@ 0x24
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40023800 	.word	0x40023800
 8001374:	40013800 	.word	0x40013800
 8001378:	40020000 	.word	0x40020000
 800137c:	40020400 	.word	0x40020400
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00
 8001388:	40021000 	.word	0x40021000
 800138c:	40013c00 	.word	0x40013c00

08001390 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001390:	b480      	push	{r7}
 8001392:	b085      	sub	sp, #20
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	460b      	mov	r3, r1
 800139a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	887b      	ldrh	r3, [r7, #2]
 80013a2:	4013      	ands	r3, r2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e001      	b.n	80013b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	807b      	strh	r3, [r7, #2]
 80013cc:	4613      	mov	r3, r2
 80013ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013d0:	787b      	ldrb	r3, [r7, #1]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013d6:	887a      	ldrh	r2, [r7, #2]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013dc:	e003      	b.n	80013e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013de:	887b      	ldrh	r3, [r7, #2]
 80013e0:	041a      	lsls	r2, r3, #16
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	619a      	str	r2, [r3, #24]
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b085      	sub	sp, #20
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
 80013fa:	460b      	mov	r3, r1
 80013fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001404:	887a      	ldrh	r2, [r7, #2]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4013      	ands	r3, r2
 800140a:	041a      	lsls	r2, r3, #16
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	43d9      	mvns	r1, r3
 8001410:	887b      	ldrh	r3, [r7, #2]
 8001412:	400b      	ands	r3, r1
 8001414:	431a      	orrs	r2, r3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	619a      	str	r2, [r3, #24]
}
 800141a:	bf00      	nop
 800141c:	3714      	adds	r7, #20
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d101      	bne.n	800143a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e267      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d075      	beq.n	8001532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001446:	4b88      	ldr	r3, [pc, #544]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 030c 	and.w	r3, r3, #12
 800144e:	2b04      	cmp	r3, #4
 8001450:	d00c      	beq.n	800146c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001452:	4b85      	ldr	r3, [pc, #532]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800145a:	2b08      	cmp	r3, #8
 800145c:	d112      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b82      	ldr	r3, [pc, #520]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001466:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800146a:	d10b      	bne.n	8001484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800146c:	4b7e      	ldr	r3, [pc, #504]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d05b      	beq.n	8001530 <HAL_RCC_OscConfig+0x108>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d157      	bne.n	8001530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e242      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800148c:	d106      	bne.n	800149c <HAL_RCC_OscConfig+0x74>
 800148e:	4b76      	ldr	r3, [pc, #472]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a75      	ldr	r2, [pc, #468]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001494:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e01d      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014a4:	d10c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x98>
 80014a6:	4b70      	ldr	r3, [pc, #448]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6013      	str	r3, [r2, #0]
 80014b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	e00b      	b.n	80014d8 <HAL_RCC_OscConfig+0xb0>
 80014c0:	4b69      	ldr	r3, [pc, #420]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a68      	ldr	r2, [pc, #416]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014ca:	6013      	str	r3, [r2, #0]
 80014cc:	4b66      	ldr	r3, [pc, #408]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a65      	ldr	r2, [pc, #404]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d013      	beq.n	8001508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fce4 	bl	8000eac <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e8:	f7ff fce0 	bl	8000eac <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b64      	cmp	r3, #100	@ 0x64
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e207      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0xc0>
 8001506:	e014      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fcd0 	bl	8000eac <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001510:	f7ff fccc 	bl	8000eac <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b64      	cmp	r3, #100	@ 0x64
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e1f3      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001522:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0xe8>
 800152e:	e000      	b.n	8001532 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800153e:	4b4a      	ldr	r3, [pc, #296]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f003 030c 	and.w	r3, r3, #12
 8001546:	2b00      	cmp	r3, #0
 8001548:	d00b      	beq.n	8001562 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800154a:	4b47      	ldr	r3, [pc, #284]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001552:	2b08      	cmp	r3, #8
 8001554:	d11c      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b44      	ldr	r3, [pc, #272]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d116      	bne.n	8001590 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001562:	4b41      	ldr	r3, [pc, #260]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d005      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	68db      	ldr	r3, [r3, #12]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d001      	beq.n	800157a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1c7      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800157a:	4b3b      	ldr	r3, [pc, #236]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	00db      	lsls	r3, r3, #3
 8001588:	4937      	ldr	r1, [pc, #220]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	e03a      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d020      	beq.n	80015da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001598:	4b34      	ldr	r3, [pc, #208]	@ (800166c <HAL_RCC_OscConfig+0x244>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800159e:	f7ff fc85 	bl	8000eac <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015a6:	f7ff fc81 	bl	8000eac <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e1a8      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0302 	and.w	r3, r3, #2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b28      	ldr	r3, [pc, #160]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	4925      	ldr	r1, [pc, #148]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	600b      	str	r3, [r1, #0]
 80015d8:	e015      	b.n	8001606 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <HAL_RCC_OscConfig+0x244>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff fc64 	bl	8000eac <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015e8:	f7ff fc60 	bl	8000eac <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e187      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0308 	and.w	r3, r3, #8
 800160e:	2b00      	cmp	r3, #0
 8001610:	d036      	beq.n	8001680 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d016      	beq.n	8001648 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	@ (8001670 <HAL_RCC_OscConfig+0x248>)
 800161c:	2201      	movs	r2, #1
 800161e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001620:	f7ff fc44 	bl	8000eac <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001628:	f7ff fc40 	bl	8000eac <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e167      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800163a:	4b0b      	ldr	r3, [pc, #44]	@ (8001668 <HAL_RCC_OscConfig+0x240>)
 800163c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x200>
 8001646:	e01b      	b.n	8001680 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <HAL_RCC_OscConfig+0x248>)
 800164a:	2200      	movs	r2, #0
 800164c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164e:	f7ff fc2d 	bl	8000eac <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001654:	e00e      	b.n	8001674 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001656:	f7ff fc29 	bl	8000eac <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d907      	bls.n	8001674 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e150      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001668:	40023800 	.word	0x40023800
 800166c:	42470000 	.word	0x42470000
 8001670:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001674:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001676:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001678:	f003 0302 	and.w	r3, r3, #2
 800167c:	2b00      	cmp	r3, #0
 800167e:	d1ea      	bne.n	8001656 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0304 	and.w	r3, r3, #4
 8001688:	2b00      	cmp	r3, #0
 800168a:	f000 8097 	beq.w	80017bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001692:	4b81      	ldr	r3, [pc, #516]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800169a:	2b00      	cmp	r3, #0
 800169c:	d10f      	bne.n	80016be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ba:	2301      	movs	r3, #1
 80016bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b77      	ldr	r3, [pc, #476]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b74      	ldr	r3, [pc, #464]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a73      	ldr	r2, [pc, #460]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d6:	f7ff fbe9 	bl	8000eac <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016de:	f7ff fbe5 	bl	8000eac <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e10c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f0:	4b6a      	ldr	r3, [pc, #424]	@ (800189c <HAL_RCC_OscConfig+0x474>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d106      	bne.n	8001712 <HAL_RCC_OscConfig+0x2ea>
 8001704:	4b64      	ldr	r3, [pc, #400]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001708:	4a63      	ldr	r2, [pc, #396]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800170a:	f043 0301 	orr.w	r3, r3, #1
 800170e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001710:	e01c      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b05      	cmp	r3, #5
 8001718:	d10c      	bne.n	8001734 <HAL_RCC_OscConfig+0x30c>
 800171a:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800171c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800171e:	4a5e      	ldr	r2, [pc, #376]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001720:	f043 0304 	orr.w	r3, r3, #4
 8001724:	6713      	str	r3, [r2, #112]	@ 0x70
 8001726:	4b5c      	ldr	r3, [pc, #368]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	4a5b      	ldr	r2, [pc, #364]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6713      	str	r3, [r2, #112]	@ 0x70
 8001732:	e00b      	b.n	800174c <HAL_RCC_OscConfig+0x324>
 8001734:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001736:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001738:	4a57      	ldr	r2, [pc, #348]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800173a:	f023 0301 	bic.w	r3, r3, #1
 800173e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001740:	4b55      	ldr	r3, [pc, #340]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a54      	ldr	r2, [pc, #336]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0304 	bic.w	r3, r3, #4
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d015      	beq.n	8001780 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001754:	f7ff fbaa 	bl	8000eac <HAL_GetTick>
 8001758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175a:	e00a      	b.n	8001772 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800175c:	f7ff fba6 	bl	8000eac <HAL_GetTick>
 8001760:	4602      	mov	r2, r0
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	f241 3288 	movw	r2, #5000	@ 0x1388
 800176a:	4293      	cmp	r3, r2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e0cb      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001772:	4b49      	ldr	r3, [pc, #292]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001774:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d0ee      	beq.n	800175c <HAL_RCC_OscConfig+0x334>
 800177e:	e014      	b.n	80017aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001780:	f7ff fb94 	bl	8000eac <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb90 	bl	8000eac <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0b5      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800179e:	4b3e      	ldr	r3, [pc, #248]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1ee      	bne.n	8001788 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d105      	bne.n	80017bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b4:	4a38      	ldr	r2, [pc, #224]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 80a1 	beq.w	8001908 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017c6:	4b34      	ldr	r3, [pc, #208]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d05c      	beq.n	800188c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	699b      	ldr	r3, [r3, #24]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d141      	bne.n	800185e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017da:	4b31      	ldr	r3, [pc, #196]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e0:	f7ff fb64 	bl	8000eac <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017e8:	f7ff fb60 	bl	8000eac <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e087      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017fa:	4b27      	ldr	r3, [pc, #156]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69da      	ldr	r2, [r3, #28]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001814:	019b      	lsls	r3, r3, #6
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181c:	085b      	lsrs	r3, r3, #1
 800181e:	3b01      	subs	r3, #1
 8001820:	041b      	lsls	r3, r3, #16
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001828:	061b      	lsls	r3, r3, #24
 800182a:	491b      	ldr	r1, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb39 	bl	8000eac <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb35 	bl	8000eac <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e05c      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x416>
 800185c:	e054      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_RCC_OscConfig+0x478>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fb22 	bl	8000eac <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff fb1e 	bl	8000eac <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e045      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_RCC_OscConfig+0x470>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x444>
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	699b      	ldr	r3, [r3, #24]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e038      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
 8001898:	40023800 	.word	0x40023800
 800189c:	40007000 	.word	0x40007000
 80018a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001914 <HAL_RCC_OscConfig+0x4ec>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d028      	beq.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018bc:	429a      	cmp	r2, r3
 80018be:	d121      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d11a      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018d4:	4013      	ands	r3, r2
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018dc:	4293      	cmp	r3, r2
 80018de:	d111      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ea:	085b      	lsrs	r3, r3, #1
 80018ec:	3b01      	subs	r3, #1
 80018ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d107      	bne.n	8001904 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d001      	beq.n	8001908 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3718      	adds	r7, #24
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800

08001918 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0cc      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b68      	ldr	r3, [pc, #416]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0307 	and.w	r3, r3, #7
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d90c      	bls.n	8001954 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b65      	ldr	r3, [pc, #404]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	b2d2      	uxtb	r2, r2
 8001940:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001942:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	683a      	ldr	r2, [r7, #0]
 800194c:	429a      	cmp	r2, r3
 800194e:	d001      	beq.n	8001954 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0b8      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0302 	and.w	r3, r3, #2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d020      	beq.n	80019a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0304 	and.w	r3, r3, #4
 8001968:	2b00      	cmp	r3, #0
 800196a:	d005      	beq.n	8001978 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800196c:	4b59      	ldr	r3, [pc, #356]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	4a58      	ldr	r2, [pc, #352]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001972:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001976:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001984:	4b53      	ldr	r3, [pc, #332]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	4a52      	ldr	r2, [pc, #328]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800198a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800198e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001990:	4b50      	ldr	r3, [pc, #320]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	494d      	ldr	r1, [pc, #308]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	4313      	orrs	r3, r2
 80019a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d044      	beq.n	8001a38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d107      	bne.n	80019c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	4b47      	ldr	r3, [pc, #284]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d119      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e07f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	d003      	beq.n	80019d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e06f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e6:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d101      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e067      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	4b37      	ldr	r3, [pc, #220]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 80019f8:	689b      	ldr	r3, [r3, #8]
 80019fa:	f023 0203 	bic.w	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	4934      	ldr	r1, [pc, #208]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a08:	f7ff fa50 	bl	8000eac <HAL_GetTick>
 8001a0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0e:	e00a      	b.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a10:	f7ff fa4c 	bl	8000eac <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e04f      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 020c 	and.w	r2, r3, #12
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d1eb      	bne.n	8001a10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a38:	4b25      	ldr	r3, [pc, #148]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0307 	and.w	r3, r3, #7
 8001a40:	683a      	ldr	r2, [r7, #0]
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d20c      	bcs.n	8001a60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a46:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a48:	683a      	ldr	r2, [r7, #0]
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a4e:	4b20      	ldr	r3, [pc, #128]	@ (8001ad0 <HAL_RCC_ClockConfig+0x1b8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0307 	and.w	r3, r3, #7
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	d001      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e032      	b.n	8001ac6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d008      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	4916      	ldr	r1, [pc, #88]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a8a:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	00db      	lsls	r3, r3, #3
 8001a98:	490e      	ldr	r1, [pc, #56]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a9e:	f000 f821 	bl	8001ae4 <HAL_RCC_GetSysClockFreq>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	091b      	lsrs	r3, r3, #4
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	490a      	ldr	r1, [pc, #40]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	5ccb      	ldrb	r3, [r1, r3]
 8001ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ab6:	4a09      	ldr	r2, [pc, #36]	@ (8001adc <HAL_RCC_ClockConfig+0x1c4>)
 8001ab8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001aba:	4b09      	ldr	r3, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1c8>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff f8e0 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40023c00 	.word	0x40023c00
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08006860 	.word	0x08006860
 8001adc:	20000000 	.word	0x20000000
 8001ae0:	20000004 	.word	0x20000004

08001ae4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ae8:	b094      	sub	sp, #80	@ 0x50
 8001aea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001afc:	4b79      	ldr	r3, [pc, #484]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	f003 030c 	and.w	r3, r3, #12
 8001b04:	2b08      	cmp	r3, #8
 8001b06:	d00d      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x40>
 8001b08:	2b08      	cmp	r3, #8
 8001b0a:	f200 80e1 	bhi.w	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x34>
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x3a>
 8001b16:	e0db      	b.n	8001cd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b18:	4b73      	ldr	r3, [pc, #460]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b1c:	e0db      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b1e:	4b73      	ldr	r3, [pc, #460]	@ (8001cec <HAL_RCC_GetSysClockFreq+0x208>)
 8001b20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b22:	e0d8      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b24:	4b6f      	ldr	r3, [pc, #444]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b2e:	4b6d      	ldr	r3, [pc, #436]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d063      	beq.n	8001c02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b3a:	4b6a      	ldr	r3, [pc, #424]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	099b      	lsrs	r3, r3, #6
 8001b40:	2200      	movs	r2, #0
 8001b42:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b4e:	2300      	movs	r3, #0
 8001b50:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b56:	4622      	mov	r2, r4
 8001b58:	462b      	mov	r3, r5
 8001b5a:	f04f 0000 	mov.w	r0, #0
 8001b5e:	f04f 0100 	mov.w	r1, #0
 8001b62:	0159      	lsls	r1, r3, #5
 8001b64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b68:	0150      	lsls	r0, r2, #5
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4621      	mov	r1, r4
 8001b70:	1a51      	subs	r1, r2, r1
 8001b72:	6139      	str	r1, [r7, #16]
 8001b74:	4629      	mov	r1, r5
 8001b76:	eb63 0301 	sbc.w	r3, r3, r1
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b88:	4659      	mov	r1, fp
 8001b8a:	018b      	lsls	r3, r1, #6
 8001b8c:	4651      	mov	r1, sl
 8001b8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b92:	4651      	mov	r1, sl
 8001b94:	018a      	lsls	r2, r1, #6
 8001b96:	4651      	mov	r1, sl
 8001b98:	ebb2 0801 	subs.w	r8, r2, r1
 8001b9c:	4659      	mov	r1, fp
 8001b9e:	eb63 0901 	sbc.w	r9, r3, r1
 8001ba2:	f04f 0200 	mov.w	r2, #0
 8001ba6:	f04f 0300 	mov.w	r3, #0
 8001baa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bb6:	4690      	mov	r8, r2
 8001bb8:	4699      	mov	r9, r3
 8001bba:	4623      	mov	r3, r4
 8001bbc:	eb18 0303 	adds.w	r3, r8, r3
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	462b      	mov	r3, r5
 8001bc4:	eb49 0303 	adc.w	r3, r9, r3
 8001bc8:	60fb      	str	r3, [r7, #12]
 8001bca:	f04f 0200 	mov.w	r2, #0
 8001bce:	f04f 0300 	mov.w	r3, #0
 8001bd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001bd6:	4629      	mov	r1, r5
 8001bd8:	024b      	lsls	r3, r1, #9
 8001bda:	4621      	mov	r1, r4
 8001bdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001be0:	4621      	mov	r1, r4
 8001be2:	024a      	lsls	r2, r1, #9
 8001be4:	4610      	mov	r0, r2
 8001be6:	4619      	mov	r1, r3
 8001be8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bea:	2200      	movs	r2, #0
 8001bec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001bf4:	f7fe fb3e 	bl	8000274 <__aeabi_uldivmod>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c00:	e058      	b.n	8001cb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c02:	4b38      	ldr	r3, [pc, #224]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	099b      	lsrs	r3, r3, #6
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c12:	623b      	str	r3, [r7, #32]
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c1c:	4642      	mov	r2, r8
 8001c1e:	464b      	mov	r3, r9
 8001c20:	f04f 0000 	mov.w	r0, #0
 8001c24:	f04f 0100 	mov.w	r1, #0
 8001c28:	0159      	lsls	r1, r3, #5
 8001c2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2e:	0150      	lsls	r0, r2, #5
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	4641      	mov	r1, r8
 8001c36:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c3a:	4649      	mov	r1, r9
 8001c3c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c54:	ebb2 040a 	subs.w	r4, r2, sl
 8001c58:	eb63 050b 	sbc.w	r5, r3, fp
 8001c5c:	f04f 0200 	mov.w	r2, #0
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	00eb      	lsls	r3, r5, #3
 8001c66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c6a:	00e2      	lsls	r2, r4, #3
 8001c6c:	4614      	mov	r4, r2
 8001c6e:	461d      	mov	r5, r3
 8001c70:	4643      	mov	r3, r8
 8001c72:	18e3      	adds	r3, r4, r3
 8001c74:	603b      	str	r3, [r7, #0]
 8001c76:	464b      	mov	r3, r9
 8001c78:	eb45 0303 	adc.w	r3, r5, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	028b      	lsls	r3, r1, #10
 8001c8e:	4621      	mov	r1, r4
 8001c90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c94:	4621      	mov	r1, r4
 8001c96:	028a      	lsls	r2, r1, #10
 8001c98:	4610      	mov	r0, r2
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	61fa      	str	r2, [r7, #28]
 8001ca4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ca8:	f7fe fae4 	bl	8000274 <__aeabi_uldivmod>
 8001cac:	4602      	mov	r2, r0
 8001cae:	460b      	mov	r3, r1
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ce4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ccc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cce:	e002      	b.n	8001cd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	3750      	adds	r7, #80	@ 0x50
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	00f42400 	.word	0x00f42400
 8001cec:	007a1200 	.word	0x007a1200

08001cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cf4:	4b03      	ldr	r3, [pc, #12]	@ (8001d04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	20000000 	.word	0x20000000

08001d08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d0c:	f7ff fff0 	bl	8001cf0 <HAL_RCC_GetHCLKFreq>
 8001d10:	4602      	mov	r2, r0
 8001d12:	4b05      	ldr	r3, [pc, #20]	@ (8001d28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	0a9b      	lsrs	r3, r3, #10
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	4903      	ldr	r1, [pc, #12]	@ (8001d2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d1e:	5ccb      	ldrb	r3, [r1, r3]
 8001d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	bd80      	pop	{r7, pc}
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	08006870 	.word	0x08006870

08001d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d40:	4b12      	ldr	r3, [pc, #72]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	08db      	lsrs	r3, r3, #3
 8001d6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d72:	4b07      	ldr	r3, [pc, #28]	@ (8001d90 <HAL_RCC_GetClockConfig+0x60>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0207 	and.w	r2, r3, #7
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	601a      	str	r2, [r3, #0]
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40023800 	.word	0x40023800
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e041      	b.n	8001e2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d106      	bne.n	8001dc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f839 	bl	8001e32 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4610      	mov	r0, r2
 8001dd4:	f000 f9b2 	bl	800213c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2201      	movs	r2, #1
 8001e04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}

08001e32 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e3a:	bf00      	nop
 8001e3c:	370c      	adds	r7, #12
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d001      	beq.n	8001e60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e044      	b.n	8001eea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	68da      	ldr	r2, [r3, #12]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f042 0201 	orr.w	r2, r2, #1
 8001e76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d018      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e8a:	d013      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <HAL_TIM_Base_Start_IT+0xb4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00e      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a19      	ldr	r2, [pc, #100]	@ (8001f00 <HAL_TIM_Base_Start_IT+0xb8>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d009      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a17      	ldr	r2, [pc, #92]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xbc>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_TIM_Base_Start_IT+0x6c>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a16      	ldr	r2, [pc, #88]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xc0>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d111      	bne.n	8001ed8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	2b06      	cmp	r3, #6
 8001ec4:	d010      	beq.n	8001ee8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 0201 	orr.w	r2, r2, #1
 8001ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ed6:	e007      	b.n	8001ee8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f042 0201 	orr.w	r2, r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3714      	adds	r7, #20
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40000400 	.word	0x40000400
 8001f00:	40000800 	.word	0x40000800
 8001f04:	40000c00 	.word	0x40000c00
 8001f08:	40014000 	.word	0x40014000

08001f0c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d020      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f003 0302 	and.w	r3, r3, #2
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01b      	beq.n	8001f70 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f06f 0202 	mvn.w	r2, #2
 8001f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	699b      	ldr	r3, [r3, #24]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8d2 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001f5c:	e005      	b.n	8001f6a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f8c4 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	f000 f8d5 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d020      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0204 	mvn.w	r2, #4
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8ac 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f89e 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8af 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0308 	and.w	r3, r3, #8
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d020      	beq.n	8002008 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01b      	beq.n	8002008 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f06f 0208 	mvn.w	r2, #8
 8001fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f886 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8001ff4:	e005      	b.n	8002002 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f878 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f889 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2200      	movs	r2, #0
 8002006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002008:	68bb      	ldr	r3, [r7, #8]
 800200a:	f003 0310 	and.w	r3, r3, #16
 800200e:	2b00      	cmp	r3, #0
 8002010:	d020      	beq.n	8002054 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f003 0310 	and.w	r3, r3, #16
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01b      	beq.n	8002054 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0210 	mvn.w	r2, #16
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2208      	movs	r2, #8
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	69db      	ldr	r3, [r3, #28]
 8002032:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f860 	bl	8002100 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f852 	bl	80020ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f863 	bl	8002114 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00c      	beq.n	8002078 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0201 	mvn.w	r2, #1
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fdc6 	bl	8000c04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00c      	beq.n	800209c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002088:	2b00      	cmp	r3, #0
 800208a:	d007      	beq.n	800209c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f8e6 	bl	8002268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d00c      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d007      	beq.n	80020c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 f834 	bl	8002128 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0320 	and.w	r3, r3, #32
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0320 	and.w	r3, r3, #32
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d007      	beq.n	80020e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0220 	mvn.w	r2, #32
 80020dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f000 f8b8 	bl	8002254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020e4:	bf00      	nop
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020f4:	bf00      	nop
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a3a      	ldr	r2, [pc, #232]	@ (8002238 <TIM_Base_SetConfig+0xfc>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x38>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x38>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a37      	ldr	r2, [pc, #220]	@ (800223c <TIM_Base_SetConfig+0x100>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x38>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a36      	ldr	r2, [pc, #216]	@ (8002240 <TIM_Base_SetConfig+0x104>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x38>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a35      	ldr	r2, [pc, #212]	@ (8002244 <TIM_Base_SetConfig+0x108>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2b      	ldr	r2, [pc, #172]	@ (8002238 <TIM_Base_SetConfig+0xfc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01b      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002194:	d017      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a28      	ldr	r2, [pc, #160]	@ (800223c <TIM_Base_SetConfig+0x100>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a27      	ldr	r2, [pc, #156]	@ (8002240 <TIM_Base_SetConfig+0x104>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00f      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a26      	ldr	r2, [pc, #152]	@ (8002244 <TIM_Base_SetConfig+0x108>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d00b      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a25      	ldr	r2, [pc, #148]	@ (8002248 <TIM_Base_SetConfig+0x10c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d007      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a24      	ldr	r2, [pc, #144]	@ (800224c <TIM_Base_SetConfig+0x110>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d003      	beq.n	80021c6 <TIM_Base_SetConfig+0x8a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a23      	ldr	r2, [pc, #140]	@ (8002250 <TIM_Base_SetConfig+0x114>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d108      	bne.n	80021d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	68fa      	ldr	r2, [r7, #12]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	695b      	ldr	r3, [r3, #20]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <TIM_Base_SetConfig+0xfc>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d103      	bne.n	800220c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	691a      	ldr	r2, [r3, #16]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f023 0201 	bic.w	r2, r3, #1
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	611a      	str	r2, [r3, #16]
  }
}
 800222a:	bf00      	nop
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	40000400 	.word	0x40000400
 8002240:	40000800 	.word	0x40000800
 8002244:	40000c00 	.word	0x40000c00
 8002248:	40014000 	.word	0x40014000
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800

08002254 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	f103 0208 	add.w	r2, r3, #8
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f103 0208 	add.w	r2, r3, #8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	f103 0208 	add.w	r2, r3, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022b0:	f240 1019 	movw	r0, #281	@ 0x119
 80022b4:	f003 fe96 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2200      	movs	r2, #0
 80022cc:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022ce:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022d2:	f003 fe87 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 80022d6:	bf00      	nop
 80022d8:	3708      	adds	r7, #8
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b084      	sub	sp, #16
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
 80022e6:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	68fa      	ldr	r2, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	1c5a      	adds	r2, r3, #1
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 800231a:	f240 101b 	movw	r0, #283	@ 0x11b
 800231e:	f003 fe61 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}

0800232a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b084      	sub	sp, #16
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002340:	d103      	bne.n	800234a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	60fb      	str	r3, [r7, #12]
 8002348:	e00c      	b.n	8002364 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	3308      	adds	r3, #8
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e002      	b.n	8002358 <vListInsert+0x2e>
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	429a      	cmp	r2, r3
 8002362:	d2f6      	bcs.n	8002352 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68fa      	ldr	r2, [r7, #12]
 8002378:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8002390:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002394:	f003 fe26 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002398:	bf00      	nop
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	691b      	ldr	r3, [r3, #16]
 80023ac:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6892      	ldr	r2, [r2, #8]
 80023b6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6852      	ldr	r2, [r2, #4]
 80023c0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d103      	bne.n	80023d4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1e5a      	subs	r2, r3, #1
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4619      	mov	r1, r3
 80023ea:	f240 101d 	movw	r0, #285	@ 0x11d
 80023ee:	f003 fe35 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80023fe:	b580      	push	{r7, lr}
 8002400:	b08e      	sub	sp, #56	@ 0x38
 8002402:	af04      	add	r7, sp, #16
 8002404:	60f8      	str	r0, [r7, #12]
 8002406:	60b9      	str	r1, [r7, #8]
 8002408:	607a      	str	r2, [r7, #4]
 800240a:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 800240c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10b      	bne.n	800242a <prvCreateStaticTask+0x2c>
    __asm volatile
 8002412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002416:	f383 8811 	msr	BASEPRI, r3
 800241a:	f3bf 8f6f 	isb	sy
 800241e:	f3bf 8f4f 	dsb	sy
 8002422:	623b      	str	r3, [r7, #32]
}
 8002424:	bf00      	nop
 8002426:	bf00      	nop
 8002428:	e7fd      	b.n	8002426 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 800242a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10b      	bne.n	8002448 <prvCreateStaticTask+0x4a>
    __asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	61fb      	str	r3, [r7, #28]
}
 8002442:	bf00      	nop
 8002444:	bf00      	nop
 8002446:	e7fd      	b.n	8002444 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002448:	2358      	movs	r3, #88	@ 0x58
 800244a:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b58      	cmp	r3, #88	@ 0x58
 8002450:	d00b      	beq.n	800246a <prvCreateStaticTask+0x6c>
    __asm volatile
 8002452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002456:	f383 8811 	msr	BASEPRI, r3
 800245a:	f3bf 8f6f 	isb	sy
 800245e:	f3bf 8f4f 	dsb	sy
 8002462:	61bb      	str	r3, [r7, #24]
}
 8002464:	bf00      	nop
 8002466:	bf00      	nop
 8002468:	e7fd      	b.n	8002466 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 800246a:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800246c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800246e:	2b00      	cmp	r3, #0
 8002470:	d01f      	beq.n	80024b2 <prvCreateStaticTask+0xb4>
 8002472:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01c      	beq.n	80024b2 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247a:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800247c:	2258      	movs	r2, #88	@ 0x58
 800247e:	2100      	movs	r1, #0
 8002480:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002482:	f004 f8fb 	bl	800667c <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002488:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800248a:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800248c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002494:	2300      	movs	r3, #0
 8002496:	9303      	str	r3, [sp, #12]
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	9302      	str	r3, [sp, #8]
 800249c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 f89d 	bl	80025ea <prvInitialiseNewTask>
 80024b0:	e001      	b.n	80024b6 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 80024b2:	2300      	movs	r3, #0
 80024b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 80024b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024b8:	4618      	mov	r0, r3
 80024ba:	3728      	adds	r7, #40	@ 0x28
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}

080024c0 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	@ 0x28
 80024c4:	af04      	add	r7, sp, #16
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	9303      	str	r3, [sp, #12]
 80024d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024da:	9302      	str	r3, [sp, #8]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024de:	9301      	str	r3, [sp, #4]
 80024e0:	6a3b      	ldr	r3, [r7, #32]
 80024e2:	9300      	str	r3, [sp, #0]
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f7ff ff87 	bl	80023fe <prvCreateStaticTask>
 80024f0:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d002      	beq.n	80024fe <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80024f8:	6978      	ldr	r0, [r7, #20]
 80024fa:	f000 f907 	bl	800270c <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4618      	mov	r0, r3
 8002502:	f003 ff45 	bl	8006390 <SEGGER_SYSVIEW_ShrinkId>
 8002506:	4603      	mov	r3, r0
 8002508:	4619      	mov	r1, r3
 800250a:	20bf      	movs	r0, #191	@ 0xbf
 800250c:	f003 fda6 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8002510:	693b      	ldr	r3, [r7, #16]
    }
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 800251a:	b580      	push	{r7, lr}
 800251c:	b08a      	sub	sp, #40	@ 0x28
 800251e:	af04      	add	r7, sp, #16
 8002520:	60f8      	str	r0, [r7, #12]
 8002522:	60b9      	str	r1, [r7, #8]
 8002524:	607a      	str	r2, [r7, #4]
 8002526:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4618      	mov	r0, r3
 800252e:	f001 fd4f 	bl	8003fd0 <pvPortMalloc>
 8002532:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d013      	beq.n	8002562 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800253a:	2058      	movs	r0, #88	@ 0x58
 800253c:	f001 fd48 	bl	8003fd0 <pvPortMalloc>
 8002540:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d008      	beq.n	800255a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002548:	2258      	movs	r2, #88	@ 0x58
 800254a:	2100      	movs	r1, #0
 800254c:	6978      	ldr	r0, [r7, #20]
 800254e:	f004 f895 	bl	800667c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	631a      	str	r2, [r3, #48]	@ 0x30
 8002558:	e005      	b.n	8002566 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800255a:	6938      	ldr	r0, [r7, #16]
 800255c:	f001 fe6a 	bl	8004234 <vPortFree>
 8002560:	e001      	b.n	8002566 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d011      	beq.n	8002590 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002574:	2300      	movs	r3, #0
 8002576:	9303      	str	r3, [sp, #12]
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	9302      	str	r3, [sp, #8]
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	9301      	str	r3, [sp, #4]
 8002580:	6a3b      	ldr	r3, [r7, #32]
 8002582:	9300      	str	r3, [sp, #0]
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68b9      	ldr	r1, [r7, #8]
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f000 f82d 	bl	80025ea <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8002590:	697b      	ldr	r3, [r7, #20]
    }
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800259a:	b580      	push	{r7, lr}
 800259c:	b088      	sub	sp, #32
 800259e:	af02      	add	r7, sp, #8
 80025a0:	60f8      	str	r0, [r7, #12]
 80025a2:	60b9      	str	r1, [r7, #8]
 80025a4:	607a      	str	r2, [r7, #4]
 80025a6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80025a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	68b9      	ldr	r1, [r7, #8]
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff ffaf 	bl	800251a <prvCreateTask>
 80025bc:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80025c4:	6938      	ldr	r0, [r7, #16]
 80025c6:	f000 f8a1 	bl	800270c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025ca:	2301      	movs	r3, #1
 80025cc:	617b      	str	r3, [r7, #20]
 80025ce:	e002      	b.n	80025d6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025d0:	f04f 33ff 	mov.w	r3, #4294967295
 80025d4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	4619      	mov	r1, r3
 80025da:	20c2      	movs	r0, #194	@ 0xc2
 80025dc:	f003 fd3e 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80025e0:	697b      	ldr	r3, [r7, #20]
    }
 80025e2:	4618      	mov	r0, r3
 80025e4:	3718      	adds	r7, #24
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}

080025ea <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b088      	sub	sp, #32
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	60f8      	str	r0, [r7, #12]
 80025f2:	60b9      	str	r1, [r7, #8]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	461a      	mov	r2, r3
 8002602:	21a5      	movs	r1, #165	@ 0xa5
 8002604:	f004 f83a 	bl	800667c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800260a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002612:	3b01      	subs	r3, #1
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	4413      	add	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f023 0307 	bic.w	r3, r3, #7
 8002620:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00b      	beq.n	8002644 <prvInitialiseNewTask+0x5a>
    __asm volatile
 800262c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002630:	f383 8811 	msr	BASEPRI, r3
 8002634:	f3bf 8f6f 	isb	sy
 8002638:	f3bf 8f4f 	dsb	sy
 800263c:	617b      	str	r3, [r7, #20]
}
 800263e:	bf00      	nop
 8002640:	bf00      	nop
 8002642:	e7fd      	b.n	8002640 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d01e      	beq.n	8002688 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
 800264e:	e012      	b.n	8002676 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002650:	68ba      	ldr	r2, [r7, #8]
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	4413      	add	r3, r2
 8002656:	7819      	ldrb	r1, [r3, #0]
 8002658:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	4413      	add	r3, r2
 800265e:	3334      	adds	r3, #52	@ 0x34
 8002660:	460a      	mov	r2, r1
 8002662:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002664:	68ba      	ldr	r2, [r7, #8]
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	3301      	adds	r3, #1
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d9e9      	bls.n	8002650 <prvInitialiseNewTask+0x66>
 800267c:	e000      	b.n	8002680 <prvInitialiseNewTask+0x96>
            {
                break;
 800267e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8002680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002682:	2200      	movs	r2, #0
 8002684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268a:	2b04      	cmp	r3, #4
 800268c:	d90b      	bls.n	80026a6 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800268e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002692:	f383 8811 	msr	BASEPRI, r3
 8002696:	f3bf 8f6f 	isb	sy
 800269a:	f3bf 8f4f 	dsb	sy
 800269e:	613b      	str	r3, [r7, #16]
}
 80026a0:	bf00      	nop
 80026a2:	bf00      	nop
 80026a4:	e7fd      	b.n	80026a2 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a8:	2b04      	cmp	r3, #4
 80026aa:	d901      	bls.n	80026b0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026ac:	2304      	movs	r3, #4
 80026ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026b4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ba:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	3304      	adds	r3, #4
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7ff fdfd 	bl	80022c0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c8:	3318      	adds	r3, #24
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fdf8 	bl	80022c0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026d4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80026d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d8:	f1c3 0205 	rsb	r2, r3, #5
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	68f9      	ldr	r1, [r7, #12]
 80026ea:	69b8      	ldr	r0, [r7, #24]
 80026ec:	f001 f946 	bl	800397c <pxPortInitialiseStack>
 80026f0:	4602      	mov	r2, r0
 80026f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026f4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80026f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d002      	beq.n	8002702 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80026fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002700:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002702:	bf00      	nop
 8002704:	3720      	adds	r7, #32
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 800270c:	b5b0      	push	{r4, r5, r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af02      	add	r7, sp, #8
 8002712:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002714:	f001 fb2e 	bl	8003d74 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002718:	4b50      	ldr	r3, [pc, #320]	@ (800285c <prvAddNewTaskToReadyList+0x150>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	4a4f      	ldr	r2, [pc, #316]	@ (800285c <prvAddNewTaskToReadyList+0x150>)
 8002720:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8002722:	4b4f      	ldr	r3, [pc, #316]	@ (8002860 <prvAddNewTaskToReadyList+0x154>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d109      	bne.n	800273e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 800272a:	4a4d      	ldr	r2, [pc, #308]	@ (8002860 <prvAddNewTaskToReadyList+0x154>)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002730:	4b4a      	ldr	r3, [pc, #296]	@ (800285c <prvAddNewTaskToReadyList+0x150>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d110      	bne.n	800275a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002738:	f000 fdf2 	bl	8003320 <prvInitialiseTaskLists>
 800273c:	e00d      	b.n	800275a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800273e:	4b49      	ldr	r3, [pc, #292]	@ (8002864 <prvAddNewTaskToReadyList+0x158>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d109      	bne.n	800275a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002746:	4b46      	ldr	r3, [pc, #280]	@ (8002860 <prvAddNewTaskToReadyList+0x154>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002750:	429a      	cmp	r2, r3
 8002752:	d802      	bhi.n	800275a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002754:	4a42      	ldr	r2, [pc, #264]	@ (8002860 <prvAddNewTaskToReadyList+0x154>)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 800275a:	4b43      	ldr	r3, [pc, #268]	@ (8002868 <prvAddNewTaskToReadyList+0x15c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3301      	adds	r3, #1
 8002760:	4a41      	ldr	r2, [pc, #260]	@ (8002868 <prvAddNewTaskToReadyList+0x15c>)
 8002762:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002764:	4b40      	ldr	r3, [pc, #256]	@ (8002868 <prvAddNewTaskToReadyList+0x15c>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d016      	beq.n	80027a0 <prvAddNewTaskToReadyList+0x94>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4618      	mov	r0, r3
 8002776:	f003 fce5 	bl	8006144 <SEGGER_SYSVIEW_OnTaskCreate>
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800278a:	461d      	mov	r5, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461c      	mov	r4, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	1ae3      	subs	r3, r4, r3
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	462b      	mov	r3, r5
 800279c:	f001 ff48 	bl	8004630 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f003 fd52 	bl	800624c <SEGGER_SYSVIEW_OnTaskStartReady>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ac:	2201      	movs	r2, #1
 80027ae:	409a      	lsls	r2, r3
 80027b0:	4b2e      	ldr	r3, [pc, #184]	@ (800286c <prvAddNewTaskToReadyList+0x160>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	4a2d      	ldr	r2, [pc, #180]	@ (800286c <prvAddNewTaskToReadyList+0x160>)
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027be:	492c      	ldr	r1, [pc, #176]	@ (8002870 <prvAddNewTaskToReadyList+0x164>)
 80027c0:	4613      	mov	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	4413      	add	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	3304      	adds	r3, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689a      	ldr	r2, [r3, #8]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	60da      	str	r2, [r3, #12]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	3204      	adds	r2, #4
 80027e6:	605a      	str	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	1d1a      	adds	r2, r3, #4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f4:	4613      	mov	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	4413      	add	r3, r2
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002870 <prvAddNewTaskToReadyList+0x164>)
 80027fe:	441a      	add	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002808:	4919      	ldr	r1, [pc, #100]	@ (8002870 <prvAddNewTaskToReadyList+0x164>)
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800281a:	1c59      	adds	r1, r3, #1
 800281c:	4814      	ldr	r0, [pc, #80]	@ (8002870 <prvAddNewTaskToReadyList+0x164>)
 800281e:	4613      	mov	r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	4403      	add	r3, r0
 8002828:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800282a:	f001 fad5 	bl	8003dd8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <prvAddNewTaskToReadyList+0x158>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d00e      	beq.n	8002854 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002836:	4b0a      	ldr	r3, [pc, #40]	@ (8002860 <prvAddNewTaskToReadyList+0x154>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002840:	429a      	cmp	r2, r3
 8002842:	d207      	bcs.n	8002854 <prvAddNewTaskToReadyList+0x148>
 8002844:	4b0b      	ldr	r3, [pc, #44]	@ (8002874 <prvAddNewTaskToReadyList+0x168>)
 8002846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002854:	bf00      	nop
 8002856:	3710      	adds	r7, #16
 8002858:	46bd      	mov	sp, r7
 800285a:	bdb0      	pop	{r4, r5, r7, pc}
 800285c:	20000168 	.word	0x20000168
 8002860:	20000090 	.word	0x20000090
 8002864:	20000174 	.word	0x20000174
 8002868:	20000184 	.word	0x20000184
 800286c:	20000170 	.word	0x20000170
 8002870:	20000094 	.word	0x20000094
 8002874:	e000ed04 	.word	0xe000ed04

08002878 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 800288a:	f000 fa69 	bl	8002d60 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800288e:	4b14      	ldr	r3, [pc, #80]	@ (80028e0 <vTaskDelay+0x68>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d00b      	beq.n	80028ae <vTaskDelay+0x36>
    __asm volatile
 8002896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800289a:	f383 8811 	msr	BASEPRI, r3
 800289e:	f3bf 8f6f 	isb	sy
 80028a2:	f3bf 8f4f 	dsb	sy
 80028a6:	60bb      	str	r3, [r7, #8]
}
 80028a8:	bf00      	nop
 80028aa:	bf00      	nop
 80028ac:	e7fd      	b.n	80028aa <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80028ae:	2100      	movs	r1, #0
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 ffbb 	bl	800382c <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80028b6:	f000 fa61 	bl	8002d7c <xTaskResumeAll>
 80028ba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d107      	bne.n	80028d2 <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80028c2:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <vTaskDelay+0x6c>)
 80028c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028c8:	601a      	str	r2, [r3, #0]
 80028ca:	f3bf 8f4f 	dsb	sy
 80028ce:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 80028d2:	20c5      	movs	r0, #197	@ 0xc5
 80028d4:	f003 fb86 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80028d8:	bf00      	nop
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000190 	.word	0x20000190
 80028e4:	e000ed04 	.word	0xe000ed04

080028e8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        traceENTER_vTaskSuspend( xTaskToSuspend );

        taskENTER_CRITICAL();
 80028f0:	f001 fa40 	bl	8003d74 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <vTaskSuspend+0x18>
 80028fa:	4b46      	ldr	r3, [pc, #280]	@ (8002a14 <vTaskSuspend+0x12c>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	e000      	b.n	8002902 <vTaskSuspend+0x1a>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	3304      	adds	r3, #4
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fd49 	bl	80023a0 <uxListRemove>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d115      	bne.n	8002940 <vTaskSuspend+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002918:	493f      	ldr	r1, [pc, #252]	@ (8002a18 <vTaskSuspend+0x130>)
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10a      	bne.n	8002940 <vTaskSuspend+0x58>
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800292e:	2201      	movs	r2, #1
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43da      	mvns	r2, r3
 8002936:	4b39      	ldr	r3, [pc, #228]	@ (8002a1c <vTaskSuspend+0x134>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4013      	ands	r3, r2
 800293c:	4a37      	ldr	r2, [pc, #220]	@ (8002a1c <vTaskSuspend+0x134>)
 800293e:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002944:	2b00      	cmp	r3, #0
 8002946:	d004      	beq.n	8002952 <vTaskSuspend+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	3318      	adds	r3, #24
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff fd27 	bl	80023a0 <uxListRemove>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	3304      	adds	r3, #4
 8002956:	4619      	mov	r1, r3
 8002958:	4831      	ldr	r0, [pc, #196]	@ (8002a20 <vTaskSuspend+0x138>)
 800295a:	f7ff fcc0 	bl	80022de <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	e010      	b.n	8002986 <vTaskSuspend+0x9e>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002964:	693a      	ldr	r2, [r7, #16]
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	4413      	add	r3, r2
 800296a:	3354      	adds	r3, #84	@ 0x54
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	b2db      	uxtb	r3, r3
 8002970:	2b01      	cmp	r3, #1
 8002972:	d105      	bne.n	8002980 <vTaskSuspend+0x98>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	4413      	add	r3, r2
 800297a:	3354      	adds	r3, #84	@ 0x54
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
                for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	3301      	adds	r3, #1
 8002984:	617b      	str	r3, [r7, #20]
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	ddeb      	ble.n	8002964 <vTaskSuspend+0x7c>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
        }
        taskEXIT_CRITICAL();
 800298c:	f001 fa24 	bl	8003dd8 <vPortExitCritical>

        #if ( configNUMBER_OF_CORES == 1 )
        {
            UBaseType_t uxCurrentListLength;

            if( xSchedulerRunning != pdFALSE )
 8002990:	4b24      	ldr	r3, [pc, #144]	@ (8002a24 <vTaskSuspend+0x13c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d005      	beq.n	80029a4 <vTaskSuspend+0xbc>
            {
                /* Reset the next expected unblock time in case it referred to the
                 * task that is now in the Suspended state. */
                taskENTER_CRITICAL();
 8002998:	f001 f9ec 	bl	8003d74 <vPortEnterCritical>
                {
                    prvResetNextTaskUnblockTime();
 800299c:	f000 fd5e 	bl	800345c <prvResetNextTaskUnblockTime>
                }
                taskEXIT_CRITICAL();
 80029a0:	f001 fa1a 	bl	8003dd8 <vPortExitCritical>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            if( pxTCB == pxCurrentTCB )
 80029a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002a14 <vTaskSuspend+0x12c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d12a      	bne.n	8002a04 <vTaskSuspend+0x11c>
            {
                if( xSchedulerRunning != pdFALSE )
 80029ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002a24 <vTaskSuspend+0x13c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d018      	beq.n	80029e8 <vTaskSuspend+0x100>
                {
                    /* The current task has just been suspended. */
                    configASSERT( uxSchedulerSuspended == 0 );
 80029b6:	4b1c      	ldr	r3, [pc, #112]	@ (8002a28 <vTaskSuspend+0x140>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00b      	beq.n	80029d6 <vTaskSuspend+0xee>
    __asm volatile
 80029be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029c2:	f383 8811 	msr	BASEPRI, r3
 80029c6:	f3bf 8f6f 	isb	sy
 80029ca:	f3bf 8f4f 	dsb	sy
 80029ce:	60bb      	str	r3, [r7, #8]
}
 80029d0:	bf00      	nop
 80029d2:	bf00      	nop
 80029d4:	e7fd      	b.n	80029d2 <vTaskSuspend+0xea>
                    portYIELD_WITHIN_API();
 80029d6:	4b15      	ldr	r3, [pc, #84]	@ (8002a2c <vTaskSuspend+0x144>)
 80029d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	f3bf 8f4f 	dsb	sy
 80029e2:	f3bf 8f6f 	isb	sy
 80029e6:	e00d      	b.n	8002a04 <vTaskSuspend+0x11c>
                     * must be adjusted to point to a different task. */

                    /* Use a temp variable as a distinct sequence point for reading
                     * volatile variables prior to a comparison to ensure compliance
                     * with MISRA C 2012 Rule 13.2. */
                    uxCurrentListLength = listCURRENT_LIST_LENGTH( &xSuspendedTaskList );
 80029e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002a20 <vTaskSuspend+0x138>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	60fb      	str	r3, [r7, #12]

                    if( uxCurrentListLength == uxCurrentNumberOfTasks )
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <vTaskSuspend+0x148>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	68fa      	ldr	r2, [r7, #12]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d103      	bne.n	8002a00 <vTaskSuspend+0x118>
                    {
                        /* No other tasks are ready, so set pxCurrentTCB back to
                         * NULL so when the next task is created pxCurrentTCB will
                         * be set to point to it no matter what its relative priority
                         * is. */
                        pxCurrentTCB = NULL;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <vTaskSuspend+0x12c>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]
 80029fe:	e001      	b.n	8002a04 <vTaskSuspend+0x11c>
                    }
                    else
                    {
                        vTaskSwitchContext();
 8002a00:	f000 fc06 	bl	8003210 <vTaskSwitchContext>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskSuspend();
 8002a04:	20ca      	movs	r0, #202	@ 0xca
 8002a06:	f003 faed 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	20000090 	.word	0x20000090
 8002a18:	20000094 	.word	0x20000094
 8002a1c:	20000170 	.word	0x20000170
 8002a20:	20000154 	.word	0x20000154
 8002a24:	20000174 	.word	0x20000174
 8002a28:	20000190 	.word	0x20000190
 8002a2c:	e000ed04 	.word	0xe000ed04
 8002a30:	20000168 	.word	0x20000168

08002a34 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	60fb      	str	r3, [r7, #12]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d10b      	bne.n	8002a62 <prvTaskIsTaskSuspended+0x2e>
    __asm volatile
 8002a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a4e:	f383 8811 	msr	BASEPRI, r3
 8002a52:	f3bf 8f6f 	isb	sy
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	60bb      	str	r3, [r7, #8]
}
 8002a5c:	bf00      	nop
 8002a5e:	bf00      	nop
 8002a60:	e7fd      	b.n	8002a5e <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	4a14      	ldr	r2, [pc, #80]	@ (8002ab8 <prvTaskIsTaskSuspended+0x84>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d11e      	bne.n	8002aaa <prvTaskIsTaskSuspended+0x76>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <prvTaskIsTaskSuspended+0x88>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <prvTaskIsTaskSuspended+0x76>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because it is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE )
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d115      	bne.n	8002aaa <prvTaskIsTaskSuspended+0x76>
                        /* The task does not appear on the event list item of
                         * and of the RTOS objects, but could still be in the
                         * blocked state if it is waiting on its notification
                         * rather than waiting on an object.  If not, is
                         * suspended. */
                        xReturn = pdTRUE;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	617b      	str	r3, [r7, #20]

                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
 8002a86:	e00d      	b.n	8002aa4 <prvTaskIsTaskSuspended+0x70>
                        {
                            if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002a88:	68fa      	ldr	r2, [r7, #12]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3354      	adds	r3, #84	@ 0x54
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d102      	bne.n	8002a9e <prvTaskIsTaskSuspended+0x6a>
                            {
                                xReturn = pdFALSE;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	617b      	str	r3, [r7, #20]
                                break;
 8002a9c:	e005      	b.n	8002aaa <prvTaskIsTaskSuspended+0x76>
                        for( x = ( BaseType_t ) 0; x < ( BaseType_t ) configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	613b      	str	r3, [r7, #16]
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	ddee      	ble.n	8002a88 <prvTaskIsTaskSuspended+0x54>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8002aaa:	697b      	ldr	r3, [r7, #20]
    }
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	20000154 	.word	0x20000154
 8002abc:	20000128 	.word	0x20000128

08002ac0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b086      	sub	sp, #24
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskResume( xTaskToResume );

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <vTaskResume+0x2a>
    __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	60fb      	str	r3, [r7, #12]
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <vTaskResume+0x26>

        #if ( configNUMBER_OF_CORES == 1 )

            /* The parameter cannot be NULL as it is impossible to resume the
             * currently executing task. */
            if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8002aea:	4b39      	ldr	r3, [pc, #228]	@ (8002bd0 <vTaskResume+0x110>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d065      	beq.n	8002bc0 <vTaskResume+0x100>
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d062      	beq.n	8002bc0 <vTaskResume+0x100>
             * to check their run state here. Therefore, we get into a critical
             * section and check if the task is actually suspended or not. */
            if( pxTCB != NULL )
        #endif
        {
            taskENTER_CRITICAL();
 8002afa:	f001 f93b 	bl	8003d74 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002afe:	6978      	ldr	r0, [r7, #20]
 8002b00:	f7ff ff98 	bl	8002a34 <prvTaskIsTaskSuspended>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d058      	beq.n	8002bbc <vTaskResume+0xfc>
                {
                    traceTASK_RESUME( pxTCB );

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	3304      	adds	r3, #4
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f7ff fc46 	bl	80023a0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fb98 	bl	800624c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b20:	2201      	movs	r2, #1
 8002b22:	409a      	lsls	r2, r3
 8002b24:	4b2b      	ldr	r3, [pc, #172]	@ (8002bd4 <vTaskResume+0x114>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002bd4 <vTaskResume+0x114>)
 8002b2c:	6013      	str	r3, [r2, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b32:	4929      	ldr	r1, [pc, #164]	@ (8002bd8 <vTaskResume+0x118>)
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	440b      	add	r3, r1
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	613b      	str	r3, [r7, #16]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	609a      	str	r2, [r3, #8]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	60da      	str	r2, [r3, #12]
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	697a      	ldr	r2, [r7, #20]
 8002b58:	3204      	adds	r2, #4
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	1d1a      	adds	r2, r3, #4
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	609a      	str	r2, [r3, #8]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4a19      	ldr	r2, [pc, #100]	@ (8002bd8 <vTaskResume+0x118>)
 8002b72:	441a      	add	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	615a      	str	r2, [r3, #20]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b7c:	4916      	ldr	r1, [pc, #88]	@ (8002bd8 <vTaskResume+0x118>)
 8002b7e:	4613      	mov	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	4413      	add	r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b8e:	1c59      	adds	r1, r3, #1
 8002b90:	4811      	ldr	r0, [pc, #68]	@ (8002bd8 <vTaskResume+0x118>)
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4403      	add	r3, r0
 8002b9c:	6019      	str	r1, [r3, #0]

                    /* This yield may not cause the task just resumed to run,
                     * but will leave the lists in the correct state for the
                     * next yield. */
                    taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8002b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd0 <vTaskResume+0x110>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d207      	bcs.n	8002bbc <vTaskResume+0xfc>
 8002bac:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <vTaskResume+0x11c>)
 8002bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	f3bf 8f4f 	dsb	sy
 8002bb8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8002bbc:	f001 f90c 	bl	8003dd8 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskResume();
 8002bc0:	20cb      	movs	r0, #203	@ 0xcb
 8002bc2:	f003 fa0f 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002bc6:	bf00      	nop
 8002bc8:	3718      	adds	r7, #24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000090 	.word	0x20000090
 8002bd4:	20000170 	.word	0x20000170
 8002bd8:	20000094 	.word	0x20000094
 8002bdc:	e000ed04 	.word	0xe000ed04

08002be0 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b08e      	sub	sp, #56	@ 0x38
 8002be4:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002be6:	2301      	movs	r3, #1
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002bea:	2300      	movs	r3, #0
 8002bec:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	e013      	b.n	8002c1c <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <prvCreateIdleTasks+0xc4>)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	7819      	ldrb	r1, [r3, #0]
 8002bfc:	f107 020c 	add.w	r2, r7, #12
 8002c00:	69fb      	ldr	r3, [r7, #28]
 8002c02:	4413      	add	r3, r2
 8002c04:	460a      	mov	r2, r1
 8002c06:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002c08:	f107 020c 	add.w	r2, r7, #12
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	4413      	add	r3, r2
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002c16:	69fb      	ldr	r3, [r7, #28]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	61fb      	str	r3, [r7, #28]
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	dde8      	ble.n	8002bf4 <prvCreateIdleTasks+0x14>
 8002c22:	e000      	b.n	8002c26 <prvCreateIdleTasks+0x46>
        {
            break;
 8002c24:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002c26:	2300      	movs	r3, #0
 8002c28:	623b      	str	r3, [r7, #32]
 8002c2a:	e030      	b.n	8002c8e <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ca8 <prvCreateIdleTasks+0xc8>)
 8002c2e:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002c34:	2300      	movs	r3, #0
 8002c36:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002c38:	463a      	mov	r2, r7
 8002c3a:	1d39      	adds	r1, r7, #4
 8002c3c:	f107 0308 	add.w	r3, r7, #8
 8002c40:	4618      	mov	r0, r3
 8002c42:	f000 fe81 	bl	8003948 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002c46:	6838      	ldr	r0, [r7, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f107 010c 	add.w	r1, r7, #12
 8002c50:	9202      	str	r2, [sp, #8]
 8002c52:	9301      	str	r3, [sp, #4]
 8002c54:	2300      	movs	r3, #0
 8002c56:	9300      	str	r3, [sp, #0]
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	69b8      	ldr	r0, [r7, #24]
 8002c5e:	f7ff fc2f 	bl	80024c0 <xTaskCreateStatic>
 8002c62:	4602      	mov	r2, r0
 8002c64:	4911      	ldr	r1, [pc, #68]	@ (8002cac <prvCreateIdleTasks+0xcc>)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8002cac <prvCreateIdleTasks+0xcc>)
 8002c6e:	6a3b      	ldr	r3, [r7, #32]
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d002      	beq.n	8002c7e <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c7c:	e001      	b.n	8002c82 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8002c7e:	2300      	movs	r3, #0
 8002c80:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	3301      	adds	r3, #1
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	ddcb      	ble.n	8002c2c <prvCreateIdleTasks+0x4c>
 8002c94:	e000      	b.n	8002c98 <prvCreateIdleTasks+0xb8>
        {
            break;
 8002c96:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3728      	adds	r7, #40	@ 0x28
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	08006798 	.word	0x08006798
 8002ca8:	080032f1 	.word	0x080032f1
 8002cac:	2000018c 	.word	0x2000018c

08002cb0 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002cb6:	f7ff ff93 	bl	8002be0 <prvCreateIdleTasks>
 8002cba:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d129      	bne.n	8002d16 <vTaskStartScheduler+0x66>
    __asm volatile
 8002cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc6:	f383 8811 	msr	BASEPRI, r3
 8002cca:	f3bf 8f6f 	isb	sy
 8002cce:	f3bf 8f4f 	dsb	sy
 8002cd2:	60bb      	str	r3, [r7, #8]
}
 8002cd4:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002cd6:	4b1c      	ldr	r3, [pc, #112]	@ (8002d48 <vTaskStartScheduler+0x98>)
 8002cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cdc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <vTaskStartScheduler+0x9c>)
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ce4:	4b1a      	ldr	r3, [pc, #104]	@ (8002d50 <vTaskStartScheduler+0xa0>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002cea:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <vTaskStartScheduler+0xa4>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3334      	adds	r3, #52	@ 0x34
 8002cf0:	2205      	movs	r2, #5
 8002cf2:	4919      	ldr	r1, [pc, #100]	@ (8002d58 <vTaskStartScheduler+0xa8>)
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fcb1 	bl	800665c <memcmp>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <vTaskStartScheduler+0x5c>
 8002d00:	4b14      	ldr	r3, [pc, #80]	@ (8002d54 <vTaskStartScheduler+0xa4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f003 fa5f 	bl	80061c8 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002d0a:	e001      	b.n	8002d10 <vTaskStartScheduler+0x60>
 8002d0c:	f003 f9fe 	bl	800610c <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002d10:	f000 fec0 	bl	8003a94 <xPortStartScheduler>
 8002d14:	e00f      	b.n	8002d36 <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d10b      	bne.n	8002d36 <vTaskStartScheduler+0x86>
    __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
}
 8002d30:	bf00      	nop
 8002d32:	bf00      	nop
 8002d34:	e7fd      	b.n	8002d32 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002d36:	4b09      	ldr	r3, [pc, #36]	@ (8002d5c <vTaskStartScheduler+0xac>)
 8002d38:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002d3a:	20cd      	movs	r0, #205	@ 0xcd
 8002d3c:	f003 f952 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d40:	bf00      	nop
 8002d42:	3710      	adds	r7, #16
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	20000188 	.word	0x20000188
 8002d4c:	20000174 	.word	0x20000174
 8002d50:	2000016c 	.word	0x2000016c
 8002d54:	20000090 	.word	0x20000090
 8002d58:	08006798 	.word	0x08006798
 8002d5c:	2000000c 	.word	0x2000000c

08002d60 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002d64:	4b04      	ldr	r3, [pc, #16]	@ (8002d78 <vTaskSuspendAll+0x18>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a03      	ldr	r2, [pc, #12]	@ (8002d78 <vTaskSuspendAll+0x18>)
 8002d6c:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002d6e:	20cf      	movs	r0, #207	@ 0xcf
 8002d70:	f003 f938 	bl	8005fe4 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000190 	.word	0x20000190

08002d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002d86:	2300      	movs	r3, #0
 8002d88:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002d8a:	f000 fff3 	bl	8003d74 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002d92:	4b7a      	ldr	r3, [pc, #488]	@ (8002f7c <xTaskResumeAll+0x200>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <xTaskResumeAll+0x36>
    __asm volatile
 8002d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9e:	f383 8811 	msr	BASEPRI, r3
 8002da2:	f3bf 8f6f 	isb	sy
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	603b      	str	r3, [r7, #0]
}
 8002dac:	bf00      	nop
 8002dae:	bf00      	nop
 8002db0:	e7fd      	b.n	8002dae <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002db2:	4b72      	ldr	r3, [pc, #456]	@ (8002f7c <xTaskResumeAll+0x200>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	3b01      	subs	r3, #1
 8002db8:	4a70      	ldr	r2, [pc, #448]	@ (8002f7c <xTaskResumeAll+0x200>)
 8002dba:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002dbc:	4b6f      	ldr	r3, [pc, #444]	@ (8002f7c <xTaskResumeAll+0x200>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f040 80ce 	bne.w	8002f62 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002dc6:	4b6e      	ldr	r3, [pc, #440]	@ (8002f80 <xTaskResumeAll+0x204>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	f000 80c9 	beq.w	8002f62 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dd0:	e092      	b.n	8002ef8 <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	@ (8002f84 <xTaskResumeAll+0x208>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	6a12      	ldr	r2, [r2, #32]
 8002de8:	609a      	str	r2, [r3, #8]
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	6a1b      	ldr	r3, [r3, #32]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	69d2      	ldr	r2, [r2, #28]
 8002df2:	605a      	str	r2, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3318      	adds	r3, #24
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d103      	bne.n	8002e08 <xTaskResumeAll+0x8c>
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	6a1a      	ldr	r2, [r3, #32]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	1e5a      	subs	r2, r3, #1
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	69fa      	ldr	r2, [r7, #28]
 8002e24:	68d2      	ldr	r2, [r2, #12]
 8002e26:	609a      	str	r2, [r3, #8]
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	69fa      	ldr	r2, [r7, #28]
 8002e2e:	6892      	ldr	r2, [r2, #8]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d103      	bne.n	8002e46 <xTaskResumeAll+0xca>
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	68da      	ldr	r2, [r3, #12]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	615a      	str	r2, [r3, #20]
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	1e5a      	subs	r2, r3, #1
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f003 f9f7 	bl	800624c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e62:	2201      	movs	r2, #1
 8002e64:	409a      	lsls	r2, r3
 8002e66:	4b48      	ldr	r3, [pc, #288]	@ (8002f88 <xTaskResumeAll+0x20c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	4a46      	ldr	r2, [pc, #280]	@ (8002f88 <xTaskResumeAll+0x20c>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e74:	4945      	ldr	r1, [pc, #276]	@ (8002f8c <xTaskResumeAll+0x210>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	3304      	adds	r3, #4
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	607b      	str	r3, [r7, #4]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	609a      	str	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	60da      	str	r2, [r3, #12]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	3204      	adds	r2, #4
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	1d1a      	adds	r2, r3, #4
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	609a      	str	r2, [r3, #8]
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4a36      	ldr	r2, [pc, #216]	@ (8002f8c <xTaskResumeAll+0x210>)
 8002eb4:	441a      	add	r2, r3
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	615a      	str	r2, [r3, #20]
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ebe:	4933      	ldr	r1, [pc, #204]	@ (8002f8c <xTaskResumeAll+0x210>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	482e      	ldr	r0, [pc, #184]	@ (8002f8c <xTaskResumeAll+0x210>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4403      	add	r3, r0
 8002ede:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ee4:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <xTaskResumeAll+0x214>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d904      	bls.n	8002ef8 <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002eee:	4a29      	ldr	r2, [pc, #164]	@ (8002f94 <xTaskResumeAll+0x218>)
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ef8:	4b22      	ldr	r3, [pc, #136]	@ (8002f84 <xTaskResumeAll+0x208>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f47f af68 	bne.w	8002dd2 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002f08:	f000 faa8 	bl	800345c <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f0c:	4b22      	ldr	r3, [pc, #136]	@ (8002f98 <xTaskResumeAll+0x21c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d012      	beq.n	8002f3e <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002f18:	f000 f858 	bl	8002fcc <xTaskIncrementTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d004      	beq.n	8002f2c <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002f22:	4a1c      	ldr	r2, [pc, #112]	@ (8002f94 <xTaskResumeAll+0x218>)
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	2101      	movs	r1, #1
 8002f28:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3b01      	subs	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1ef      	bne.n	8002f18 <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002f38:	4b17      	ldr	r3, [pc, #92]	@ (8002f98 <xTaskResumeAll+0x21c>)
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002f3e:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <xTaskResumeAll+0x218>)
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00b      	beq.n	8002f62 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002f4e:	4b10      	ldr	r3, [pc, #64]	@ (8002f90 <xTaskResumeAll+0x214>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4b12      	ldr	r3, [pc, #72]	@ (8002f9c <xTaskResumeAll+0x220>)
 8002f54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f58:	601a      	str	r2, [r3, #0]
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002f62:	f000 ff39 	bl	8003dd8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	4619      	mov	r1, r3
 8002f6a:	20d0      	movs	r0, #208	@ 0xd0
 8002f6c:	f003 f876 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002f70:	69bb      	ldr	r3, [r7, #24]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3720      	adds	r7, #32
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000190 	.word	0x20000190
 8002f80:	20000168 	.word	0x20000168
 8002f84:	20000128 	.word	0x20000128
 8002f88:	20000170 	.word	0x20000170
 8002f8c:	20000094 	.word	0x20000094
 8002f90:	20000090 	.word	0x20000090
 8002f94:	2000017c 	.word	0x2000017c
 8002f98:	20000178 	.word	0x20000178
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002fa6:	f000 ffd1 	bl	8003f4c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002fae:	4b06      	ldr	r3, [pc, #24]	@ (8002fc8 <xTaskGetTickCountFromISR+0x28>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002fb4:	6839      	ldr	r1, [r7, #0]
 8002fb6:	20d2      	movs	r0, #210	@ 0xd2
 8002fb8:	f003 f850 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002fbc:	683b      	ldr	r3, [r7, #0]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	2000016c 	.word	0x2000016c

08002fcc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08a      	sub	sp, #40	@ 0x28
 8002fd0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002fd6:	4b83      	ldr	r3, [pc, #524]	@ (80031e4 <xTaskIncrementTick+0x218>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80f3 	bne.w	80031c6 <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002fe0:	4b81      	ldr	r3, [pc, #516]	@ (80031e8 <xTaskIncrementTick+0x21c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002fe8:	4a7f      	ldr	r2, [pc, #508]	@ (80031e8 <xTaskIncrementTick+0x21c>)
 8002fea:	6a3b      	ldr	r3, [r7, #32]
 8002fec:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002fee:	6a3b      	ldr	r3, [r7, #32]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d121      	bne.n	8003038 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ff4:	4b7d      	ldr	r3, [pc, #500]	@ (80031ec <xTaskIncrementTick+0x220>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <xTaskIncrementTick+0x4a>
    __asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	607b      	str	r3, [r7, #4]
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	e7fd      	b.n	8003012 <xTaskIncrementTick+0x46>
 8003016:	4b75      	ldr	r3, [pc, #468]	@ (80031ec <xTaskIncrementTick+0x220>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	4b74      	ldr	r3, [pc, #464]	@ (80031f0 <xTaskIncrementTick+0x224>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a72      	ldr	r2, [pc, #456]	@ (80031ec <xTaskIncrementTick+0x220>)
 8003022:	6013      	str	r3, [r2, #0]
 8003024:	4a72      	ldr	r2, [pc, #456]	@ (80031f0 <xTaskIncrementTick+0x224>)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	4b72      	ldr	r3, [pc, #456]	@ (80031f4 <xTaskIncrementTick+0x228>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	3301      	adds	r3, #1
 8003030:	4a70      	ldr	r2, [pc, #448]	@ (80031f4 <xTaskIncrementTick+0x228>)
 8003032:	6013      	str	r3, [r2, #0]
 8003034:	f000 fa12 	bl	800345c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003038:	4b6f      	ldr	r3, [pc, #444]	@ (80031f8 <xTaskIncrementTick+0x22c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	6a3a      	ldr	r2, [r7, #32]
 800303e:	429a      	cmp	r2, r3
 8003040:	f0c0 80ac 	bcc.w	800319c <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003044:	4b69      	ldr	r3, [pc, #420]	@ (80031ec <xTaskIncrementTick+0x220>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d104      	bne.n	8003058 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 800304e:	4b6a      	ldr	r3, [pc, #424]	@ (80031f8 <xTaskIncrementTick+0x22c>)
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	601a      	str	r2, [r3, #0]
                    break;
 8003056:	e0a1      	b.n	800319c <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003058:	4b64      	ldr	r3, [pc, #400]	@ (80031ec <xTaskIncrementTick+0x220>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003068:	6a3a      	ldr	r2, [r7, #32]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	429a      	cmp	r2, r3
 800306e:	d203      	bcs.n	8003078 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003070:	4a61      	ldr	r2, [pc, #388]	@ (80031f8 <xTaskIncrementTick+0x22c>)
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	6013      	str	r3, [r2, #0]
                        break;
 8003076:	e091      	b.n	800319c <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	68d2      	ldr	r2, [r2, #12]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	3304      	adds	r3, #4
 800309a:	429a      	cmp	r2, r3
 800309c:	d103      	bne.n	80030a6 <xTaskIncrementTick+0xda>
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	69bb      	ldr	r3, [r7, #24]
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d01e      	beq.n	80030fc <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	6a12      	ldr	r2, [r2, #32]
 80030cc:	609a      	str	r2, [r3, #8]
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	69d2      	ldr	r2, [r2, #28]
 80030d6:	605a      	str	r2, [r3, #4]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	3318      	adds	r3, #24
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d103      	bne.n	80030ec <xTaskIncrementTick+0x120>
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6a1a      	ldr	r2, [r3, #32]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	605a      	str	r2, [r3, #4]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	2200      	movs	r2, #0
 80030f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	1e5a      	subs	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4618      	mov	r0, r3
 8003100:	f003 f8a4 	bl	800624c <SEGGER_SYSVIEW_OnTaskStartReady>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	2201      	movs	r2, #1
 800310a:	409a      	lsls	r2, r3
 800310c:	4b3b      	ldr	r3, [pc, #236]	@ (80031fc <xTaskIncrementTick+0x230>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4313      	orrs	r3, r2
 8003112:	4a3a      	ldr	r2, [pc, #232]	@ (80031fc <xTaskIncrementTick+0x230>)
 8003114:	6013      	str	r3, [r2, #0]
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311a:	4939      	ldr	r1, [pc, #228]	@ (8003200 <xTaskIncrementTick+0x234>)
 800311c:	4613      	mov	r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	3304      	adds	r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	609a      	str	r2, [r3, #8]
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	689a      	ldr	r2, [r3, #8]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	60da      	str	r2, [r3, #12]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	69ba      	ldr	r2, [r7, #24]
 8003140:	3204      	adds	r2, #4
 8003142:	605a      	str	r2, [r3, #4]
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	1d1a      	adds	r2, r3, #4
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	609a      	str	r2, [r3, #8]
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4a29      	ldr	r2, [pc, #164]	@ (8003200 <xTaskIncrementTick+0x234>)
 800315a:	441a      	add	r2, r3
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	615a      	str	r2, [r3, #20]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003164:	4926      	ldr	r1, [pc, #152]	@ (8003200 <xTaskIncrementTick+0x234>)
 8003166:	4613      	mov	r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	4821      	ldr	r0, [pc, #132]	@ (8003200 <xTaskIncrementTick+0x234>)
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	4403      	add	r3, r0
 8003184:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318a:	4b1e      	ldr	r3, [pc, #120]	@ (8003204 <xTaskIncrementTick+0x238>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003190:	429a      	cmp	r2, r3
 8003192:	f67f af57 	bls.w	8003044 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8003196:	2301      	movs	r3, #1
 8003198:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800319a:	e753      	b.n	8003044 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 800319c:	4b19      	ldr	r3, [pc, #100]	@ (8003204 <xTaskIncrementTick+0x238>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031a2:	4917      	ldr	r1, [pc, #92]	@ (8003200 <xTaskIncrementTick+0x234>)
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d901      	bls.n	80031b8 <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 80031b4:	2301      	movs	r3, #1
 80031b6:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 80031b8:	4b13      	ldr	r3, [pc, #76]	@ (8003208 <xTaskIncrementTick+0x23c>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 80031c0:	2301      	movs	r3, #1
 80031c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80031c4:	e004      	b.n	80031d0 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 80031c6:	4b11      	ldr	r3, [pc, #68]	@ (800320c <xTaskIncrementTick+0x240>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	3301      	adds	r3, #1
 80031cc:	4a0f      	ldr	r2, [pc, #60]	@ (800320c <xTaskIncrementTick+0x240>)
 80031ce:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80031d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d2:	4619      	mov	r1, r3
 80031d4:	20db      	movs	r0, #219	@ 0xdb
 80031d6:	f002 ff41 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80031da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3728      	adds	r7, #40	@ 0x28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	20000190 	.word	0x20000190
 80031e8:	2000016c 	.word	0x2000016c
 80031ec:	20000120 	.word	0x20000120
 80031f0:	20000124 	.word	0x20000124
 80031f4:	20000180 	.word	0x20000180
 80031f8:	20000188 	.word	0x20000188
 80031fc:	20000170 	.word	0x20000170
 8003200:	20000094 	.word	0x20000094
 8003204:	20000090 	.word	0x20000090
 8003208:	2000017c 	.word	0x2000017c
 800320c:	20000178 	.word	0x20000178

08003210 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003216:	4b30      	ldr	r3, [pc, #192]	@ (80032d8 <vTaskSwitchContext+0xc8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 800321e:	4b2f      	ldr	r3, [pc, #188]	@ (80032dc <vTaskSwitchContext+0xcc>)
 8003220:	2201      	movs	r2, #1
 8003222:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003224:	e054      	b.n	80032d0 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 8003226:	4b2d      	ldr	r3, [pc, #180]	@ (80032dc <vTaskSwitchContext+0xcc>)
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 800322c:	4b2c      	ldr	r3, [pc, #176]	@ (80032e0 <vTaskSwitchContext+0xd0>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	fab3 f383 	clz	r3, r3
 8003238:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800323a:	7afb      	ldrb	r3, [r7, #11]
 800323c:	f1c3 031f 	rsb	r3, r3, #31
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	4928      	ldr	r1, [pc, #160]	@ (80032e4 <vTaskSwitchContext+0xd4>)
 8003244:	697a      	ldr	r2, [r7, #20]
 8003246:	4613      	mov	r3, r2
 8003248:	009b      	lsls	r3, r3, #2
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d10b      	bne.n	800326e <vTaskSwitchContext+0x5e>
    __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	607b      	str	r3, [r7, #4]
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <vTaskSwitchContext+0x5a>
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	4613      	mov	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4413      	add	r3, r2
 8003276:	009b      	lsls	r3, r3, #2
 8003278:	4a1a      	ldr	r2, [pc, #104]	@ (80032e4 <vTaskSwitchContext+0xd4>)
 800327a:	4413      	add	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	605a      	str	r2, [r3, #4]
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	3308      	adds	r3, #8
 8003290:	429a      	cmp	r2, r3
 8003292:	d103      	bne.n	800329c <vTaskSwitchContext+0x8c>
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	605a      	str	r2, [r3, #4]
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	4a11      	ldr	r2, [pc, #68]	@ (80032e8 <vTaskSwitchContext+0xd8>)
 80032a4:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 80032a6:	4b10      	ldr	r3, [pc, #64]	@ (80032e8 <vTaskSwitchContext+0xd8>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3334      	adds	r3, #52	@ 0x34
 80032ac:	2205      	movs	r2, #5
 80032ae:	490f      	ldr	r1, [pc, #60]	@ (80032ec <vTaskSwitchContext+0xdc>)
 80032b0:	4618      	mov	r0, r3
 80032b2:	f003 f9d3 	bl	800665c <memcmp>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d005      	beq.n	80032c8 <vTaskSwitchContext+0xb8>
 80032bc:	4b0a      	ldr	r3, [pc, #40]	@ (80032e8 <vTaskSwitchContext+0xd8>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f002 ff81 	bl	80061c8 <SEGGER_SYSVIEW_OnTaskStartExec>
 80032c6:	e001      	b.n	80032cc <vTaskSwitchContext+0xbc>
 80032c8:	f002 ff20 	bl	800610c <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80032cc:	4b06      	ldr	r3, [pc, #24]	@ (80032e8 <vTaskSwitchContext+0xd8>)
 80032ce:	681b      	ldr	r3, [r3, #0]
    }
 80032d0:	bf00      	nop
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	20000190 	.word	0x20000190
 80032dc:	2000017c 	.word	0x2000017c
 80032e0:	20000170 	.word	0x20000170
 80032e4:	20000094 	.word	0x20000094
 80032e8:	20000090 	.word	0x20000090
 80032ec:	08006798 	.word	0x08006798

080032f0 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80032f8:	f000 f852 	bl	80033a0 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 80032fc:	4b06      	ldr	r3, [pc, #24]	@ (8003318 <prvIdleTask+0x28>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d9f9      	bls.n	80032f8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003304:	4b05      	ldr	r3, [pc, #20]	@ (800331c <prvIdleTask+0x2c>)
 8003306:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800330a:	601a      	str	r2, [r3, #0]
 800330c:	f3bf 8f4f 	dsb	sy
 8003310:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003314:	e7f0      	b.n	80032f8 <prvIdleTask+0x8>
 8003316:	bf00      	nop
 8003318:	20000094 	.word	0x20000094
 800331c:	e000ed04 	.word	0xe000ed04

08003320 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b082      	sub	sp, #8
 8003324:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003326:	2300      	movs	r3, #0
 8003328:	607b      	str	r3, [r7, #4]
 800332a:	e00c      	b.n	8003346 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <prvInitialiseTaskLists+0x60>)
 8003338:	4413      	add	r3, r2
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff9e 	bl	800227c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3301      	adds	r3, #1
 8003344:	607b      	str	r3, [r7, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b04      	cmp	r3, #4
 800334a:	d9ef      	bls.n	800332c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800334c:	480d      	ldr	r0, [pc, #52]	@ (8003384 <prvInitialiseTaskLists+0x64>)
 800334e:	f7fe ff95 	bl	800227c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003352:	480d      	ldr	r0, [pc, #52]	@ (8003388 <prvInitialiseTaskLists+0x68>)
 8003354:	f7fe ff92 	bl	800227c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003358:	480c      	ldr	r0, [pc, #48]	@ (800338c <prvInitialiseTaskLists+0x6c>)
 800335a:	f7fe ff8f 	bl	800227c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800335e:	480c      	ldr	r0, [pc, #48]	@ (8003390 <prvInitialiseTaskLists+0x70>)
 8003360:	f7fe ff8c 	bl	800227c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003364:	480b      	ldr	r0, [pc, #44]	@ (8003394 <prvInitialiseTaskLists+0x74>)
 8003366:	f7fe ff89 	bl	800227c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800336a:	4b0b      	ldr	r3, [pc, #44]	@ (8003398 <prvInitialiseTaskLists+0x78>)
 800336c:	4a05      	ldr	r2, [pc, #20]	@ (8003384 <prvInitialiseTaskLists+0x64>)
 800336e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003370:	4b0a      	ldr	r3, [pc, #40]	@ (800339c <prvInitialiseTaskLists+0x7c>)
 8003372:	4a05      	ldr	r2, [pc, #20]	@ (8003388 <prvInitialiseTaskLists+0x68>)
 8003374:	601a      	str	r2, [r3, #0]
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	20000094 	.word	0x20000094
 8003384:	200000f8 	.word	0x200000f8
 8003388:	2000010c 	.word	0x2000010c
 800338c:	20000128 	.word	0x20000128
 8003390:	2000013c 	.word	0x2000013c
 8003394:	20000154 	.word	0x20000154
 8003398:	20000120 	.word	0x20000120
 800339c:	20000124 	.word	0x20000124

080033a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033a6:	e019      	b.n	80033dc <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80033a8:	f000 fce4 	bl	8003d74 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80033ac:	4b10      	ldr	r3, [pc, #64]	@ (80033f0 <prvCheckTasksWaitingTermination+0x50>)
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fff1 	bl	80023a0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80033be:	4b0d      	ldr	r3, [pc, #52]	@ (80033f4 <prvCheckTasksWaitingTermination+0x54>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	4a0b      	ldr	r2, [pc, #44]	@ (80033f4 <prvCheckTasksWaitingTermination+0x54>)
 80033c6:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80033c8:	4b0b      	ldr	r3, [pc, #44]	@ (80033f8 <prvCheckTasksWaitingTermination+0x58>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	3b01      	subs	r3, #1
 80033ce:	4a0a      	ldr	r2, [pc, #40]	@ (80033f8 <prvCheckTasksWaitingTermination+0x58>)
 80033d0:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80033d2:	f000 fd01 	bl	8003dd8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f810 	bl	80033fc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033dc:	4b06      	ldr	r3, [pc, #24]	@ (80033f8 <prvCheckTasksWaitingTermination+0x58>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d1e1      	bne.n	80033a8 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3708      	adds	r7, #8
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	2000013c 	.word	0x2000013c
 80033f4:	20000168 	.word	0x20000168
 80033f8:	20000150 	.word	0x20000150

080033fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800340a:	2b00      	cmp	r3, #0
 800340c:	d108      	bne.n	8003420 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003412:	4618      	mov	r0, r3
 8003414:	f000 ff0e 	bl	8004234 <vPortFree>
                vPortFree( pxTCB );
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f000 ff0b 	bl	8004234 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800341e:	e019      	b.n	8003454 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003426:	2b01      	cmp	r3, #1
 8003428:	d103      	bne.n	8003432 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 ff02 	bl	8004234 <vPortFree>
    }
 8003430:	e010      	b.n	8003454 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8003438:	2b02      	cmp	r3, #2
 800343a:	d00b      	beq.n	8003454 <prvDeleteTCB+0x58>
    __asm volatile
 800343c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003440:	f383 8811 	msr	BASEPRI, r3
 8003444:	f3bf 8f6f 	isb	sy
 8003448:	f3bf 8f4f 	dsb	sy
 800344c:	60fb      	str	r3, [r7, #12]
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <prvDeleteTCB+0x54>
    }
 8003454:	bf00      	nop
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003460:	4b0a      	ldr	r3, [pc, #40]	@ (800348c <prvResetNextTaskUnblockTime+0x30>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d104      	bne.n	8003474 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800346a:	4b09      	ldr	r3, [pc, #36]	@ (8003490 <prvResetNextTaskUnblockTime+0x34>)
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003472:	e005      	b.n	8003480 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003474:	4b05      	ldr	r3, [pc, #20]	@ (800348c <prvResetNextTaskUnblockTime+0x30>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a04      	ldr	r2, [pc, #16]	@ (8003490 <prvResetNextTaskUnblockTime+0x34>)
 800347e:	6013      	str	r3, [r2, #0]
}
 8003480:	bf00      	nop
 8003482:	46bd      	mov	sp, r7
 8003484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003488:	4770      	bx	lr
 800348a:	bf00      	nop
 800348c:	20000120 	.word	0x20000120
 8003490:	20000188 	.word	0x20000188

08003494 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
 80034a0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00b      	beq.n	80034c4 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 80034ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b0:	f383 8811 	msr	BASEPRI, r3
 80034b4:	f3bf 8f6f 	isb	sy
 80034b8:	f3bf 8f4f 	dsb	sy
 80034bc:	613b      	str	r3, [r7, #16]
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 80034c4:	f7ff fc4c 	bl	8002d60 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 80034c8:	f000 fc54 	bl	8003d74 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80034cc:	4b3b      	ldr	r3, [pc, #236]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4413      	add	r3, r2
 80034d4:	3354      	adds	r3, #84	@ 0x54
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d018      	beq.n	8003510 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 80034de:	4b37      	ldr	r3, [pc, #220]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	68fa      	ldr	r2, [r7, #12]
 80034e4:	3214      	adds	r2, #20
 80034e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	43d2      	mvns	r2, r2
 80034ee:	4011      	ands	r1, r2
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	3214      	adds	r2, #20
 80034f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 80034f8:	4b30      	ldr	r3, [pc, #192]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	4413      	add	r3, r2
 8003500:	3354      	adds	r3, #84	@ 0x54
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 800350c:	2301      	movs	r3, #1
 800350e:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003510:	f000 fc62 	bl	8003dd8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d103      	bne.n	8003522 <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800351a:	2101      	movs	r1, #1
 800351c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800351e:	f000 f985 	bl	800382c <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8003522:	f7ff fc2b 	bl	8002d7c <xTaskResumeAll>
 8003526:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10a      	bne.n	8003544 <xTaskGenericNotifyWait+0xb0>
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d107      	bne.n	8003544 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8003534:	4b22      	ldr	r3, [pc, #136]	@ (80035c0 <xTaskGenericNotifyWait+0x12c>)
 8003536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800353a:	601a      	str	r2, [r3, #0]
 800353c:	f3bf 8f4f 	dsb	sy
 8003540:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8003544:	f000 fc16 	bl	8003d74 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d007      	beq.n	800355e <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800354e:	4b1b      	ldr	r3, [pc, #108]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	68fa      	ldr	r2, [r7, #12]
 8003554:	3214      	adds	r2, #20
 8003556:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800355e:	4b17      	ldr	r3, [pc, #92]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4413      	add	r3, r2
 8003566:	3354      	adds	r3, #84	@ 0x54
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d002      	beq.n	8003576 <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003570:	2300      	movs	r3, #0
 8003572:	61fb      	str	r3, [r7, #28]
 8003574:	e00e      	b.n	8003594 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8003576:	4b11      	ldr	r3, [pc, #68]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	3214      	adds	r2, #20
 800357e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	43d2      	mvns	r2, r2
 8003586:	4011      	ands	r1, r2
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	3214      	adds	r2, #20
 800358c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003590:	2301      	movs	r3, #1
 8003592:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <xTaskGenericNotifyWait+0x128>)
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	3354      	adds	r3, #84	@ 0x54
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80035a2:	f000 fc19 	bl	8003dd8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 80035a6:	69fb      	ldr	r3, [r7, #28]
 80035a8:	4619      	mov	r1, r3
 80035aa:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80035ae:	f002 fd55 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80035b2:	69fb      	ldr	r3, [r7, #28]
    }
 80035b4:	4618      	mov	r0, r3
 80035b6:	3720      	adds	r7, #32
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	20000090 	.word	0x20000090
 80035c0:	e000ed04 	.word	0xe000ed04

080035c4 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b08e      	sub	sp, #56	@ 0x38
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 80035d2:	2301      	movs	r3, #1
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <xTaskGenericNotify+0x30>
    __asm volatile
 80035dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	623b      	str	r3, [r7, #32]
}
 80035ee:	bf00      	nop
 80035f0:	bf00      	nop
 80035f2:	e7fd      	b.n	80035f0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10b      	bne.n	8003612 <xTaskGenericNotify+0x4e>
    __asm volatile
 80035fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fe:	f383 8811 	msr	BASEPRI, r3
 8003602:	f3bf 8f6f 	isb	sy
 8003606:	f3bf 8f4f 	dsb	sy
 800360a:	61fb      	str	r3, [r7, #28]
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	e7fd      	b.n	800360e <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8003616:	f000 fbad 	bl	8003d74 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800361a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800361c:	2b00      	cmp	r3, #0
 800361e:	d006      	beq.n	800362e <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	3214      	adds	r2, #20
 8003626:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800362a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800362c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800362e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4413      	add	r3, r2
 8003634:	3354      	adds	r3, #84	@ 0x54
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800363c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4413      	add	r3, r2
 8003642:	3354      	adds	r3, #84	@ 0x54
 8003644:	2202      	movs	r2, #2
 8003646:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003648:	78fb      	ldrb	r3, [r7, #3]
 800364a:	2b04      	cmp	r3, #4
 800364c:	d83b      	bhi.n	80036c6 <xTaskGenericNotify+0x102>
 800364e:	a201      	add	r2, pc, #4	@ (adr r2, 8003654 <xTaskGenericNotify+0x90>)
 8003650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003654:	080036e7 	.word	0x080036e7
 8003658:	08003669 	.word	0x08003669
 800365c:	08003685 	.word	0x08003685
 8003660:	0800369d 	.word	0x0800369d
 8003664:	080036ab 	.word	0x080036ab
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	3214      	adds	r2, #20
 800366e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	ea42 0103 	orr.w	r1, r2, r3
 8003678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	3214      	adds	r2, #20
 800367e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003682:	e033      	b.n	80036ec <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	3214      	adds	r2, #20
 800368a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800368e:	1c59      	adds	r1, r3, #1
 8003690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003692:	68ba      	ldr	r2, [r7, #8]
 8003694:	3214      	adds	r2, #20
 8003696:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800369a:	e027      	b.n	80036ec <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800369c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369e:	68ba      	ldr	r2, [r7, #8]
 80036a0:	3214      	adds	r2, #20
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80036a8:	e020      	b.n	80036ec <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80036aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d006      	beq.n	80036c0 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80036b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	3214      	adds	r2, #20
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80036be:	e015      	b.n	80036ec <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 80036c4:	e012      	b.n	80036ec <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80036c6:	4b54      	ldr	r3, [pc, #336]	@ (8003818 <xTaskGenericNotify+0x254>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <xTaskGenericNotify+0x126>
    __asm volatile
 80036ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d2:	f383 8811 	msr	BASEPRI, r3
 80036d6:	f3bf 8f6f 	isb	sy
 80036da:	f3bf 8f4f 	dsb	sy
 80036de:	61bb      	str	r3, [r7, #24]
}
 80036e0:	bf00      	nop
 80036e2:	bf00      	nop
 80036e4:	e7fd      	b.n	80036e2 <xTaskGenericNotify+0x11e>
                    break;
 80036e6:	bf00      	nop
 80036e8:	e000      	b.n	80036ec <xTaskGenericNotify+0x128>

                    break;
 80036ea:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80036ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 8083 	bne.w	80037fc <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003702:	68d2      	ldr	r2, [r2, #12]
 8003704:	609a      	str	r2, [r3, #8]
 8003706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	605a      	str	r2, [r3, #4]
 8003710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003712:	685a      	ldr	r2, [r3, #4]
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	3304      	adds	r3, #4
 8003718:	429a      	cmp	r2, r3
 800371a:	d103      	bne.n	8003724 <xTaskGenericNotify+0x160>
 800371c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	2200      	movs	r2, #0
 8003728:	615a      	str	r2, [r3, #20]
 800372a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1e5a      	subs	r2, r3, #1
 8003730:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003732:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003736:	4618      	mov	r0, r3
 8003738:	f002 fd88 	bl	800624c <SEGGER_SYSVIEW_OnTaskStartReady>
 800373c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003740:	2201      	movs	r2, #1
 8003742:	409a      	lsls	r2, r3
 8003744:	4b35      	ldr	r3, [pc, #212]	@ (800381c <xTaskGenericNotify+0x258>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4313      	orrs	r3, r2
 800374a:	4a34      	ldr	r2, [pc, #208]	@ (800381c <xTaskGenericNotify+0x258>)
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003750:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003752:	4933      	ldr	r1, [pc, #204]	@ (8003820 <xTaskGenericNotify+0x25c>)
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3304      	adds	r3, #4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	627b      	str	r3, [r7, #36]	@ 0x24
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003768:	609a      	str	r2, [r3, #8]
 800376a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003770:	60da      	str	r2, [r3, #12]
 8003772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003778:	3204      	adds	r2, #4
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800377e:	1d1a      	adds	r2, r3, #4
 8003780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4a23      	ldr	r2, [pc, #140]	@ (8003820 <xTaskGenericNotify+0x25c>)
 8003792:	441a      	add	r2, r3
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	615a      	str	r2, [r3, #20]
 8003798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	4920      	ldr	r1, [pc, #128]	@ (8003820 <xTaskGenericNotify+0x25c>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80037ae:	1c59      	adds	r1, r3, #1
 80037b0:	481b      	ldr	r0, [pc, #108]	@ (8003820 <xTaskGenericNotify+0x25c>)
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4403      	add	r3, r0
 80037bc:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80037be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <xTaskGenericNotify+0x21a>
    __asm volatile
 80037c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ca:	f383 8811 	msr	BASEPRI, r3
 80037ce:	f3bf 8f6f 	isb	sy
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	617b      	str	r3, [r7, #20]
}
 80037d8:	bf00      	nop
 80037da:	bf00      	nop
 80037dc:	e7fd      	b.n	80037da <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 80037de:	4b11      	ldr	r3, [pc, #68]	@ (8003824 <xTaskGenericNotify+0x260>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <xTaskGenericNotify+0x238>
 80037ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003828 <xTaskGenericNotify+0x264>)
 80037ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	f3bf 8f4f 	dsb	sy
 80037f8:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80037fc:	f000 faec 	bl	8003dd8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 8003800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003802:	4619      	mov	r1, r3
 8003804:	f240 1001 	movw	r0, #257	@ 0x101
 8003808:	f002 fc28 	bl	800605c <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800380c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800380e:	4618      	mov	r0, r3
 8003810:	3738      	adds	r7, #56	@ 0x38
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	2000016c 	.word	0x2000016c
 800381c:	20000170 	.word	0x20000170
 8003820:	20000094 	.word	0x20000094
 8003824:	20000090 	.word	0x20000090
 8003828:	e000ed04 	.word	0xe000ed04

0800382c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003836:	4b3d      	ldr	r3, [pc, #244]	@ (800392c <prvAddCurrentTaskToDelayedList+0x100>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 800383c:	4b3c      	ldr	r3, [pc, #240]	@ (8003930 <prvAddCurrentTaskToDelayedList+0x104>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003842:	4b3c      	ldr	r3, [pc, #240]	@ (8003934 <prvAddCurrentTaskToDelayedList+0x108>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003848:	4b3b      	ldr	r3, [pc, #236]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe fda6 	bl	80023a0 <uxListRemove>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d10b      	bne.n	8003872 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800385a:	4b37      	ldr	r3, [pc, #220]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003860:	2201      	movs	r2, #1
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	4b34      	ldr	r3, [pc, #208]	@ (800393c <prvAddCurrentTaskToDelayedList+0x110>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4013      	ands	r3, r2
 800386e:	4a33      	ldr	r2, [pc, #204]	@ (800393c <prvAddCurrentTaskToDelayedList+0x110>)
 8003870:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003878:	d124      	bne.n	80038c4 <prvAddCurrentTaskToDelayedList+0x98>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d021      	beq.n	80038c4 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003880:	4b2f      	ldr	r3, [pc, #188]	@ (8003940 <prvAddCurrentTaskToDelayedList+0x114>)
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	613b      	str	r3, [r7, #16]
 8003886:	4b2c      	ldr	r3, [pc, #176]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	609a      	str	r2, [r3, #8]
 800388e:	4b2a      	ldr	r3, [pc, #168]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	6892      	ldr	r2, [r2, #8]
 8003896:	60da      	str	r2, [r3, #12]
 8003898:	4b27      	ldr	r3, [pc, #156]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	3204      	adds	r2, #4
 80038a2:	605a      	str	r2, [r3, #4]
 80038a4:	4b24      	ldr	r3, [pc, #144]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	1d1a      	adds	r2, r3, #4
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	609a      	str	r2, [r3, #8]
 80038ae:	4b22      	ldr	r3, [pc, #136]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a23      	ldr	r2, [pc, #140]	@ (8003940 <prvAddCurrentTaskToDelayedList+0x114>)
 80038b4:	615a      	str	r2, [r3, #20]
 80038b6:	4b22      	ldr	r3, [pc, #136]	@ (8003940 <prvAddCurrentTaskToDelayedList+0x114>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	3301      	adds	r3, #1
 80038bc:	4a20      	ldr	r2, [pc, #128]	@ (8003940 <prvAddCurrentTaskToDelayedList+0x114>)
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038c2:	e02e      	b.n	8003922 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80038c4:	69fa      	ldr	r2, [r7, #28]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4413      	add	r3, r2
 80038ca:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d20d      	bcs.n	80038f8 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80038dc:	4b16      	ldr	r3, [pc, #88]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2104      	movs	r1, #4
 80038e2:	4618      	mov	r0, r3
 80038e4:	f002 fcf4 	bl	80062d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80038e8:	4b13      	ldr	r3, [pc, #76]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3304      	adds	r3, #4
 80038ee:	4619      	mov	r1, r3
 80038f0:	6978      	ldr	r0, [r7, #20]
 80038f2:	f7fe fd1a 	bl	800232a <vListInsert>
}
 80038f6:	e014      	b.n	8003922 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80038f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2104      	movs	r1, #4
 80038fe:	4618      	mov	r0, r3
 8003900:	f002 fce6 	bl	80062d0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003904:	4b0c      	ldr	r3, [pc, #48]	@ (8003938 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3304      	adds	r3, #4
 800390a:	4619      	mov	r1, r3
 800390c:	69b8      	ldr	r0, [r7, #24]
 800390e:	f7fe fd0c 	bl	800232a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003912:	4b0c      	ldr	r3, [pc, #48]	@ (8003944 <prvAddCurrentTaskToDelayedList+0x118>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	429a      	cmp	r2, r3
 800391a:	d202      	bcs.n	8003922 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 800391c:	4a09      	ldr	r2, [pc, #36]	@ (8003944 <prvAddCurrentTaskToDelayedList+0x118>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	bf00      	nop
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	2000016c 	.word	0x2000016c
 8003930:	20000120 	.word	0x20000120
 8003934:	20000124 	.word	0x20000124
 8003938:	20000090 	.word	0x20000090
 800393c:	20000170 	.word	0x20000170
 8003940:	20000154 	.word	0x20000154
 8003944:	20000188 	.word	0x20000188

08003948 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003948:	b480      	push	{r7}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4a07      	ldr	r2, [pc, #28]	@ (8003974 <vApplicationGetIdleTaskMemory+0x2c>)
 8003958:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	4a06      	ldr	r2, [pc, #24]	@ (8003978 <vApplicationGetIdleTaskMemory+0x30>)
 800395e:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2282      	movs	r2, #130	@ 0x82
 8003964:	601a      	str	r2, [r3, #0]
    }
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	20000194 	.word	0x20000194
 8003978:	200001ec 	.word	0x200001ec

0800397c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	3b04      	subs	r3, #4
 800398c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003994:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	3b04      	subs	r3, #4
 800399a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	f023 0201 	bic.w	r2, r3, #1
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	3b04      	subs	r3, #4
 80039aa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80039ac:	4a0c      	ldr	r2, [pc, #48]	@ (80039e0 <pxPortInitialiseStack+0x64>)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	3b14      	subs	r3, #20
 80039b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	3b04      	subs	r3, #4
 80039c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f06f 0202 	mvn.w	r2, #2
 80039ca:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3b20      	subs	r3, #32
 80039d0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80039d2:	68fb      	ldr	r3, [r7, #12]
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	080039e5 	.word	0x080039e5

080039e4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80039e4:	b480      	push	{r7}
 80039e6:	b085      	sub	sp, #20
 80039e8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80039ee:	4b13      	ldr	r3, [pc, #76]	@ (8003a3c <prvTaskExitError+0x58>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039f6:	d00b      	beq.n	8003a10 <prvTaskExitError+0x2c>
    __asm volatile
 80039f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fc:	f383 8811 	msr	BASEPRI, r3
 8003a00:	f3bf 8f6f 	isb	sy
 8003a04:	f3bf 8f4f 	dsb	sy
 8003a08:	60fb      	str	r3, [r7, #12]
}
 8003a0a:	bf00      	nop
 8003a0c:	bf00      	nop
 8003a0e:	e7fd      	b.n	8003a0c <prvTaskExitError+0x28>
    __asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	60bb      	str	r3, [r7, #8]
}
 8003a22:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003a24:	bf00      	nop
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0fc      	beq.n	8003a26 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003a2c:	bf00      	nop
 8003a2e:	bf00      	nop
 8003a30:	3714      	adds	r7, #20
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	20000010 	.word	0x20000010

08003a40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003a40:	4b07      	ldr	r3, [pc, #28]	@ (8003a60 <pxCurrentTCBConst2>)
 8003a42:	6819      	ldr	r1, [r3, #0]
 8003a44:	6808      	ldr	r0, [r1, #0]
 8003a46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a4a:	f380 8809 	msr	PSP, r0
 8003a4e:	f3bf 8f6f 	isb	sy
 8003a52:	f04f 0000 	mov.w	r0, #0
 8003a56:	f380 8811 	msr	BASEPRI, r0
 8003a5a:	4770      	bx	lr
 8003a5c:	f3af 8000 	nop.w

08003a60 <pxCurrentTCBConst2>:
 8003a60:	20000090 	.word	0x20000090
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop

08003a68 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003a68:	4808      	ldr	r0, [pc, #32]	@ (8003a8c <prvPortStartFirstTask+0x24>)
 8003a6a:	6800      	ldr	r0, [r0, #0]
 8003a6c:	6800      	ldr	r0, [r0, #0]
 8003a6e:	f380 8808 	msr	MSP, r0
 8003a72:	f04f 0000 	mov.w	r0, #0
 8003a76:	f380 8814 	msr	CONTROL, r0
 8003a7a:	b662      	cpsie	i
 8003a7c:	b661      	cpsie	f
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	f3bf 8f6f 	isb	sy
 8003a86:	df00      	svc	0
 8003a88:	bf00      	nop
 8003a8a:	0000      	.short	0x0000
 8003a8c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8003a90:	bf00      	nop
 8003a92:	bf00      	nop

08003a94 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b08c      	sub	sp, #48	@ 0x30
 8003a98:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003a9a:	4b69      	ldr	r3, [pc, #420]	@ (8003c40 <xPortStartScheduler+0x1ac>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a69      	ldr	r2, [pc, #420]	@ (8003c44 <xPortStartScheduler+0x1b0>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10b      	bne.n	8003abc <xPortStartScheduler+0x28>
    __asm volatile
 8003aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa8:	f383 8811 	msr	BASEPRI, r3
 8003aac:	f3bf 8f6f 	isb	sy
 8003ab0:	f3bf 8f4f 	dsb	sy
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	e7fd      	b.n	8003ab8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003abc:	4b60      	ldr	r3, [pc, #384]	@ (8003c40 <xPortStartScheduler+0x1ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a61      	ldr	r2, [pc, #388]	@ (8003c48 <xPortStartScheduler+0x1b4>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10b      	bne.n	8003ade <xPortStartScheduler+0x4a>
    __asm volatile
 8003ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aca:	f383 8811 	msr	BASEPRI, r3
 8003ace:	f3bf 8f6f 	isb	sy
 8003ad2:	f3bf 8f4f 	dsb	sy
 8003ad6:	623b      	str	r3, [r7, #32]
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	e7fd      	b.n	8003ada <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8003ade:	4b5b      	ldr	r3, [pc, #364]	@ (8003c4c <xPortStartScheduler+0x1b8>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ae6:	332c      	adds	r3, #44	@ 0x2c
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a59      	ldr	r2, [pc, #356]	@ (8003c50 <xPortStartScheduler+0x1bc>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d00b      	beq.n	8003b08 <xPortStartScheduler+0x74>
    __asm volatile
 8003af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003af4:	f383 8811 	msr	BASEPRI, r3
 8003af8:	f3bf 8f6f 	isb	sy
 8003afc:	f3bf 8f4f 	dsb	sy
 8003b00:	61fb      	str	r3, [r7, #28]
}
 8003b02:	bf00      	nop
 8003b04:	bf00      	nop
 8003b06:	e7fd      	b.n	8003b04 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b0a:	3338      	adds	r3, #56	@ 0x38
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a51      	ldr	r2, [pc, #324]	@ (8003c54 <xPortStartScheduler+0x1c0>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <xPortStartScheduler+0x98>
    __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	61bb      	str	r3, [r7, #24]
}
 8003b26:	bf00      	nop
 8003b28:	bf00      	nop
 8003b2a:	e7fd      	b.n	8003b28 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003b30:	4b49      	ldr	r3, [pc, #292]	@ (8003c58 <xPortStartScheduler+0x1c4>)
 8003b32:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	22ff      	movs	r2, #255	@ 0xff
 8003b40:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	b2db      	uxtb	r3, r3
 8003b4e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b52:	b2da      	uxtb	r2, r3
 8003b54:	4b41      	ldr	r3, [pc, #260]	@ (8003c5c <xPortStartScheduler+0x1c8>)
 8003b56:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003b58:	4b40      	ldr	r3, [pc, #256]	@ (8003c5c <xPortStartScheduler+0x1c8>)
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10b      	bne.n	8003b78 <xPortStartScheduler+0xe4>
    __asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	617b      	str	r3, [r7, #20]
}
 8003b72:	bf00      	nop
 8003b74:	bf00      	nop
 8003b76:	e7fd      	b.n	8003b74 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003b78:	79fb      	ldrb	r3, [r7, #7]
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d013      	beq.n	8003bae <xPortStartScheduler+0x11a>
    __asm volatile
 8003b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b8a:	f383 8811 	msr	BASEPRI, r3
 8003b8e:	f3bf 8f6f 	isb	sy
 8003b92:	f3bf 8f4f 	dsb	sy
 8003b96:	613b      	str	r3, [r7, #16]
}
 8003b98:	bf00      	nop
 8003b9a:	bf00      	nop
 8003b9c:	e7fd      	b.n	8003b9a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ba4:	79fb      	ldrb	r3, [r7, #7]
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bb6:	2b80      	cmp	r3, #128	@ 0x80
 8003bb8:	d0f1      	beq.n	8003b9e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d103      	bne.n	8003bc8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003bc0:	4b27      	ldr	r3, [pc, #156]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	601a      	str	r2, [r3, #0]
 8003bc6:	e004      	b.n	8003bd2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	f1c3 0307 	rsb	r3, r3, #7
 8003bce:	4a24      	ldr	r2, [pc, #144]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003bd0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003bd2:	4b23      	ldr	r3, [pc, #140]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	021b      	lsls	r3, r3, #8
 8003bd8:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003bda:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003bdc:	4b20      	ldr	r3, [pc, #128]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003be4:	4a1e      	ldr	r2, [pc, #120]	@ (8003c60 <xPortStartScheduler+0x1cc>)
 8003be6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c64 <xPortStartScheduler+0x1d0>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <xPortStartScheduler+0x1d0>)
 8003bf6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003bfa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003bfc:	4b19      	ldr	r3, [pc, #100]	@ (8003c64 <xPortStartScheduler+0x1d0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a18      	ldr	r2, [pc, #96]	@ (8003c64 <xPortStartScheduler+0x1d0>)
 8003c02:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003c06:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003c08:	4b17      	ldr	r3, [pc, #92]	@ (8003c68 <xPortStartScheduler+0x1d4>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003c0e:	f000 f96d 	bl	8003eec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003c12:	4b16      	ldr	r3, [pc, #88]	@ (8003c6c <xPortStartScheduler+0x1d8>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003c18:	f000 f98c 	bl	8003f34 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003c1c:	4b14      	ldr	r3, [pc, #80]	@ (8003c70 <xPortStartScheduler+0x1dc>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a13      	ldr	r2, [pc, #76]	@ (8003c70 <xPortStartScheduler+0x1dc>)
 8003c22:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003c26:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003c28:	f7ff ff1e 	bl	8003a68 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003c2c:	f7ff faf0 	bl	8003210 <vTaskSwitchContext>
    prvTaskExitError();
 8003c30:	f7ff fed8 	bl	80039e4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3730      	adds	r7, #48	@ 0x30
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	e000ed00 	.word	0xe000ed00
 8003c44:	410fc271 	.word	0x410fc271
 8003c48:	410fc270 	.word	0x410fc270
 8003c4c:	e000ed08 	.word	0xe000ed08
 8003c50:	08003a41 	.word	0x08003a41
 8003c54:	08003e31 	.word	0x08003e31
 8003c58:	e000e400 	.word	0xe000e400
 8003c5c:	200003f4 	.word	0x200003f4
 8003c60:	200003f8 	.word	0x200003f8
 8003c64:	e000ed20 	.word	0xe000ed20
 8003c68:	e000ed1c 	.word	0xe000ed1c
 8003c6c:	20000010 	.word	0x20000010
 8003c70:	e000ef34 	.word	0xe000ef34

08003c74 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c7a:	4b38      	ldr	r3, [pc, #224]	@ (8003d5c <vInitPrioGroupValue+0xe8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a38      	ldr	r2, [pc, #224]	@ (8003d60 <vInitPrioGroupValue+0xec>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10b      	bne.n	8003c9c <vInitPrioGroupValue+0x28>
    __asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	613b      	str	r3, [r7, #16]
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c9c:	4b2f      	ldr	r3, [pc, #188]	@ (8003d5c <vInitPrioGroupValue+0xe8>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <vInitPrioGroupValue+0xf0>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d10b      	bne.n	8003cbe <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003ca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003caa:	f383 8811 	msr	BASEPRI, r3
 8003cae:	f3bf 8f6f 	isb	sy
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	60fb      	str	r3, [r7, #12]
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	e7fd      	b.n	8003cba <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8003d68 <vInitPrioGroupValue+0xf4>)
 8003cc0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	22ff      	movs	r2, #255	@ 0xff
 8003cce:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cd8:	78fb      	ldrb	r3, [r7, #3]
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ce0:	b2da      	uxtb	r2, r3
 8003ce2:	4b22      	ldr	r3, [pc, #136]	@ (8003d6c <vInitPrioGroupValue+0xf8>)
 8003ce4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ce6:	4b22      	ldr	r3, [pc, #136]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003ce8:	2207      	movs	r2, #7
 8003cea:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cec:	e009      	b.n	8003d02 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003cee:	4b20      	ldr	r3, [pc, #128]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	4a1e      	ldr	r2, [pc, #120]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003cf6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cf8:	78fb      	ldrb	r3, [r7, #3]
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d02:	78fb      	ldrb	r3, [r7, #3]
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d0a:	2b80      	cmp	r3, #128	@ 0x80
 8003d0c:	d0ef      	beq.n	8003cee <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003d0e:	4b18      	ldr	r3, [pc, #96]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1c3 0307 	rsb	r3, r3, #7
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d00b      	beq.n	8003d32 <vInitPrioGroupValue+0xbe>
    __asm volatile
 8003d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1e:	f383 8811 	msr	BASEPRI, r3
 8003d22:	f3bf 8f6f 	isb	sy
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	60bb      	str	r3, [r7, #8]
}
 8003d2c:	bf00      	nop
 8003d2e:	bf00      	nop
 8003d30:	e7fd      	b.n	8003d2e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d32:	4b0f      	ldr	r3, [pc, #60]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	021b      	lsls	r3, r3, #8
 8003d38:	4a0d      	ldr	r2, [pc, #52]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003d3a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d44:	4a0a      	ldr	r2, [pc, #40]	@ (8003d70 <vInitPrioGroupValue+0xfc>)
 8003d46:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	e000ed00 	.word	0xe000ed00
 8003d60:	410fc271 	.word	0x410fc271
 8003d64:	410fc270 	.word	0x410fc270
 8003d68:	e000e400 	.word	0xe000e400
 8003d6c:	200003f4 	.word	0x200003f4
 8003d70:	200003f8 	.word	0x200003f8

08003d74 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
    __asm volatile
 8003d7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d7e:	f383 8811 	msr	BASEPRI, r3
 8003d82:	f3bf 8f6f 	isb	sy
 8003d86:	f3bf 8f4f 	dsb	sy
 8003d8a:	607b      	str	r3, [r7, #4]
}
 8003d8c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003d8e:	4b10      	ldr	r3, [pc, #64]	@ (8003dd0 <vPortEnterCritical+0x5c>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	4a0e      	ldr	r2, [pc, #56]	@ (8003dd0 <vPortEnterCritical+0x5c>)
 8003d96:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003d98:	4b0d      	ldr	r3, [pc, #52]	@ (8003dd0 <vPortEnterCritical+0x5c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d110      	bne.n	8003dc2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003da0:	4b0c      	ldr	r3, [pc, #48]	@ (8003dd4 <vPortEnterCritical+0x60>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <vPortEnterCritical+0x4e>
    __asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	603b      	str	r3, [r7, #0]
}
 8003dbc:	bf00      	nop
 8003dbe:	bf00      	nop
 8003dc0:	e7fd      	b.n	8003dbe <vPortEnterCritical+0x4a>
    }
}
 8003dc2:	bf00      	nop
 8003dc4:	370c      	adds	r7, #12
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	20000010 	.word	0x20000010
 8003dd4:	e000ed04 	.word	0xe000ed04

08003dd8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003dde:	4b12      	ldr	r3, [pc, #72]	@ (8003e28 <vPortExitCritical+0x50>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <vPortExitCritical+0x26>
    __asm volatile
 8003de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	607b      	str	r3, [r7, #4]
}
 8003df8:	bf00      	nop
 8003dfa:	bf00      	nop
 8003dfc:	e7fd      	b.n	8003dfa <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003e28 <vPortExitCritical+0x50>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <vPortExitCritical+0x50>)
 8003e06:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003e08:	4b07      	ldr	r3, [pc, #28]	@ (8003e28 <vPortExitCritical+0x50>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d105      	bne.n	8003e1c <vPortExitCritical+0x44>
 8003e10:	2300      	movs	r3, #0
 8003e12:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8003e1a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr
 8003e28:	20000010 	.word	0x20000010
 8003e2c:	00000000 	.word	0x00000000

08003e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003e30:	f3ef 8009 	mrs	r0, PSP
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	4b15      	ldr	r3, [pc, #84]	@ (8003e90 <pxCurrentTCBConst>)
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	f01e 0f10 	tst.w	lr, #16
 8003e40:	bf08      	it	eq
 8003e42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003e46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	6010      	str	r0, [r2, #0]
 8003e4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003e50:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e54:	f380 8811 	msr	BASEPRI, r0
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f7ff f9d6 	bl	8003210 <vTaskSwitchContext>
 8003e64:	f04f 0000 	mov.w	r0, #0
 8003e68:	f380 8811 	msr	BASEPRI, r0
 8003e6c:	bc09      	pop	{r0, r3}
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	6808      	ldr	r0, [r1, #0]
 8003e72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e76:	f01e 0f10 	tst.w	lr, #16
 8003e7a:	bf08      	it	eq
 8003e7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003e80:	f380 8809 	msr	PSP, r0
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	4770      	bx	lr
 8003e8a:	bf00      	nop
 8003e8c:	f3af 8000 	nop.w

08003e90 <pxCurrentTCBConst>:
 8003e90:	20000090 	.word	0x20000090
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop

08003e98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
    __asm volatile
 8003e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea2:	f383 8811 	msr	BASEPRI, r3
 8003ea6:	f3bf 8f6f 	isb	sy
 8003eaa:	f3bf 8f4f 	dsb	sy
 8003eae:	607b      	str	r3, [r7, #4]
}
 8003eb0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003eb2:	f002 f81d 	bl	8005ef0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003eb6:	f7ff f889 	bl	8002fcc <xTaskIncrementTick>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d006      	beq.n	8003ece <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003ec0:	f002 f874 	bl	8005fac <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003ec4:	4b08      	ldr	r3, [pc, #32]	@ (8003ee8 <SysTick_Handler+0x50>)
 8003ec6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	e001      	b.n	8003ed2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8003ece:	f002 f851 	bl	8005f74 <SEGGER_SYSVIEW_RecordExitISR>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	f383 8811 	msr	BASEPRI, r3
}
 8003edc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ef6:	4b0b      	ldr	r3, [pc, #44]	@ (8003f24 <vPortSetupTimerInterrupt+0x38>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003efc:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <vPortSetupTimerInterrupt+0x3c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <vPortSetupTimerInterrupt+0x40>)
 8003f02:	fba2 2303 	umull	r2, r3, r2, r3
 8003f06:	099b      	lsrs	r3, r3, #6
 8003f08:	4a09      	ldr	r2, [pc, #36]	@ (8003f30 <vPortSetupTimerInterrupt+0x44>)
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003f0e:	4b04      	ldr	r3, [pc, #16]	@ (8003f20 <vPortSetupTimerInterrupt+0x34>)
 8003f10:	2207      	movs	r2, #7
 8003f12:	601a      	str	r2, [r3, #0]
}
 8003f14:	bf00      	nop
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	e000e010 	.word	0xe000e010
 8003f24:	e000e018 	.word	0xe000e018
 8003f28:	20000000 	.word	0x20000000
 8003f2c:	10624dd3 	.word	0x10624dd3
 8003f30:	e000e014 	.word	0xe000e014

08003f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003f34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003f44 <vPortEnableVFP+0x10>
 8003f38:	6801      	ldr	r1, [r0, #0]
 8003f3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003f3e:	6001      	str	r1, [r0, #0]
 8003f40:	4770      	bx	lr
 8003f42:	0000      	.short	0x0000
 8003f44:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop

08003f4c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003f52:	f3ef 8305 	mrs	r3, IPSR
 8003f56:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2b0f      	cmp	r3, #15
 8003f5c:	d915      	bls.n	8003f8a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f5e:	4a18      	ldr	r2, [pc, #96]	@ (8003fc0 <vPortValidateInterruptPriority+0x74>)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f68:	4b16      	ldr	r3, [pc, #88]	@ (8003fc4 <vPortValidateInterruptPriority+0x78>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	7afa      	ldrb	r2, [r7, #11]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d20b      	bcs.n	8003f8a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	607b      	str	r3, [r7, #4]
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	e7fd      	b.n	8003f86 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <vPortValidateInterruptPriority+0x7c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f92:	4b0e      	ldr	r3, [pc, #56]	@ (8003fcc <vPortValidateInterruptPriority+0x80>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d90b      	bls.n	8003fb2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8003f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	603b      	str	r3, [r7, #0]
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	e7fd      	b.n	8003fae <vPortValidateInterruptPriority+0x62>
    }
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	e000e3f0 	.word	0xe000e3f0
 8003fc4:	200003f4 	.word	0x200003f4
 8003fc8:	e000ed0c 	.word	0xe000ed0c
 8003fcc:	200003f8 	.word	0x200003f8

08003fd0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08e      	sub	sp, #56	@ 0x38
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d022      	beq.n	8004028 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	43db      	mvns	r3, r3
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d81b      	bhi.n	8004024 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003fec:	2208      	movs	r2, #8
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f003 0307 	and.w	r3, r3, #7
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d014      	beq.n	8004028 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f003 0307 	and.w	r3, r3, #7
 8004004:	f1c3 0308 	rsb	r3, r3, #8
 8004008:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800400a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800400c:	43db      	mvns	r3, r3
 800400e:	687a      	ldr	r2, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	d804      	bhi.n	800401e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004018:	4413      	add	r3, r2
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e004      	b.n	8004028 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	607b      	str	r3, [r7, #4]
 8004022:	e001      	b.n	8004028 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8004024:	2300      	movs	r3, #0
 8004026:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8004028:	f7fe fe9a 	bl	8002d60 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800402c:	4b7a      	ldr	r3, [pc, #488]	@ (8004218 <pvPortMalloc+0x248>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8004034:	f000 f978 	bl	8004328 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	f2c0 80d3 	blt.w	80041e6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	f000 80cf 	beq.w	80041e6 <pvPortMalloc+0x216>
 8004048:	4b74      	ldr	r3, [pc, #464]	@ (800421c <pvPortMalloc+0x24c>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	429a      	cmp	r2, r3
 8004050:	f200 80c9 	bhi.w	80041e6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004054:	4b72      	ldr	r3, [pc, #456]	@ (8004220 <pvPortMalloc+0x250>)
 8004056:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8004058:	4b71      	ldr	r3, [pc, #452]	@ (8004220 <pvPortMalloc+0x250>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	4a70      	ldr	r2, [pc, #448]	@ (8004224 <pvPortMalloc+0x254>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d305      	bcc.n	8004072 <pvPortMalloc+0xa2>
 8004066:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004068:	4a6f      	ldr	r2, [pc, #444]	@ (8004228 <pvPortMalloc+0x258>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d801      	bhi.n	8004072 <pvPortMalloc+0xa2>
 800406e:	2301      	movs	r3, #1
 8004070:	e000      	b.n	8004074 <pvPortMalloc+0xa4>
 8004072:	2300      	movs	r3, #0
 8004074:	2b00      	cmp	r3, #0
 8004076:	d129      	bne.n	80040cc <pvPortMalloc+0xfc>
    __asm volatile
 8004078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800407c:	f383 8811 	msr	BASEPRI, r3
 8004080:	f3bf 8f6f 	isb	sy
 8004084:	f3bf 8f4f 	dsb	sy
 8004088:	623b      	str	r3, [r7, #32]
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	e7fd      	b.n	800408c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8004090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004092:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8004094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800409a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409c:	4a61      	ldr	r2, [pc, #388]	@ (8004224 <pvPortMalloc+0x254>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d305      	bcc.n	80040ae <pvPortMalloc+0xde>
 80040a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a4:	4a60      	ldr	r2, [pc, #384]	@ (8004228 <pvPortMalloc+0x258>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d801      	bhi.n	80040ae <pvPortMalloc+0xde>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <pvPortMalloc+0xe0>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d10b      	bne.n	80040cc <pvPortMalloc+0xfc>
    __asm volatile
 80040b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b8:	f383 8811 	msr	BASEPRI, r3
 80040bc:	f3bf 8f6f 	isb	sy
 80040c0:	f3bf 8f4f 	dsb	sy
 80040c4:	61fb      	str	r3, [r7, #28]
}
 80040c6:	bf00      	nop
 80040c8:	bf00      	nop
 80040ca:	e7fd      	b.n	80040c8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80040cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d903      	bls.n	80040de <pvPortMalloc+0x10e>
 80040d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1d8      	bne.n	8004090 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80040de:	4b4e      	ldr	r3, [pc, #312]	@ (8004218 <pvPortMalloc+0x248>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d07e      	beq.n	80041e6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80040e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2208      	movs	r2, #8
 80040ee:	4413      	add	r3, r2
 80040f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80040f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004224 <pvPortMalloc+0x254>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d305      	bcc.n	8004106 <pvPortMalloc+0x136>
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	4a4a      	ldr	r2, [pc, #296]	@ (8004228 <pvPortMalloc+0x258>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d801      	bhi.n	8004106 <pvPortMalloc+0x136>
 8004102:	2301      	movs	r3, #1
 8004104:	e000      	b.n	8004108 <pvPortMalloc+0x138>
 8004106:	2300      	movs	r3, #0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10b      	bne.n	8004124 <pvPortMalloc+0x154>
    __asm volatile
 800410c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004110:	f383 8811 	msr	BASEPRI, r3
 8004114:	f3bf 8f6f 	isb	sy
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	61bb      	str	r3, [r7, #24]
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	e7fd      	b.n	8004120 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800412a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800412c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	429a      	cmp	r2, r3
 8004134:	d90b      	bls.n	800414e <pvPortMalloc+0x17e>
    __asm volatile
 8004136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800413a:	f383 8811 	msr	BASEPRI, r3
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	f3bf 8f4f 	dsb	sy
 8004146:	617b      	str	r3, [r7, #20]
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	e7fd      	b.n	800414a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800414e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004150:	685a      	ldr	r2, [r3, #4]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	1ad2      	subs	r2, r2, r3
 8004156:	2308      	movs	r3, #8
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	429a      	cmp	r2, r3
 800415c:	d924      	bls.n	80041a8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800415e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4413      	add	r3, r2
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	f003 0307 	and.w	r3, r3, #7
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00b      	beq.n	8004188 <pvPortMalloc+0x1b8>
    __asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	613b      	str	r3, [r7, #16]
}
 8004182:	bf00      	nop
 8004184:	bf00      	nop
 8004186:	e7fd      	b.n	8004184 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004192:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800419a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041a0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80041a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041a6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	@ (800421c <pvPortMalloc+0x24c>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	4a1a      	ldr	r2, [pc, #104]	@ (800421c <pvPortMalloc+0x24c>)
 80041b4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041b6:	4b19      	ldr	r3, [pc, #100]	@ (800421c <pvPortMalloc+0x24c>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b1c      	ldr	r3, [pc, #112]	@ (800422c <pvPortMalloc+0x25c>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d203      	bcs.n	80041ca <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041c2:	4b16      	ldr	r3, [pc, #88]	@ (800421c <pvPortMalloc+0x24c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a19      	ldr	r2, [pc, #100]	@ (800422c <pvPortMalloc+0x25c>)
 80041c8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80041ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80041d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	2200      	movs	r2, #0
 80041da:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80041dc:	4b14      	ldr	r3, [pc, #80]	@ (8004230 <pvPortMalloc+0x260>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3301      	adds	r3, #1
 80041e2:	4a13      	ldr	r2, [pc, #76]	@ (8004230 <pvPortMalloc+0x260>)
 80041e4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80041e6:	f7fe fdc9 	bl	8002d7c <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ec:	f003 0307 	and.w	r3, r3, #7
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <pvPortMalloc+0x23c>
    __asm volatile
 80041f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f8:	f383 8811 	msr	BASEPRI, r3
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	f3bf 8f4f 	dsb	sy
 8004204:	60fb      	str	r3, [r7, #12]
}
 8004206:	bf00      	nop
 8004208:	bf00      	nop
 800420a:	e7fd      	b.n	8004208 <pvPortMalloc+0x238>
    return pvReturn;
 800420c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800420e:	4618      	mov	r0, r3
 8004210:	3738      	adds	r7, #56	@ 0x38
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20019404 	.word	0x20019404
 800421c:	20019408 	.word	0x20019408
 8004220:	200193fc 	.word	0x200193fc
 8004224:	200003fc 	.word	0x200003fc
 8004228:	200193fb 	.word	0x200193fb
 800422c:	2001940c 	.word	0x2001940c
 8004230:	20019410 	.word	0x20019410

08004234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d064      	beq.n	8004310 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004246:	2308      	movs	r3, #8
 8004248:	425b      	negs	r3, r3
 800424a:	69fa      	ldr	r2, [r7, #28]
 800424c:	4413      	add	r3, r2
 800424e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	4a30      	ldr	r2, [pc, #192]	@ (8004318 <vPortFree+0xe4>)
 8004258:	4293      	cmp	r3, r2
 800425a:	d305      	bcc.n	8004268 <vPortFree+0x34>
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	4a2f      	ldr	r2, [pc, #188]	@ (800431c <vPortFree+0xe8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d801      	bhi.n	8004268 <vPortFree+0x34>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <vPortFree+0x36>
 8004268:	2300      	movs	r3, #0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10b      	bne.n	8004286 <vPortFree+0x52>
    __asm volatile
 800426e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004272:	f383 8811 	msr	BASEPRI, r3
 8004276:	f3bf 8f6f 	isb	sy
 800427a:	f3bf 8f4f 	dsb	sy
 800427e:	617b      	str	r3, [r7, #20]
}
 8004280:	bf00      	nop
 8004282:	bf00      	nop
 8004284:	e7fd      	b.n	8004282 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004286:	69bb      	ldr	r3, [r7, #24]
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	db0b      	blt.n	80042a6 <vPortFree+0x72>
    __asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	613b      	str	r3, [r7, #16]
}
 80042a0:	bf00      	nop
 80042a2:	bf00      	nop
 80042a4:	e7fd      	b.n	80042a2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00b      	beq.n	80042c6 <vPortFree+0x92>
    __asm volatile
 80042ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b2:	f383 8811 	msr	BASEPRI, r3
 80042b6:	f3bf 8f6f 	isb	sy
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	60fb      	str	r3, [r7, #12]
}
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	e7fd      	b.n	80042c2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80042c6:	69bb      	ldr	r3, [r7, #24]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	0fdb      	lsrs	r3, r3, #31
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d01c      	beq.n	8004310 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042d6:	69bb      	ldr	r3, [r7, #24]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80042ea:	f7fe fd39 	bl	8002d60 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004320 <vPortFree+0xec>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4413      	add	r3, r2
 80042f8:	4a09      	ldr	r2, [pc, #36]	@ (8004320 <vPortFree+0xec>)
 80042fa:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fc:	69b8      	ldr	r0, [r7, #24]
 80042fe:	f000 f86d 	bl	80043dc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004302:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <vPortFree+0xf0>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	3301      	adds	r3, #1
 8004308:	4a06      	ldr	r2, [pc, #24]	@ (8004324 <vPortFree+0xf0>)
 800430a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800430c:	f7fe fd36 	bl	8002d7c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	200003fc 	.word	0x200003fc
 800431c:	200193fb 	.word	0x200193fb
 8004320:	20019408 	.word	0x20019408
 8004324:	20019414 	.word	0x20019414

08004328 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004328:	b480      	push	{r7}
 800432a:	b085      	sub	sp, #20
 800432c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8004332:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004334:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <prvHeapInit+0xa0>)
 8004336:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00c      	beq.n	800435c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	3307      	adds	r3, #7
 8004346:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004350:	68ba      	ldr	r2, [r7, #8]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1ad3      	subs	r3, r2, r3
 8004356:	4a1c      	ldr	r2, [pc, #112]	@ (80043c8 <prvHeapInit+0xa0>)
 8004358:	4413      	add	r3, r2
 800435a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4a1b      	ldr	r2, [pc, #108]	@ (80043cc <prvHeapInit+0xa4>)
 8004360:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004362:	4b1a      	ldr	r3, [pc, #104]	@ (80043cc <prvHeapInit+0xa4>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a13      	ldr	r2, [pc, #76]	@ (80043d0 <prvHeapInit+0xa8>)
 8004384:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004386:	4b12      	ldr	r3, [pc, #72]	@ (80043d0 <prvHeapInit+0xa8>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800438e:	4b10      	ldr	r3, [pc, #64]	@ (80043d0 <prvHeapInit+0xa8>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80043a4:	4b0a      	ldr	r3, [pc, #40]	@ (80043d0 <prvHeapInit+0xa8>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a08      	ldr	r2, [pc, #32]	@ (80043d4 <prvHeapInit+0xac>)
 80043b2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a07      	ldr	r2, [pc, #28]	@ (80043d8 <prvHeapInit+0xb0>)
 80043ba:	6013      	str	r3, [r2, #0]
}
 80043bc:	bf00      	nop
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	200003fc 	.word	0x200003fc
 80043cc:	200193fc 	.word	0x200193fc
 80043d0:	20019404 	.word	0x20019404
 80043d4:	2001940c 	.word	0x2001940c
 80043d8:	20019408 	.word	0x20019408

080043dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80043e4:	4b36      	ldr	r3, [pc, #216]	@ (80044c0 <prvInsertBlockIntoFreeList+0xe4>)
 80043e6:	617b      	str	r3, [r7, #20]
 80043e8:	e002      	b.n	80043f0 <prvInsertBlockIntoFreeList+0x14>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	617b      	str	r3, [r7, #20]
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d8f7      	bhi.n	80043ea <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	4a30      	ldr	r2, [pc, #192]	@ (80044c0 <prvInsertBlockIntoFreeList+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d018      	beq.n	8004434 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	4a2f      	ldr	r2, [pc, #188]	@ (80044c4 <prvInsertBlockIntoFreeList+0xe8>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d305      	bcc.n	8004416 <prvInsertBlockIntoFreeList+0x3a>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4a2e      	ldr	r2, [pc, #184]	@ (80044c8 <prvInsertBlockIntoFreeList+0xec>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d801      	bhi.n	8004416 <prvInsertBlockIntoFreeList+0x3a>
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <prvInsertBlockIntoFreeList+0x3c>
 8004416:	2300      	movs	r3, #0
 8004418:	2b00      	cmp	r3, #0
 800441a:	d10b      	bne.n	8004434 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60fb      	str	r3, [r7, #12]
}
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	e7fd      	b.n	8004430 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	693a      	ldr	r2, [r7, #16]
 800443e:	4413      	add	r3, r2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	429a      	cmp	r2, r3
 8004444:	d108      	bne.n	8004458 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	441a      	add	r2, r3
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	693a      	ldr	r2, [r7, #16]
 8004462:	441a      	add	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d118      	bne.n	800449e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <prvInsertBlockIntoFreeList+0xf0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	429a      	cmp	r2, r3
 8004476:	d00d      	beq.n	8004494 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	685a      	ldr	r2, [r3, #4]
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	441a      	add	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	e008      	b.n	80044a6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8004494:	4b0d      	ldr	r3, [pc, #52]	@ (80044cc <prvInsertBlockIntoFreeList+0xf0>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e003      	b.n	80044a6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d002      	beq.n	80044b4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80044b4:	bf00      	nop
 80044b6:	371c      	adds	r7, #28
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr
 80044c0:	200193fc 	.word	0x200193fc
 80044c4:	200003fc 	.word	0x200003fc
 80044c8:	200193fb 	.word	0x200193fb
 80044cc:	20019404 	.word	0x20019404

080044d0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80044d4:	4803      	ldr	r0, [pc, #12]	@ (80044e4 <_cbSendSystemDesc+0x14>)
 80044d6:	f001 fcb5 	bl	8005e44 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80044da:	4803      	ldr	r0, [pc, #12]	@ (80044e8 <_cbSendSystemDesc+0x18>)
 80044dc:	f001 fcb2 	bl	8005e44 <SEGGER_SYSVIEW_SendSysDesc>
}
 80044e0:	bf00      	nop
 80044e2:	bd80      	pop	{r7, pc}
 80044e4:	080067a0 	.word	0x080067a0
 80044e8:	080067dc 	.word	0x080067dc

080044ec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80044f0:	4b06      	ldr	r3, [pc, #24]	@ (800450c <SEGGER_SYSVIEW_Conf+0x20>)
 80044f2:	6818      	ldr	r0, [r3, #0]
 80044f4:	4b05      	ldr	r3, [pc, #20]	@ (800450c <SEGGER_SYSVIEW_Conf+0x20>)
 80044f6:	6819      	ldr	r1, [r3, #0]
 80044f8:	4b05      	ldr	r3, [pc, #20]	@ (8004510 <SEGGER_SYSVIEW_Conf+0x24>)
 80044fa:	4a06      	ldr	r2, [pc, #24]	@ (8004514 <SEGGER_SYSVIEW_Conf+0x28>)
 80044fc:	f001 f928 	bl	8005750 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004500:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004504:	f001 f968 	bl	80057d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004508:	bf00      	nop
 800450a:	bd80      	pop	{r7, pc}
 800450c:	20000000 	.word	0x20000000
 8004510:	080044d1 	.word	0x080044d1
 8004514:	08006878 	.word	0x08006878

08004518 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451a:	b085      	sub	sp, #20
 800451c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
 8004522:	e033      	b.n	800458c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004524:	491e      	ldr	r1, [pc, #120]	@ (80045a0 <_cbSendTaskList+0x88>)
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	491a      	ldr	r1, [pc, #104]	@ (80045a0 <_cbSendTaskList+0x88>)
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	4613      	mov	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4413      	add	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	3304      	adds	r3, #4
 8004544:	6819      	ldr	r1, [r3, #0]
 8004546:	4c16      	ldr	r4, [pc, #88]	@ (80045a0 <_cbSendTaskList+0x88>)
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4423      	add	r3, r4
 8004554:	3308      	adds	r3, #8
 8004556:	681c      	ldr	r4, [r3, #0]
 8004558:	4d11      	ldr	r5, [pc, #68]	@ (80045a0 <_cbSendTaskList+0x88>)
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4613      	mov	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	442b      	add	r3, r5
 8004566:	330c      	adds	r3, #12
 8004568:	681d      	ldr	r5, [r3, #0]
 800456a:	4e0d      	ldr	r6, [pc, #52]	@ (80045a0 <_cbSendTaskList+0x88>)
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	4613      	mov	r3, r2
 8004570:	009b      	lsls	r3, r3, #2
 8004572:	4413      	add	r3, r2
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	4433      	add	r3, r6
 8004578:	3310      	adds	r3, #16
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	462b      	mov	r3, r5
 8004580:	4622      	mov	r2, r4
 8004582:	f000 f8bd 	bl	8004700 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3301      	adds	r3, #1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	4b05      	ldr	r3, [pc, #20]	@ (80045a4 <_cbSendTaskList+0x8c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	429a      	cmp	r2, r3
 8004594:	d3c6      	bcc.n	8004524 <_cbSendTaskList+0xc>
  }
}
 8004596:	bf00      	nop
 8004598:	bf00      	nop
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045a0:	20019418 	.word	0x20019418
 80045a4:	200194b8 	.word	0x200194b8

080045a8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80045a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80045b0:	f7fe fcf6 	bl	8002fa0 <xTaskGetTickCountFromISR>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2200      	movs	r2, #0
 80045b8:	469a      	mov	sl, r3
 80045ba:	4693      	mov	fp, r2
 80045bc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80045c0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	f04f 0a00 	mov.w	sl, #0
 80045cc:	f04f 0b00 	mov.w	fp, #0
 80045d0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80045d4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80045d8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80045dc:	4652      	mov	r2, sl
 80045de:	465b      	mov	r3, fp
 80045e0:	1a14      	subs	r4, r2, r0
 80045e2:	eb63 0501 	sbc.w	r5, r3, r1
 80045e6:	f04f 0200 	mov.w	r2, #0
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	00ab      	lsls	r3, r5, #2
 80045f0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80045f4:	00a2      	lsls	r2, r4, #2
 80045f6:	4614      	mov	r4, r2
 80045f8:	461d      	mov	r5, r3
 80045fa:	eb14 0800 	adds.w	r8, r4, r0
 80045fe:	eb45 0901 	adc.w	r9, r5, r1
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800460e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004616:	4690      	mov	r8, r2
 8004618:	4699      	mov	r9, r3
 800461a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800461e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	3708      	adds	r7, #8
 8004628:	46bd      	mov	sp, r7
 800462a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004630 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004630:	b580      	push	{r7, lr}
 8004632:	b086      	sub	sp, #24
 8004634:	af02      	add	r7, sp, #8
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800463e:	2205      	movs	r2, #5
 8004640:	492b      	ldr	r1, [pc, #172]	@ (80046f0 <SYSVIEW_AddTask+0xc0>)
 8004642:	68b8      	ldr	r0, [r7, #8]
 8004644:	f002 f80a 	bl	800665c <memcmp>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d04b      	beq.n	80046e6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800464e:	4b29      	ldr	r3, [pc, #164]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	2b07      	cmp	r3, #7
 8004654:	d903      	bls.n	800465e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004656:	4828      	ldr	r0, [pc, #160]	@ (80046f8 <SYSVIEW_AddTask+0xc8>)
 8004658:	f001 ffa4 	bl	80065a4 <SEGGER_SYSVIEW_Warn>
    return;
 800465c:	e044      	b.n	80046e8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800465e:	4b25      	ldr	r3, [pc, #148]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4926      	ldr	r1, [pc, #152]	@ (80046fc <SYSVIEW_AddTask+0xcc>)
 8004664:	4613      	mov	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004672:	4b20      	ldr	r3, [pc, #128]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	4921      	ldr	r1, [pc, #132]	@ (80046fc <SYSVIEW_AddTask+0xcc>)
 8004678:	4613      	mov	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3304      	adds	r3, #4
 8004684:	68ba      	ldr	r2, [r7, #8]
 8004686:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004688:	4b1a      	ldr	r3, [pc, #104]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	491b      	ldr	r1, [pc, #108]	@ (80046fc <SYSVIEW_AddTask+0xcc>)
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3308      	adds	r3, #8
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800469e:	4b15      	ldr	r3, [pc, #84]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	4916      	ldr	r1, [pc, #88]	@ (80046fc <SYSVIEW_AddTask+0xcc>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	330c      	adds	r3, #12
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80046b4:	4b0f      	ldr	r3, [pc, #60]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	4910      	ldr	r1, [pc, #64]	@ (80046fc <SYSVIEW_AddTask+0xcc>)
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	440b      	add	r3, r1
 80046c4:	3310      	adds	r3, #16
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80046ca:	4b0a      	ldr	r3, [pc, #40]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	3301      	adds	r3, #1
 80046d0:	4a08      	ldr	r2, [pc, #32]	@ (80046f4 <SYSVIEW_AddTask+0xc4>)
 80046d2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	9300      	str	r3, [sp, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f000 f80e 	bl	8004700 <SYSVIEW_SendTaskInfo>
 80046e4:	e000      	b.n	80046e8 <SYSVIEW_AddTask+0xb8>
    return;
 80046e6:	bf00      	nop

}
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	080067ec 	.word	0x080067ec
 80046f4:	200194b8 	.word	0x200194b8
 80046f8:	080067f4 	.word	0x080067f4
 80046fc:	20019418 	.word	0x20019418

08004700 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800470e:	f107 0310 	add.w	r3, r7, #16
 8004712:	2218      	movs	r2, #24
 8004714:	2100      	movs	r1, #0
 8004716:	4618      	mov	r0, r3
 8004718:	f001 ffb0 	bl	800667c <memset>
  TaskInfo.TaskID     = TaskID;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 800472c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004730:	f107 0310 	add.w	r3, r7, #16
 8004734:	4618      	mov	r0, r3
 8004736:	f001 fa8d 	bl	8005c54 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800473a:	bf00      	nop
 800473c:	3728      	adds	r7, #40	@ 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800474a:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <_DoInit+0xa0>)
 800474c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800474e:	22a8      	movs	r2, #168	@ 0xa8
 8004750:	2100      	movs	r1, #0
 8004752:	6838      	ldr	r0, [r7, #0]
 8004754:	f001 ff92 	bl	800667c <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	2203      	movs	r2, #3
 800475c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2203      	movs	r2, #3
 8004762:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	4a20      	ldr	r2, [pc, #128]	@ (80047e8 <_DoInit+0xa4>)
 8004768:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <_DoInit+0xa8>)
 800476e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004776:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2200      	movs	r2, #0
 800477c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2200      	movs	r2, #0
 8004782:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	2200      	movs	r2, #0
 8004788:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	4a16      	ldr	r2, [pc, #88]	@ (80047e8 <_DoInit+0xa4>)
 800478e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	4a17      	ldr	r2, [pc, #92]	@ (80047f0 <_DoInit+0xac>)
 8004794:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2210      	movs	r2, #16
 800479a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2200      	movs	r2, #0
 80047a6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2200      	movs	r2, #0
 80047ac:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80047ae:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80047b2:	2300      	movs	r3, #0
 80047b4:	607b      	str	r3, [r7, #4]
 80047b6:	e00c      	b.n	80047d2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f1c3 030f 	rsb	r3, r3, #15
 80047be:	4a0d      	ldr	r2, [pc, #52]	@ (80047f4 <_DoInit+0xb0>)
 80047c0:	5cd1      	ldrb	r1, [r2, r3]
 80047c2:	683a      	ldr	r2, [r7, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	460a      	mov	r2, r1
 80047ca:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3301      	adds	r3, #1
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d9ef      	bls.n	80047b8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80047d8:	f3bf 8f5f 	dmb	sy
}
 80047dc:	bf00      	nop
 80047de:	3708      	adds	r7, #8
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	200194bc 	.word	0x200194bc
 80047e8:	08006844 	.word	0x08006844
 80047ec:	20019564 	.word	0x20019564
 80047f0:	2001b564 	.word	0x2001b564
 80047f4:	08006880 	.word	0x08006880

080047f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08c      	sub	sp, #48	@ 0x30
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004804:	4b3e      	ldr	r3, [pc, #248]	@ (8004900 <SEGGER_RTT_ReadNoLock+0x108>)
 8004806:	623b      	str	r3, [r7, #32]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b53      	cmp	r3, #83	@ 0x53
 8004810:	d001      	beq.n	8004816 <SEGGER_RTT_ReadNoLock+0x1e>
 8004812:	f7ff ff97 	bl	8004744 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004816:	68fa      	ldr	r2, [r7, #12]
 8004818:	4613      	mov	r3, r2
 800481a:	005b      	lsls	r3, r3, #1
 800481c:	4413      	add	r3, r2
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	3360      	adds	r3, #96	@ 0x60
 8004822:	4a37      	ldr	r2, [pc, #220]	@ (8004900 <SEGGER_RTT_ReadNoLock+0x108>)
 8004824:	4413      	add	r3, r2
 8004826:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	68db      	ldr	r3, [r3, #12]
 8004836:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004838:	2300      	movs	r3, #0
 800483a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800483c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	429a      	cmp	r2, r3
 8004842:	d92b      	bls.n	800489c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4293      	cmp	r3, r2
 8004854:	bf28      	it	cs
 8004856:	4613      	movcs	r3, r2
 8004858:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004860:	4413      	add	r3, r2
 8004862:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	6939      	ldr	r1, [r7, #16]
 8004868:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800486a:	f001 ff33 	bl	80066d4 <memcpy>
    NumBytesRead += NumBytesRem;
 800486e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	4413      	add	r3, r2
 8004874:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004876:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	4413      	add	r3, r2
 800487c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004886:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	4413      	add	r3, r2
 800488c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004894:	429a      	cmp	r2, r3
 8004896:	d101      	bne.n	800489c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004898:	2300      	movs	r3, #0
 800489a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4293      	cmp	r3, r2
 80048aa:	bf28      	it	cs
 80048ac:	4613      	movcs	r3, r2
 80048ae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d019      	beq.n	80048ea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	4413      	add	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	6939      	ldr	r1, [r7, #16]
 80048c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048c6:	f001 ff05 	bl	80066d4 <memcpy>
    NumBytesRead += NumBytesRem;
 80048ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	4413      	add	r3, r2
 80048d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	4413      	add	r3, r2
 80048d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80048e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	4413      	add	r3, r2
 80048e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80048ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048f4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80048f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3730      	adds	r7, #48	@ 0x30
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	200194bc 	.word	0x200194bc

08004904 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004904:	b580      	push	{r7, lr}
 8004906:	b088      	sub	sp, #32
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
 8004910:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004912:	4b3d      	ldr	r3, [pc, #244]	@ (8004a08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b53      	cmp	r3, #83	@ 0x53
 800491e:	d001      	beq.n	8004924 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004920:	f7ff ff10 	bl	8004744 <_DoInit>
  SEGGER_RTT_LOCK();
 8004924:	f3ef 8311 	mrs	r3, BASEPRI
 8004928:	f04f 0120 	mov.w	r1, #32
 800492c:	f381 8811 	msr	BASEPRI, r1
 8004930:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004932:	4b35      	ldr	r3, [pc, #212]	@ (8004a08 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004934:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004936:	2300      	movs	r3, #0
 8004938:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800493a:	6939      	ldr	r1, [r7, #16]
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	4613      	mov	r3, r2
 8004942:	005b      	lsls	r3, r3, #1
 8004944:	4413      	add	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	440b      	add	r3, r1
 800494a:	3304      	adds	r3, #4
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d008      	beq.n	8004964 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3301      	adds	r3, #1
 8004956:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	69fa      	ldr	r2, [r7, #28]
 800495e:	429a      	cmp	r2, r3
 8004960:	dbeb      	blt.n	800493a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004962:	e000      	b.n	8004966 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004964:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	69fa      	ldr	r2, [r7, #28]
 800496c:	429a      	cmp	r2, r3
 800496e:	da3f      	bge.n	80049f0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004970:	6939      	ldr	r1, [r7, #16]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	1c5a      	adds	r2, r3, #1
 8004976:	4613      	mov	r3, r2
 8004978:	005b      	lsls	r3, r3, #1
 800497a:	4413      	add	r3, r2
 800497c:	00db      	lsls	r3, r3, #3
 800497e:	440b      	add	r3, r1
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004984:	6939      	ldr	r1, [r7, #16]
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	1c5a      	adds	r2, r3, #1
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	00db      	lsls	r3, r3, #3
 8004992:	440b      	add	r3, r1
 8004994:	3304      	adds	r3, #4
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	69fa      	ldr	r2, [r7, #28]
 800499e:	4613      	mov	r3, r2
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	4413      	add	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	440b      	add	r3, r1
 80049a8:	3320      	adds	r3, #32
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80049ae:	6939      	ldr	r1, [r7, #16]
 80049b0:	69fa      	ldr	r2, [r7, #28]
 80049b2:	4613      	mov	r3, r2
 80049b4:	005b      	lsls	r3, r3, #1
 80049b6:	4413      	add	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	440b      	add	r3, r1
 80049bc:	3328      	adds	r3, #40	@ 0x28
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80049c2:	6939      	ldr	r1, [r7, #16]
 80049c4:	69fa      	ldr	r2, [r7, #28]
 80049c6:	4613      	mov	r3, r2
 80049c8:	005b      	lsls	r3, r3, #1
 80049ca:	4413      	add	r3, r2
 80049cc:	00db      	lsls	r3, r3, #3
 80049ce:	440b      	add	r3, r1
 80049d0:	3324      	adds	r3, #36	@ 0x24
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80049d6:	6939      	ldr	r1, [r7, #16]
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	4613      	mov	r3, r2
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	4413      	add	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	440b      	add	r3, r1
 80049e4:	332c      	adds	r3, #44	@ 0x2c
 80049e6:	683a      	ldr	r2, [r7, #0]
 80049e8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80049ea:	f3bf 8f5f 	dmb	sy
 80049ee:	e002      	b.n	80049f6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80049f0:	f04f 33ff 	mov.w	r3, #4294967295
 80049f4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80049fc:	69fb      	ldr	r3, [r7, #28]
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3720      	adds	r7, #32
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	200194bc 	.word	0x200194bc

08004a0c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08a      	sub	sp, #40	@ 0x28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	607a      	str	r2, [r7, #4]
 8004a18:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004a1a:	4b21      	ldr	r3, [pc, #132]	@ (8004aa0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004a1c:	623b      	str	r3, [r7, #32]
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b53      	cmp	r3, #83	@ 0x53
 8004a26:	d001      	beq.n	8004a2c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004a28:	f7ff fe8c 	bl	8004744 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8004aa0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004a2e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d82c      	bhi.n	8004a90 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004a36:	f3ef 8311 	mrs	r3, BASEPRI
 8004a3a:	f04f 0120 	mov.w	r1, #32
 8004a3e:	f381 8811 	msr	BASEPRI, r1
 8004a42:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4613      	mov	r3, r2
 8004a48:	005b      	lsls	r3, r3, #1
 8004a4a:	4413      	add	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	3360      	adds	r3, #96	@ 0x60
 8004a50:	69fa      	ldr	r2, [r7, #28]
 8004a52:	4413      	add	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00e      	beq.n	8004a7a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	683a      	ldr	r2, [r7, #0]
 8004a6c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2200      	movs	r2, #0
 8004a78:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a7e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a80:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a8e:	e002      	b.n	8004a96 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004a90:	f04f 33ff 	mov.w	r3, #4294967295
 8004a94:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3728      	adds	r7, #40	@ 0x28
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	200194bc 	.word	0x200194bc

08004aa4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004aa4:	b480      	push	{r7}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d105      	bne.n	8004ac2 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1c5a      	adds	r2, r3, #1
 8004aba:	60fa      	str	r2, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
 8004ac0:	e022      	b.n	8004b08 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1c5a      	adds	r2, r3, #1
 8004aca:	60fa      	str	r2, [r7, #12]
 8004acc:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b80      	cmp	r3, #128	@ 0x80
 8004ad2:	d90a      	bls.n	8004aea <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004ad4:	2380      	movs	r3, #128	@ 0x80
 8004ad6:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004ad8:	e007      	b.n	8004aea <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	1c53      	adds	r3, r2, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1c59      	adds	r1, r3, #1
 8004ae4:	60f9      	str	r1, [r7, #12]
 8004ae6:	7812      	ldrb	r2, [r2, #0]
 8004ae8:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	1e5a      	subs	r2, r3, #1
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <_EncodeStr+0x58>
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1ee      	bne.n	8004ada <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004afc:	68ba      	ldr	r2, [r7, #8]
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004b08:	68fb      	ldr	r3, [r7, #12]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b16:	b480      	push	{r7}
 8004b18:	b083      	sub	sp, #12
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3307      	adds	r3, #7
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
	...

08004b30 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b082      	sub	sp, #8
 8004b34:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004b36:	4b34      	ldr	r3, [pc, #208]	@ (8004c08 <_HandleIncomingPacket+0xd8>)
 8004b38:	7e1b      	ldrb	r3, [r3, #24]
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	1cfb      	adds	r3, r7, #3
 8004b3e:	2201      	movs	r2, #1
 8004b40:	4619      	mov	r1, r3
 8004b42:	f7ff fe59 	bl	80047f8 <SEGGER_RTT_ReadNoLock>
 8004b46:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d057      	beq.n	8004bfe <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004b4e:	78fb      	ldrb	r3, [r7, #3]
 8004b50:	2b80      	cmp	r3, #128	@ 0x80
 8004b52:	d031      	beq.n	8004bb8 <_HandleIncomingPacket+0x88>
 8004b54:	2b80      	cmp	r3, #128	@ 0x80
 8004b56:	dc40      	bgt.n	8004bda <_HandleIncomingPacket+0xaa>
 8004b58:	2b07      	cmp	r3, #7
 8004b5a:	dc15      	bgt.n	8004b88 <_HandleIncomingPacket+0x58>
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	dd3c      	ble.n	8004bda <_HandleIncomingPacket+0xaa>
 8004b60:	3b01      	subs	r3, #1
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d839      	bhi.n	8004bda <_HandleIncomingPacket+0xaa>
 8004b66:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <_HandleIncomingPacket+0x3c>)
 8004b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6c:	08004b8f 	.word	0x08004b8f
 8004b70:	08004b95 	.word	0x08004b95
 8004b74:	08004b9b 	.word	0x08004b9b
 8004b78:	08004ba1 	.word	0x08004ba1
 8004b7c:	08004ba7 	.word	0x08004ba7
 8004b80:	08004bad 	.word	0x08004bad
 8004b84:	08004bb3 	.word	0x08004bb3
 8004b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b8a:	d033      	beq.n	8004bf4 <_HandleIncomingPacket+0xc4>
 8004b8c:	e025      	b.n	8004bda <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004b8e:	f000 fee7 	bl	8005960 <SEGGER_SYSVIEW_Start>
      break;
 8004b92:	e034      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004b94:	f000 ff9e 	bl	8005ad4 <SEGGER_SYSVIEW_Stop>
      break;
 8004b98:	e031      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004b9a:	f001 f977 	bl	8005e8c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004b9e:	e02e      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004ba0:	f001 f93c 	bl	8005e1c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004ba4:	e02b      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004ba6:	f000 ffbb 	bl	8005b20 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004baa:	e028      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004bac:	f001 fca8 	bl	8006500 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004bb0:	e025      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004bb2:	f001 fc87 	bl	80064c4 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004bb6:	e022      	b.n	8004bfe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bb8:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <_HandleIncomingPacket+0xd8>)
 8004bba:	7e1b      	ldrb	r3, [r3, #24]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	1cfb      	adds	r3, r7, #3
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	f7ff fe18 	bl	80047f8 <SEGGER_RTT_ReadNoLock>
 8004bc8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004bd0:	78fb      	ldrb	r3, [r7, #3]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f001 fbec 	bl	80063b0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004bd8:	e00e      	b.n	8004bf8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	b25b      	sxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	da0c      	bge.n	8004bfc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <_HandleIncomingPacket+0xd8>)
 8004be4:	7e1b      	ldrb	r3, [r3, #24]
 8004be6:	4618      	mov	r0, r3
 8004be8:	1cfb      	adds	r3, r7, #3
 8004bea:	2201      	movs	r2, #1
 8004bec:	4619      	mov	r1, r3
 8004bee:	f7ff fe03 	bl	80047f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004bf2:	e003      	b.n	8004bfc <_HandleIncomingPacket+0xcc>
      break;
 8004bf4:	bf00      	nop
 8004bf6:	e002      	b.n	8004bfe <_HandleIncomingPacket+0xce>
      break;
 8004bf8:	bf00      	nop
 8004bfa:	e000      	b.n	8004bfe <_HandleIncomingPacket+0xce>
      break;
 8004bfc:	bf00      	nop
    }
  }
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	2001c57c 	.word	0x2001c57c

08004c0c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	@ 0x30
 8004c10:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004c12:	2301      	movs	r3, #1
 8004c14:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c16:	1d3b      	adds	r3, r7, #4
 8004c18:	3301      	adds	r3, #1
 8004c1a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c20:	4b31      	ldr	r3, [pc, #196]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c26:	e00b      	b.n	8004c40 <_TrySendOverflowPacket+0x34>
 8004c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004c32:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c3c:	09db      	lsrs	r3, r3, #7
 8004c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c44:	d8f0      	bhi.n	8004c28 <_TrySendOverflowPacket+0x1c>
 8004c46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c54:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004c56:	4b25      	ldr	r3, [pc, #148]	@ (8004cec <_TrySendOverflowPacket+0xe0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004c5c:	4b22      	ldr	r3, [pc, #136]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	1ad3      	subs	r3, r2, r3
 8004c64:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	623b      	str	r3, [r7, #32]
 8004c6e:	e00b      	b.n	8004c88 <_TrySendOverflowPacket+0x7c>
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c76:	1c59      	adds	r1, r3, #1
 8004c78:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	701a      	strb	r2, [r3, #0]
 8004c82:	6a3b      	ldr	r3, [r7, #32]
 8004c84:	09db      	lsrs	r3, r3, #7
 8004c86:	623b      	str	r3, [r7, #32]
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c8c:	d8f0      	bhi.n	8004c70 <_TrySendOverflowPacket+0x64>
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c94:	6a3a      	ldr	r2, [r7, #32]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004c9e:	4b12      	ldr	r3, [pc, #72]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004ca0:	785b      	ldrb	r3, [r3, #1]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	1d3b      	adds	r3, r7, #4
 8004ca6:	69fa      	ldr	r2, [r7, #28]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	461a      	mov	r2, r3
 8004cac:	1d3b      	adds	r3, r7, #4
 8004cae:	4619      	mov	r1, r3
 8004cb0:	f7fb fa96 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d009      	beq.n	8004cd2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004cc4:	4b08      	ldr	r3, [pc, #32]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	4b06      	ldr	r3, [pc, #24]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004cce:	701a      	strb	r2, [r3, #0]
 8004cd0:	e004      	b.n	8004cdc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004cd2:	4b05      	ldr	r3, [pc, #20]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	4a03      	ldr	r2, [pc, #12]	@ (8004ce8 <_TrySendOverflowPacket+0xdc>)
 8004cda:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004cdc:	693b      	ldr	r3, [r7, #16]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3730      	adds	r7, #48	@ 0x30
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	2001c57c 	.word	0x2001c57c
 8004cec:	e0001004 	.word	0xe0001004

08004cf0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	@ 0x28
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004cfc:	4b98      	ldr	r3, [pc, #608]	@ (8004f60 <_SendPacket+0x270>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d010      	beq.n	8004d26 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d04:	4b96      	ldr	r3, [pc, #600]	@ (8004f60 <_SendPacket+0x270>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	f000 812d 	beq.w	8004f68 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004d0e:	4b94      	ldr	r3, [pc, #592]	@ (8004f60 <_SendPacket+0x270>)
 8004d10:	781b      	ldrb	r3, [r3, #0]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d109      	bne.n	8004d2a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d16:	f7ff ff79 	bl	8004c0c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004d1a:	4b91      	ldr	r3, [pc, #580]	@ (8004f60 <_SendPacket+0x270>)
 8004d1c:	781b      	ldrb	r3, [r3, #0]
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	f040 8124 	bne.w	8004f6c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004d24:	e001      	b.n	8004d2a <_SendPacket+0x3a>
    goto Send;
 8004d26:	bf00      	nop
 8004d28:	e000      	b.n	8004d2c <_SendPacket+0x3c>
Send:
 8004d2a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b1f      	cmp	r3, #31
 8004d30:	d809      	bhi.n	8004d46 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004d32:	4b8b      	ldr	r3, [pc, #556]	@ (8004f60 <_SendPacket+0x270>)
 8004d34:	69da      	ldr	r2, [r3, #28]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	f040 8115 	bne.w	8004f70 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b17      	cmp	r3, #23
 8004d4a:	d807      	bhi.n	8004d5c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	b2da      	uxtb	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	701a      	strb	r2, [r3, #0]
 8004d5a:	e0c4      	b.n	8004ee6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d68:	d912      	bls.n	8004d90 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	09da      	lsrs	r2, r3, #7
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	3b01      	subs	r3, #1
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	3a01      	subs	r2, #1
 8004d82:	60fa      	str	r2, [r7, #12]
 8004d84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	e006      	b.n	8004d9e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b7e      	cmp	r3, #126	@ 0x7e
 8004da2:	d807      	bhi.n	8004db4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	b2da      	uxtb	r2, r3
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	701a      	strb	r2, [r3, #0]
 8004db2:	e098      	b.n	8004ee6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004dba:	d212      	bcs.n	8004de2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	09da      	lsrs	r2, r3, #7
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	b2db      	uxtb	r3, r3
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	3a01      	subs	r2, #1
 8004dd4:	60fa      	str	r2, [r7, #12]
 8004dd6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004dda:	b2da      	uxtb	r2, r3
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	701a      	strb	r2, [r3, #0]
 8004de0:	e081      	b.n	8004ee6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004de8:	d21d      	bcs.n	8004e26 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	0b9a      	lsrs	r2, r3, #14
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	60fb      	str	r3, [r7, #12]
 8004df4:	b2d2      	uxtb	r2, r2
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	09db      	lsrs	r3, r3, #7
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	3a01      	subs	r2, #1
 8004e04:	60fa      	str	r2, [r7, #12]
 8004e06:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	3a01      	subs	r2, #1
 8004e18:	60fa      	str	r2, [r7, #12]
 8004e1a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	701a      	strb	r2, [r3, #0]
 8004e24:	e05f      	b.n	8004ee6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004e2c:	d228      	bcs.n	8004e80 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	0d5a      	lsrs	r2, r3, #21
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	3b01      	subs	r3, #1
 8004e36:	60fb      	str	r3, [r7, #12]
 8004e38:	b2d2      	uxtb	r2, r2
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	0b9b      	lsrs	r3, r3, #14
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	3a01      	subs	r2, #1
 8004e48:	60fa      	str	r2, [r7, #12]
 8004e4a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e4e:	b2da      	uxtb	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	09db      	lsrs	r3, r3, #7
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	68fa      	ldr	r2, [r7, #12]
 8004e5c:	3a01      	subs	r2, #1
 8004e5e:	60fa      	str	r2, [r7, #12]
 8004e60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e64:	b2da      	uxtb	r2, r3
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	701a      	strb	r2, [r3, #0]
 8004e7e:	e032      	b.n	8004ee6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	0f1a      	lsrs	r2, r3, #28
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	3b01      	subs	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
 8004e8a:	b2d2      	uxtb	r2, r2
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	0d5b      	lsrs	r3, r3, #21
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	68fa      	ldr	r2, [r7, #12]
 8004e98:	3a01      	subs	r2, #1
 8004e9a:	60fa      	str	r2, [r7, #12]
 8004e9c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	0b9b      	lsrs	r3, r3, #14
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	3a01      	subs	r2, #1
 8004eb0:	60fa      	str	r2, [r7, #12]
 8004eb2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eb6:	b2da      	uxtb	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	09db      	lsrs	r3, r3, #7
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	3a01      	subs	r2, #1
 8004ec6:	60fa      	str	r2, [r7, #12]
 8004ec8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	68fa      	ldr	r2, [r7, #12]
 8004ed8:	3a01      	subs	r2, #1
 8004eda:	60fa      	str	r2, [r7, #12]
 8004edc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ee0:	b2da      	uxtb	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004ee6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f64 <_SendPacket+0x274>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004eec:	4b1c      	ldr	r3, [pc, #112]	@ (8004f60 <_SendPacket+0x270>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	69ba      	ldr	r2, [r7, #24]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	623b      	str	r3, [r7, #32]
 8004efe:	e00b      	b.n	8004f18 <_SendPacket+0x228>
 8004f00:	6a3b      	ldr	r3, [r7, #32]
 8004f02:	b2da      	uxtb	r2, r3
 8004f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f06:	1c59      	adds	r1, r3, #1
 8004f08:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f0e:	b2d2      	uxtb	r2, r2
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	6a3b      	ldr	r3, [r7, #32]
 8004f14:	09db      	lsrs	r3, r3, #7
 8004f16:	623b      	str	r3, [r7, #32]
 8004f18:	6a3b      	ldr	r3, [r7, #32]
 8004f1a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f1c:	d8f0      	bhi.n	8004f00 <_SendPacket+0x210>
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	1c5a      	adds	r2, r3, #1
 8004f22:	627a      	str	r2, [r7, #36]	@ 0x24
 8004f24:	6a3a      	ldr	r2, [r7, #32]
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f2c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004f2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f60 <_SendPacket+0x270>)
 8004f30:	785b      	ldrb	r3, [r3, #1]
 8004f32:	4618      	mov	r0, r3
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	461a      	mov	r2, r3
 8004f3c:	68f9      	ldr	r1, [r7, #12]
 8004f3e:	f7fb f94f 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004f42:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004f4a:	4a05      	ldr	r2, [pc, #20]	@ (8004f60 <_SendPacket+0x270>)
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	60d3      	str	r3, [r2, #12]
 8004f50:	e00f      	b.n	8004f72 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004f52:	4b03      	ldr	r3, [pc, #12]	@ (8004f60 <_SendPacket+0x270>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	3301      	adds	r3, #1
 8004f58:	b2da      	uxtb	r2, r3
 8004f5a:	4b01      	ldr	r3, [pc, #4]	@ (8004f60 <_SendPacket+0x270>)
 8004f5c:	701a      	strb	r2, [r3, #0]
 8004f5e:	e008      	b.n	8004f72 <_SendPacket+0x282>
 8004f60:	2001c57c 	.word	0x2001c57c
 8004f64:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004f68:	bf00      	nop
 8004f6a:	e002      	b.n	8004f72 <_SendPacket+0x282>
      goto SendDone;
 8004f6c:	bf00      	nop
 8004f6e:	e000      	b.n	8004f72 <_SendPacket+0x282>
      goto SendDone;
 8004f70:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004f72:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <_SendPacket+0x2d4>)
 8004f74:	7e1b      	ldrb	r3, [r3, #24]
 8004f76:	4619      	mov	r1, r3
 8004f78:	4a13      	ldr	r2, [pc, #76]	@ (8004fc8 <_SendPacket+0x2d8>)
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	440b      	add	r3, r1
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	4413      	add	r3, r2
 8004f84:	336c      	adds	r3, #108	@ 0x6c
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	4b0e      	ldr	r3, [pc, #56]	@ (8004fc4 <_SendPacket+0x2d4>)
 8004f8a:	7e1b      	ldrb	r3, [r3, #24]
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	490e      	ldr	r1, [pc, #56]	@ (8004fc8 <_SendPacket+0x2d8>)
 8004f90:	4603      	mov	r3, r0
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4403      	add	r3, r0
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	440b      	add	r3, r1
 8004f9a:	3370      	adds	r3, #112	@ 0x70
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d00b      	beq.n	8004fba <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004fa2:	4b08      	ldr	r3, [pc, #32]	@ (8004fc4 <_SendPacket+0x2d4>)
 8004fa4:	789b      	ldrb	r3, [r3, #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d107      	bne.n	8004fba <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <_SendPacket+0x2d4>)
 8004fac:	2201      	movs	r2, #1
 8004fae:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004fb0:	f7ff fdbe 	bl	8004b30 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004fb4:	4b03      	ldr	r3, [pc, #12]	@ (8004fc4 <_SendPacket+0x2d4>)
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004fba:	bf00      	nop
 8004fbc:	3728      	adds	r7, #40	@ 0x28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	2001c57c 	.word	0x2001c57c
 8004fc8:	200194bc 	.word	0x200194bc

08004fcc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	691b      	ldr	r3, [r3, #16]
 8004fdc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	2b80      	cmp	r3, #128	@ 0x80
 8004fe4:	d80a      	bhi.n	8004ffc <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	1c59      	adds	r1, r3, #1
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	6051      	str	r1, [r2, #4]
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1c5a      	adds	r2, r3, #1
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	691b      	ldr	r3, [r3, #16]
 8005000:	2b80      	cmp	r3, #128	@ 0x80
 8005002:	d15a      	bne.n	80050ba <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691a      	ldr	r2, [r3, #16]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	b2d2      	uxtb	r2, r2
 800500e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	685b      	ldr	r3, [r3, #4]
 8005014:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	623b      	str	r3, [r7, #32]
 8005024:	e00b      	b.n	800503e <_StoreChar+0x72>
 8005026:	6a3b      	ldr	r3, [r7, #32]
 8005028:	b2da      	uxtb	r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502c:	1c59      	adds	r1, r3, #1
 800502e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005030:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005034:	b2d2      	uxtb	r2, r2
 8005036:	701a      	strb	r2, [r3, #0]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	09db      	lsrs	r3, r3, #7
 800503c:	623b      	str	r3, [r7, #32]
 800503e:	6a3b      	ldr	r3, [r7, #32]
 8005040:	2b7f      	cmp	r3, #127	@ 0x7f
 8005042:	d8f0      	bhi.n	8005026 <_StoreChar+0x5a>
 8005044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	627a      	str	r2, [r7, #36]	@ 0x24
 800504a:	6a3a      	ldr	r2, [r7, #32]
 800504c:	b2d2      	uxtb	r2, r2
 800504e:	701a      	strb	r2, [r3, #0]
 8005050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005052:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	61fb      	str	r3, [r7, #28]
 8005058:	2300      	movs	r3, #0
 800505a:	61bb      	str	r3, [r7, #24]
 800505c:	e00b      	b.n	8005076 <_StoreChar+0xaa>
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	b2da      	uxtb	r2, r3
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	1c59      	adds	r1, r3, #1
 8005066:	61f9      	str	r1, [r7, #28]
 8005068:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	09db      	lsrs	r3, r3, #7
 8005074:	61bb      	str	r3, [r7, #24]
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b7f      	cmp	r3, #127	@ 0x7f
 800507a:	d8f0      	bhi.n	800505e <_StoreChar+0x92>
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	701a      	strb	r2, [r3, #0]
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	221a      	movs	r2, #26
 8005092:	6939      	ldr	r1, [r7, #16]
 8005094:	4618      	mov	r0, r3
 8005096:	f7ff fe2b 	bl	8004cf0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4618      	mov	r0, r3
 80050a0:	f7ff fd39 	bl	8004b16 <_PreparePacket>
 80050a4:	4602      	mov	r2, r0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	611a      	str	r2, [r3, #16]
  }
}
 80050ba:	bf00      	nop
 80050bc:	3728      	adds	r7, #40	@ 0x28
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}
	...

080050c4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b08a      	sub	sp, #40	@ 0x28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
 80050d0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80050d6:	2301      	movs	r3, #1
 80050d8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80050da:	2301      	movs	r3, #1
 80050dc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050de:	e007      	b.n	80050f0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80050e0:	6a3a      	ldr	r2, [r7, #32]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e8:	623b      	str	r3, [r7, #32]
    Width++;
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	3301      	adds	r3, #1
 80050ee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80050f0:	6a3a      	ldr	r2, [r7, #32]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d2f3      	bcs.n	80050e0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d901      	bls.n	8005104 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d000      	beq.n	8005110 <_PrintUnsigned+0x4c>
 800510e:	e01f      	b.n	8005150 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	2b00      	cmp	r3, #0
 8005114:	d01c      	beq.n	8005150 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005116:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d005      	beq.n	800512c <_PrintUnsigned+0x68>
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d102      	bne.n	800512c <_PrintUnsigned+0x68>
        c = '0';
 8005126:	2330      	movs	r3, #48	@ 0x30
 8005128:	76fb      	strb	r3, [r7, #27]
 800512a:	e001      	b.n	8005130 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 800512c:	2320      	movs	r3, #32
 800512e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005130:	e007      	b.n	8005142 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	3b01      	subs	r3, #1
 8005136:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005138:	7efb      	ldrb	r3, [r7, #27]
 800513a:	4619      	mov	r1, r3
 800513c:	68f8      	ldr	r0, [r7, #12]
 800513e:	f7ff ff45 	bl	8004fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <_PrintUnsigned+0x8c>
 8005148:	69fa      	ldr	r2, [r7, #28]
 800514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800514c:	429a      	cmp	r2, r3
 800514e:	d3f0      	bcc.n	8005132 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d903      	bls.n	800515e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	3b01      	subs	r3, #1
 800515a:	603b      	str	r3, [r7, #0]
 800515c:	e009      	b.n	8005172 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800515e:	68ba      	ldr	r2, [r7, #8]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	fbb2 f3f3 	udiv	r3, r2, r3
 8005166:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	429a      	cmp	r2, r3
 800516e:	d200      	bcs.n	8005172 <_PrintUnsigned+0xae>
        break;
 8005170:	e005      	b.n	800517e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	fb02 f303 	mul.w	r3, r2, r3
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800517c:	e7e8      	b.n	8005150 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	fbb2 f3f3 	udiv	r3, r2, r3
 8005186:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518c:	fb02 f303 	mul.w	r3, r2, r3
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005196:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <_PrintUnsigned+0x128>)
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4413      	add	r3, r2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	4619      	mov	r1, r3
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f7ff ff13 	bl	8004fcc <_StoreChar>
    Digit /= Base;
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1e3      	bne.n	800517e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80051b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b8:	f003 0301 	and.w	r3, r3, #1
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d011      	beq.n	80051e4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80051c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00e      	beq.n	80051e4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051c6:	e006      	b.n	80051d6 <_PrintUnsigned+0x112>
        FieldWidth--;
 80051c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ca:	3b01      	subs	r3, #1
 80051cc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80051ce:	2120      	movs	r1, #32
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff fefb 	bl	8004fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d003      	beq.n	80051e4 <_PrintUnsigned+0x120>
 80051dc:	69fa      	ldr	r2, [r7, #28]
 80051de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d3f1      	bcc.n	80051c8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80051e4:	bf00      	nop
 80051e6:	3728      	adds	r7, #40	@ 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	080068a0 	.word	0x080068a0

080051f0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	bfb8      	it	lt
 8005204:	425b      	neglt	r3, r3
 8005206:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005208:	2301      	movs	r3, #1
 800520a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800520c:	e007      	b.n	800521e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	fb92 f3f3 	sdiv	r3, r2, r3
 8005216:	613b      	str	r3, [r7, #16]
    Width++;
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	3301      	adds	r3, #1
 800521c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	429a      	cmp	r2, r3
 8005224:	daf3      	bge.n	800520e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	429a      	cmp	r2, r3
 800522c:	d901      	bls.n	8005232 <_PrintInt+0x42>
    Width = NumDigits;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005232:	6a3b      	ldr	r3, [r7, #32]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d00a      	beq.n	800524e <_PrintInt+0x5e>
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	db04      	blt.n	8005248 <_PrintInt+0x58>
 800523e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d002      	beq.n	800524e <_PrintInt+0x5e>
    FieldWidth--;
 8005248:	6a3b      	ldr	r3, [r7, #32]
 800524a:	3b01      	subs	r3, #1
 800524c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800524e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d002      	beq.n	800525e <_PrintInt+0x6e>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d016      	beq.n	800528c <_PrintInt+0x9c>
 800525e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005260:	f003 0301 	and.w	r3, r3, #1
 8005264:	2b00      	cmp	r3, #0
 8005266:	d111      	bne.n	800528c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005268:	6a3b      	ldr	r3, [r7, #32]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d00e      	beq.n	800528c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800526e:	e006      	b.n	800527e <_PrintInt+0x8e>
        FieldWidth--;
 8005270:	6a3b      	ldr	r3, [r7, #32]
 8005272:	3b01      	subs	r3, #1
 8005274:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005276:	2120      	movs	r1, #32
 8005278:	68f8      	ldr	r0, [r7, #12]
 800527a:	f7ff fea7 	bl	8004fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800527e:	6a3b      	ldr	r3, [r7, #32]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d003      	beq.n	800528c <_PrintInt+0x9c>
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	6a3b      	ldr	r3, [r7, #32]
 8005288:	429a      	cmp	r2, r3
 800528a:	d3f1      	bcc.n	8005270 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2b00      	cmp	r3, #0
 8005290:	da07      	bge.n	80052a2 <_PrintInt+0xb2>
    v = -v;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	425b      	negs	r3, r3
 8005296:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005298:	212d      	movs	r1, #45	@ 0x2d
 800529a:	68f8      	ldr	r0, [r7, #12]
 800529c:	f7ff fe96 	bl	8004fcc <_StoreChar>
 80052a0:	e008      	b.n	80052b4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80052a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 80052ac:	212b      	movs	r1, #43	@ 0x2b
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f7ff fe8c 	bl	8004fcc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 80052b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d019      	beq.n	80052f2 <_PrintInt+0x102>
 80052be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d114      	bne.n	80052f2 <_PrintInt+0x102>
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d111      	bne.n	80052f2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80052ce:	6a3b      	ldr	r3, [r7, #32]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00e      	beq.n	80052f2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052d4:	e006      	b.n	80052e4 <_PrintInt+0xf4>
        FieldWidth--;
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	3b01      	subs	r3, #1
 80052da:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80052dc:	2130      	movs	r1, #48	@ 0x30
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f7ff fe74 	bl	8004fcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052e4:	6a3b      	ldr	r3, [r7, #32]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d003      	beq.n	80052f2 <_PrintInt+0x102>
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d3f1      	bcc.n	80052d6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fedf 	bl	80050c4 <_PrintUnsigned>
}
 8005306:	bf00      	nop
 8005308:	3718      	adds	r7, #24
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b098      	sub	sp, #96	@ 0x60
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800531c:	f3ef 8311 	mrs	r3, BASEPRI
 8005320:	f04f 0120 	mov.w	r1, #32
 8005324:	f381 8811 	msr	BASEPRI, r1
 8005328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800532a:	48b7      	ldr	r0, [pc, #732]	@ (8005608 <_VPrintTarget+0x2f8>)
 800532c:	f7ff fbf3 	bl	8004b16 <_PreparePacket>
 8005330:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005332:	4bb5      	ldr	r3, [pc, #724]	@ (8005608 <_VPrintTarget+0x2f8>)
 8005334:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 8005336:	2300      	movs	r3, #0
 8005338:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 800533a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800533c:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	3301      	adds	r3, #1
 8005342:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	3301      	adds	r3, #1
 8005354:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005356:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 81a8 	beq.w	80056b0 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 8005360:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005364:	2b25      	cmp	r3, #37	@ 0x25
 8005366:	f040 8195 	bne.w	8005694 <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800536a:	2300      	movs	r3, #0
 800536c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800536e:	2301      	movs	r3, #1
 8005370:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800537a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800537e:	3b23      	subs	r3, #35	@ 0x23
 8005380:	2b0d      	cmp	r3, #13
 8005382:	d83f      	bhi.n	8005404 <_VPrintTarget+0xf4>
 8005384:	a201      	add	r2, pc, #4	@ (adr r2, 800538c <_VPrintTarget+0x7c>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	080053f5 	.word	0x080053f5
 8005390:	08005405 	.word	0x08005405
 8005394:	08005405 	.word	0x08005405
 8005398:	08005405 	.word	0x08005405
 800539c:	08005405 	.word	0x08005405
 80053a0:	08005405 	.word	0x08005405
 80053a4:	08005405 	.word	0x08005405
 80053a8:	08005405 	.word	0x08005405
 80053ac:	080053e5 	.word	0x080053e5
 80053b0:	08005405 	.word	0x08005405
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	08005405 	.word	0x08005405
 80053bc:	08005405 	.word	0x08005405
 80053c0:	080053d5 	.word	0x080053d5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 80053c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	e01a      	b.n	800540a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80053d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053d6:	f043 0302 	orr.w	r3, r3, #2
 80053da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3301      	adds	r3, #1
 80053e0:	60fb      	str	r3, [r7, #12]
 80053e2:	e012      	b.n	800540a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80053e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053e6:	f043 0304 	orr.w	r3, r3, #4
 80053ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	3301      	adds	r3, #1
 80053f0:	60fb      	str	r3, [r7, #12]
 80053f2:	e00a      	b.n	800540a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80053f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053f6:	f043 0308 	orr.w	r3, r3, #8
 80053fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	3301      	adds	r3, #1
 8005400:	60fb      	str	r3, [r7, #12]
 8005402:	e002      	b.n	800540a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005404:	2300      	movs	r3, #0
 8005406:	653b      	str	r3, [r7, #80]	@ 0x50
 8005408:	bf00      	nop
        }
      } while (v);
 800540a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1b0      	bne.n	8005372 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005410:	2300      	movs	r3, #0
 8005412:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800541c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005420:	2b2f      	cmp	r3, #47	@ 0x2f
 8005422:	d912      	bls.n	800544a <_VPrintTarget+0x13a>
 8005424:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005428:	2b39      	cmp	r3, #57	@ 0x39
 800542a:	d80e      	bhi.n	800544a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	3301      	adds	r3, #1
 8005430:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005434:	4613      	mov	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4413      	add	r3, r2
 800543a:	005b      	lsls	r3, r3, #1
 800543c:	461a      	mov	r2, r3
 800543e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005442:	4413      	add	r3, r2
 8005444:	3b30      	subs	r3, #48	@ 0x30
 8005446:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005448:	e7e4      	b.n	8005414 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800544a:	2300      	movs	r3, #0
 800544c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005456:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800545a:	2b2e      	cmp	r3, #46	@ 0x2e
 800545c:	d11d      	bne.n	800549a <_VPrintTarget+0x18a>
        sFormat++;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3301      	adds	r3, #1
 8005462:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800546c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005470:	2b2f      	cmp	r3, #47	@ 0x2f
 8005472:	d912      	bls.n	800549a <_VPrintTarget+0x18a>
 8005474:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005478:	2b39      	cmp	r3, #57	@ 0x39
 800547a:	d80e      	bhi.n	800549a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005482:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005484:	4613      	mov	r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	461a      	mov	r2, r3
 800548e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005492:	4413      	add	r3, r2
 8005494:	3b30      	subs	r3, #48	@ 0x30
 8005496:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005498:	e7e4      	b.n	8005464 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80054a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80054a8:	d003      	beq.n	80054b2 <_VPrintTarget+0x1a2>
 80054aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054ae:	2b68      	cmp	r3, #104	@ 0x68
 80054b0:	d107      	bne.n	80054c2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	3301      	adds	r3, #1
 80054be:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80054c0:	e7ef      	b.n	80054a2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80054c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054c6:	2b25      	cmp	r3, #37	@ 0x25
 80054c8:	f000 80d8 	beq.w	800567c <_VPrintTarget+0x36c>
 80054cc:	2b25      	cmp	r3, #37	@ 0x25
 80054ce:	f2c0 80dc 	blt.w	800568a <_VPrintTarget+0x37a>
 80054d2:	2b78      	cmp	r3, #120	@ 0x78
 80054d4:	f300 80d9 	bgt.w	800568a <_VPrintTarget+0x37a>
 80054d8:	2b58      	cmp	r3, #88	@ 0x58
 80054da:	f2c0 80d6 	blt.w	800568a <_VPrintTarget+0x37a>
 80054de:	3b58      	subs	r3, #88	@ 0x58
 80054e0:	2b20      	cmp	r3, #32
 80054e2:	f200 80d2 	bhi.w	800568a <_VPrintTarget+0x37a>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <_VPrintTarget+0x1dc>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	080055e3 	.word	0x080055e3
 80054f0:	0800568b 	.word	0x0800568b
 80054f4:	0800568b 	.word	0x0800568b
 80054f8:	0800568b 	.word	0x0800568b
 80054fc:	0800568b 	.word	0x0800568b
 8005500:	0800568b 	.word	0x0800568b
 8005504:	0800568b 	.word	0x0800568b
 8005508:	0800568b 	.word	0x0800568b
 800550c:	0800568b 	.word	0x0800568b
 8005510:	0800568b 	.word	0x0800568b
 8005514:	0800568b 	.word	0x0800568b
 8005518:	08005571 	.word	0x08005571
 800551c:	08005597 	.word	0x08005597
 8005520:	0800568b 	.word	0x0800568b
 8005524:	0800568b 	.word	0x0800568b
 8005528:	0800568b 	.word	0x0800568b
 800552c:	0800568b 	.word	0x0800568b
 8005530:	0800568b 	.word	0x0800568b
 8005534:	0800568b 	.word	0x0800568b
 8005538:	0800568b 	.word	0x0800568b
 800553c:	0800568b 	.word	0x0800568b
 8005540:	0800568b 	.word	0x0800568b
 8005544:	0800568b 	.word	0x0800568b
 8005548:	0800568b 	.word	0x0800568b
 800554c:	08005657 	.word	0x08005657
 8005550:	0800568b 	.word	0x0800568b
 8005554:	0800568b 	.word	0x0800568b
 8005558:	0800560d 	.word	0x0800560d
 800555c:	0800568b 	.word	0x0800568b
 8005560:	080055bd 	.word	0x080055bd
 8005564:	0800568b 	.word	0x0800568b
 8005568:	0800568b 	.word	0x0800568b
 800556c:	080055e3 	.word	0x080055e3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	1d19      	adds	r1, r3, #4
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6011      	str	r1, [r2, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800557e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 8005584:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005588:	f107 0310 	add.w	r3, r7, #16
 800558c:	4611      	mov	r1, r2
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff fd1c 	bl	8004fcc <_StoreChar>
        break;
 8005594:	e07a      	b.n	800568c <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	1d19      	adds	r1, r3, #4
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6011      	str	r1, [r2, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80055a4:	f107 0010 	add.w	r0, r7, #16
 80055a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055aa:	9301      	str	r3, [sp, #4]
 80055ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055ae:	9300      	str	r3, [sp, #0]
 80055b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b2:	220a      	movs	r2, #10
 80055b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055b6:	f7ff fe1b 	bl	80051f0 <_PrintInt>
        break;
 80055ba:	e067      	b.n	800568c <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	1d19      	adds	r1, r3, #4
 80055c2:	687a      	ldr	r2, [r7, #4]
 80055c4:	6011      	str	r1, [r2, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80055ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055cc:	f107 0010 	add.w	r0, r7, #16
 80055d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055d2:	9301      	str	r3, [sp, #4]
 80055d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055da:	220a      	movs	r2, #10
 80055dc:	f7ff fd72 	bl	80050c4 <_PrintUnsigned>
        break;
 80055e0:	e054      	b.n	800568c <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	1d19      	adds	r1, r3, #4
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	6011      	str	r1, [r2, #0]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80055f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055f2:	f107 0010 	add.w	r0, r7, #16
 80055f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80055f8:	9301      	str	r3, [sp, #4]
 80055fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005600:	2210      	movs	r2, #16
 8005602:	f7ff fd5f 	bl	80050c4 <_PrintUnsigned>
        break;
 8005606:	e041      	b.n	800568c <_VPrintTarget+0x37c>
 8005608:	2001c5ac 	.word	0x2001c5ac
      case 's':
        s = va_arg(*pParamList, const char*);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	1d19      	adds	r1, r3, #4
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6011      	str	r1, [r2, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 800561a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d101      	bne.n	8005624 <_VPrintTarget+0x314>
          s = "(null)";
 8005620:	4b4a      	ldr	r3, [pc, #296]	@ (800574c <_VPrintTarget+0x43c>)
 8005622:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 8005624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005626:	781b      	ldrb	r3, [r3, #0]
 8005628:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 800562c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800562e:	3301      	adds	r3, #1
 8005630:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 8005632:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00b      	beq.n	8005652 <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 800563a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800563e:	f107 0310 	add.w	r3, r7, #16
 8005642:	4611      	mov	r1, r2
 8005644:	4618      	mov	r0, r3
 8005646:	f7ff fcc1 	bl	8004fcc <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2b7f      	cmp	r3, #127	@ 0x7f
 800564e:	d9e9      	bls.n	8005624 <_VPrintTarget+0x314>
        break;
 8005650:	e01c      	b.n	800568c <_VPrintTarget+0x37c>
            break;
 8005652:	bf00      	nop
        break;
 8005654:	e01a      	b.n	800568c <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	1d19      	adds	r1, r3, #4
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	6011      	str	r1, [r2, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005664:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005666:	f107 0010 	add.w	r0, r7, #16
 800566a:	2300      	movs	r3, #0
 800566c:	9301      	str	r3, [sp, #4]
 800566e:	2308      	movs	r3, #8
 8005670:	9300      	str	r3, [sp, #0]
 8005672:	2308      	movs	r3, #8
 8005674:	2210      	movs	r2, #16
 8005676:	f7ff fd25 	bl	80050c4 <_PrintUnsigned>
        break;
 800567a:	e007      	b.n	800568c <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800567c:	f107 0310 	add.w	r3, r7, #16
 8005680:	2125      	movs	r1, #37	@ 0x25
 8005682:	4618      	mov	r0, r3
 8005684:	f7ff fca2 	bl	8004fcc <_StoreChar>
        break;
 8005688:	e000      	b.n	800568c <_VPrintTarget+0x37c>
      default:
        break;
 800568a:	bf00      	nop
      }
      sFormat++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e007      	b.n	80056a4 <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 8005694:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	4611      	mov	r1, r2
 800569e:	4618      	mov	r0, r3
 80056a0:	f7ff fc94 	bl	8004fcc <_StoreChar>
    }
  } while (*sFormat);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f ae4d 	bne.w	8005348 <_VPrintTarget+0x38>
 80056ae:	e000      	b.n	80056b2 <_VPrintTarget+0x3a2>
      break;
 80056b0:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d041      	beq.n	800573c <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 80056b8:	6a3a      	ldr	r2, [r7, #32]
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c8:	e00b      	b.n	80056e2 <_VPrintTarget+0x3d2>
 80056ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056d0:	1c59      	adds	r1, r3, #1
 80056d2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80056d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056d8:	b2d2      	uxtb	r2, r2
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056de:	09db      	lsrs	r3, r3, #7
 80056e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e6:	d8f0      	bhi.n	80056ca <_VPrintTarget+0x3ba>
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	1c5a      	adds	r2, r3, #1
 80056ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
 80056f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f6:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	637b      	str	r3, [r7, #52]	@ 0x34
 80056fc:	2300      	movs	r3, #0
 80056fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005700:	e00b      	b.n	800571a <_VPrintTarget+0x40a>
 8005702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005704:	b2da      	uxtb	r2, r3
 8005706:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	6379      	str	r1, [r7, #52]	@ 0x34
 800570c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
 8005714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005716:	09db      	lsrs	r3, r3, #7
 8005718:	633b      	str	r3, [r7, #48]	@ 0x30
 800571a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800571c:	2b7f      	cmp	r3, #127	@ 0x7f
 800571e:	d8f0      	bhi.n	8005702 <_VPrintTarget+0x3f2>
 8005720:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	637a      	str	r2, [r7, #52]	@ 0x34
 8005726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005728:	b2d2      	uxtb	r2, r2
 800572a:	701a      	strb	r2, [r3, #0]
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005730:	69bb      	ldr	r3, [r7, #24]
 8005732:	6979      	ldr	r1, [r7, #20]
 8005734:	221a      	movs	r2, #26
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fada 	bl	8004cf0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800573c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573e:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005742:	bf00      	nop
 8005744:	3758      	adds	r7, #88	@ 0x58
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	08006850 	.word	0x08006850

08005750 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005750:	b580      	push	{r7, lr}
 8005752:	b086      	sub	sp, #24
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800575e:	2300      	movs	r3, #0
 8005760:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005764:	4917      	ldr	r1, [pc, #92]	@ (80057c4 <SEGGER_SYSVIEW_Init+0x74>)
 8005766:	4818      	ldr	r0, [pc, #96]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x78>)
 8005768:	f7ff f8cc 	bl	8004904 <SEGGER_RTT_AllocUpBuffer>
 800576c:	4603      	mov	r3, r0
 800576e:	b2da      	uxtb	r2, r3
 8005770:	4b16      	ldr	r3, [pc, #88]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005772:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005774:	4b15      	ldr	r3, [pc, #84]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005776:	785a      	ldrb	r2, [r3, #1]
 8005778:	4b14      	ldr	r3, [pc, #80]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 800577a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800577c:	4b13      	ldr	r3, [pc, #76]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 800577e:	7e1b      	ldrb	r3, [r3, #24]
 8005780:	4618      	mov	r0, r3
 8005782:	2300      	movs	r3, #0
 8005784:	9300      	str	r3, [sp, #0]
 8005786:	2308      	movs	r3, #8
 8005788:	4a11      	ldr	r2, [pc, #68]	@ (80057d0 <SEGGER_SYSVIEW_Init+0x80>)
 800578a:	490f      	ldr	r1, [pc, #60]	@ (80057c8 <SEGGER_SYSVIEW_Init+0x78>)
 800578c:	f7ff f93e 	bl	8004a0c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005790:	4b0e      	ldr	r3, [pc, #56]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 8005792:	2200      	movs	r2, #0
 8005794:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005796:	4b0f      	ldr	r3, [pc, #60]	@ (80057d4 <SEGGER_SYSVIEW_Init+0x84>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	4a0c      	ldr	r2, [pc, #48]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 800579c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800579e:	4a0b      	ldr	r2, [pc, #44]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80057a4:	4a09      	ldr	r2, [pc, #36]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80057aa:	4a08      	ldr	r2, [pc, #32]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80057b0:	4a06      	ldr	r2, [pc, #24]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80057b6:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <SEGGER_SYSVIEW_Init+0x7c>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80057bc:	bf00      	nop
 80057be:	3710      	adds	r7, #16
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	2001b574 	.word	0x2001b574
 80057c8:	08006858 	.word	0x08006858
 80057cc:	2001c57c 	.word	0x2001c57c
 80057d0:	2001c574 	.word	0x2001c574
 80057d4:	e0001004 	.word	0xe0001004

080057d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80057d8:	b480      	push	{r7}
 80057da:	b083      	sub	sp, #12
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80057e0:	4a04      	ldr	r2, [pc, #16]	@ (80057f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6113      	str	r3, [r2, #16]
}
 80057e6:	bf00      	nop
 80057e8:	370c      	adds	r7, #12
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	2001c57c 	.word	0x2001c57c

080057f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005800:	f3ef 8311 	mrs	r3, BASEPRI
 8005804:	f04f 0120 	mov.w	r1, #32
 8005808:	f381 8811 	msr	BASEPRI, r1
 800580c:	60fb      	str	r3, [r7, #12]
 800580e:	4808      	ldr	r0, [pc, #32]	@ (8005830 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005810:	f7ff f981 	bl	8004b16 <_PreparePacket>
 8005814:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	68b8      	ldr	r0, [r7, #8]
 800581c:	f7ff fa68 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f383 8811 	msr	BASEPRI, r3
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	2001c5ac 	.word	0x2001c5ac

08005834 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b088      	sub	sp, #32
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800583e:	f3ef 8311 	mrs	r3, BASEPRI
 8005842:	f04f 0120 	mov.w	r1, #32
 8005846:	f381 8811 	msr	BASEPRI, r1
 800584a:	617b      	str	r3, [r7, #20]
 800584c:	4816      	ldr	r0, [pc, #88]	@ (80058a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800584e:	f7ff f962 	bl	8004b16 <_PreparePacket>
 8005852:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	61fb      	str	r3, [r7, #28]
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	61bb      	str	r3, [r7, #24]
 8005860:	e00b      	b.n	800587a <SEGGER_SYSVIEW_RecordU32+0x46>
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	61f9      	str	r1, [r7, #28]
 800586c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	61bb      	str	r3, [r7, #24]
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	2b7f      	cmp	r3, #127	@ 0x7f
 800587e:	d8f0      	bhi.n	8005862 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	61fa      	str	r2, [r7, #28]
 8005886:	69ba      	ldr	r2, [r7, #24]
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	68f9      	ldr	r1, [r7, #12]
 8005894:	6938      	ldr	r0, [r7, #16]
 8005896:	f7ff fa2b 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f383 8811 	msr	BASEPRI, r3
}
 80058a0:	bf00      	nop
 80058a2:	3720      	adds	r7, #32
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	2001c5ac 	.word	0x2001c5ac

080058ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08c      	sub	sp, #48	@ 0x30
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	60b9      	str	r1, [r7, #8]
 80058b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80058b8:	f3ef 8311 	mrs	r3, BASEPRI
 80058bc:	f04f 0120 	mov.w	r1, #32
 80058c0:	f381 8811 	msr	BASEPRI, r1
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	4825      	ldr	r0, [pc, #148]	@ (800595c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80058c8:	f7ff f925 	bl	8004b16 <_PreparePacket>
 80058cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80058ce:	69bb      	ldr	r3, [r7, #24]
 80058d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058da:	e00b      	b.n	80058f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80058dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	1c59      	adds	r1, r3, #1
 80058e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80058e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	701a      	strb	r2, [r3, #0]
 80058ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f0:	09db      	lsrs	r3, r3, #7
 80058f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80058f8:	d8f0      	bhi.n	80058dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	1c5a      	adds	r2, r3, #1
 80058fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005900:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005902:	b2d2      	uxtb	r2, r2
 8005904:	701a      	strb	r2, [r3, #0]
 8005906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005908:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	627b      	str	r3, [r7, #36]	@ 0x24
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	623b      	str	r3, [r7, #32]
 8005912:	e00b      	b.n	800592c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005914:	6a3b      	ldr	r3, [r7, #32]
 8005916:	b2da      	uxtb	r2, r3
 8005918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591a:	1c59      	adds	r1, r3, #1
 800591c:	6279      	str	r1, [r7, #36]	@ 0x24
 800591e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005922:	b2d2      	uxtb	r2, r2
 8005924:	701a      	strb	r2, [r3, #0]
 8005926:	6a3b      	ldr	r3, [r7, #32]
 8005928:	09db      	lsrs	r3, r3, #7
 800592a:	623b      	str	r3, [r7, #32]
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005930:	d8f0      	bhi.n	8005914 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	627a      	str	r2, [r7, #36]	@ 0x24
 8005938:	6a3a      	ldr	r2, [r7, #32]
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	701a      	strb	r2, [r3, #0]
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	6979      	ldr	r1, [r7, #20]
 8005946:	69b8      	ldr	r0, [r7, #24]
 8005948:	f7ff f9d2 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 800594c:	69fb      	ldr	r3, [r7, #28]
 800594e:	f383 8811 	msr	BASEPRI, r3
}
 8005952:	bf00      	nop
 8005954:	3730      	adds	r7, #48	@ 0x30
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	2001c5ac 	.word	0x2001c5ac

08005960 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	@ 0x30
 8005964:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005966:	4b58      	ldr	r3, [pc, #352]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 8005968:	2201      	movs	r2, #1
 800596a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800596c:	f3ef 8311 	mrs	r3, BASEPRI
 8005970:	f04f 0120 	mov.w	r1, #32
 8005974:	f381 8811 	msr	BASEPRI, r1
 8005978:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800597a:	4b53      	ldr	r3, [pc, #332]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	220a      	movs	r2, #10
 8005980:	4952      	ldr	r1, [pc, #328]	@ (8005acc <SEGGER_SYSVIEW_Start+0x16c>)
 8005982:	4618      	mov	r0, r3
 8005984:	f7fa fc2c 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800598e:	200a      	movs	r0, #10
 8005990:	f7ff ff32 	bl	80057f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005994:	f3ef 8311 	mrs	r3, BASEPRI
 8005998:	f04f 0120 	mov.w	r1, #32
 800599c:	f381 8811 	msr	BASEPRI, r1
 80059a0:	60bb      	str	r3, [r7, #8]
 80059a2:	484b      	ldr	r0, [pc, #300]	@ (8005ad0 <SEGGER_SYSVIEW_Start+0x170>)
 80059a4:	f7ff f8b7 	bl	8004b16 <_PreparePacket>
 80059a8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059b2:	4b45      	ldr	r3, [pc, #276]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059b8:	e00b      	b.n	80059d2 <SEGGER_SYSVIEW_Start+0x72>
 80059ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059c0:	1c59      	adds	r1, r3, #1
 80059c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80059c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059c8:	b2d2      	uxtb	r2, r2
 80059ca:	701a      	strb	r2, [r3, #0]
 80059cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ce:	09db      	lsrs	r3, r3, #7
 80059d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80059d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80059d6:	d8f0      	bhi.n	80059ba <SEGGER_SYSVIEW_Start+0x5a>
 80059d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059da:	1c5a      	adds	r2, r3, #1
 80059dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80059e0:	b2d2      	uxtb	r2, r2
 80059e2:	701a      	strb	r2, [r3, #0]
 80059e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80059ec:	4b36      	ldr	r3, [pc, #216]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	623b      	str	r3, [r7, #32]
 80059f2:	e00b      	b.n	8005a0c <SEGGER_SYSVIEW_Start+0xac>
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fa:	1c59      	adds	r1, r3, #1
 80059fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80059fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a02:	b2d2      	uxtb	r2, r2
 8005a04:	701a      	strb	r2, [r3, #0]
 8005a06:	6a3b      	ldr	r3, [r7, #32]
 8005a08:	09db      	lsrs	r3, r3, #7
 8005a0a:	623b      	str	r3, [r7, #32]
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a10:	d8f0      	bhi.n	80059f4 <SEGGER_SYSVIEW_Start+0x94>
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	1c5a      	adds	r2, r3, #1
 8005a16:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a18:	6a3a      	ldr	r2, [r7, #32]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	4b28      	ldr	r3, [pc, #160]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	61bb      	str	r3, [r7, #24]
 8005a2c:	e00b      	b.n	8005a46 <SEGGER_SYSVIEW_Start+0xe6>
 8005a2e:	69bb      	ldr	r3, [r7, #24]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	1c59      	adds	r1, r3, #1
 8005a36:	61f9      	str	r1, [r7, #28]
 8005a38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a3c:	b2d2      	uxtb	r2, r2
 8005a3e:	701a      	strb	r2, [r3, #0]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	09db      	lsrs	r3, r3, #7
 8005a44:	61bb      	str	r3, [r7, #24]
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a4a:	d8f0      	bhi.n	8005a2e <SEGGER_SYSVIEW_Start+0xce>
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	1c5a      	adds	r2, r3, #1
 8005a50:	61fa      	str	r2, [r7, #28]
 8005a52:	69ba      	ldr	r2, [r7, #24]
 8005a54:	b2d2      	uxtb	r2, r2
 8005a56:	701a      	strb	r2, [r3, #0]
 8005a58:	69fb      	ldr	r3, [r7, #28]
 8005a5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	617b      	str	r3, [r7, #20]
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e00b      	b.n	8005a7e <SEGGER_SYSVIEW_Start+0x11e>
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	b2da      	uxtb	r2, r3
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	1c59      	adds	r1, r3, #1
 8005a6e:	6179      	str	r1, [r7, #20]
 8005a70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a74:	b2d2      	uxtb	r2, r2
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	09db      	lsrs	r3, r3, #7
 8005a7c:	613b      	str	r3, [r7, #16]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a82:	d8f0      	bhi.n	8005a66 <SEGGER_SYSVIEW_Start+0x106>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	617a      	str	r2, [r7, #20]
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005a94:	2218      	movs	r2, #24
 8005a96:	6839      	ldr	r1, [r7, #0]
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff f929 	bl	8004cf0 <_SendPacket>
      RECORD_END();
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005aa4:	4b08      	ldr	r3, [pc, #32]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d002      	beq.n	8005ab2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005aac:	4b06      	ldr	r3, [pc, #24]	@ (8005ac8 <SEGGER_SYSVIEW_Start+0x168>)
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005ab2:	f000 f9eb 	bl	8005e8c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005ab6:	f000 f9b1 	bl	8005e1c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005aba:	f000 fd21 	bl	8006500 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005abe:	bf00      	nop
 8005ac0:	3730      	adds	r7, #48	@ 0x30
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	2001c57c 	.word	0x2001c57c
 8005acc:	08006894 	.word	0x08006894
 8005ad0:	2001c5ac 	.word	0x2001c5ac

08005ad4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005ada:	f3ef 8311 	mrs	r3, BASEPRI
 8005ade:	f04f 0120 	mov.w	r1, #32
 8005ae2:	f381 8811 	msr	BASEPRI, r1
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	480b      	ldr	r0, [pc, #44]	@ (8005b18 <SEGGER_SYSVIEW_Stop+0x44>)
 8005aea:	f7ff f814 	bl	8004b16 <_PreparePacket>
 8005aee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005af0:	4b0a      	ldr	r3, [pc, #40]	@ (8005b1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005af2:	781b      	ldrb	r3, [r3, #0]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d007      	beq.n	8005b08 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005af8:	220b      	movs	r2, #11
 8005afa:	6839      	ldr	r1, [r7, #0]
 8005afc:	6838      	ldr	r0, [r7, #0]
 8005afe:	f7ff f8f7 	bl	8004cf0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <SEGGER_SYSVIEW_Stop+0x48>)
 8005b04:	2200      	movs	r2, #0
 8005b06:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f383 8811 	msr	BASEPRI, r3
}
 8005b0e:	bf00      	nop
 8005b10:	3708      	adds	r7, #8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop
 8005b18:	2001c5ac 	.word	0x2001c5ac
 8005b1c:	2001c57c 	.word	0x2001c57c

08005b20 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b08c      	sub	sp, #48	@ 0x30
 8005b24:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b26:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2a:	f04f 0120 	mov.w	r1, #32
 8005b2e:	f381 8811 	msr	BASEPRI, r1
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	4845      	ldr	r0, [pc, #276]	@ (8005c4c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005b36:	f7fe ffee 	bl	8004b16 <_PreparePacket>
 8005b3a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b44:	4b42      	ldr	r3, [pc, #264]	@ (8005c50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b4a:	e00b      	b.n	8005b64 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b52:	1c59      	adds	r1, r3, #1
 8005b54:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b5a:	b2d2      	uxtb	r2, r2
 8005b5c:	701a      	strb	r2, [r3, #0]
 8005b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b60:	09db      	lsrs	r3, r3, #7
 8005b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b66:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b68:	d8f0      	bhi.n	8005b4c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6c:	1c5a      	adds	r2, r3, #1
 8005b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b72:	b2d2      	uxtb	r2, r2
 8005b74:	701a      	strb	r2, [r3, #0]
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b7e:	4b34      	ldr	r3, [pc, #208]	@ (8005c50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	623b      	str	r3, [r7, #32]
 8005b84:	e00b      	b.n	8005b9e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005b86:	6a3b      	ldr	r3, [r7, #32]
 8005b88:	b2da      	uxtb	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	1c59      	adds	r1, r3, #1
 8005b8e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	09db      	lsrs	r3, r3, #7
 8005b9c:	623b      	str	r3, [r7, #32]
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ba2:	d8f0      	bhi.n	8005b86 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ba6:	1c5a      	adds	r2, r3, #1
 8005ba8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005baa:	6a3a      	ldr	r2, [r7, #32]
 8005bac:	b2d2      	uxtb	r2, r2
 8005bae:	701a      	strb	r2, [r3, #0]
 8005bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	61fb      	str	r3, [r7, #28]
 8005bb8:	4b25      	ldr	r3, [pc, #148]	@ (8005c50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bba:	691b      	ldr	r3, [r3, #16]
 8005bbc:	61bb      	str	r3, [r7, #24]
 8005bbe:	e00b      	b.n	8005bd8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005bc0:	69bb      	ldr	r3, [r7, #24]
 8005bc2:	b2da      	uxtb	r2, r3
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	1c59      	adds	r1, r3, #1
 8005bc8:	61f9      	str	r1, [r7, #28]
 8005bca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bce:	b2d2      	uxtb	r2, r2
 8005bd0:	701a      	strb	r2, [r3, #0]
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	09db      	lsrs	r3, r3, #7
 8005bd6:	61bb      	str	r3, [r7, #24]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bdc:	d8f0      	bhi.n	8005bc0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	1c5a      	adds	r2, r3, #1
 8005be2:	61fa      	str	r2, [r7, #28]
 8005be4:	69ba      	ldr	r2, [r7, #24]
 8005be6:	b2d2      	uxtb	r2, r2
 8005be8:	701a      	strb	r2, [r3, #0]
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	617b      	str	r3, [r7, #20]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	613b      	str	r3, [r7, #16]
 8005bf6:	e00b      	b.n	8005c10 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	1c59      	adds	r1, r3, #1
 8005c00:	6179      	str	r1, [r7, #20]
 8005c02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c06:	b2d2      	uxtb	r2, r2
 8005c08:	701a      	strb	r2, [r3, #0]
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	09db      	lsrs	r3, r3, #7
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c14:	d8f0      	bhi.n	8005bf8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	1c5a      	adds	r2, r3, #1
 8005c1a:	617a      	str	r2, [r7, #20]
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	b2d2      	uxtb	r2, r2
 8005c20:	701a      	strb	r2, [r3, #0]
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005c26:	2218      	movs	r2, #24
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	68b8      	ldr	r0, [r7, #8]
 8005c2c:	f7ff f860 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005c36:	4b06      	ldr	r3, [pc, #24]	@ (8005c50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d002      	beq.n	8005c44 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005c3e:	4b04      	ldr	r3, [pc, #16]	@ (8005c50 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c42:	4798      	blx	r3
  }
}
 8005c44:	bf00      	nop
 8005c46:	3730      	adds	r7, #48	@ 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2001c5ac 	.word	0x2001c5ac
 8005c50:	2001c57c 	.word	0x2001c57c

08005c54 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b092      	sub	sp, #72	@ 0x48
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005c5c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c60:	f04f 0120 	mov.w	r1, #32
 8005c64:	f381 8811 	msr	BASEPRI, r1
 8005c68:	617b      	str	r3, [r7, #20]
 8005c6a:	486a      	ldr	r0, [pc, #424]	@ (8005e14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005c6c:	f7fe ff53 	bl	8004b16 <_PreparePacket>
 8005c70:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b66      	ldr	r3, [pc, #408]	@ (8005e18 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c86:	e00b      	b.n	8005ca0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c8e:	1c59      	adds	r1, r3, #1
 8005c90:	6479      	str	r1, [r7, #68]	@ 0x44
 8005c92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c96:	b2d2      	uxtb	r2, r2
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ca0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ca2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca4:	d8f0      	bhi.n	8005c88 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca8:	1c5a      	adds	r2, r3, #1
 8005caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8005cac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cc0:	e00b      	b.n	8005cda <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005ccc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cd0:	b2d2      	uxtb	r2, r2
 8005cd2:	701a      	strb	r2, [r3, #0]
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	09db      	lsrs	r3, r3, #7
 8005cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cdc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cde:	d8f0      	bhi.n	8005cc2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ce2:	1c5a      	adds	r2, r3, #1
 8005ce4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ce8:	b2d2      	uxtb	r2, r2
 8005cea:	701a      	strb	r2, [r3, #0]
 8005cec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f7fe fed3 	bl	8004aa4 <_EncodeStr>
 8005cfe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d00:	2209      	movs	r2, #9
 8005d02:	68f9      	ldr	r1, [r7, #12]
 8005d04:	6938      	ldr	r0, [r7, #16]
 8005d06:	f7fe fff3 	bl	8004cf0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	4b40      	ldr	r3, [pc, #256]	@ (8005e18 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d18:	691b      	ldr	r3, [r3, #16]
 8005d1a:	1ad3      	subs	r3, r2, r3
 8005d1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d1e:	e00b      	b.n	8005d38 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	b2da      	uxtb	r2, r3
 8005d24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d26:	1c59      	adds	r1, r3, #1
 8005d28:	6379      	str	r1, [r7, #52]	@ 0x34
 8005d2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	09db      	lsrs	r3, r3, #7
 8005d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d3c:	d8f0      	bhi.n	8005d20 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	637a      	str	r2, [r7, #52]	@ 0x34
 8005d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68db      	ldr	r3, [r3, #12]
 8005d56:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d58:	e00b      	b.n	8005d72 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d60:	1c59      	adds	r1, r3, #1
 8005d62:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d68:	b2d2      	uxtb	r2, r2
 8005d6a:	701a      	strb	r2, [r3, #0]
 8005d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6e:	09db      	lsrs	r3, r3, #7
 8005d70:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d74:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d76:	d8f0      	bhi.n	8005d5a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d80:	b2d2      	uxtb	r2, r2
 8005d82:	701a      	strb	r2, [r3, #0]
 8005d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	623b      	str	r3, [r7, #32]
 8005d92:	e00b      	b.n	8005dac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005d94:	6a3b      	ldr	r3, [r7, #32]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	1c59      	adds	r1, r3, #1
 8005d9c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]
 8005da6:	6a3b      	ldr	r3, [r7, #32]
 8005da8:	09db      	lsrs	r3, r3, #7
 8005daa:	623b      	str	r3, [r7, #32]
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8005db0:	d8f0      	bhi.n	8005d94 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db4:	1c5a      	adds	r2, r3, #1
 8005db6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005db8:	6a3a      	ldr	r2, [r7, #32]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	695b      	ldr	r3, [r3, #20]
 8005dca:	61bb      	str	r3, [r7, #24]
 8005dcc:	e00b      	b.n	8005de6 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005dce:	69bb      	ldr	r3, [r7, #24]
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	69fb      	ldr	r3, [r7, #28]
 8005dd4:	1c59      	adds	r1, r3, #1
 8005dd6:	61f9      	str	r1, [r7, #28]
 8005dd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	09db      	lsrs	r3, r3, #7
 8005de4:	61bb      	str	r3, [r7, #24]
 8005de6:	69bb      	ldr	r3, [r7, #24]
 8005de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dea:	d8f0      	bhi.n	8005dce <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	1c5a      	adds	r2, r3, #1
 8005df0:	61fa      	str	r2, [r7, #28]
 8005df2:	69ba      	ldr	r2, [r7, #24]
 8005df4:	b2d2      	uxtb	r2, r2
 8005df6:	701a      	strb	r2, [r3, #0]
 8005df8:	69fb      	ldr	r3, [r7, #28]
 8005dfa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005dfc:	2215      	movs	r2, #21
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6938      	ldr	r0, [r7, #16]
 8005e02:	f7fe ff75 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f383 8811 	msr	BASEPRI, r3
}
 8005e0c:	bf00      	nop
 8005e0e:	3748      	adds	r7, #72	@ 0x48
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	2001c5ac 	.word	0x2001c5ac
 8005e18:	2001c57c 	.word	0x2001c57c

08005e1c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005e20:	4b07      	ldr	r3, [pc, #28]	@ (8005e40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d008      	beq.n	8005e3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005e28:	4b05      	ldr	r3, [pc, #20]	@ (8005e40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e2a:	6a1b      	ldr	r3, [r3, #32]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005e32:	4b03      	ldr	r3, [pc, #12]	@ (8005e40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	4798      	blx	r3
  }
}
 8005e3a:	bf00      	nop
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	2001c57c 	.word	0x2001c57c

08005e44 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b086      	sub	sp, #24
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005e50:	f04f 0120 	mov.w	r1, #32
 8005e54:	f381 8811 	msr	BASEPRI, r1
 8005e58:	617b      	str	r3, [r7, #20]
 8005e5a:	480b      	ldr	r0, [pc, #44]	@ (8005e88 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005e5c:	f7fe fe5b 	bl	8004b16 <_PreparePacket>
 8005e60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005e62:	2280      	movs	r2, #128	@ 0x80
 8005e64:	6879      	ldr	r1, [r7, #4]
 8005e66:	6938      	ldr	r0, [r7, #16]
 8005e68:	f7fe fe1c 	bl	8004aa4 <_EncodeStr>
 8005e6c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005e6e:	220e      	movs	r2, #14
 8005e70:	68f9      	ldr	r1, [r7, #12]
 8005e72:	6938      	ldr	r0, [r7, #16]
 8005e74:	f7fe ff3c 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f383 8811 	msr	BASEPRI, r3
}
 8005e7e:	bf00      	nop
 8005e80:	3718      	adds	r7, #24
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}
 8005e86:	bf00      	nop
 8005e88:	2001c5ac 	.word	0x2001c5ac

08005e8c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005e8c:	b590      	push	{r4, r7, lr}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005e92:	4b15      	ldr	r3, [pc, #84]	@ (8005ee8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e94:	6a1b      	ldr	r3, [r3, #32]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01a      	beq.n	8005ed0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005e9a:	4b13      	ldr	r3, [pc, #76]	@ (8005ee8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005e9c:	6a1b      	ldr	r3, [r3, #32]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d015      	beq.n	8005ed0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005ea4:	4b10      	ldr	r3, [pc, #64]	@ (8005ee8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	4798      	blx	r3
 8005eac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005eb0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005eb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005eb6:	f04f 0200 	mov.w	r2, #0
 8005eba:	f04f 0300 	mov.w	r3, #0
 8005ebe:	000a      	movs	r2, r1
 8005ec0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	4621      	mov	r1, r4
 8005ec8:	200d      	movs	r0, #13
 8005eca:	f7ff fcef 	bl	80058ac <SEGGER_SYSVIEW_RecordU32x2>
 8005ece:	e006      	b.n	8005ede <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005ed0:	4b06      	ldr	r3, [pc, #24]	@ (8005eec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	200c      	movs	r0, #12
 8005ed8:	f7ff fcac 	bl	8005834 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005edc:	bf00      	nop
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd90      	pop	{r4, r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	2001c57c 	.word	0x2001c57c
 8005eec:	e0001004 	.word	0xe0001004

08005ef0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005ef6:	f3ef 8311 	mrs	r3, BASEPRI
 8005efa:	f04f 0120 	mov.w	r1, #32
 8005efe:	f381 8811 	msr	BASEPRI, r1
 8005f02:	60fb      	str	r3, [r7, #12]
 8005f04:	4819      	ldr	r0, [pc, #100]	@ (8005f6c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f06:	f7fe fe06 	bl	8004b16 <_PreparePacket>
 8005f0a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f10:	4b17      	ldr	r3, [pc, #92]	@ (8005f70 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f18:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	617b      	str	r3, [r7, #20]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	613b      	str	r3, [r7, #16]
 8005f22:	e00b      	b.n	8005f3c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	b2da      	uxtb	r2, r3
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	1c59      	adds	r1, r3, #1
 8005f2c:	6179      	str	r1, [r7, #20]
 8005f2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	09db      	lsrs	r3, r3, #7
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f40:	d8f0      	bhi.n	8005f24 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	617a      	str	r2, [r7, #20]
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005f52:	2202      	movs	r2, #2
 8005f54:	6879      	ldr	r1, [r7, #4]
 8005f56:	68b8      	ldr	r0, [r7, #8]
 8005f58:	f7fe feca 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f383 8811 	msr	BASEPRI, r3
}
 8005f62:	bf00      	nop
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	2001c5ac 	.word	0x2001c5ac
 8005f70:	e000ed04 	.word	0xe000ed04

08005f74 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005f7a:	f3ef 8311 	mrs	r3, BASEPRI
 8005f7e:	f04f 0120 	mov.w	r1, #32
 8005f82:	f381 8811 	msr	BASEPRI, r1
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	4807      	ldr	r0, [pc, #28]	@ (8005fa8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8005f8a:	f7fe fdc4 	bl	8004b16 <_PreparePacket>
 8005f8e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8005f90:	2203      	movs	r2, #3
 8005f92:	6839      	ldr	r1, [r7, #0]
 8005f94:	6838      	ldr	r0, [r7, #0]
 8005f96:	f7fe feab 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f383 8811 	msr	BASEPRI, r3
}
 8005fa0:	bf00      	nop
 8005fa2:	3708      	adds	r7, #8
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	2001c5ac 	.word	0x2001c5ac

08005fac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fb2:	f3ef 8311 	mrs	r3, BASEPRI
 8005fb6:	f04f 0120 	mov.w	r1, #32
 8005fba:	f381 8811 	msr	BASEPRI, r1
 8005fbe:	607b      	str	r3, [r7, #4]
 8005fc0:	4807      	ldr	r0, [pc, #28]	@ (8005fe0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005fc2:	f7fe fda8 	bl	8004b16 <_PreparePacket>
 8005fc6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005fc8:	2212      	movs	r2, #18
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6838      	ldr	r0, [r7, #0]
 8005fce:	f7fe fe8f 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f383 8811 	msr	BASEPRI, r3
}
 8005fd8:	bf00      	nop
 8005fda:	3708      	adds	r7, #8
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}
 8005fe0:	2001c5ac 	.word	0x2001c5ac

08005fe4 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005fec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff0:	f04f 0120 	mov.w	r1, #32
 8005ff4:	f381 8811 	msr	BASEPRI, r1
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	4817      	ldr	r0, [pc, #92]	@ (8006058 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8005ffc:	f7fe fd8b 	bl	8004b16 <_PreparePacket>
 8006000:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	61bb      	str	r3, [r7, #24]
 800600e:	e00b      	b.n	8006028 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	1c59      	adds	r1, r3, #1
 8006018:	61f9      	str	r1, [r7, #28]
 800601a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800601e:	b2d2      	uxtb	r2, r2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	09db      	lsrs	r3, r3, #7
 8006026:	61bb      	str	r3, [r7, #24]
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	2b7f      	cmp	r3, #127	@ 0x7f
 800602c:	d8f0      	bhi.n	8006010 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1c5a      	adds	r2, r3, #1
 8006032:	61fa      	str	r2, [r7, #28]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800603e:	221c      	movs	r2, #28
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	6938      	ldr	r0, [r7, #16]
 8006044:	f7fe fe54 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	f383 8811 	msr	BASEPRI, r3
}
 800604e:	bf00      	nop
 8006050:	3720      	adds	r7, #32
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	2001c5ac 	.word	0x2001c5ac

0800605c <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	@ 0x28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006066:	f3ef 8311 	mrs	r3, BASEPRI
 800606a:	f04f 0120 	mov.w	r1, #32
 800606e:	f381 8811 	msr	BASEPRI, r1
 8006072:	617b      	str	r3, [r7, #20]
 8006074:	4824      	ldr	r0, [pc, #144]	@ (8006108 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8006076:	f7fe fd4e 	bl	8004b16 <_PreparePacket>
 800607a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	627b      	str	r3, [r7, #36]	@ 0x24
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e00b      	b.n	80060a2 <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	b2da      	uxtb	r2, r3
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1c59      	adds	r1, r3, #1
 8006092:	6279      	str	r1, [r7, #36]	@ 0x24
 8006094:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	09db      	lsrs	r3, r3, #7
 80060a0:	623b      	str	r3, [r7, #32]
 80060a2:	6a3b      	ldr	r3, [r7, #32]
 80060a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a6:	d8f0      	bhi.n	800608a <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 80060a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060aa:	1c5a      	adds	r2, r3, #1
 80060ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80060ae:	6a3a      	ldr	r2, [r7, #32]
 80060b0:	b2d2      	uxtb	r2, r2
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	61fb      	str	r3, [r7, #28]
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	61bb      	str	r3, [r7, #24]
 80060c0:	e00b      	b.n	80060da <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	b2da      	uxtb	r2, r3
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	1c59      	adds	r1, r3, #1
 80060ca:	61f9      	str	r1, [r7, #28]
 80060cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d0:	b2d2      	uxtb	r2, r2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	09db      	lsrs	r3, r3, #7
 80060d8:	61bb      	str	r3, [r7, #24]
 80060da:	69bb      	ldr	r3, [r7, #24]
 80060dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80060de:	d8f0      	bhi.n	80060c2 <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	61fa      	str	r2, [r7, #28]
 80060e6:	69ba      	ldr	r2, [r7, #24]
 80060e8:	b2d2      	uxtb	r2, r2
 80060ea:	701a      	strb	r2, [r3, #0]
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80060f0:	221c      	movs	r2, #28
 80060f2:	68f9      	ldr	r1, [r7, #12]
 80060f4:	6938      	ldr	r0, [r7, #16]
 80060f6:	f7fe fdfb 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f383 8811 	msr	BASEPRI, r3
}
 8006100:	bf00      	nop
 8006102:	3728      	adds	r7, #40	@ 0x28
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}
 8006108:	2001c5ac 	.word	0x2001c5ac

0800610c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800610c:	b580      	push	{r7, lr}
 800610e:	b082      	sub	sp, #8
 8006110:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006112:	f3ef 8311 	mrs	r3, BASEPRI
 8006116:	f04f 0120 	mov.w	r1, #32
 800611a:	f381 8811 	msr	BASEPRI, r1
 800611e:	607b      	str	r3, [r7, #4]
 8006120:	4807      	ldr	r0, [pc, #28]	@ (8006140 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006122:	f7fe fcf8 	bl	8004b16 <_PreparePacket>
 8006126:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006128:	2211      	movs	r2, #17
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6838      	ldr	r0, [r7, #0]
 800612e:	f7fe fddf 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f383 8811 	msr	BASEPRI, r3
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	2001c5ac 	.word	0x2001c5ac

08006144 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006144:	b580      	push	{r7, lr}
 8006146:	b088      	sub	sp, #32
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800614c:	f3ef 8311 	mrs	r3, BASEPRI
 8006150:	f04f 0120 	mov.w	r1, #32
 8006154:	f381 8811 	msr	BASEPRI, r1
 8006158:	617b      	str	r3, [r7, #20]
 800615a:	4819      	ldr	r0, [pc, #100]	@ (80061c0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800615c:	f7fe fcdb 	bl	8004b16 <_PreparePacket>
 8006160:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006166:	4b17      	ldr	r3, [pc, #92]	@ (80061c4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006168:	691b      	ldr	r3, [r3, #16]
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	1ad3      	subs	r3, r2, r3
 800616e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	61bb      	str	r3, [r7, #24]
 8006178:	e00b      	b.n	8006192 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	61f9      	str	r1, [r7, #28]
 8006184:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	61bb      	str	r3, [r7, #24]
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	2b7f      	cmp	r3, #127	@ 0x7f
 8006196:	d8f0      	bhi.n	800617a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	61fa      	str	r2, [r7, #28]
 800619e:	69ba      	ldr	r2, [r7, #24]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80061a8:	2208      	movs	r2, #8
 80061aa:	68f9      	ldr	r1, [r7, #12]
 80061ac:	6938      	ldr	r0, [r7, #16]
 80061ae:	f7fe fd9f 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f383 8811 	msr	BASEPRI, r3
}
 80061b8:	bf00      	nop
 80061ba:	3720      	adds	r7, #32
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	2001c5ac 	.word	0x2001c5ac
 80061c4:	2001c57c 	.word	0x2001c57c

080061c8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	f04f 0120 	mov.w	r1, #32
 80061d8:	f381 8811 	msr	BASEPRI, r1
 80061dc:	617b      	str	r3, [r7, #20]
 80061de:	4819      	ldr	r0, [pc, #100]	@ (8006244 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80061e0:	f7fe fc99 	bl	8004b16 <_PreparePacket>
 80061e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061ea:	4b17      	ldr	r3, [pc, #92]	@ (8006248 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	61bb      	str	r3, [r7, #24]
 80061fc:	e00b      	b.n	8006216 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	b2da      	uxtb	r2, r3
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	1c59      	adds	r1, r3, #1
 8006206:	61f9      	str	r1, [r7, #28]
 8006208:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800620c:	b2d2      	uxtb	r2, r2
 800620e:	701a      	strb	r2, [r3, #0]
 8006210:	69bb      	ldr	r3, [r7, #24]
 8006212:	09db      	lsrs	r3, r3, #7
 8006214:	61bb      	str	r3, [r7, #24]
 8006216:	69bb      	ldr	r3, [r7, #24]
 8006218:	2b7f      	cmp	r3, #127	@ 0x7f
 800621a:	d8f0      	bhi.n	80061fe <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	61fa      	str	r2, [r7, #28]
 8006222:	69ba      	ldr	r2, [r7, #24]
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800622c:	2204      	movs	r2, #4
 800622e:	68f9      	ldr	r1, [r7, #12]
 8006230:	6938      	ldr	r0, [r7, #16]
 8006232:	f7fe fd5d 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f383 8811 	msr	BASEPRI, r3
}
 800623c:	bf00      	nop
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	2001c5ac 	.word	0x2001c5ac
 8006248:	2001c57c 	.word	0x2001c57c

0800624c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006254:	f3ef 8311 	mrs	r3, BASEPRI
 8006258:	f04f 0120 	mov.w	r1, #32
 800625c:	f381 8811 	msr	BASEPRI, r1
 8006260:	617b      	str	r3, [r7, #20]
 8006262:	4819      	ldr	r0, [pc, #100]	@ (80062c8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006264:	f7fe fc57 	bl	8004b16 <_PreparePacket>
 8006268:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800626e:	4b17      	ldr	r3, [pc, #92]	@ (80062cc <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	61bb      	str	r3, [r7, #24]
 8006280:	e00b      	b.n	800629a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006282:	69bb      	ldr	r3, [r7, #24]
 8006284:	b2da      	uxtb	r2, r3
 8006286:	69fb      	ldr	r3, [r7, #28]
 8006288:	1c59      	adds	r1, r3, #1
 800628a:	61f9      	str	r1, [r7, #28]
 800628c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	69bb      	ldr	r3, [r7, #24]
 8006296:	09db      	lsrs	r3, r3, #7
 8006298:	61bb      	str	r3, [r7, #24]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	2b7f      	cmp	r3, #127	@ 0x7f
 800629e:	d8f0      	bhi.n	8006282 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	1c5a      	adds	r2, r3, #1
 80062a4:	61fa      	str	r2, [r7, #28]
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80062b0:	2206      	movs	r2, #6
 80062b2:	68f9      	ldr	r1, [r7, #12]
 80062b4:	6938      	ldr	r0, [r7, #16]
 80062b6:	f7fe fd1b 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	f383 8811 	msr	BASEPRI, r3
}
 80062c0:	bf00      	nop
 80062c2:	3720      	adds	r7, #32
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	2001c5ac 	.word	0x2001c5ac
 80062cc:	2001c57c 	.word	0x2001c57c

080062d0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	@ 0x28
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062da:	f3ef 8311 	mrs	r3, BASEPRI
 80062de:	f04f 0120 	mov.w	r1, #32
 80062e2:	f381 8811 	msr	BASEPRI, r1
 80062e6:	617b      	str	r3, [r7, #20]
 80062e8:	4827      	ldr	r0, [pc, #156]	@ (8006388 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80062ea:	f7fe fc14 	bl	8004b16 <_PreparePacket>
 80062ee:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062f4:	4b25      	ldr	r3, [pc, #148]	@ (800638c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	687a      	ldr	r2, [r7, #4]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	627b      	str	r3, [r7, #36]	@ 0x24
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	623b      	str	r3, [r7, #32]
 8006306:	e00b      	b.n	8006320 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800630e:	1c59      	adds	r1, r3, #1
 8006310:	6279      	str	r1, [r7, #36]	@ 0x24
 8006312:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006316:	b2d2      	uxtb	r2, r2
 8006318:	701a      	strb	r2, [r3, #0]
 800631a:	6a3b      	ldr	r3, [r7, #32]
 800631c:	09db      	lsrs	r3, r3, #7
 800631e:	623b      	str	r3, [r7, #32]
 8006320:	6a3b      	ldr	r3, [r7, #32]
 8006322:	2b7f      	cmp	r3, #127	@ 0x7f
 8006324:	d8f0      	bhi.n	8006308 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	627a      	str	r2, [r7, #36]	@ 0x24
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	b2d2      	uxtb	r2, r2
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006334:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	61bb      	str	r3, [r7, #24]
 800633e:	e00b      	b.n	8006358 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	b2da      	uxtb	r2, r3
 8006344:	69fb      	ldr	r3, [r7, #28]
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	61f9      	str	r1, [r7, #28]
 800634a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	09db      	lsrs	r3, r3, #7
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	2b7f      	cmp	r3, #127	@ 0x7f
 800635c:	d8f0      	bhi.n	8006340 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	1c5a      	adds	r2, r3, #1
 8006362:	61fa      	str	r2, [r7, #28]
 8006364:	69ba      	ldr	r2, [r7, #24]
 8006366:	b2d2      	uxtb	r2, r2
 8006368:	701a      	strb	r2, [r3, #0]
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800636e:	2207      	movs	r2, #7
 8006370:	68f9      	ldr	r1, [r7, #12]
 8006372:	6938      	ldr	r0, [r7, #16]
 8006374:	f7fe fcbc 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	f383 8811 	msr	BASEPRI, r3
}
 800637e:	bf00      	nop
 8006380:	3728      	adds	r7, #40	@ 0x28
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	2001c5ac 	.word	0x2001c5ac
 800638c:	2001c57c 	.word	0x2001c57c

08006390 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006398:	4b04      	ldr	r3, [pc, #16]	@ (80063ac <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800639a:	691b      	ldr	r3, [r3, #16]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	1ad3      	subs	r3, r2, r3
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr
 80063ac:	2001c57c 	.word	0x2001c57c

080063b0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b08c      	sub	sp, #48	@ 0x30
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80063ba:	4b40      	ldr	r3, [pc, #256]	@ (80064bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d077      	beq.n	80064b2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 80063c2:	4b3e      	ldr	r3, [pc, #248]	@ (80064bc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 80063c8:	2300      	movs	r3, #0
 80063ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063cc:	e008      	b.n	80063e0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80063ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 80063d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80063da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063dc:	3301      	adds	r3, #1
 80063de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e0:	79fb      	ldrb	r3, [r7, #7]
 80063e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3f2      	bcc.n	80063ce <SEGGER_SYSVIEW_SendModule+0x1e>
 80063e8:	e000      	b.n	80063ec <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80063ea:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80063ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d055      	beq.n	800649e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80063f2:	f3ef 8311 	mrs	r3, BASEPRI
 80063f6:	f04f 0120 	mov.w	r1, #32
 80063fa:	f381 8811 	msr	BASEPRI, r1
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	482f      	ldr	r0, [pc, #188]	@ (80064c0 <SEGGER_SYSVIEW_SendModule+0x110>)
 8006402:	f7fe fb88 	bl	8004b16 <_PreparePacket>
 8006406:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006410:	79fb      	ldrb	r3, [r7, #7]
 8006412:	623b      	str	r3, [r7, #32]
 8006414:	e00b      	b.n	800642e <SEGGER_SYSVIEW_SendModule+0x7e>
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	b2da      	uxtb	r2, r3
 800641a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641c:	1c59      	adds	r1, r3, #1
 800641e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006420:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	701a      	strb	r2, [r3, #0]
 8006428:	6a3b      	ldr	r3, [r7, #32]
 800642a:	09db      	lsrs	r3, r3, #7
 800642c:	623b      	str	r3, [r7, #32]
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	2b7f      	cmp	r3, #127	@ 0x7f
 8006432:	d8f0      	bhi.n	8006416 <SEGGER_SYSVIEW_SendModule+0x66>
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	1c5a      	adds	r2, r3, #1
 8006438:	627a      	str	r2, [r7, #36]	@ 0x24
 800643a:	6a3a      	ldr	r2, [r7, #32]
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	61bb      	str	r3, [r7, #24]
 800644e:	e00b      	b.n	8006468 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	b2da      	uxtb	r2, r3
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	1c59      	adds	r1, r3, #1
 8006458:	61f9      	str	r1, [r7, #28]
 800645a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	701a      	strb	r2, [r3, #0]
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	09db      	lsrs	r3, r3, #7
 8006466:	61bb      	str	r3, [r7, #24]
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2b7f      	cmp	r3, #127	@ 0x7f
 800646c:	d8f0      	bhi.n	8006450 <SEGGER_SYSVIEW_SendModule+0xa0>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	1c5a      	adds	r2, r3, #1
 8006472:	61fa      	str	r2, [r7, #28]
 8006474:	69ba      	ldr	r2, [r7, #24]
 8006476:	b2d2      	uxtb	r2, r2
 8006478:	701a      	strb	r2, [r3, #0]
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800647e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2280      	movs	r2, #128	@ 0x80
 8006484:	4619      	mov	r1, r3
 8006486:	68f8      	ldr	r0, [r7, #12]
 8006488:	f7fe fb0c 	bl	8004aa4 <_EncodeStr>
 800648c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800648e:	2216      	movs	r2, #22
 8006490:	68f9      	ldr	r1, [r7, #12]
 8006492:	6938      	ldr	r0, [r7, #16]
 8006494:	f7fe fc2c 	bl	8004cf0 <_SendPacket>
      RECORD_END();
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800649e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d006      	beq.n	80064b2 <SEGGER_SYSVIEW_SendModule+0x102>
 80064a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a6:	68db      	ldr	r3, [r3, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80064ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	4798      	blx	r3
    }
  }
}
 80064b2:	bf00      	nop
 80064b4:	3730      	adds	r7, #48	@ 0x30
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	2001c5a4 	.word	0x2001c5a4
 80064c0:	2001c5ac 	.word	0x2001c5ac

080064c4 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b082      	sub	sp, #8
 80064c8:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80064ca:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00f      	beq.n	80064f2 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80064d2:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	68db      	ldr	r3, [r3, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d002      	beq.n	80064e6 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	691b      	ldr	r3, [r3, #16]
 80064ea:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1f2      	bne.n	80064d8 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80064f2:	bf00      	nop
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	2001c5a4 	.word	0x2001c5a4

08006500 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006500:	b580      	push	{r7, lr}
 8006502:	b086      	sub	sp, #24
 8006504:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006506:	f3ef 8311 	mrs	r3, BASEPRI
 800650a:	f04f 0120 	mov.w	r1, #32
 800650e:	f381 8811 	msr	BASEPRI, r1
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	4817      	ldr	r0, [pc, #92]	@ (8006574 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006516:	f7fe fafe 	bl	8004b16 <_PreparePacket>
 800651a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	617b      	str	r3, [r7, #20]
 8006524:	4b14      	ldr	r3, [pc, #80]	@ (8006578 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	613b      	str	r3, [r7, #16]
 800652a:	e00b      	b.n	8006544 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	b2da      	uxtb	r2, r3
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	1c59      	adds	r1, r3, #1
 8006534:	6179      	str	r1, [r7, #20]
 8006536:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	701a      	strb	r2, [r3, #0]
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	09db      	lsrs	r3, r3, #7
 8006542:	613b      	str	r3, [r7, #16]
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	2b7f      	cmp	r3, #127	@ 0x7f
 8006548:	d8f0      	bhi.n	800652c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	1c5a      	adds	r2, r3, #1
 800654e:	617a      	str	r2, [r7, #20]
 8006550:	693a      	ldr	r2, [r7, #16]
 8006552:	b2d2      	uxtb	r2, r2
 8006554:	701a      	strb	r2, [r3, #0]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800655a:	221b      	movs	r2, #27
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	68b8      	ldr	r0, [r7, #8]
 8006560:	f7fe fbc6 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f383 8811 	msr	BASEPRI, r3
}
 800656a:	bf00      	nop
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	2001c5ac 	.word	0x2001c5ac
 8006578:	2001c5a8 	.word	0x2001c5a8

0800657c <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 800657c:	b40f      	push	{r0, r1, r2, r3}
 800657e:	b580      	push	{r7, lr}
 8006580:	b082      	sub	sp, #8
 8006582:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006584:	f107 0314 	add.w	r3, r7, #20
 8006588:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	461a      	mov	r2, r3
 800658e:	2100      	movs	r1, #0
 8006590:	6938      	ldr	r0, [r7, #16]
 8006592:	f7fe febd 	bl	8005310 <_VPrintTarget>
  va_end(ParamList);
}
 8006596:	bf00      	nop
 8006598:	3708      	adds	r7, #8
 800659a:	46bd      	mov	sp, r7
 800659c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80065a0:	b004      	add	sp, #16
 80065a2:	4770      	bx	lr

080065a4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b08a      	sub	sp, #40	@ 0x28
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065ac:	f3ef 8311 	mrs	r3, BASEPRI
 80065b0:	f04f 0120 	mov.w	r1, #32
 80065b4:	f381 8811 	msr	BASEPRI, r1
 80065b8:	617b      	str	r3, [r7, #20]
 80065ba:	4827      	ldr	r0, [pc, #156]	@ (8006658 <SEGGER_SYSVIEW_Warn+0xb4>)
 80065bc:	f7fe faab 	bl	8004b16 <_PreparePacket>
 80065c0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80065c2:	2280      	movs	r2, #128	@ 0x80
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	6938      	ldr	r0, [r7, #16]
 80065c8:	f7fe fa6c 	bl	8004aa4 <_EncodeStr>
 80065cc:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d2:	2301      	movs	r3, #1
 80065d4:	623b      	str	r3, [r7, #32]
 80065d6:	e00b      	b.n	80065f0 <SEGGER_SYSVIEW_Warn+0x4c>
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	b2da      	uxtb	r2, r3
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	1c59      	adds	r1, r3, #1
 80065e0:	6279      	str	r1, [r7, #36]	@ 0x24
 80065e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	09db      	lsrs	r3, r3, #7
 80065ee:	623b      	str	r3, [r7, #32]
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065f4:	d8f0      	bhi.n	80065d8 <SEGGER_SYSVIEW_Warn+0x34>
 80065f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065f8:	1c5a      	adds	r2, r3, #1
 80065fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	b2d2      	uxtb	r2, r2
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006604:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	61fb      	str	r3, [r7, #28]
 800660a:	2300      	movs	r3, #0
 800660c:	61bb      	str	r3, [r7, #24]
 800660e:	e00b      	b.n	8006628 <SEGGER_SYSVIEW_Warn+0x84>
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	b2da      	uxtb	r2, r3
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	1c59      	adds	r1, r3, #1
 8006618:	61f9      	str	r1, [r7, #28]
 800661a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	09db      	lsrs	r3, r3, #7
 8006626:	61bb      	str	r3, [r7, #24]
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b7f      	cmp	r3, #127	@ 0x7f
 800662c:	d8f0      	bhi.n	8006610 <SEGGER_SYSVIEW_Warn+0x6c>
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	1c5a      	adds	r2, r3, #1
 8006632:	61fa      	str	r2, [r7, #28]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800663e:	221a      	movs	r2, #26
 8006640:	68f9      	ldr	r1, [r7, #12]
 8006642:	6938      	ldr	r0, [r7, #16]
 8006644:	f7fe fb54 	bl	8004cf0 <_SendPacket>
  RECORD_END();
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f383 8811 	msr	BASEPRI, r3
}
 800664e:	bf00      	nop
 8006650:	3728      	adds	r7, #40	@ 0x28
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	2001c5ac 	.word	0x2001c5ac

0800665c <memcmp>:
 800665c:	b510      	push	{r4, lr}
 800665e:	3901      	subs	r1, #1
 8006660:	4402      	add	r2, r0
 8006662:	4290      	cmp	r0, r2
 8006664:	d101      	bne.n	800666a <memcmp+0xe>
 8006666:	2000      	movs	r0, #0
 8006668:	e005      	b.n	8006676 <memcmp+0x1a>
 800666a:	7803      	ldrb	r3, [r0, #0]
 800666c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006670:	42a3      	cmp	r3, r4
 8006672:	d001      	beq.n	8006678 <memcmp+0x1c>
 8006674:	1b18      	subs	r0, r3, r4
 8006676:	bd10      	pop	{r4, pc}
 8006678:	3001      	adds	r0, #1
 800667a:	e7f2      	b.n	8006662 <memcmp+0x6>

0800667c <memset>:
 800667c:	4402      	add	r2, r0
 800667e:	4603      	mov	r3, r0
 8006680:	4293      	cmp	r3, r2
 8006682:	d100      	bne.n	8006686 <memset+0xa>
 8006684:	4770      	bx	lr
 8006686:	f803 1b01 	strb.w	r1, [r3], #1
 800668a:	e7f9      	b.n	8006680 <memset+0x4>

0800668c <__libc_init_array>:
 800668c:	b570      	push	{r4, r5, r6, lr}
 800668e:	4d0d      	ldr	r5, [pc, #52]	@ (80066c4 <__libc_init_array+0x38>)
 8006690:	4c0d      	ldr	r4, [pc, #52]	@ (80066c8 <__libc_init_array+0x3c>)
 8006692:	1b64      	subs	r4, r4, r5
 8006694:	10a4      	asrs	r4, r4, #2
 8006696:	2600      	movs	r6, #0
 8006698:	42a6      	cmp	r6, r4
 800669a:	d109      	bne.n	80066b0 <__libc_init_array+0x24>
 800669c:	4d0b      	ldr	r5, [pc, #44]	@ (80066cc <__libc_init_array+0x40>)
 800669e:	4c0c      	ldr	r4, [pc, #48]	@ (80066d0 <__libc_init_array+0x44>)
 80066a0:	f000 f826 	bl	80066f0 <_init>
 80066a4:	1b64      	subs	r4, r4, r5
 80066a6:	10a4      	asrs	r4, r4, #2
 80066a8:	2600      	movs	r6, #0
 80066aa:	42a6      	cmp	r6, r4
 80066ac:	d105      	bne.n	80066ba <__libc_init_array+0x2e>
 80066ae:	bd70      	pop	{r4, r5, r6, pc}
 80066b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80066b4:	4798      	blx	r3
 80066b6:	3601      	adds	r6, #1
 80066b8:	e7ee      	b.n	8006698 <__libc_init_array+0xc>
 80066ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80066be:	4798      	blx	r3
 80066c0:	3601      	adds	r6, #1
 80066c2:	e7f2      	b.n	80066aa <__libc_init_array+0x1e>
 80066c4:	080068b8 	.word	0x080068b8
 80066c8:	080068b8 	.word	0x080068b8
 80066cc:	080068b8 	.word	0x080068b8
 80066d0:	080068bc 	.word	0x080068bc

080066d4 <memcpy>:
 80066d4:	440a      	add	r2, r1
 80066d6:	4291      	cmp	r1, r2
 80066d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80066dc:	d100      	bne.n	80066e0 <memcpy+0xc>
 80066de:	4770      	bx	lr
 80066e0:	b510      	push	{r4, lr}
 80066e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066ea:	4291      	cmp	r1, r2
 80066ec:	d1f9      	bne.n	80066e2 <memcpy+0xe>
 80066ee:	bd10      	pop	{r4, pc}

080066f0 <_init>:
 80066f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066f2:	bf00      	nop
 80066f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066f6:	bc08      	pop	{r3}
 80066f8:	469e      	mov	lr, r3
 80066fa:	4770      	bx	lr

080066fc <_fini>:
 80066fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066fe:	bf00      	nop
 8006700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006702:	bc08      	pop	{r3}
 8006704:	469e      	mov	lr, r3
 8006706:	4770      	bx	lr
