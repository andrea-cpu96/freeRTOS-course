
007Queues_n_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6c0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000580  0800b860  0800b860  0000c860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bde0  0800bde0  0000d084  2**0
                  CONTENTS
  4 .ARM          00000008  0800bde0  0800bde0  0000cde0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bde8  0800bde8  0000d084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bde8  0800bde8  0000cde8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bdec  0800bdec  0000cdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800bdf0  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001ce5c  20000084  0800be74  0000d084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001cee0  0800be74  0000dee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e777  00000000  00000000  0000d0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004542  00000000  00000000  0002b82b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000143a  00000000  00000000  000317a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d304  00000000  00000000  00032bda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00020a86  00000000  00000000  0004fede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b796f  00000000  00000000  00070964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001282d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000075b4  00000000  00000000  00128318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f7  00000000  00000000  0012f8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b848 	.word	0x0800b848

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	0800b848 	.word	0x0800b848

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	20019bc0 	.word	0x20019bc0

08000274 <strcmp>:
 8000274:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000278:	f811 3b01 	ldrb.w	r3, [r1], #1
 800027c:	2a01      	cmp	r2, #1
 800027e:	bf28      	it	cs
 8000280:	429a      	cmpcs	r2, r3
 8000282:	d0f7      	beq.n	8000274 <strcmp>
 8000284:	1ad0      	subs	r0, r2, r3
 8000286:	4770      	bx	lr

08000288 <strlen>:
 8000288:	4603      	mov	r3, r0
 800028a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800028e:	2a00      	cmp	r2, #0
 8000290:	d1fb      	bne.n	800028a <strlen+0x2>
 8000292:	1a18      	subs	r0, r3, r0
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
	...

080002a0 <memchr>:
 80002a0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002a4:	2a10      	cmp	r2, #16
 80002a6:	db2b      	blt.n	8000300 <memchr+0x60>
 80002a8:	f010 0f07 	tst.w	r0, #7
 80002ac:	d008      	beq.n	80002c0 <memchr+0x20>
 80002ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b2:	3a01      	subs	r2, #1
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d02d      	beq.n	8000314 <memchr+0x74>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	b342      	cbz	r2, 8000310 <memchr+0x70>
 80002be:	d1f6      	bne.n	80002ae <memchr+0xe>
 80002c0:	b4f0      	push	{r4, r5, r6, r7}
 80002c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ca:	f022 0407 	bic.w	r4, r2, #7
 80002ce:	f07f 0700 	mvns.w	r7, #0
 80002d2:	2300      	movs	r3, #0
 80002d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002d8:	3c08      	subs	r4, #8
 80002da:	ea85 0501 	eor.w	r5, r5, r1
 80002de:	ea86 0601 	eor.w	r6, r6, r1
 80002e2:	fa85 f547 	uadd8	r5, r5, r7
 80002e6:	faa3 f587 	sel	r5, r3, r7
 80002ea:	fa86 f647 	uadd8	r6, r6, r7
 80002ee:	faa5 f687 	sel	r6, r5, r7
 80002f2:	b98e      	cbnz	r6, 8000318 <memchr+0x78>
 80002f4:	d1ee      	bne.n	80002d4 <memchr+0x34>
 80002f6:	bcf0      	pop	{r4, r5, r6, r7}
 80002f8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002fc:	f002 0207 	and.w	r2, r2, #7
 8000300:	b132      	cbz	r2, 8000310 <memchr+0x70>
 8000302:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000306:	3a01      	subs	r2, #1
 8000308:	ea83 0301 	eor.w	r3, r3, r1
 800030c:	b113      	cbz	r3, 8000314 <memchr+0x74>
 800030e:	d1f8      	bne.n	8000302 <memchr+0x62>
 8000310:	2000      	movs	r0, #0
 8000312:	4770      	bx	lr
 8000314:	3801      	subs	r0, #1
 8000316:	4770      	bx	lr
 8000318:	2d00      	cmp	r5, #0
 800031a:	bf06      	itte	eq
 800031c:	4635      	moveq	r5, r6
 800031e:	3803      	subeq	r0, #3
 8000320:	3807      	subne	r0, #7
 8000322:	f015 0f01 	tst.w	r5, #1
 8000326:	d107      	bne.n	8000338 <memchr+0x98>
 8000328:	3001      	adds	r0, #1
 800032a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800032e:	bf02      	ittt	eq
 8000330:	3001      	addeq	r0, #1
 8000332:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000336:	3001      	addeq	r0, #1
 8000338:	bcf0      	pop	{r4, r5, r6, r7}
 800033a:	3801      	subs	r0, #1
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295
 8000350:	f04f 30ff 	movne.w	r0, #4294967295
 8000354:	f000 b96a 	b.w	800062c <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9d08      	ldr	r5, [sp, #32]
 8000376:	460c      	mov	r4, r1
 8000378:	2b00      	cmp	r3, #0
 800037a:	d14e      	bne.n	800041a <__udivmoddi4+0xaa>
 800037c:	4694      	mov	ip, r2
 800037e:	458c      	cmp	ip, r1
 8000380:	4686      	mov	lr, r0
 8000382:	fab2 f282 	clz	r2, r2
 8000386:	d962      	bls.n	800044e <__udivmoddi4+0xde>
 8000388:	b14a      	cbz	r2, 800039e <__udivmoddi4+0x2e>
 800038a:	f1c2 0320 	rsb	r3, r2, #32
 800038e:	4091      	lsls	r1, r2
 8000390:	fa20 f303 	lsr.w	r3, r0, r3
 8000394:	fa0c fc02 	lsl.w	ip, ip, r2
 8000398:	4319      	orrs	r1, r3
 800039a:	fa00 fe02 	lsl.w	lr, r0, r2
 800039e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a2:	fa1f f68c 	uxth.w	r6, ip
 80003a6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ae:	fb07 1114 	mls	r1, r7, r4, r1
 80003b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b6:	fb04 f106 	mul.w	r1, r4, r6
 80003ba:	4299      	cmp	r1, r3
 80003bc:	d90a      	bls.n	80003d4 <__udivmoddi4+0x64>
 80003be:	eb1c 0303 	adds.w	r3, ip, r3
 80003c2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003c6:	f080 8112 	bcs.w	80005ee <__udivmoddi4+0x27e>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 810f 	bls.w	80005ee <__udivmoddi4+0x27e>
 80003d0:	3c02      	subs	r4, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	fa1f f38e 	uxth.w	r3, lr
 80003da:	fbb1 f0f7 	udiv	r0, r1, r7
 80003de:	fb07 1110 	mls	r1, r7, r0, r1
 80003e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003e6:	fb00 f606 	mul.w	r6, r0, r6
 80003ea:	429e      	cmp	r6, r3
 80003ec:	d90a      	bls.n	8000404 <__udivmoddi4+0x94>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003f6:	f080 80fc 	bcs.w	80005f2 <__udivmoddi4+0x282>
 80003fa:	429e      	cmp	r6, r3
 80003fc:	f240 80f9 	bls.w	80005f2 <__udivmoddi4+0x282>
 8000400:	4463      	add	r3, ip
 8000402:	3802      	subs	r0, #2
 8000404:	1b9b      	subs	r3, r3, r6
 8000406:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800040a:	2100      	movs	r1, #0
 800040c:	b11d      	cbz	r5, 8000416 <__udivmoddi4+0xa6>
 800040e:	40d3      	lsrs	r3, r2
 8000410:	2200      	movs	r2, #0
 8000412:	e9c5 3200 	strd	r3, r2, [r5]
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	428b      	cmp	r3, r1
 800041c:	d905      	bls.n	800042a <__udivmoddi4+0xba>
 800041e:	b10d      	cbz	r5, 8000424 <__udivmoddi4+0xb4>
 8000420:	e9c5 0100 	strd	r0, r1, [r5]
 8000424:	2100      	movs	r1, #0
 8000426:	4608      	mov	r0, r1
 8000428:	e7f5      	b.n	8000416 <__udivmoddi4+0xa6>
 800042a:	fab3 f183 	clz	r1, r3
 800042e:	2900      	cmp	r1, #0
 8000430:	d146      	bne.n	80004c0 <__udivmoddi4+0x150>
 8000432:	42a3      	cmp	r3, r4
 8000434:	d302      	bcc.n	800043c <__udivmoddi4+0xcc>
 8000436:	4290      	cmp	r0, r2
 8000438:	f0c0 80f0 	bcc.w	800061c <__udivmoddi4+0x2ac>
 800043c:	1a86      	subs	r6, r0, r2
 800043e:	eb64 0303 	sbc.w	r3, r4, r3
 8000442:	2001      	movs	r0, #1
 8000444:	2d00      	cmp	r5, #0
 8000446:	d0e6      	beq.n	8000416 <__udivmoddi4+0xa6>
 8000448:	e9c5 6300 	strd	r6, r3, [r5]
 800044c:	e7e3      	b.n	8000416 <__udivmoddi4+0xa6>
 800044e:	2a00      	cmp	r2, #0
 8000450:	f040 8090 	bne.w	8000574 <__udivmoddi4+0x204>
 8000454:	eba1 040c 	sub.w	r4, r1, ip
 8000458:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800045c:	fa1f f78c 	uxth.w	r7, ip
 8000460:	2101      	movs	r1, #1
 8000462:	fbb4 f6f8 	udiv	r6, r4, r8
 8000466:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800046a:	fb08 4416 	mls	r4, r8, r6, r4
 800046e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000472:	fb07 f006 	mul.w	r0, r7, r6
 8000476:	4298      	cmp	r0, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x11c>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000482:	d202      	bcs.n	800048a <__udivmoddi4+0x11a>
 8000484:	4298      	cmp	r0, r3
 8000486:	f200 80cd 	bhi.w	8000624 <__udivmoddi4+0x2b4>
 800048a:	4626      	mov	r6, r4
 800048c:	1a1c      	subs	r4, r3, r0
 800048e:	fa1f f38e 	uxth.w	r3, lr
 8000492:	fbb4 f0f8 	udiv	r0, r4, r8
 8000496:	fb08 4410 	mls	r4, r8, r0, r4
 800049a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800049e:	fb00 f707 	mul.w	r7, r0, r7
 80004a2:	429f      	cmp	r7, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x148>
 80004a6:	eb1c 0303 	adds.w	r3, ip, r3
 80004aa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ae:	d202      	bcs.n	80004b6 <__udivmoddi4+0x146>
 80004b0:	429f      	cmp	r7, r3
 80004b2:	f200 80b0 	bhi.w	8000616 <__udivmoddi4+0x2a6>
 80004b6:	4620      	mov	r0, r4
 80004b8:	1bdb      	subs	r3, r3, r7
 80004ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004be:	e7a5      	b.n	800040c <__udivmoddi4+0x9c>
 80004c0:	f1c1 0620 	rsb	r6, r1, #32
 80004c4:	408b      	lsls	r3, r1
 80004c6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ca:	431f      	orrs	r7, r3
 80004cc:	fa20 fc06 	lsr.w	ip, r0, r6
 80004d0:	fa04 f301 	lsl.w	r3, r4, r1
 80004d4:	ea43 030c 	orr.w	r3, r3, ip
 80004d8:	40f4      	lsrs	r4, r6
 80004da:	fa00 f801 	lsl.w	r8, r0, r1
 80004de:	0c38      	lsrs	r0, r7, #16
 80004e0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004e4:	fbb4 fef0 	udiv	lr, r4, r0
 80004e8:	fa1f fc87 	uxth.w	ip, r7
 80004ec:	fb00 441e 	mls	r4, r0, lr, r4
 80004f0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f4:	fb0e f90c 	mul.w	r9, lr, ip
 80004f8:	45a1      	cmp	r9, r4
 80004fa:	fa02 f201 	lsl.w	r2, r2, r1
 80004fe:	d90a      	bls.n	8000516 <__udivmoddi4+0x1a6>
 8000500:	193c      	adds	r4, r7, r4
 8000502:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000506:	f080 8084 	bcs.w	8000612 <__udivmoddi4+0x2a2>
 800050a:	45a1      	cmp	r9, r4
 800050c:	f240 8081 	bls.w	8000612 <__udivmoddi4+0x2a2>
 8000510:	f1ae 0e02 	sub.w	lr, lr, #2
 8000514:	443c      	add	r4, r7
 8000516:	eba4 0409 	sub.w	r4, r4, r9
 800051a:	fa1f f983 	uxth.w	r9, r3
 800051e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000522:	fb00 4413 	mls	r4, r0, r3, r4
 8000526:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800052a:	fb03 fc0c 	mul.w	ip, r3, ip
 800052e:	45a4      	cmp	ip, r4
 8000530:	d907      	bls.n	8000542 <__udivmoddi4+0x1d2>
 8000532:	193c      	adds	r4, r7, r4
 8000534:	f103 30ff 	add.w	r0, r3, #4294967295
 8000538:	d267      	bcs.n	800060a <__udivmoddi4+0x29a>
 800053a:	45a4      	cmp	ip, r4
 800053c:	d965      	bls.n	800060a <__udivmoddi4+0x29a>
 800053e:	3b02      	subs	r3, #2
 8000540:	443c      	add	r4, r7
 8000542:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000546:	fba0 9302 	umull	r9, r3, r0, r2
 800054a:	eba4 040c 	sub.w	r4, r4, ip
 800054e:	429c      	cmp	r4, r3
 8000550:	46ce      	mov	lr, r9
 8000552:	469c      	mov	ip, r3
 8000554:	d351      	bcc.n	80005fa <__udivmoddi4+0x28a>
 8000556:	d04e      	beq.n	80005f6 <__udivmoddi4+0x286>
 8000558:	b155      	cbz	r5, 8000570 <__udivmoddi4+0x200>
 800055a:	ebb8 030e 	subs.w	r3, r8, lr
 800055e:	eb64 040c 	sbc.w	r4, r4, ip
 8000562:	fa04 f606 	lsl.w	r6, r4, r6
 8000566:	40cb      	lsrs	r3, r1
 8000568:	431e      	orrs	r6, r3
 800056a:	40cc      	lsrs	r4, r1
 800056c:	e9c5 6400 	strd	r6, r4, [r5]
 8000570:	2100      	movs	r1, #0
 8000572:	e750      	b.n	8000416 <__udivmoddi4+0xa6>
 8000574:	f1c2 0320 	rsb	r3, r2, #32
 8000578:	fa20 f103 	lsr.w	r1, r0, r3
 800057c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000580:	fa24 f303 	lsr.w	r3, r4, r3
 8000584:	4094      	lsls	r4, r2
 8000586:	430c      	orrs	r4, r1
 8000588:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800058c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000590:	fa1f f78c 	uxth.w	r7, ip
 8000594:	fbb3 f0f8 	udiv	r0, r3, r8
 8000598:	fb08 3110 	mls	r1, r8, r0, r3
 800059c:	0c23      	lsrs	r3, r4, #16
 800059e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005a2:	fb00 f107 	mul.w	r1, r0, r7
 80005a6:	4299      	cmp	r1, r3
 80005a8:	d908      	bls.n	80005bc <__udivmoddi4+0x24c>
 80005aa:	eb1c 0303 	adds.w	r3, ip, r3
 80005ae:	f100 36ff 	add.w	r6, r0, #4294967295
 80005b2:	d22c      	bcs.n	800060e <__udivmoddi4+0x29e>
 80005b4:	4299      	cmp	r1, r3
 80005b6:	d92a      	bls.n	800060e <__udivmoddi4+0x29e>
 80005b8:	3802      	subs	r0, #2
 80005ba:	4463      	add	r3, ip
 80005bc:	1a5b      	subs	r3, r3, r1
 80005be:	b2a4      	uxth	r4, r4
 80005c0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005c4:	fb08 3311 	mls	r3, r8, r1, r3
 80005c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005cc:	fb01 f307 	mul.w	r3, r1, r7
 80005d0:	42a3      	cmp	r3, r4
 80005d2:	d908      	bls.n	80005e6 <__udivmoddi4+0x276>
 80005d4:	eb1c 0404 	adds.w	r4, ip, r4
 80005d8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005dc:	d213      	bcs.n	8000606 <__udivmoddi4+0x296>
 80005de:	42a3      	cmp	r3, r4
 80005e0:	d911      	bls.n	8000606 <__udivmoddi4+0x296>
 80005e2:	3902      	subs	r1, #2
 80005e4:	4464      	add	r4, ip
 80005e6:	1ae4      	subs	r4, r4, r3
 80005e8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005ec:	e739      	b.n	8000462 <__udivmoddi4+0xf2>
 80005ee:	4604      	mov	r4, r0
 80005f0:	e6f0      	b.n	80003d4 <__udivmoddi4+0x64>
 80005f2:	4608      	mov	r0, r1
 80005f4:	e706      	b.n	8000404 <__udivmoddi4+0x94>
 80005f6:	45c8      	cmp	r8, r9
 80005f8:	d2ae      	bcs.n	8000558 <__udivmoddi4+0x1e8>
 80005fa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005fe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000602:	3801      	subs	r0, #1
 8000604:	e7a8      	b.n	8000558 <__udivmoddi4+0x1e8>
 8000606:	4631      	mov	r1, r6
 8000608:	e7ed      	b.n	80005e6 <__udivmoddi4+0x276>
 800060a:	4603      	mov	r3, r0
 800060c:	e799      	b.n	8000542 <__udivmoddi4+0x1d2>
 800060e:	4630      	mov	r0, r6
 8000610:	e7d4      	b.n	80005bc <__udivmoddi4+0x24c>
 8000612:	46d6      	mov	lr, sl
 8000614:	e77f      	b.n	8000516 <__udivmoddi4+0x1a6>
 8000616:	4463      	add	r3, ip
 8000618:	3802      	subs	r0, #2
 800061a:	e74d      	b.n	80004b8 <__udivmoddi4+0x148>
 800061c:	4606      	mov	r6, r0
 800061e:	4623      	mov	r3, r4
 8000620:	4608      	mov	r0, r1
 8000622:	e70f      	b.n	8000444 <__udivmoddi4+0xd4>
 8000624:	3e02      	subs	r6, #2
 8000626:	4463      	add	r3, ip
 8000628:	e730      	b.n	800048c <__udivmoddi4+0x11c>
 800062a:	bf00      	nop

0800062c <__aeabi_idiv0>:
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop

08000630 <led_effect_stop>:
void turn_on_odd_leds(void);
void LED_control(int n);


void led_effect_stop(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af02      	add	r7, sp, #8

	for(int i = 0 ; i < 4 ; i++)
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	e00e      	b.n	800065a <led_effect_stop+0x2a>
		xTimerStop(handle_led_timer[i], portMAX_DELAY);
 800063c:	4a0b      	ldr	r2, [pc, #44]	@ (800066c <led_effect_stop+0x3c>)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000644:	f04f 33ff 	mov.w	r3, #4294967295
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2300      	movs	r3, #0
 800064c:	2200      	movs	r2, #0
 800064e:	2103      	movs	r1, #3
 8000650:	f007 f8ec 	bl	800782c <xTimerGenericCommandFromTask>
	for(int i = 0 ; i < 4 ; i++)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3301      	adds	r3, #1
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b03      	cmp	r3, #3
 800065e:	dded      	ble.n	800063c <led_effect_stop+0xc>

}
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	20000130 	.word	0x20000130

08000670 <led_effect>:


void led_effect(int n)
{
 8000670:	b590      	push	{r4, r7, lr}
 8000672:	b085      	sub	sp, #20
 8000674:	af02      	add	r7, sp, #8
 8000676:	6078      	str	r0, [r7, #4]

	led_effect_stop();
 8000678:	f7ff ffda 	bl	8000630 <led_effect_stop>
	xTimerStart(handle_led_timer[n-1], portMAX_DELAY);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	3b01      	subs	r3, #1
 8000680:	4a08      	ldr	r2, [pc, #32]	@ (80006a4 <led_effect+0x34>)
 8000682:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8000686:	f005 fed5 	bl	8006434 <xTaskGetTickCount>
 800068a:	4602      	mov	r2, r0
 800068c:	f04f 33ff 	mov.w	r3, #4294967295
 8000690:	9300      	str	r3, [sp, #0]
 8000692:	2300      	movs	r3, #0
 8000694:	2101      	movs	r1, #1
 8000696:	4620      	mov	r0, r4
 8000698:	f007 f8c8 	bl	800782c <xTimerGenericCommandFromTask>

}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	20000130 	.word	0x20000130

080006a8 <LED_effect1>:


void LED_effect1(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0

	static int flag = 1;


	( flag ^= 1 ) ? turn_off_all_leds() : turn_on_all_leds();
 80006ac:	4b08      	ldr	r3, [pc, #32]	@ (80006d0 <LED_effect1+0x28>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f083 0301 	eor.w	r3, r3, #1
 80006b4:	4a06      	ldr	r2, [pc, #24]	@ (80006d0 <LED_effect1+0x28>)
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b05      	ldr	r3, [pc, #20]	@ (80006d0 <LED_effect1+0x28>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d002      	beq.n	80006c6 <LED_effect1+0x1e>
 80006c0:	f000 f84e 	bl	8000760 <turn_off_all_leds>

}
 80006c4:	e001      	b.n	80006ca <LED_effect1+0x22>
	( flag ^= 1 ) ? turn_off_all_leds() : turn_on_all_leds();
 80006c6:	f000 f869 	bl	800079c <turn_on_all_leds>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000000 	.word	0x20000000

080006d4 <LED_effect2>:


void LED_effect2(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0

	static int flag = 1;


	( flag ^= 1 ) ? turn_on_even_leds() : turn_on_odd_leds();
 80006d8:	4b08      	ldr	r3, [pc, #32]	@ (80006fc <LED_effect2+0x28>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f083 0301 	eor.w	r3, r3, #1
 80006e0:	4a06      	ldr	r2, [pc, #24]	@ (80006fc <LED_effect2+0x28>)
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <LED_effect2+0x28>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d002      	beq.n	80006f2 <LED_effect2+0x1e>
 80006ec:	f000 f874 	bl	80007d8 <turn_on_even_leds>

}
 80006f0:	e001      	b.n	80006f6 <LED_effect2+0x22>
	( flag ^= 1 ) ? turn_on_even_leds() : turn_on_odd_leds();
 80006f2:	f000 f88f 	bl	8000814 <turn_on_odd_leds>
}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	20000004 	.word	0x20000004

08000700 <LED_effect3>:


void LED_effect3(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

	static int i = 0;


	LED_control(( 0x01 << ( i++ % 4) ));
 8000704:	4b09      	ldr	r3, [pc, #36]	@ (800072c <LED_effect3+0x2c>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	4908      	ldr	r1, [pc, #32]	@ (800072c <LED_effect3+0x2c>)
 800070c:	600a      	str	r2, [r1, #0]
 800070e:	425a      	negs	r2, r3
 8000710:	f003 0303 	and.w	r3, r3, #3
 8000714:	f002 0203 	and.w	r2, r2, #3
 8000718:	bf58      	it	pl
 800071a:	4253      	negpl	r3, r2
 800071c:	2201      	movs	r2, #1
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	4618      	mov	r0, r3
 8000724:	f000 f894 	bl	8000850 <LED_control>

}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	200000a0 	.word	0x200000a0

08000730 <LED_effect4>:


void LED_effect4(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

	static int i = 0;


	LED_control(( 0x08 >> ( i++ % 4) ));
 8000734:	4b09      	ldr	r3, [pc, #36]	@ (800075c <LED_effect4+0x2c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	1c5a      	adds	r2, r3, #1
 800073a:	4908      	ldr	r1, [pc, #32]	@ (800075c <LED_effect4+0x2c>)
 800073c:	600a      	str	r2, [r1, #0]
 800073e:	425a      	negs	r2, r3
 8000740:	f003 0303 	and.w	r3, r3, #3
 8000744:	f002 0203 	and.w	r2, r2, #3
 8000748:	bf58      	it	pl
 800074a:	4253      	negpl	r3, r2
 800074c:	2208      	movs	r2, #8
 800074e:	fa42 f303 	asr.w	r3, r2, r3
 8000752:	4618      	mov	r0, r3
 8000754:	f000 f87c 	bl	8000850 <LED_control>

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000a4 	.word	0x200000a4

08000760 <turn_off_all_leds>:


void turn_off_all_leds(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000764:	2200      	movs	r2, #0
 8000766:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800076a:	480b      	ldr	r0, [pc, #44]	@ (8000798 <turn_off_all_leds+0x38>)
 800076c:	f001 ff1a 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <turn_off_all_leds+0x38>)
 8000778:	f001 ff14 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000782:	4805      	ldr	r0, [pc, #20]	@ (8000798 <turn_off_all_leds+0x38>)
 8000784:	f001 ff0e 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8000788:	2200      	movs	r2, #0
 800078a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800078e:	4802      	ldr	r0, [pc, #8]	@ (8000798 <turn_off_all_leds+0x38>)
 8000790:	f001 ff08 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40020c00 	.word	0x40020c00

0800079c <turn_on_all_leds>:


void turn_on_all_leds(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007a6:	480b      	ldr	r0, [pc, #44]	@ (80007d4 <turn_on_all_leds+0x38>)
 80007a8:	f001 fefc 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007ac:	2201      	movs	r2, #1
 80007ae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007b2:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <turn_on_all_leds+0x38>)
 80007b4:	f001 fef6 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80007b8:	2201      	movs	r2, #1
 80007ba:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007be:	4805      	ldr	r0, [pc, #20]	@ (80007d4 <turn_on_all_leds+0x38>)
 80007c0:	f001 fef0 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 80007c4:	2201      	movs	r2, #1
 80007c6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ca:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <turn_on_all_leds+0x38>)
 80007cc:	f001 feea 	bl	80025a4 <HAL_GPIO_WritePin>

}
 80007d0:	bf00      	nop
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	40020c00 	.word	0x40020c00

080007d8 <turn_on_even_leds>:


void turn_on_even_leds(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80007dc:	2200      	movs	r2, #0
 80007de:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <turn_on_even_leds+0x38>)
 80007e4:	f001 fede 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80007ee:	4808      	ldr	r0, [pc, #32]	@ (8000810 <turn_on_even_leds+0x38>)
 80007f0:	f001 fed8 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007fa:	4805      	ldr	r0, [pc, #20]	@ (8000810 <turn_on_even_leds+0x38>)
 80007fc:	f001 fed2 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000800:	2201      	movs	r2, #1
 8000802:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000806:	4802      	ldr	r0, [pc, #8]	@ (8000810 <turn_on_even_leds+0x38>)
 8000808:	f001 fecc 	bl	80025a4 <HAL_GPIO_WritePin>

}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40020c00 	.word	0x40020c00

08000814 <turn_on_odd_leds>:


void turn_on_odd_leds(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800081e:	480b      	ldr	r0, [pc, #44]	@ (800084c <turn_on_odd_leds+0x38>)
 8000820:	f001 fec0 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800082a:	4808      	ldr	r0, [pc, #32]	@ (800084c <turn_on_odd_leds+0x38>)
 800082c:	f001 feba 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000830:	2201      	movs	r2, #1
 8000832:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <turn_on_odd_leds+0x38>)
 8000838:	f001 feb4 	bl	80025a4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000842:	4802      	ldr	r0, [pc, #8]	@ (800084c <turn_on_odd_leds+0x38>)
 8000844:	f001 feae 	bl	80025a4 <HAL_GPIO_WritePin>

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	40020c00 	.word	0x40020c00

08000850 <LED_control>:


void LED_control(int n)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]

	turn_off_all_leds();
 8000858:	f7ff ff82 	bl	8000760 <turn_off_all_leds>

	if(n == 1)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b01      	cmp	r3, #1
 8000860:	d105      	bne.n	800086e <LED_control+0x1e>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000862:	2201      	movs	r2, #1
 8000864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000868:	4810      	ldr	r0, [pc, #64]	@ (80008ac <LED_control+0x5c>)
 800086a:	f001 fe9b 	bl	80025a4 <HAL_GPIO_WritePin>
	if(n == 2)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2b02      	cmp	r3, #2
 8000872:	d105      	bne.n	8000880 <LED_control+0x30>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000874:	2201      	movs	r2, #1
 8000876:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800087a:	480c      	ldr	r0, [pc, #48]	@ (80008ac <LED_control+0x5c>)
 800087c:	f001 fe92 	bl	80025a4 <HAL_GPIO_WritePin>
	if(n == 4)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2b04      	cmp	r3, #4
 8000884:	d105      	bne.n	8000892 <LED_control+0x42>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000886:	2201      	movs	r2, #1
 8000888:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800088c:	4807      	ldr	r0, [pc, #28]	@ (80008ac <LED_control+0x5c>)
 800088e:	f001 fe89 	bl	80025a4 <HAL_GPIO_WritePin>
	if(n == 8)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b08      	cmp	r3, #8
 8000896:	d105      	bne.n	80008a4 <LED_control+0x54>
		HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800089e:	4803      	ldr	r0, [pc, #12]	@ (80008ac <LED_control+0x5c>)
 80008a0:	f001 fe80 	bl	80025a4 <HAL_GPIO_WritePin>

}
 80008a4:	bf00      	nop
 80008a6:	3708      	adds	r7, #8
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd80      	pop	{r7, pc}
 80008ac:	40020c00 	.word	0x40020c00

080008b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08c      	sub	sp, #48	@ 0x30
 80008b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008b6:	f001 fb17 	bl	8001ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ba:	f000 f925 	bl	8000b08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008be:	f000 f9df 	bl	8000c80 <MX_GPIO_Init>
  MX_RTC_Init();
 80008c2:	f000 f98d 	bl	8000be0 <MX_RTC_Init>
  MX_USART2_UART_Init();
 80008c6:	f000 f9b1 	bl	8000c2c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 80008ca:	4b75      	ldr	r3, [pc, #468]	@ (8000aa0 <main+0x1f0>)
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	4a74      	ldr	r2, [pc, #464]	@ (8000aa0 <main+0x1f0>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 80008d6:	f008 f881 	bl	80089dc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 80008da:	f009 f835 	bl	8009948 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(menu_task, "menu_task", 250, NULL, 2, &handle_menu_task);
 80008de:	4b71      	ldr	r3, [pc, #452]	@ (8000aa4 <main+0x1f4>)
 80008e0:	9301      	str	r3, [sp, #4]
 80008e2:	2302      	movs	r3, #2
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	22fa      	movs	r2, #250	@ 0xfa
 80008ea:	496f      	ldr	r1, [pc, #444]	@ (8000aa8 <main+0x1f8>)
 80008ec:	486f      	ldr	r0, [pc, #444]	@ (8000aac <main+0x1fc>)
 80008ee:	f005 fa4c 	bl	8005d8a <xTaskCreate>
 80008f2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d00b      	beq.n	8000912 <main+0x62>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80008fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fe:	f383 8811 	msr	BASEPRI, r3
 8000902:	f3bf 8f6f 	isb	sy
 8000906:	f3bf 8f4f 	dsb	sy
 800090a:	61fb      	str	r3, [r7, #28]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	e7fd      	b.n	800090e <main+0x5e>

  status = xTaskCreate(cmd_handler_task, "cmd_task", 250, NULL, 2, &handle_cmd_task);
 8000912:	4b67      	ldr	r3, [pc, #412]	@ (8000ab0 <main+0x200>)
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	2302      	movs	r3, #2
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2300      	movs	r3, #0
 800091c:	22fa      	movs	r2, #250	@ 0xfa
 800091e:	4965      	ldr	r1, [pc, #404]	@ (8000ab4 <main+0x204>)
 8000920:	4865      	ldr	r0, [pc, #404]	@ (8000ab8 <main+0x208>)
 8000922:	f005 fa32 	bl	8005d8a <xTaskCreate>
 8000926:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000928:	6a3b      	ldr	r3, [r7, #32]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d00b      	beq.n	8000946 <main+0x96>
    __asm volatile
 800092e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000932:	f383 8811 	msr	BASEPRI, r3
 8000936:	f3bf 8f6f 	isb	sy
 800093a:	f3bf 8f4f 	dsb	sy
 800093e:	61bb      	str	r3, [r7, #24]
}
 8000940:	bf00      	nop
 8000942:	bf00      	nop
 8000944:	e7fd      	b.n	8000942 <main+0x92>

  status = xTaskCreate(print_task, "print_task", 250, NULL, 2, &handle_print_task);
 8000946:	4b5d      	ldr	r3, [pc, #372]	@ (8000abc <main+0x20c>)
 8000948:	9301      	str	r3, [sp, #4]
 800094a:	2302      	movs	r3, #2
 800094c:	9300      	str	r3, [sp, #0]
 800094e:	2300      	movs	r3, #0
 8000950:	22fa      	movs	r2, #250	@ 0xfa
 8000952:	495b      	ldr	r1, [pc, #364]	@ (8000ac0 <main+0x210>)
 8000954:	485b      	ldr	r0, [pc, #364]	@ (8000ac4 <main+0x214>)
 8000956:	f005 fa18 	bl	8005d8a <xTaskCreate>
 800095a:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d00b      	beq.n	800097a <main+0xca>
    __asm volatile
 8000962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000966:	f383 8811 	msr	BASEPRI, r3
 800096a:	f3bf 8f6f 	isb	sy
 800096e:	f3bf 8f4f 	dsb	sy
 8000972:	617b      	str	r3, [r7, #20]
}
 8000974:	bf00      	nop
 8000976:	bf00      	nop
 8000978:	e7fd      	b.n	8000976 <main+0xc6>

  status = xTaskCreate(led_task, "led_task", 250, NULL, 2, &handle_led_task);
 800097a:	4b53      	ldr	r3, [pc, #332]	@ (8000ac8 <main+0x218>)
 800097c:	9301      	str	r3, [sp, #4]
 800097e:	2302      	movs	r3, #2
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	2300      	movs	r3, #0
 8000984:	22fa      	movs	r2, #250	@ 0xfa
 8000986:	4951      	ldr	r1, [pc, #324]	@ (8000acc <main+0x21c>)
 8000988:	4851      	ldr	r0, [pc, #324]	@ (8000ad0 <main+0x220>)
 800098a:	f005 f9fe 	bl	8005d8a <xTaskCreate>
 800098e:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 8000990:	6a3b      	ldr	r3, [r7, #32]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d00b      	beq.n	80009ae <main+0xfe>
    __asm volatile
 8000996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800099a:	f383 8811 	msr	BASEPRI, r3
 800099e:	f3bf 8f6f 	isb	sy
 80009a2:	f3bf 8f4f 	dsb	sy
 80009a6:	613b      	str	r3, [r7, #16]
}
 80009a8:	bf00      	nop
 80009aa:	bf00      	nop
 80009ac:	e7fd      	b.n	80009aa <main+0xfa>

  status = xTaskCreate(rtc_task, "rtc_task", 250, NULL, 2, &handle_rtc_task);
 80009ae:	4b49      	ldr	r3, [pc, #292]	@ (8000ad4 <main+0x224>)
 80009b0:	9301      	str	r3, [sp, #4]
 80009b2:	2302      	movs	r3, #2
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	2300      	movs	r3, #0
 80009b8:	22fa      	movs	r2, #250	@ 0xfa
 80009ba:	4947      	ldr	r1, [pc, #284]	@ (8000ad8 <main+0x228>)
 80009bc:	4847      	ldr	r0, [pc, #284]	@ (8000adc <main+0x22c>)
 80009be:	f005 f9e4 	bl	8005d8a <xTaskCreate>
 80009c2:	6238      	str	r0, [r7, #32]
  configASSERT(status == pdPASS);
 80009c4:	6a3b      	ldr	r3, [r7, #32]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d00b      	beq.n	80009e2 <main+0x132>
    __asm volatile
 80009ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009ce:	f383 8811 	msr	BASEPRI, r3
 80009d2:	f3bf 8f6f 	isb	sy
 80009d6:	f3bf 8f4f 	dsb	sy
 80009da:	60fb      	str	r3, [r7, #12]
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	e7fd      	b.n	80009de <main+0x12e>

  qdata = xQueueCreate(10, sizeof(char));
 80009e2:	2200      	movs	r2, #0
 80009e4:	2101      	movs	r1, #1
 80009e6:	200a      	movs	r0, #10
 80009e8:	f004 fb46 	bl	8005078 <xQueueGenericCreate>
 80009ec:	4603      	mov	r3, r0
 80009ee:	4a3c      	ldr	r2, [pc, #240]	@ (8000ae0 <main+0x230>)
 80009f0:	6013      	str	r3, [r2, #0]
  configASSERT(qdata != NULL);
 80009f2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ae0 <main+0x230>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d10b      	bne.n	8000a12 <main+0x162>
    __asm volatile
 80009fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009fe:	f383 8811 	msr	BASEPRI, r3
 8000a02:	f3bf 8f6f 	isb	sy
 8000a06:	f3bf 8f4f 	dsb	sy
 8000a0a:	60bb      	str	r3, [r7, #8]
}
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <main+0x15e>

  qprint = xQueueCreate(10, sizeof(size_t));
 8000a12:	2200      	movs	r2, #0
 8000a14:	2104      	movs	r1, #4
 8000a16:	200a      	movs	r0, #10
 8000a18:	f004 fb2e 	bl	8005078 <xQueueGenericCreate>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a31      	ldr	r2, [pc, #196]	@ (8000ae4 <main+0x234>)
 8000a20:	6013      	str	r3, [r2, #0]
  configASSERT(qprint != NULL);
 8000a22:	4b30      	ldr	r3, [pc, #192]	@ (8000ae4 <main+0x234>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10b      	bne.n	8000a42 <main+0x192>
    __asm volatile
 8000a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000a2e:	f383 8811 	msr	BASEPRI, r3
 8000a32:	f3bf 8f6f 	isb	sy
 8000a36:	f3bf 8f4f 	dsb	sy
 8000a3a:	607b      	str	r3, [r7, #4]
}
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	e7fd      	b.n	8000a3e <main+0x18e>

  // Create software timer for LED effects
  for(int i = 0 ; i < 4 ; i++)
 8000a42:	2300      	movs	r3, #0
 8000a44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a46:	e013      	b.n	8000a70 <main+0x1c0>
	 handle_led_timer[i] = xTimerCreate("led_timer", pdMS_TO_TICKS(500), pdTRUE, (void *)(i+1), led_effect_cb);
 8000a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4a:	3301      	adds	r3, #1
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b26      	ldr	r3, [pc, #152]	@ (8000ae8 <main+0x238>)
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	4613      	mov	r3, r2
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000a5a:	4824      	ldr	r0, [pc, #144]	@ (8000aec <main+0x23c>)
 8000a5c:	f006 fe82 	bl	8007764 <xTimerCreate>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4923      	ldr	r1, [pc, #140]	@ (8000af0 <main+0x240>)
 8000a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for(int i = 0 ; i < 4 ; i++)
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a72:	2b03      	cmp	r3, #3
 8000a74:	dde8      	ble.n	8000a48 <main+0x198>

  rtc_timer = xTimerCreate ("rtc_report_timer", pdMS_TO_TICKS(1000), pdTRUE,NULL, rtc_report_callback);
 8000a76:	4b1f      	ldr	r3, [pc, #124]	@ (8000af4 <main+0x244>)
 8000a78:	9300      	str	r3, [sp, #0]
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	2201      	movs	r2, #1
 8000a7e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000a82:	481d      	ldr	r0, [pc, #116]	@ (8000af8 <main+0x248>)
 8000a84:	f006 fe6e 	bl	8007764 <xTimerCreate>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	4a1c      	ldr	r2, [pc, #112]	@ (8000afc <main+0x24c>)
 8000a8c:	6013      	str	r3, [r2, #0]

  HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	491b      	ldr	r1, [pc, #108]	@ (8000b00 <main+0x250>)
 8000a92:	481c      	ldr	r0, [pc, #112]	@ (8000b04 <main+0x254>)
 8000a94:	f003 f9d9 	bl	8003e4a <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 8000a98:	f005 fb4e 	bl	8006138 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <main+0x1ec>
 8000aa0:	e0001000 	.word	0xe0001000
 8000aa4:	20000110 	.word	0x20000110
 8000aa8:	0800b860 	.word	0x0800b860
 8000aac:	0800165d 	.word	0x0800165d
 8000ab0:	20000114 	.word	0x20000114
 8000ab4:	0800b86c 	.word	0x0800b86c
 8000ab8:	08001745 	.word	0x08001745
 8000abc:	20000118 	.word	0x20000118
 8000ac0:	0800b878 	.word	0x0800b878
 8000ac4:	08001775 	.word	0x08001775
 8000ac8:	2000011c 	.word	0x2000011c
 8000acc:	0800b884 	.word	0x0800b884
 8000ad0:	080017b5 	.word	0x080017b5
 8000ad4:	20000120 	.word	0x20000120
 8000ad8:	0800b890 	.word	0x0800b890
 8000adc:	080018e1 	.word	0x080018e1
 8000ae0:	20000124 	.word	0x20000124
 8000ae4:	20000128 	.word	0x20000128
 8000ae8:	08000fe1 	.word	0x08000fe1
 8000aec:	0800b89c 	.word	0x0800b89c
 8000af0:	20000130 	.word	0x20000130
 8000af4:	08001031 	.word	0x08001031
 8000af8:	0800b8a8 	.word	0x0800b8a8
 8000afc:	20000140 	.word	0x20000140
 8000b00:	2000012c 	.word	0x2000012c
 8000b04:	200000c8 	.word	0x200000c8

08000b08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b094      	sub	sp, #80	@ 0x50
 8000b0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0e:	f107 0320 	add.w	r3, r7, #32
 8000b12:	2230      	movs	r2, #48	@ 0x30
 8000b14:	2100      	movs	r1, #0
 8000b16:	4618      	mov	r0, r3
 8000b18:	f009 fed9 	bl	800a8ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b1c:	f107 030c 	add.w	r3, r7, #12
 8000b20:	2200      	movs	r2, #0
 8000b22:	601a      	str	r2, [r3, #0]
 8000b24:	605a      	str	r2, [r3, #4]
 8000b26:	609a      	str	r2, [r3, #8]
 8000b28:	60da      	str	r2, [r3, #12]
 8000b2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
 8000b30:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b34:	4a28      	ldr	r2, [pc, #160]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b3c:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemClock_Config+0xd0>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b40:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b44:	60bb      	str	r3, [r7, #8]
 8000b46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b48:	2300      	movs	r3, #0
 8000b4a:	607b      	str	r3, [r7, #4]
 8000b4c:	4b23      	ldr	r3, [pc, #140]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a22      	ldr	r2, [pc, #136]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b52:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000b56:	6013      	str	r3, [r2, #0]
 8000b58:	4b20      	ldr	r3, [pc, #128]	@ (8000bdc <SystemClock_Config+0xd4>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b60:	607b      	str	r3, [r7, #4]
 8000b62:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b64:	230a      	movs	r3, #10
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6c:	2310      	movs	r3, #16
 8000b6e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b70:	2301      	movs	r3, #1
 8000b72:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b74:	2302      	movs	r3, #2
 8000b76:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b7c:	2308      	movs	r3, #8
 8000b7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000b80:	2360      	movs	r3, #96	@ 0x60
 8000b82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b88:	2308      	movs	r3, #8
 8000b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 fd45 	bl	8002620 <HAL_RCC_OscConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b9c:	f000 fa64 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2103      	movs	r1, #3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 ffa6 	bl	8002b10 <HAL_RCC_ClockConfig>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bca:	f000 fa4d 	bl	8001068 <Error_Handler>
  }
}
 8000bce:	bf00      	nop
 8000bd0:	3750      	adds	r7, #80	@ 0x50
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000be4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000be6:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <MX_RTC_Init+0x48>)
 8000be8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000bea:	4b0e      	ldr	r3, [pc, #56]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000bec:	2240      	movs	r2, #64	@ 0x40
 8000bee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000bf0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000bf2:	227f      	movs	r2, #127	@ 0x7f
 8000bf4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000bf8:	22ff      	movs	r2, #255	@ 0xff
 8000bfa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bfc:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c02:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c0e:	4805      	ldr	r0, [pc, #20]	@ (8000c24 <MX_RTC_Init+0x44>)
 8000c10:	f002 fac0 	bl	8003194 <HAL_RTC_Init>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000c1a:	f000 fa25 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000a8 	.word	0x200000a8
 8000c28:	40002800 	.word	0x40002800

08000c2c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c30:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	@ (8000c7c <MX_USART2_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USART2_UART_Init+0x4c>)
 8000c64:	f003 f816 	bl	8003c94 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f000 f9fb 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000c8 	.word	0x200000c8
 8000c7c:	40004400 	.word	0x40004400

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08c      	sub	sp, #48	@ 0x30
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4ba6      	ldr	r3, [pc, #664]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4aa5      	ldr	r2, [pc, #660]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000ca0:	f043 0310 	orr.w	r3, r3, #16
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4ba3      	ldr	r3, [pc, #652]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f003 0310 	and.w	r3, r3, #16
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	4b9f      	ldr	r3, [pc, #636]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	4a9e      	ldr	r2, [pc, #632]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	617b      	str	r3, [r7, #20]
 8000ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b98      	ldr	r3, [pc, #608]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	4a97      	ldr	r2, [pc, #604]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cde:	4b95      	ldr	r3, [pc, #596]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b91      	ldr	r3, [pc, #580]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a90      	ldr	r2, [pc, #576]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b8e      	ldr	r3, [pc, #568]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	4b8a      	ldr	r3, [pc, #552]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0e:	4a89      	ldr	r2, [pc, #548]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d16:	4b87      	ldr	r3, [pc, #540]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60bb      	str	r3, [r7, #8]
 8000d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	607b      	str	r3, [r7, #4]
 8000d26:	4b83      	ldr	r3, [pc, #524]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2a:	4a82      	ldr	r2, [pc, #520]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d2c:	f043 0308 	orr.w	r3, r3, #8
 8000d30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d32:	4b80      	ldr	r3, [pc, #512]	@ (8000f34 <MX_GPIO_Init+0x2b4>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d36:	f003 0308 	and.w	r3, r3, #8
 8000d3a:	607b      	str	r3, [r7, #4]
 8000d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2108      	movs	r1, #8
 8000d42:	487d      	ldr	r0, [pc, #500]	@ (8000f38 <MX_GPIO_Init+0x2b8>)
 8000d44:	f001 fc2e 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000d48:	2201      	movs	r2, #1
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	487b      	ldr	r0, [pc, #492]	@ (8000f3c <MX_GPIO_Init+0x2bc>)
 8000d4e:	f001 fc29 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d52:	2200      	movs	r2, #0
 8000d54:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000d58:	4879      	ldr	r0, [pc, #484]	@ (8000f40 <MX_GPIO_Init+0x2c0>)
 8000d5a:	f001 fc23 	bl	80025a4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d62:	2300      	movs	r3, #0
 8000d64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4871      	ldr	r0, [pc, #452]	@ (8000f38 <MX_GPIO_Init+0x2b8>)
 8000d72:	f001 fa93 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000d76:	2308      	movs	r3, #8
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	486a      	ldr	r0, [pc, #424]	@ (8000f38 <MX_GPIO_Init+0x2b8>)
 8000d8e:	f001 fa85 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000d92:	2332      	movs	r3, #50	@ 0x32
 8000d94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d96:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000da0:	f107 031c 	add.w	r3, r7, #28
 8000da4:	4619      	mov	r1, r3
 8000da6:	4864      	ldr	r0, [pc, #400]	@ (8000f38 <MX_GPIO_Init+0x2b8>)
 8000da8:	f001 fa78 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	485e      	ldr	r0, [pc, #376]	@ (8000f3c <MX_GPIO_Init+0x2bc>)
 8000dc4:	f001 fa6a 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dc8:	2308      	movs	r3, #8
 8000dca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd8:	2305      	movs	r3, #5
 8000dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f107 031c 	add.w	r3, r7, #28
 8000de0:	4619      	mov	r1, r3
 8000de2:	4856      	ldr	r0, [pc, #344]	@ (8000f3c <MX_GPIO_Init+0x2bc>)
 8000de4:	f001 fa5a 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000de8:	2301      	movs	r3, #1
 8000dea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df6:	f107 031c 	add.w	r3, r7, #28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4851      	ldr	r0, [pc, #324]	@ (8000f44 <MX_GPIO_Init+0x2c4>)
 8000dfe:	f001 fa4d 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e02:	2310      	movs	r3, #16
 8000e04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e06:	2302      	movs	r3, #2
 8000e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e12:	2306      	movs	r3, #6
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4849      	ldr	r0, [pc, #292]	@ (8000f44 <MX_GPIO_Init+0x2c4>)
 8000e1e:	f001 fa3d 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e22:	23e0      	movs	r3, #224	@ 0xe0
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e32:	2305      	movs	r3, #5
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4841      	ldr	r0, [pc, #260]	@ (8000f44 <MX_GPIO_Init+0x2c4>)
 8000e3e:	f001 fa2d 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000e42:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e54:	2305      	movs	r3, #5
 8000e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f107 031c 	add.w	r3, r7, #28
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	483a      	ldr	r0, [pc, #232]	@ (8000f48 <MX_GPIO_Init+0x2c8>)
 8000e60:	f001 fa1c 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e64:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e68:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	f107 031c 	add.w	r3, r7, #28
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4830      	ldr	r0, [pc, #192]	@ (8000f40 <MX_GPIO_Init+0x2c0>)
 8000e7e:	f001 fa0d 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e82:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e94:	2306      	movs	r3, #6
 8000e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4827      	ldr	r0, [pc, #156]	@ (8000f3c <MX_GPIO_Init+0x2bc>)
 8000ea0:	f001 f9fc 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000ea4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ea8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	f107 031c 	add.w	r3, r7, #28
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4822      	ldr	r0, [pc, #136]	@ (8000f44 <MX_GPIO_Init+0x2c4>)
 8000eba:	f001 f9ef 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000ebe:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000ec2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 031c 	add.w	r3, r7, #28
 8000ed8:	4619      	mov	r1, r3
 8000eda:	481a      	ldr	r0, [pc, #104]	@ (8000f44 <MX_GPIO_Init+0x2c4>)
 8000edc:	f001 f9de 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000ee0:	2320      	movs	r3, #32
 8000ee2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eec:	f107 031c 	add.w	r3, r7, #28
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4813      	ldr	r0, [pc, #76]	@ (8000f40 <MX_GPIO_Init+0x2c0>)
 8000ef4:	f001 f9d2 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ef8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000efc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000efe:	2312      	movs	r3, #18
 8000f00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 031c 	add.w	r3, r7, #28
 8000f12:	4619      	mov	r1, r3
 8000f14:	480c      	ldr	r0, [pc, #48]	@ (8000f48 <MX_GPIO_Init+0x2c8>)
 8000f16:	f001 f9c1 	bl	800229c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2106      	movs	r1, #6
 8000f1e:	2006      	movs	r0, #6
 8000f20:	f001 f900 	bl	8002124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000f24:	2006      	movs	r0, #6
 8000f26:	f001 f919 	bl	800215c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3730      	adds	r7, #48	@ 0x30
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40020800 	.word	0x40020800
 8000f40:	40020c00 	.word	0x40020c00
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400

08000f4c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]

	HAL_Delay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f001 f809 	bl	8001f6c <HAL_Delay>

	if(!(xQueueIsQueueFullFromISR(qdata)))
 8000f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x88>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f004 fd94 	bl	8005a8c <xQueueIsQueueFullFromISR>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d107      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x2e>
	{

		/*Queue is not full */

		/* Enqueue data byte */
		xQueueSendFromISR(qdata, (void*)&user_data, NULL);
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x88>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	2300      	movs	r3, #0
 8000f70:	2200      	movs	r2, #0
 8000f72:	4919      	ldr	r1, [pc, #100]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x8c>)
 8000f74:	f004 fa0e 	bl	8005394 <xQueueGenericSendFromISR>
 8000f78:	e013      	b.n	8000fa2 <HAL_UART_RxCpltCallback+0x56>
	else
	{

		/*Queue is full */

		if(user_data == '\n')
 8000f7a:	4b17      	ldr	r3, [pc, #92]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x8c>)
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	2b0a      	cmp	r3, #10
 8000f82:	d10e      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x56>

			/*user_data = '\n' */

			/* Make sure that last data byte of the queue is '\n' */
			uint8_t dummy;
			xQueueReceiveFromISR(qdata, (void*)&dummy, NULL);
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x88>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f107 010f 	add.w	r1, r7, #15
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f004 fbaa 	bl	80056e8 <xQueueReceiveFromISR>
			xQueueSendFromISR(qdata, (void*)&user_data, NULL);
 8000f94:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd4 <HAL_UART_RxCpltCallback+0x88>)
 8000f96:	6818      	ldr	r0, [r3, #0]
 8000f98:	2300      	movs	r3, #0
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	490e      	ldr	r1, [pc, #56]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x8c>)
 8000f9e:	f004 f9f9 	bl	8005394 <xQueueGenericSendFromISR>

		}
	}

	/* Send notification to command handling task if user_data = '\n' */
	if(user_data == '\n')
 8000fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x8c>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	2b0a      	cmp	r3, #10
 8000faa:	d10a      	bne.n	8000fc2 <HAL_UART_RxCpltCallback+0x76>
	{

		/* Send notification to command handling task */
		xTaskNotifyFromISR(handle_cmd_task, 0, eNoAction, NULL);
 8000fac:	4b0b      	ldr	r3, [pc, #44]	@ (8000fdc <HAL_UART_RxCpltCallback+0x90>)
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	9301      	str	r3, [sp, #4]
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	2300      	movs	r3, #0
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	f006 f953 	bl	8007268 <xTaskGenericNotifyFromISR>

	}

	/* Enable UART data byte reception again in IT mode */
	HAL_UART_Receive_IT(huart, (uint8_t *)&user_data, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4904      	ldr	r1, [pc, #16]	@ (8000fd8 <HAL_UART_RxCpltCallback+0x8c>)
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f002 ff3f 	bl	8003e4a <HAL_UART_Receive_IT>

}
 8000fcc:	bf00      	nop
 8000fce:	3710      	adds	r7, #16
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000124 	.word	0x20000124
 8000fd8:	2000012c 	.word	0x2000012c
 8000fdc:	20000114 	.word	0x20000114

08000fe0 <led_effect_cb>:


void led_effect_cb(TimerHandle_t xTimer)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

	int id;
	id =(uint32_t)pvTimerGetTimerID(xTimer);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f006 ff11 	bl	8007e10 <pvTimerGetTimerID>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	60fb      	str	r3, [r7, #12]

	switch(id)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	3b01      	subs	r3, #1
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d816      	bhi.n	8001028 <led_effect_cb+0x48>
 8000ffa:	a201      	add	r2, pc, #4	@ (adr r2, 8001000 <led_effect_cb+0x20>)
 8000ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001000:	08001011 	.word	0x08001011
 8001004:	08001017 	.word	0x08001017
 8001008:	0800101d 	.word	0x0800101d
 800100c:	08001023 	.word	0x08001023
	{

		case 1:

			LED_effect1();
 8001010:	f7ff fb4a 	bl	80006a8 <LED_effect1>

		break;
 8001014:	e008      	b.n	8001028 <led_effect_cb+0x48>

		case 2:

			LED_effect2();
 8001016:	f7ff fb5d 	bl	80006d4 <LED_effect2>

		break;
 800101a:	e005      	b.n	8001028 <led_effect_cb+0x48>

		case 3:

			LED_effect3();
 800101c:	f7ff fb70 	bl	8000700 <LED_effect3>

		break;
 8001020:	e002      	b.n	8001028 <led_effect_cb+0x48>

		case 4:

			LED_effect4();
 8001022:	f7ff fb85 	bl	8000730 <LED_effect4>

		break;
 8001026:	bf00      	nop

	}

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <rtc_report_callback>:


void rtc_report_callback(TimerHandle_t xTimer)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]

	 show_time_date_itm();
 8001038:	f000 f888 	bl	800114c <show_time_date_itm>

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a04      	ldr	r2, [pc, #16]	@ (8001064 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d101      	bne.n	800105a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001056:	f000 ff69 	bl	8001f2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40000c00 	.word	0x40000c00

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <show_time_date>:
#include "stdio.h"
#include "string.h"


void show_time_date(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08c      	sub	sp, #48	@ 0x30
 8001078:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showTime;
	static char *date = showDate;

	memset(&rtc_date,0 , sizeof(rtc_date));
 800107a:	f107 0318 	add.w	r3, r7, #24
 800107e:	2204      	movs	r2, #4
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f009 fc23 	bl	800a8ce <memset>
	memset(&rtc_time, 0, sizeof(rtc_time));
 8001088:	1d3b      	adds	r3, r7, #4
 800108a:	2214      	movs	r2, #20
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f009 fc1d 	bl	800a8ce <memset>

	// Get the RTC current time
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4821      	ldr	r0, [pc, #132]	@ (8001120 <show_time_date+0xac>)
 800109c:	f002 f997 	bl	80033ce <HAL_RTC_GetTime>
	// Get the RTC current date
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 80010a0:	f107 0318 	add.w	r3, r7, #24
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	481d      	ldr	r0, [pc, #116]	@ (8001120 <show_time_date+0xac>)
 80010aa:	f002 fa72 	bl	8003592 <HAL_RTC_GetDate>

	char *format;
	format = ( rtc_time.TimeFormat == RTC_HOURFORMAT12_AM ) ? "AM" : "PM";
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d101      	bne.n	80010b8 <show_time_date+0x44>
 80010b4:	4b1b      	ldr	r3, [pc, #108]	@ (8001124 <show_time_date+0xb0>)
 80010b6:	e000      	b.n	80010ba <show_time_date+0x46>
 80010b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001128 <show_time_date+0xb4>)
 80010ba:	61fb      	str	r3, [r7, #28]

	// Display time format : hh:mm:ss [AM/PM]
	sprintf((char *)showTime, "%s:\t%02d:%02d:%02d [%s]", "\nCurrent Time&Date", rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds, format);
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	4618      	mov	r0, r3
 80010c0:	797b      	ldrb	r3, [r7, #5]
 80010c2:	461a      	mov	r2, r3
 80010c4:	79bb      	ldrb	r3, [r7, #6]
 80010c6:	4619      	mov	r1, r3
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	9302      	str	r3, [sp, #8]
 80010cc:	9101      	str	r1, [sp, #4]
 80010ce:	9200      	str	r2, [sp, #0]
 80010d0:	4603      	mov	r3, r0
 80010d2:	4a16      	ldr	r2, [pc, #88]	@ (800112c <show_time_date+0xb8>)
 80010d4:	4916      	ldr	r1, [pc, #88]	@ (8001130 <show_time_date+0xbc>)
 80010d6:	4817      	ldr	r0, [pc, #92]	@ (8001134 <show_time_date+0xc0>)
 80010d8:	f009 fb86 	bl	800a7e8 <siprintf>
	xQueueSend(qprint, &time, portMAX_DELAY);
 80010dc:	4b16      	ldr	r3, [pc, #88]	@ (8001138 <show_time_date+0xc4>)
 80010de:	6818      	ldr	r0, [r3, #0]
 80010e0:	2300      	movs	r3, #0
 80010e2:	f04f 32ff 	mov.w	r2, #4294967295
 80010e6:	4915      	ldr	r1, [pc, #84]	@ (800113c <show_time_date+0xc8>)
 80010e8:	f004 f846 	bl	8005178 <xQueueGenericSend>

	// Display date format : date-month-year
	sprintf((char *)showDate, "\t%02d-%02d-%02d\n", rtc_date.Month, rtc_date.Date, ( 2000 + rtc_date.Year ));
 80010ec:	7e7b      	ldrb	r3, [r7, #25]
 80010ee:	461a      	mov	r2, r3
 80010f0:	7ebb      	ldrb	r3, [r7, #26]
 80010f2:	4619      	mov	r1, r3
 80010f4:	7efb      	ldrb	r3, [r7, #27]
 80010f6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	460b      	mov	r3, r1
 80010fe:	4910      	ldr	r1, [pc, #64]	@ (8001140 <show_time_date+0xcc>)
 8001100:	4810      	ldr	r0, [pc, #64]	@ (8001144 <show_time_date+0xd0>)
 8001102:	f009 fb71 	bl	800a7e8 <siprintf>
	xQueueSend(qprint, &date, portMAX_DELAY);
 8001106:	4b0c      	ldr	r3, [pc, #48]	@ (8001138 <show_time_date+0xc4>)
 8001108:	6818      	ldr	r0, [r3, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	490d      	ldr	r1, [pc, #52]	@ (8001148 <show_time_date+0xd4>)
 8001112:	f004 f831 	bl	8005178 <xQueueGenericSend>
}
 8001116:	bf00      	nop
 8001118:	3720      	adds	r7, #32
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}
 800111e:	bf00      	nop
 8001120:	200000a8 	.word	0x200000a8
 8001124:	0800b8bc 	.word	0x0800b8bc
 8001128:	0800b8c0 	.word	0x0800b8c0
 800112c:	0800b8c4 	.word	0x0800b8c4
 8001130:	0800b8d8 	.word	0x0800b8d8
 8001134:	20000144 	.word	0x20000144
 8001138:	20000128 	.word	0x20000128
 800113c:	20000008 	.word	0x20000008
 8001140:	0800b8f0 	.word	0x0800b8f0
 8001144:	2000016c 	.word	0x2000016c
 8001148:	2000000c 	.word	0x2000000c

0800114c <show_time_date_itm>:


void show_time_date_itm(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af02      	add	r7, sp, #8
	RTC_DateTypeDef rtc_date;
	RTC_TimeTypeDef rtc_time;

	memset(&rtc_date,0,sizeof(rtc_date));
 8001152:	f107 0318 	add.w	r3, r7, #24
 8001156:	2204      	movs	r2, #4
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f009 fbb7 	bl	800a8ce <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2214      	movs	r2, #20
 8001164:	2100      	movs	r1, #0
 8001166:	4618      	mov	r0, r3
 8001168:	f009 fbb1 	bl	800a8ce <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4815      	ldr	r0, [pc, #84]	@ (80011c8 <show_time_date_itm+0x7c>)
 8001174:	f002 f92b 	bl	80033ce <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4811      	ldr	r0, [pc, #68]	@ (80011c8 <show_time_date_itm+0x7c>)
 8001182:	f002 fa06 	bl	8003592 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <show_time_date_itm+0x44>
 800118c:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <show_time_date_itm+0x80>)
 800118e:	e000      	b.n	8001192 <show_time_date_itm+0x46>
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <show_time_date_itm+0x84>)
 8001192:	61fb      	str	r3, [r7, #28]


	printf("%02d:%02d:%02d [%s]",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8001194:	793b      	ldrb	r3, [r7, #4]
 8001196:	4619      	mov	r1, r3
 8001198:	797b      	ldrb	r3, [r7, #5]
 800119a:	461a      	mov	r2, r3
 800119c:	79bb      	ldrb	r3, [r7, #6]
 800119e:	4618      	mov	r0, r3
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	4603      	mov	r3, r0
 80011a6:	480b      	ldr	r0, [pc, #44]	@ (80011d4 <show_time_date_itm+0x88>)
 80011a8:	f009 fb0c 	bl	800a7c4 <iprintf>
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 80011ac:	7e7b      	ldrb	r3, [r7, #25]
 80011ae:	4619      	mov	r1, r3
 80011b0:	7ebb      	ldrb	r3, [r7, #26]
 80011b2:	461a      	mov	r2, r3
 80011b4:	7efb      	ldrb	r3, [r7, #27]
 80011b6:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80011ba:	4807      	ldr	r0, [pc, #28]	@ (80011d8 <show_time_date_itm+0x8c>)
 80011bc:	f009 fb02 	bl	800a7c4 <iprintf>

}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	200000a8 	.word	0x200000a8
 80011cc:	0800b8bc 	.word	0x0800b8bc
 80011d0:	0800b8c0 	.word	0x0800b8c0
 80011d4:	0800b904 	.word	0x0800b904
 80011d8:	0800b918 	.word	0x0800b918

080011dc <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	70da      	strb	r2, [r3, #3]

	HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 80011ea:	2200      	movs	r2, #0
 80011ec:	6879      	ldr	r1, [r7, #4]
 80011ee:	4803      	ldr	r0, [pc, #12]	@ (80011fc <rtc_configure_time+0x20>)
 80011f0:	f002 f853 	bl	800329a <HAL_RTC_SetTime>

}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	200000a8 	.word	0x200000a8

08001200 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

	HAL_RTC_SetDate(&hrtc, date, RTC_FORMAT_BIN);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <rtc_configure_date+0x1c>)
 800120e:	f002 f93c 	bl	800348a <HAL_RTC_SetDate>

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	200000a8 	.word	0x200000a8

08001220 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	if(time){
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00d      	beq.n	800124c <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b0c      	cmp	r3, #12
 8001236:	d807      	bhi.n	8001248 <validate_rtc_information+0x28>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	785b      	ldrb	r3, [r3, #1]
 800123c:	2b3b      	cmp	r3, #59	@ 0x3b
 800123e:	d803      	bhi.n	8001248 <validate_rtc_information+0x28>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	789b      	ldrb	r3, [r3, #2]
 8001244:	2b3b      	cmp	r3, #59	@ 0x3b
 8001246:	d901      	bls.n	800124c <validate_rtc_information+0x2c>
			return 1;
 8001248:	2301      	movs	r3, #1
 800124a:	e015      	b.n	8001278 <validate_rtc_information+0x58>
	}

	if(date){
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d011      	beq.n	8001276 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	789b      	ldrb	r3, [r3, #2]
 8001256:	2b1f      	cmp	r3, #31
 8001258:	d80b      	bhi.n	8001272 <validate_rtc_information+0x52>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d807      	bhi.n	8001272 <validate_rtc_information+0x52>
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	78db      	ldrb	r3, [r3, #3]
 8001266:	2b63      	cmp	r3, #99	@ 0x63
 8001268:	d803      	bhi.n	8001272 <validate_rtc_information+0x52>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	785b      	ldrb	r3, [r3, #1]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d901      	bls.n	8001276 <validate_rtc_information+0x56>
			return 1;
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <validate_rtc_information+0x58>
	}

	return 0;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <HAL_MspInit+0x4c>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	4a0f      	ldr	r2, [pc, #60]	@ (80012d0 <HAL_MspInit+0x4c>)
 8001294:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001298:	6453      	str	r3, [r2, #68]	@ 0x44
 800129a:	4b0d      	ldr	r3, [pc, #52]	@ (80012d0 <HAL_MspInit+0x4c>)
 800129c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <HAL_MspInit+0x4c>)
 80012ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ae:	4a08      	ldr	r2, [pc, #32]	@ (80012d0 <HAL_MspInit+0x4c>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80012b6:	4b06      	ldr	r3, [pc, #24]	@ (80012d0 <HAL_MspInit+0x4c>)
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80012c2:	f006 ff4f 	bl	8008164 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023800 	.word	0x40023800

080012d4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012dc:	f107 0308 	add.w	r3, r7, #8
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
 80012ec:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001324 <HAL_RTC_MspInit+0x50>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d111      	bne.n	800131c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80012fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001300:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fe54 	bl	8002fb4 <HAL_RCCEx_PeriphCLKConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001312:	f7ff fea9 	bl	8001068 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001316:	4b04      	ldr	r3, [pc, #16]	@ (8001328 <HAL_RTC_MspInit+0x54>)
 8001318:	2201      	movs	r2, #1
 800131a:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800131c:	bf00      	nop
 800131e:	3720      	adds	r7, #32
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	40002800 	.word	0x40002800
 8001328:	42470e3c 	.word	0x42470e3c

0800132c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b08a      	sub	sp, #40	@ 0x28
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a1d      	ldr	r2, [pc, #116]	@ (80013c0 <HAL_UART_MspInit+0x94>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d133      	bne.n	80013b6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001356:	4a1b      	ldr	r2, [pc, #108]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001358:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800135c:	6413      	str	r3, [r2, #64]	@ 0x40
 800135e:	4b19      	ldr	r3, [pc, #100]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a14      	ldr	r2, [pc, #80]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_UART_MspInit+0x98>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001386:	230c      	movs	r3, #12
 8001388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001396:	2307      	movs	r3, #7
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	4619      	mov	r1, r3
 80013a0:	4809      	ldr	r0, [pc, #36]	@ (80013c8 <HAL_UART_MspInit+0x9c>)
 80013a2:	f000 ff7b 	bl	800229c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2026      	movs	r0, #38	@ 0x26
 80013ac:	f000 feba 	bl	8002124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b0:	2026      	movs	r0, #38	@ 0x26
 80013b2:	f000 fed3 	bl	800215c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80013b6:	bf00      	nop
 80013b8:	3728      	adds	r7, #40	@ 0x28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	40004400 	.word	0x40004400
 80013c4:	40023800 	.word	0x40023800
 80013c8:	40020000 	.word	0x40020000

080013cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08e      	sub	sp, #56	@ 0x38
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	4b33      	ldr	r3, [pc, #204]	@ (80014b0 <HAL_InitTick+0xe4>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e4:	4a32      	ldr	r2, [pc, #200]	@ (80014b0 <HAL_InitTick+0xe4>)
 80013e6:	f043 0308 	orr.w	r3, r3, #8
 80013ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ec:	4b30      	ldr	r3, [pc, #192]	@ (80014b0 <HAL_InitTick+0xe4>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013f0:	f003 0308 	and.w	r3, r3, #8
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80013f8:	f107 0210 	add.w	r2, r7, #16
 80013fc:	f107 0314 	add.w	r3, r7, #20
 8001400:	4611      	mov	r1, r2
 8001402:	4618      	mov	r0, r3
 8001404:	f001 fda4 	bl	8002f50 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001408:	6a3b      	ldr	r3, [r7, #32]
 800140a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800140c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800140e:	2b00      	cmp	r3, #0
 8001410:	d103      	bne.n	800141a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001412:	f001 fd75 	bl	8002f00 <HAL_RCC_GetPCLK1Freq>
 8001416:	6378      	str	r0, [r7, #52]	@ 0x34
 8001418:	e004      	b.n	8001424 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800141a:	f001 fd71 	bl	8002f00 <HAL_RCC_GetPCLK1Freq>
 800141e:	4603      	mov	r3, r0
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001424:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001426:	4a23      	ldr	r2, [pc, #140]	@ (80014b4 <HAL_InitTick+0xe8>)
 8001428:	fba2 2303 	umull	r2, r3, r2, r3
 800142c:	0c9b      	lsrs	r3, r3, #18
 800142e:	3b01      	subs	r3, #1
 8001430:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001432:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_InitTick+0xec>)
 8001434:	4a21      	ldr	r2, [pc, #132]	@ (80014bc <HAL_InitTick+0xf0>)
 8001436:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_InitTick+0xec>)
 800143a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800143e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001440:	4a1d      	ldr	r2, [pc, #116]	@ (80014b8 <HAL_InitTick+0xec>)
 8001442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001444:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001446:	4b1c      	ldr	r3, [pc, #112]	@ (80014b8 <HAL_InitTick+0xec>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800144c:	4b1a      	ldr	r3, [pc, #104]	@ (80014b8 <HAL_InitTick+0xec>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001452:	4b19      	ldr	r3, [pc, #100]	@ (80014b8 <HAL_InitTick+0xec>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001458:	4817      	ldr	r0, [pc, #92]	@ (80014b8 <HAL_InitTick+0xec>)
 800145a:	f002 f9a7 	bl	80037ac <HAL_TIM_Base_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001464:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001468:	2b00      	cmp	r3, #0
 800146a:	d11b      	bne.n	80014a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <HAL_InitTick+0xec>)
 800146e:	f002 f9f7 	bl	8003860 <HAL_TIM_Base_Start_IT>
 8001472:	4603      	mov	r3, r0
 8001474:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001478:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800147c:	2b00      	cmp	r3, #0
 800147e:	d111      	bne.n	80014a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001480:	2032      	movs	r0, #50	@ 0x32
 8001482:	f000 fe6b 	bl	800215c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d808      	bhi.n	800149e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	2032      	movs	r0, #50	@ 0x32
 8001492:	f000 fe47 	bl	8002124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <HAL_InitTick+0xf4>)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	e002      	b.n	80014a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3738      	adds	r7, #56	@ 0x38
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40023800 	.word	0x40023800
 80014b4:	431bde83 	.word	0x431bde83
 80014b8:	20000194 	.word	0x20000194
 80014bc:	40000c00 	.word	0x40000c00
 80014c0:	20000018 	.word	0x20000018

080014c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014c8:	bf00      	nop
 80014ca:	e7fd      	b.n	80014c8 <NMI_Handler+0x4>

080014cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014d0:	bf00      	nop
 80014d2:	e7fd      	b.n	80014d0 <HardFault_Handler+0x4>

080014d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014d8:	bf00      	nop
 80014da:	e7fd      	b.n	80014d8 <MemManage_Handler+0x4>

080014dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e0:	bf00      	nop
 80014e2:	e7fd      	b.n	80014e0 <BusFault_Handler+0x4>

080014e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f001 f86e 	bl	80025d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}

08001500 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001504:	4802      	ldr	r0, [pc, #8]	@ (8001510 <USART2_IRQHandler+0x10>)
 8001506:	f002 fcc5 	bl	8003e94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800150a:	bf00      	nop
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000c8 	.word	0x200000c8

08001514 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001518:	4802      	ldr	r0, [pc, #8]	@ (8001524 <TIM5_IRQHandler+0x10>)
 800151a:	f002 fa03 	bl	8003924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000194 	.word	0x20000194

08001528 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	e00a      	b.n	8001550 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800153a:	f3af 8000 	nop.w
 800153e:	4601      	mov	r1, r0
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	1c5a      	adds	r2, r3, #1
 8001544:	60ba      	str	r2, [r7, #8]
 8001546:	b2ca      	uxtb	r2, r1
 8001548:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	3301      	adds	r3, #1
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	429a      	cmp	r2, r3
 8001556:	dbf0      	blt.n	800153a <_read+0x12>
  }

  return len;
 8001558:	687b      	ldr	r3, [r7, #4]
}
 800155a:	4618      	mov	r0, r3
 800155c:	3718      	adds	r7, #24
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001562:	b480      	push	{r7}
 8001564:	b083      	sub	sp, #12
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800156e:	4618      	mov	r0, r3
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800158a:	605a      	str	r2, [r3, #4]
  return 0;
 800158c:	2300      	movs	r3, #0
}
 800158e:	4618      	mov	r0, r3
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <_isatty>:

int _isatty(int file)
{
 800159a:	b480      	push	{r7}
 800159c:	b083      	sub	sp, #12
 800159e:	af00      	add	r7, sp, #0
 80015a0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80015a2:	2301      	movs	r3, #1
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b085      	sub	sp, #20
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	60f8      	str	r0, [r7, #12]
 80015b8:	60b9      	str	r1, [r7, #8]
 80015ba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3714      	adds	r7, #20
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b086      	sub	sp, #24
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d4:	4a14      	ldr	r2, [pc, #80]	@ (8001628 <_sbrk+0x5c>)
 80015d6:	4b15      	ldr	r3, [pc, #84]	@ (800162c <_sbrk+0x60>)
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015e0:	4b13      	ldr	r3, [pc, #76]	@ (8001630 <_sbrk+0x64>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e8:	4b11      	ldr	r3, [pc, #68]	@ (8001630 <_sbrk+0x64>)
 80015ea:	4a12      	ldr	r2, [pc, #72]	@ (8001634 <_sbrk+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ee:	4b10      	ldr	r3, [pc, #64]	@ (8001630 <_sbrk+0x64>)
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4413      	add	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d207      	bcs.n	800160c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015fc:	f009 f9a4 	bl	800a948 <__errno>
 8001600:	4603      	mov	r3, r0
 8001602:	220c      	movs	r2, #12
 8001604:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001606:	f04f 33ff 	mov.w	r3, #4294967295
 800160a:	e009      	b.n	8001620 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800160c:	4b08      	ldr	r3, [pc, #32]	@ (8001630 <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001612:	4b07      	ldr	r3, [pc, #28]	@ (8001630 <_sbrk+0x64>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4413      	add	r3, r2
 800161a:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <_sbrk+0x64>)
 800161c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161e:	68fb      	ldr	r3, [r7, #12]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	20020000 	.word	0x20020000
 800162c:	00000400 	.word	0x00000400
 8001630:	200001dc 	.word	0x200001dc
 8001634:	2001cee0 	.word	0x2001cee0

08001638 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <SystemInit+0x20>)
 800163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001642:	4a05      	ldr	r2, [pc, #20]	@ (8001658 <SystemInit+0x20>)
 8001644:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001648:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <menu_task>:

const char *msg_inv = "/////// IVALID OPTION ////////\n";


void menu_task(void *parameters)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b088      	sub	sp, #32
 8001660:	af02      	add	r7, sp, #8
 8001662:	6078      	str	r0, [r7, #4]

	const char *msg_menu = "===============================\n"
 8001664:	4b31      	ldr	r3, [pc, #196]	@ (800172c <menu_task+0xd0>)
 8001666:	60fb      	str	r3, [r7, #12]


	while(1)
	{

		xQueueSend(qprint, &msg_menu, portMAX_DELAY);
 8001668:	4b31      	ldr	r3, [pc, #196]	@ (8001730 <menu_task+0xd4>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 010c 	add.w	r1, r7, #12
 8001670:	2300      	movs	r3, #0
 8001672:	f04f 32ff 	mov.w	r2, #4294967295
 8001676:	f003 fd7f 	bl	8005178 <xQueueGenericSend>

		// Wait for menu command
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 800167a:	f107 0308 	add.w	r3, r7, #8
 800167e:	f04f 32ff 	mov.w	r2, #4294967295
 8001682:	9200      	str	r2, [sp, #0]
 8001684:	2200      	movs	r2, #0
 8001686:	2100      	movs	r1, #0
 8001688:	2000      	movs	r0, #0
 800168a:	f005 fc21 	bl	8006ed0 <xTaskGenericNotifyWait>
		cmd = (command_t *)cmd_addr;
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	617b      	str	r3, [r7, #20]

		if(cmd->len == 1)
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	7a9b      	ldrb	r3, [r3, #10]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d133      	bne.n	8001702 <menu_task+0xa6>
		{

			// Valid entry

			option = ( cmd->payload[0] - 48 );
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	3b30      	subs	r3, #48	@ 0x30
 80016a0:	613b      	str	r3, [r7, #16]

			switch(option)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d035      	beq.n	8001714 <menu_task+0xb8>
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	dc20      	bgt.n	80016f0 <menu_task+0x94>
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <menu_task+0x60>
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d00d      	beq.n	80016d6 <menu_task+0x7a>
 80016ba:	e019      	b.n	80016f0 <menu_task+0x94>
			{

				case 0:

					curr_state = sLedEffect;
 80016bc:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <menu_task+0xd8>)
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_led_task, 0, eNoAction);
 80016c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001738 <menu_task+0xdc>)
 80016c4:	6818      	ldr	r0, [r3, #0]
 80016c6:	2300      	movs	r3, #0
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2300      	movs	r3, #0
 80016cc:	2200      	movs	r2, #0
 80016ce:	2100      	movs	r1, #0
 80016d0:	f005 fc96 	bl	8007000 <xTaskGenericNotify>

				break;
 80016d4:	e01f      	b.n	8001716 <menu_task+0xba>

				case 1:

					curr_state = sRtcMenu;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <menu_task+0xd8>)
 80016d8:	2202      	movs	r2, #2
 80016da:	701a      	strb	r2, [r3, #0]
					xTaskNotify(handle_rtc_task, 0, eNoAction);
 80016dc:	4b17      	ldr	r3, [pc, #92]	@ (800173c <menu_task+0xe0>)
 80016de:	6818      	ldr	r0, [r3, #0]
 80016e0:	2300      	movs	r3, #0
 80016e2:	9300      	str	r3, [sp, #0]
 80016e4:	2300      	movs	r3, #0
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	f005 fc89 	bl	8007000 <xTaskGenericNotify>

				break;
 80016ee:	e012      	b.n	8001716 <menu_task+0xba>

				break;

				default:

					xQueueSend(qprint, &msg_inv, portMAX_DELAY);
 80016f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001730 <menu_task+0xd4>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	f04f 32ff 	mov.w	r2, #4294967295
 80016fa:	4911      	ldr	r1, [pc, #68]	@ (8001740 <menu_task+0xe4>)
 80016fc:	f003 fd3c 	bl	8005178 <xQueueGenericSend>

					continue;
 8001700:	e013      	b.n	800172a <menu_task+0xce>
		{

			// Invalid entry

			// Notify the user
			xQueueSend(qprint, &msg_inv, portMAX_DELAY);
 8001702:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <menu_task+0xd4>)
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	f04f 32ff 	mov.w	r2, #4294967295
 800170c:	490c      	ldr	r1, [pc, #48]	@ (8001740 <menu_task+0xe4>)
 800170e:	f003 fd33 	bl	8005178 <xQueueGenericSend>
			continue;
 8001712:	e00a      	b.n	800172a <menu_task+0xce>
				break;
 8001714:	bf00      	nop

		}

		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001716:	f107 0308 	add.w	r3, r7, #8
 800171a:	f04f 32ff 	mov.w	r2, #4294967295
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	2200      	movs	r2, #0
 8001722:	2100      	movs	r1, #0
 8001724:	2000      	movs	r0, #0
 8001726:	f005 fbd3 	bl	8006ed0 <xTaskGenericNotifyWait>
		xQueueSend(qprint, &msg_menu, portMAX_DELAY);
 800172a:	e79d      	b.n	8001668 <menu_task+0xc>
 800172c:	0800b948 	.word	0x0800b948
 8001730:	20000128 	.word	0x20000128
 8001734:	2000012d 	.word	0x2000012d
 8001738:	2000011c 	.word	0x2000011c
 800173c:	20000120 	.word	0x20000120
 8001740:	20000014 	.word	0x20000014

08001744 <cmd_handler_task>:
	}

}

void cmd_handler_task(void *parameters)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b088      	sub	sp, #32
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]


	while(1)
	{

		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 800174c:	f04f 33ff 	mov.w	r3, #4294967295
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	2300      	movs	r3, #0
 8001754:	2200      	movs	r2, #0
 8001756:	2100      	movs	r1, #0
 8001758:	2000      	movs	r0, #0
 800175a:	f005 fbb9 	bl	8006ed0 <xTaskGenericNotifyWait>
 800175e:	6178      	str	r0, [r7, #20]
		if(ret == pdTRUE)
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d1f2      	bne.n	800174c <cmd_handler_task+0x8>
		{

			process_command(&cmd);
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f000 faf8 	bl	8001d60 <process_command>
		ret = xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001770:	e7ec      	b.n	800174c <cmd_handler_task+0x8>
	...

08001774 <print_task>:

}


void print_task(void *parameters)
{
 8001774:	b590      	push	{r4, r7, lr}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]


	while(1)
	{

		xQueueReceive(qprint, &msg, portMAX_DELAY);
 800177c:	4b0b      	ldr	r3, [pc, #44]	@ (80017ac <print_task+0x38>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f107 010c 	add.w	r1, r7, #12
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	4618      	mov	r0, r3
 800178a:	f003 febf 	bl	800550c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
 800178e:	68fc      	ldr	r4, [r7, #12]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd78 	bl	8000288 <strlen>
 8001798:	4603      	mov	r3, r0
 800179a:	b29a      	uxth	r2, r3
 800179c:	f04f 33ff 	mov.w	r3, #4294967295
 80017a0:	4621      	mov	r1, r4
 80017a2:	4803      	ldr	r0, [pc, #12]	@ (80017b0 <print_task+0x3c>)
 80017a4:	f002 fac6 	bl	8003d34 <HAL_UART_Transmit>
		xQueueReceive(qprint, &msg, portMAX_DELAY);
 80017a8:	bf00      	nop
 80017aa:	e7e7      	b.n	800177c <print_task+0x8>
 80017ac:	20000128 	.word	0x20000128
 80017b0:	200000c8 	.word	0x200000c8

080017b4 <led_task>:

}


void led_task(void *parameters)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b088      	sub	sp, #32
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	6078      	str	r0, [r7, #4]

	const char *msg_led = "===============================\n"
 80017bc:	4b3e      	ldr	r3, [pc, #248]	@ (80018b8 <led_task+0x104>)
 80017be:	613b      	str	r3, [r7, #16]

	while(1)
	{

		/* Wait for notification (Notify wait) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80017c0:	f04f 33ff 	mov.w	r3, #4294967295
 80017c4:	9300      	str	r3, [sp, #0]
 80017c6:	2300      	movs	r3, #0
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2000      	movs	r0, #0
 80017ce:	f005 fb7f 	bl	8006ed0 <xTaskGenericNotifyWait>

		/* Print LED menu */
		xQueueSend(qprint, &msg_led, portMAX_DELAY);
 80017d2:	4b3a      	ldr	r3, [pc, #232]	@ (80018bc <led_task+0x108>)
 80017d4:	6818      	ldr	r0, [r3, #0]
 80017d6:	f107 0110 	add.w	r1, r7, #16
 80017da:	2300      	movs	r3, #0
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295
 80017e0:	f003 fcca 	bl	8005178 <xQueueGenericSend>

		/* Wait for LED command (Notify wait) */
		xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	f04f 32ff 	mov.w	r2, #4294967295
 80017ec:	9200      	str	r2, [sp, #0]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2100      	movs	r1, #0
 80017f2:	2000      	movs	r0, #0
 80017f4:	f005 fb6c 	bl	8006ed0 <xTaskGenericNotifyWait>
		cmd = (command_t *)cmd_addr;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	617b      	str	r3, [r7, #20]

		if(cmd->len <= 4)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	7a9b      	ldrb	r3, [r3, #10]
 8001800:	2b04      	cmp	r3, #4
 8001802:	d843      	bhi.n	800188c <led_task+0xd8>
		{

			if(! strcmp((char*)cmd->payload,"none"))
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	492e      	ldr	r1, [pc, #184]	@ (80018c0 <led_task+0x10c>)
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fd33 	bl	8000274 <strcmp>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <led_task+0x66>
				led_effect_stop();
 8001814:	f7fe ff0c 	bl	8000630 <led_effect_stop>
 8001818:	e7d2      	b.n	80017c0 <led_task+0xc>
			else if (! strcmp((char*)cmd->payload,"e1"))
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	4929      	ldr	r1, [pc, #164]	@ (80018c4 <led_task+0x110>)
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fd28 	bl	8000274 <strcmp>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d103      	bne.n	8001832 <led_task+0x7e>
				led_effect(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f7fe ff20 	bl	8000670 <led_effect>
 8001830:	e7c6      	b.n	80017c0 <led_task+0xc>
			else if (! strcmp((char*)cmd->payload,"e2"))
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	4924      	ldr	r1, [pc, #144]	@ (80018c8 <led_task+0x114>)
 8001836:	4618      	mov	r0, r3
 8001838:	f7fe fd1c 	bl	8000274 <strcmp>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d103      	bne.n	800184a <led_task+0x96>
				led_effect(2);
 8001842:	2002      	movs	r0, #2
 8001844:	f7fe ff14 	bl	8000670 <led_effect>
 8001848:	e7ba      	b.n	80017c0 <led_task+0xc>
			else if (! strcmp((char*)cmd->payload,"e3"))
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	491f      	ldr	r1, [pc, #124]	@ (80018cc <led_task+0x118>)
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe fd10 	bl	8000274 <strcmp>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d103      	bne.n	8001862 <led_task+0xae>
				led_effect(3);
 800185a:	2003      	movs	r0, #3
 800185c:	f7fe ff08 	bl	8000670 <led_effect>
 8001860:	e7ae      	b.n	80017c0 <led_task+0xc>
			else if (! strcmp((char*)cmd->payload,"e4"))
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	491a      	ldr	r1, [pc, #104]	@ (80018d0 <led_task+0x11c>)
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fd04 	bl	8000274 <strcmp>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d103      	bne.n	800187a <led_task+0xc6>
				led_effect(4);
 8001872:	2004      	movs	r0, #4
 8001874:	f7fe fefc 	bl	8000670 <led_effect>
 8001878:	e7a2      	b.n	80017c0 <led_task+0xc>
			else
				/* print invalid message */
				xQueueSend(qprint, &msg_inv, portMAX_DELAY);
 800187a:	4b10      	ldr	r3, [pc, #64]	@ (80018bc <led_task+0x108>)
 800187c:	6818      	ldr	r0, [r3, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	f04f 32ff 	mov.w	r2, #4294967295
 8001884:	4913      	ldr	r1, [pc, #76]	@ (80018d4 <led_task+0x120>)
 8001886:	f003 fc77 	bl	8005178 <xQueueGenericSend>
 800188a:	e799      	b.n	80017c0 <led_task+0xc>
		}
		else
		{

			/* print invalid message */
			xQueueSend(qprint, & msg_inv, portMAX_DELAY);
 800188c:	4b0b      	ldr	r3, [pc, #44]	@ (80018bc <led_task+0x108>)
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	2300      	movs	r3, #0
 8001892:	f04f 32ff 	mov.w	r2, #4294967295
 8001896:	490f      	ldr	r1, [pc, #60]	@ (80018d4 <led_task+0x120>)
 8001898:	f003 fc6e 	bl	8005178 <xQueueGenericSend>

			/* update state variable */
			curr_state = sMainMenu;
 800189c:	4b0e      	ldr	r3, [pc, #56]	@ (80018d8 <led_task+0x124>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]

			/* Notify menu task */
			xTaskNotify(handle_menu_task,0,eNoAction);
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <led_task+0x128>)
 80018a4:	6818      	ldr	r0, [r3, #0]
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f005 fba6 	bl	8007000 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 80018b4:	e784      	b.n	80017c0 <led_task+0xc>
 80018b6:	bf00      	nop
 80018b8:	0800ba24 	.word	0x0800ba24
 80018bc:	20000128 	.word	0x20000128
 80018c0:	0800bab4 	.word	0x0800bab4
 80018c4:	0800babc 	.word	0x0800babc
 80018c8:	0800bac0 	.word	0x0800bac0
 80018cc:	0800bac4 	.word	0x0800bac4
 80018d0:	0800bac8 	.word	0x0800bac8
 80018d4:	20000014 	.word	0x20000014
 80018d8:	2000012d 	.word	0x2000012d
 80018dc:	20000110 	.word	0x20000110

080018e0 <rtc_task>:

}


void rtc_task(void *parameters)
{
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b09b      	sub	sp, #108	@ 0x6c
 80018e4:	af02      	add	r7, sp, #8
 80018e6:	6078      	str	r0, [r7, #4]
	#define MONTH_CONFIG 	1
	#define YEAR_CONFIG 	2
	#define DAY_CONFIG 		3


	const char* msg_rtc1 = "========================\n"
 80018e8:	4bb3      	ldr	r3, [pc, #716]	@ (8001bb8 <rtc_task+0x2d8>)
 80018ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
						   "|         RTC          |\n"
						   "========================\n";

	const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80018ec:	4bb3      	ldr	r3, [pc, #716]	@ (8001bbc <rtc_task+0x2dc>)
 80018ee:	64bb      	str	r3, [r7, #72]	@ 0x48
						   "Enable reporting          ----> 2\n"
						   "Exit                      ----> 3\n"
						   "Enter your choice here : ";


	const char *msg_rtc_hh = "Enter hour(1-12):";
 80018f0:	4bb3      	ldr	r3, [pc, #716]	@ (8001bc0 <rtc_task+0x2e0>)
 80018f2:	647b      	str	r3, [r7, #68]	@ 0x44
	const char *msg_rtc_mm = "Enter minutes(0-59):";
 80018f4:	4bb3      	ldr	r3, [pc, #716]	@ (8001bc4 <rtc_task+0x2e4>)
 80018f6:	643b      	str	r3, [r7, #64]	@ 0x40
	const char *msg_rtc_ss = "Enter seconds(0-59):";
 80018f8:	4bb3      	ldr	r3, [pc, #716]	@ (8001bc8 <rtc_task+0x2e8>)
 80018fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

	const char *msg_rtc_dd  = "Enter date(1-31):";
 80018fc:	4bb3      	ldr	r3, [pc, #716]	@ (8001bcc <rtc_task+0x2ec>)
 80018fe:	63bb      	str	r3, [r7, #56]	@ 0x38
	const char *msg_rtc_mo  ="Enter month(1-12):";
 8001900:	4bb3      	ldr	r3, [pc, #716]	@ (8001bd0 <rtc_task+0x2f0>)
 8001902:	637b      	str	r3, [r7, #52]	@ 0x34
	const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 8001904:	4bb3      	ldr	r3, [pc, #716]	@ (8001bd4 <rtc_task+0x2f4>)
 8001906:	633b      	str	r3, [r7, #48]	@ 0x30
	const char *msg_rtc_yr  = "Enter year(0-99):";
 8001908:	4bb3      	ldr	r3, [pc, #716]	@ (8001bd8 <rtc_task+0x2f8>)
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c

	const char *msg_conf = "Configuration successful\n";
 800190c:	4bb3      	ldr	r3, [pc, #716]	@ (8001bdc <rtc_task+0x2fc>)
 800190e:	62bb      	str	r3, [r7, #40]	@ 0x28
	const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001910:	4bb3      	ldr	r3, [pc, #716]	@ (8001be0 <rtc_task+0x300>)
 8001912:	627b      	str	r3, [r7, #36]	@ 0x24
	RTC_DateTypeDef date;


	while(1){
		/* Notify wait (wait till someone notifies) */
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001914:	f04f 33ff 	mov.w	r3, #4294967295
 8001918:	9300      	str	r3, [sp, #0]
 800191a:	2300      	movs	r3, #0
 800191c:	2200      	movs	r2, #0
 800191e:	2100      	movs	r1, #0
 8001920:	2000      	movs	r0, #0
 8001922:	f005 fad5 	bl	8006ed0 <xTaskGenericNotifyWait>

		/* Print the menu and show current date and time information */
		xQueueSend(qprint, &msg_rtc1, portMAX_DELAY);
 8001926:	4baf      	ldr	r3, [pc, #700]	@ (8001be4 <rtc_task+0x304>)
 8001928:	6818      	ldr	r0, [r3, #0]
 800192a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800192e:	2300      	movs	r3, #0
 8001930:	f04f 32ff 	mov.w	r2, #4294967295
 8001934:	f003 fc20 	bl	8005178 <xQueueGenericSend>
		show_time_date();
 8001938:	f7ff fb9c 	bl	8001074 <show_time_date>
		xQueueSend(qprint, &msg_rtc2, portMAX_DELAY);
 800193c:	4ba9      	ldr	r3, [pc, #676]	@ (8001be4 <rtc_task+0x304>)
 800193e:	6818      	ldr	r0, [r3, #0]
 8001940:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001944:	2300      	movs	r3, #0
 8001946:	f04f 32ff 	mov.w	r2, #4294967295
 800194a:	f003 fc15 	bl	8005178 <xQueueGenericSend>


		while(curr_state != sMainMenu){
 800194e:	e1eb      	b.n	8001d28 <rtc_task+0x448>

			/* Wait for command notification (Notify wait) */
			xTaskNotifyWait(0, 0, &cmd_addr, portMAX_DELAY);
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	f04f 32ff 	mov.w	r2, #4294967295
 8001958:	9200      	str	r2, [sp, #0]
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	2000      	movs	r0, #0
 8001960:	f005 fab6 	bl	8006ed0 <xTaskGenericNotifyWait>
			cmd = (command_t *)cmd_addr;
 8001964:	6a3b      	ldr	r3, [r7, #32]
 8001966:	65fb      	str	r3, [r7, #92]	@ 0x5c

			switch(curr_state)
 8001968:	4b9f      	ldr	r3, [pc, #636]	@ (8001be8 <rtc_task+0x308>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	3b02      	subs	r3, #2
 800196e:	2b03      	cmp	r3, #3
 8001970:	f200 81d3 	bhi.w	8001d1a <rtc_task+0x43a>
 8001974:	a201      	add	r2, pc, #4	@ (adr r2, 800197c <rtc_task+0x9c>)
 8001976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800197a:	bf00      	nop
 800197c:	0800198d 	.word	0x0800198d
 8001980:	08001a41 	.word	0x08001a41
 8001984:	08001b2f 	.word	0x08001b2f
 8001988:	08001c97 	.word	0x08001c97
			{

				case sRtcMenu:

					/* process RTC menu commands */
					if(cmd->len == 1)
 800198c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800198e:	7a9b      	ldrb	r3, [r3, #10]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d148      	bne.n	8001a26 <rtc_task+0x146>
					{

						menu_code = ( cmd->payload[0] - 48 );
 8001994:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	3b30      	subs	r3, #48	@ 0x30
 800199a:	653b      	str	r3, [r7, #80]	@ 0x50
 800199c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800199e:	2b03      	cmp	r3, #3
 80019a0:	d835      	bhi.n	8001a0e <rtc_task+0x12e>
 80019a2:	a201      	add	r2, pc, #4	@ (adr r2, 80019a8 <rtc_task+0xc8>)
 80019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019a8:	080019b9 	.word	0x080019b9
 80019ac:	080019d3 	.word	0x080019d3
 80019b0:	080019ed 	.word	0x080019ed
 80019b4:	08001a07 	.word	0x08001a07
						switch(menu_code)
						{

							case 0:

								curr_state = sRtcTimeConfig;
 80019b8:	4b8b      	ldr	r3, [pc, #556]	@ (8001be8 <rtc_task+0x308>)
 80019ba:	2203      	movs	r2, #3
 80019bc:	701a      	strb	r2, [r3, #0]
								xQueueSend(qprint, &msg_rtc_hh, portMAX_DELAY);
 80019be:	4b89      	ldr	r3, [pc, #548]	@ (8001be4 <rtc_task+0x304>)
 80019c0:	6818      	ldr	r0, [r3, #0]
 80019c2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80019c6:	2300      	movs	r3, #0
 80019c8:	f04f 32ff 	mov.w	r2, #4294967295
 80019cc:	f003 fbd4 	bl	8005178 <xQueueGenericSend>

							break;
 80019d0:	e035      	b.n	8001a3e <rtc_task+0x15e>

							case 1:

								curr_state = sRtcDateConfig;
 80019d2:	4b85      	ldr	r3, [pc, #532]	@ (8001be8 <rtc_task+0x308>)
 80019d4:	2204      	movs	r2, #4
 80019d6:	701a      	strb	r2, [r3, #0]
								xQueueSend(qprint, &msg_rtc_dd, portMAX_DELAY);
 80019d8:	4b82      	ldr	r3, [pc, #520]	@ (8001be4 <rtc_task+0x304>)
 80019da:	6818      	ldr	r0, [r3, #0]
 80019dc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80019e0:	2300      	movs	r3, #0
 80019e2:	f04f 32ff 	mov.w	r2, #4294967295
 80019e6:	f003 fbc7 	bl	8005178 <xQueueGenericSend>

							break;
 80019ea:	e028      	b.n	8001a3e <rtc_task+0x15e>

							case 2:

								curr_state = sRtcReport;
 80019ec:	4b7e      	ldr	r3, [pc, #504]	@ (8001be8 <rtc_task+0x308>)
 80019ee:	2205      	movs	r2, #5
 80019f0:	701a      	strb	r2, [r3, #0]
								xQueueSend(qprint, &msg_rtc_report, portMAX_DELAY);
 80019f2:	4b7c      	ldr	r3, [pc, #496]	@ (8001be4 <rtc_task+0x304>)
 80019f4:	6818      	ldr	r0, [r3, #0]
 80019f6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80019fa:	2300      	movs	r3, #0
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	f003 fbba 	bl	8005178 <xQueueGenericSend>

							break;
 8001a04:	e01b      	b.n	8001a3e <rtc_task+0x15e>

							case 3:

								curr_state = sMainMenu;
 8001a06:	4b78      	ldr	r3, [pc, #480]	@ (8001be8 <rtc_task+0x308>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]

							break;
 8001a0c:	e017      	b.n	8001a3e <rtc_task+0x15e>

							default:

								curr_state = sMainMenu;
 8001a0e:	4b76      	ldr	r3, [pc, #472]	@ (8001be8 <rtc_task+0x308>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	701a      	strb	r2, [r3, #0]
								xQueueSend(qprint, &msg_inv, portMAX_DELAY);
 8001a14:	4b73      	ldr	r3, [pc, #460]	@ (8001be4 <rtc_task+0x304>)
 8001a16:	6818      	ldr	r0, [r3, #0]
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8001a1e:	4973      	ldr	r1, [pc, #460]	@ (8001bec <rtc_task+0x30c>)
 8001a20:	f003 fbaa 	bl	8005178 <xQueueGenericSend>
						curr_state = sMainMenu;
						xQueueSend(qprint, &msg_inv, portMAX_DELAY);

					}

				break;
 8001a24:	e180      	b.n	8001d28 <rtc_task+0x448>
						curr_state = sMainMenu;
 8001a26:	4b70      	ldr	r3, [pc, #448]	@ (8001be8 <rtc_task+0x308>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
						xQueueSend(qprint, &msg_inv, portMAX_DELAY);
 8001a2c:	4b6d      	ldr	r3, [pc, #436]	@ (8001be4 <rtc_task+0x304>)
 8001a2e:	6818      	ldr	r0, [r3, #0]
 8001a30:	2300      	movs	r3, #0
 8001a32:	f04f 32ff 	mov.w	r2, #4294967295
 8001a36:	496d      	ldr	r1, [pc, #436]	@ (8001bec <rtc_task+0x30c>)
 8001a38:	f003 fb9e 	bl	8005178 <xQueueGenericSend>
				break;
 8001a3c:	e174      	b.n	8001d28 <rtc_task+0x448>
 8001a3e:	e173      	b.n	8001d28 <rtc_task+0x448>
				case sRtcTimeConfig:

					/* get hh, mm, ss infor and configure RTC */
					/* take care of invalid entries */

					switch(rtc_state)
 8001a40:	4b6b      	ldr	r3, [pc, #428]	@ (8001bf0 <rtc_task+0x310>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d03b      	beq.n	8001ac0 <rtc_task+0x1e0>
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	f300 816a 	bgt.w	8001d22 <rtc_task+0x442>
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d002      	beq.n	8001a58 <rtc_task+0x178>
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d01a      	beq.n	8001a8c <rtc_task+0x1ac>

						break;

					}

				break;
 8001a56:	e164      	b.n	8001d22 <rtc_task+0x442>
							uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001a58:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a5c:	7a9b      	ldrb	r3, [r3, #10]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4610      	mov	r0, r2
 8001a62:	f000 f9f3 	bl	8001e4c <getnumber>
 8001a66:	4603      	mov	r3, r0
 8001a68:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
							time.Hours = hour;
 8001a6c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001a70:	733b      	strb	r3, [r7, #12]
							rtc_state = MM_CONFIG;
 8001a72:	4b5f      	ldr	r3, [pc, #380]	@ (8001bf0 <rtc_task+0x310>)
 8001a74:	2201      	movs	r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
							xQueueSend(qprint,&msg_rtc_mm,portMAX_DELAY);
 8001a78:	4b5a      	ldr	r3, [pc, #360]	@ (8001be4 <rtc_task+0x304>)
 8001a7a:	6818      	ldr	r0, [r3, #0]
 8001a7c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001a80:	2300      	movs	r3, #0
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295
 8001a86:	f003 fb77 	bl	8005178 <xQueueGenericSend>
						break;
 8001a8a:	e04f      	b.n	8001b2c <rtc_task+0x24c>
							uint8_t min = getnumber(cmd->payload , cmd->len);
 8001a8c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001a8e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a90:	7a9b      	ldrb	r3, [r3, #10]
 8001a92:	4619      	mov	r1, r3
 8001a94:	4610      	mov	r0, r2
 8001a96:	f000 f9d9 	bl	8001e4c <getnumber>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
							time.Minutes = min;
 8001aa0:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001aa4:	737b      	strb	r3, [r7, #13]
							rtc_state = SS_CONFIG;
 8001aa6:	4b52      	ldr	r3, [pc, #328]	@ (8001bf0 <rtc_task+0x310>)
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	601a      	str	r2, [r3, #0]
							xQueueSend(qprint,&msg_rtc_ss,portMAX_DELAY);
 8001aac:	4b4d      	ldr	r3, [pc, #308]	@ (8001be4 <rtc_task+0x304>)
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aba:	f003 fb5d 	bl	8005178 <xQueueGenericSend>
						break;
 8001abe:	e035      	b.n	8001b2c <rtc_task+0x24c>
							uint8_t sec = getnumber(cmd->payload , cmd->len);
 8001ac0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001ac2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ac4:	7a9b      	ldrb	r3, [r3, #10]
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4610      	mov	r0, r2
 8001aca:	f000 f9bf 	bl	8001e4c <getnumber>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
							time.Seconds = sec;
 8001ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001ad8:	73bb      	strb	r3, [r7, #14]
							if(!validate_rtc_information(&time,NULL))
 8001ada:	f107 030c 	add.w	r3, r7, #12
 8001ade:	2100      	movs	r1, #0
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f7ff fb9d 	bl	8001220 <validate_rtc_information>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d110      	bne.n	8001b0e <rtc_task+0x22e>
								rtc_configure_time(&time);
 8001aec:	f107 030c 	add.w	r3, r7, #12
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fb73 	bl	80011dc <rtc_configure_time>
								xQueueSend(qprint,&msg_conf,portMAX_DELAY);
 8001af6:	4b3b      	ldr	r3, [pc, #236]	@ (8001be4 <rtc_task+0x304>)
 8001af8:	6818      	ldr	r0, [r3, #0]
 8001afa:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001afe:	2300      	movs	r3, #0
 8001b00:	f04f 32ff 	mov.w	r2, #4294967295
 8001b04:	f003 fb38 	bl	8005178 <xQueueGenericSend>
								show_time_date();
 8001b08:	f7ff fab4 	bl	8001074 <show_time_date>
 8001b0c:	e007      	b.n	8001b1e <rtc_task+0x23e>
								xQueueSend(qprint,&msg_inv,portMAX_DELAY);
 8001b0e:	4b35      	ldr	r3, [pc, #212]	@ (8001be4 <rtc_task+0x304>)
 8001b10:	6818      	ldr	r0, [r3, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	f04f 32ff 	mov.w	r2, #4294967295
 8001b18:	4934      	ldr	r1, [pc, #208]	@ (8001bec <rtc_task+0x30c>)
 8001b1a:	f003 fb2d 	bl	8005178 <xQueueGenericSend>
							curr_state = sMainMenu;
 8001b1e:	4b32      	ldr	r3, [pc, #200]	@ (8001be8 <rtc_task+0x308>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8001b24:	4b32      	ldr	r3, [pc, #200]	@ (8001bf0 <rtc_task+0x310>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
						break;
 8001b2a:	bf00      	nop
				break;
 8001b2c:	e0f9      	b.n	8001d22 <rtc_task+0x442>
				case sRtcDateConfig:

					/*get date, month, day , year info and configure RTC */

					/*take care of invalid entries */
					switch(rtc_state)
 8001b2e:	4b30      	ldr	r3, [pc, #192]	@ (8001bf0 <rtc_task+0x310>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2b03      	cmp	r3, #3
 8001b34:	f200 80f7 	bhi.w	8001d26 <rtc_task+0x446>
 8001b38:	a201      	add	r2, pc, #4	@ (adr r2, 8001b40 <rtc_task+0x260>)
 8001b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b3e:	bf00      	nop
 8001b40:	08001b51 	.word	0x08001b51
 8001b44:	08001b85 	.word	0x08001b85
 8001b48:	08001c29 	.word	0x08001c29
 8001b4c:	08001bf5 	.word	0x08001bf5
					{

						case DATE_CONFIG:

							uint8_t d = getnumber(cmd->payload , cmd->len);
 8001b50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b54:	7a9b      	ldrb	r3, [r3, #10]
 8001b56:	4619      	mov	r1, r3
 8001b58:	4610      	mov	r0, r2
 8001b5a:	f000 f977 	bl	8001e4c <getnumber>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
							date.Date = d;
 8001b64:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001b68:	72bb      	strb	r3, [r7, #10]
							rtc_state = MONTH_CONFIG;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <rtc_task+0x310>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
							xQueueSend(qprint,&msg_rtc_mo,portMAX_DELAY);
 8001b70:	4b1c      	ldr	r3, [pc, #112]	@ (8001be4 <rtc_task+0x304>)
 8001b72:	6818      	ldr	r0, [r3, #0]
 8001b74:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7e:	f003 fafb 	bl	8005178 <xQueueGenericSend>
							break;
 8001b82:	e087      	b.n	8001c94 <rtc_task+0x3b4>

						case MONTH_CONFIG:

							uint8_t month = getnumber(cmd->payload , cmd->len);
 8001b84:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b88:	7a9b      	ldrb	r3, [r3, #10]
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	f000 f95d 	bl	8001e4c <getnumber>
 8001b92:	4603      	mov	r3, r0
 8001b94:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
							date.Month = month;
 8001b98:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 8001b9c:	727b      	strb	r3, [r7, #9]
							rtc_state = DAY_CONFIG;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <rtc_task+0x310>)
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	601a      	str	r2, [r3, #0]
							xQueueSend(qprint,&msg_rtc_dow,portMAX_DELAY);
 8001ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8001be4 <rtc_task+0x304>)
 8001ba6:	6818      	ldr	r0, [r3, #0]
 8001ba8:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8001bac:	2300      	movs	r3, #0
 8001bae:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb2:	f003 fae1 	bl	8005178 <xQueueGenericSend>

						break;
 8001bb6:	e06d      	b.n	8001c94 <rtc_task+0x3b4>
 8001bb8:	0800bacc 	.word	0x0800bacc
 8001bbc:	0800bb18 	.word	0x0800bb18
 8001bc0:	0800bbbc 	.word	0x0800bbbc
 8001bc4:	0800bbd0 	.word	0x0800bbd0
 8001bc8:	0800bbe8 	.word	0x0800bbe8
 8001bcc:	0800bc00 	.word	0x0800bc00
 8001bd0:	0800bc14 	.word	0x0800bc14
 8001bd4:	0800bc28 	.word	0x0800bc28
 8001bd8:	0800bc40 	.word	0x0800bc40
 8001bdc:	0800bc54 	.word	0x0800bc54
 8001be0:	0800bc70 	.word	0x0800bc70
 8001be4:	20000128 	.word	0x20000128
 8001be8:	2000012d 	.word	0x2000012d
 8001bec:	20000014 	.word	0x20000014
 8001bf0:	200001e0 	.word	0x200001e0

						case DAY_CONFIG:

							uint8_t day = getnumber(cmd->payload , cmd->len);
 8001bf4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bf8:	7a9b      	ldrb	r3, [r3, #10]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	f000 f925 	bl	8001e4c <getnumber>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
							date.WeekDay = day;
 8001c08:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001c0c:	723b      	strb	r3, [r7, #8]
							rtc_state = YEAR_CONFIG;
 8001c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d48 <rtc_task+0x468>)
 8001c10:	2202      	movs	r2, #2
 8001c12:	601a      	str	r2, [r3, #0]
							xQueueSend(qprint,&msg_rtc_yr,portMAX_DELAY);
 8001c14:	4b4d      	ldr	r3, [pc, #308]	@ (8001d4c <rtc_task+0x46c>)
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8001c22:	f003 faa9 	bl	8005178 <xQueueGenericSend>

						break;
 8001c26:	e035      	b.n	8001c94 <rtc_task+0x3b4>

						case YEAR_CONFIG:

							uint8_t year = getnumber(cmd->payload , cmd->len);
 8001c28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001c2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c2c:	7a9b      	ldrb	r3, [r3, #10]
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4610      	mov	r0, r2
 8001c32:	f000 f90b 	bl	8001e4c <getnumber>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
							date.Year = year;
 8001c3c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001c40:	72fb      	strb	r3, [r7, #11]

							if(!validate_rtc_information(NULL,&date))
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4619      	mov	r1, r3
 8001c48:	2000      	movs	r0, #0
 8001c4a:	f7ff fae9 	bl	8001220 <validate_rtc_information>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d110      	bne.n	8001c76 <rtc_task+0x396>
							{

								rtc_configure_date(&date);
 8001c54:	f107 0308 	add.w	r3, r7, #8
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fad1 	bl	8001200 <rtc_configure_date>
								xQueueSend(qprint,&msg_conf,portMAX_DELAY);
 8001c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8001d4c <rtc_task+0x46c>)
 8001c60:	6818      	ldr	r0, [r3, #0]
 8001c62:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001c66:	2300      	movs	r3, #0
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	f003 fa84 	bl	8005178 <xQueueGenericSend>
								show_time_date();
 8001c70:	f7ff fa00 	bl	8001074 <show_time_date>
 8001c74:	e007      	b.n	8001c86 <rtc_task+0x3a6>

							}
							else
							{

								xQueueSend(qprint,&msg_inv,portMAX_DELAY);
 8001c76:	4b35      	ldr	r3, [pc, #212]	@ (8001d4c <rtc_task+0x46c>)
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c80:	4933      	ldr	r1, [pc, #204]	@ (8001d50 <rtc_task+0x470>)
 8001c82:	f003 fa79 	bl	8005178 <xQueueGenericSend>

							}

							curr_state = sMainMenu;
 8001c86:	4b33      	ldr	r3, [pc, #204]	@ (8001d54 <rtc_task+0x474>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
							rtc_state = 0;
 8001c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8001d48 <rtc_task+0x468>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]

						break;
 8001c92:	bf00      	nop

					}

				break;
 8001c94:	e047      	b.n	8001d26 <rtc_task+0x446>

				case sRtcReport:

					/*enable or disable RTC current time reporting over ITM printf */
					if(cmd->len == 1)
 8001c96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001c98:	7a9b      	ldrb	r3, [r3, #10]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d131      	bne.n	8001d02 <rtc_task+0x422>
					{

						if(cmd->payload[0] == 'y')
 8001c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b79      	cmp	r3, #121	@ 0x79
 8001ca4:	d115      	bne.n	8001cd2 <rtc_task+0x3f2>
						{

							if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001ca6:	4b2c      	ldr	r3, [pc, #176]	@ (8001d58 <rtc_task+0x478>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f006 f880 	bl	8007db0 <xTimerIsTimerActive>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d12d      	bne.n	8001d12 <rtc_task+0x432>
								xTimerStart(rtc_timer,portMAX_DELAY);
 8001cb6:	4b28      	ldr	r3, [pc, #160]	@ (8001d58 <rtc_task+0x478>)
 8001cb8:	681c      	ldr	r4, [r3, #0]
 8001cba:	f004 fbbb 	bl	8006434 <xTaskGetTickCount>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cc4:	9300      	str	r3, [sp, #0]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	2101      	movs	r1, #1
 8001cca:	4620      	mov	r0, r4
 8001ccc:	f005 fdae 	bl	800782c <xTimerGenericCommandFromTask>
 8001cd0:	e01f      	b.n	8001d12 <rtc_task+0x432>

						}
						else if(cmd->payload[0] == 'n')
 8001cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b6e      	cmp	r3, #110	@ 0x6e
 8001cd8:	d10a      	bne.n	8001cf0 <rtc_task+0x410>
						{

							xTimerStop(rtc_timer,portMAX_DELAY);
 8001cda:	4b1f      	ldr	r3, [pc, #124]	@ (8001d58 <rtc_task+0x478>)
 8001cdc:	6818      	ldr	r0, [r3, #0]
 8001cde:	f04f 33ff 	mov.w	r3, #4294967295
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2103      	movs	r1, #3
 8001cea:	f005 fd9f 	bl	800782c <xTimerGenericCommandFromTask>
 8001cee:	e010      	b.n	8001d12 <rtc_task+0x432>

						}
						else
						{

							xQueueSend(qprint,&msg_inv,portMAX_DELAY);
 8001cf0:	4b16      	ldr	r3, [pc, #88]	@ (8001d4c <rtc_task+0x46c>)
 8001cf2:	6818      	ldr	r0, [r3, #0]
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8001cfa:	4915      	ldr	r1, [pc, #84]	@ (8001d50 <rtc_task+0x470>)
 8001cfc:	f003 fa3c 	bl	8005178 <xQueueGenericSend>
 8001d00:	e007      	b.n	8001d12 <rtc_task+0x432>

					}
					else
					{

					    xQueueSend(qprint,&msg_inv,portMAX_DELAY);
 8001d02:	4b12      	ldr	r3, [pc, #72]	@ (8001d4c <rtc_task+0x46c>)
 8001d04:	6818      	ldr	r0, [r3, #0]
 8001d06:	2300      	movs	r3, #0
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	4910      	ldr	r1, [pc, #64]	@ (8001d50 <rtc_task+0x470>)
 8001d0e:	f003 fa33 	bl	8005178 <xQueueGenericSend>

					}

					curr_state = sMainMenu;
 8001d12:	4b10      	ldr	r3, [pc, #64]	@ (8001d54 <rtc_task+0x474>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]

				break;
 8001d18:	e006      	b.n	8001d28 <rtc_task+0x448>

				default:

					curr_state = sMainMenu;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <rtc_task+0x474>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	701a      	strb	r2, [r3, #0]
 8001d20:	e002      	b.n	8001d28 <rtc_task+0x448>
				break;
 8001d22:	bf00      	nop
 8001d24:	e000      	b.n	8001d28 <rtc_task+0x448>
				break;
 8001d26:	bf00      	nop
		while(curr_state != sMainMenu){
 8001d28:	4b0a      	ldr	r3, [pc, #40]	@ (8001d54 <rtc_task+0x474>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f47f ae0f 	bne.w	8001950 <rtc_task+0x70>
			}// switch end

		} //while end

		/*Notify menu task */
		xTaskNotify(handle_menu_task,0,eNoAction);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <rtc_task+0x47c>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	2300      	movs	r3, #0
 8001d38:	9300      	str	r3, [sp, #0]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f005 f95e 	bl	8007000 <xTaskGenericNotify>
		xTaskNotifyWait(0, 0, NULL, portMAX_DELAY);
 8001d44:	e5e6      	b.n	8001914 <rtc_task+0x34>
 8001d46:	bf00      	nop
 8001d48:	200001e0 	.word	0x200001e0
 8001d4c:	20000128 	.word	0x20000128
 8001d50:	20000014 	.word	0x20000014
 8001d54:	2000012d 	.word	0x2000012d
 8001d58:	20000140 	.word	0x20000140
 8001d5c:	20000110 	.word	0x20000110

08001d60 <process_command>:

}


void process_command(command_t *cmd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	6078      	str	r0, [r7, #4]

	extract_command(cmd);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f835 	bl	8001dd8 <extract_command>

	switch(curr_state)
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <process_command+0x68>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b05      	cmp	r3, #5
 8001d74:	dc24      	bgt.n	8001dc0 <process_command+0x60>
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	da18      	bge.n	8001dac <process_command+0x4c>
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d002      	beq.n	8001d84 <process_command+0x24>
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d00a      	beq.n	8001d98 <process_command+0x38>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
		break;

	}

}
 8001d82:	e01d      	b.n	8001dc0 <process_command+0x60>
			xTaskNotify(handle_menu_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <process_command+0x6c>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2303      	movs	r3, #3
 8001d90:	2100      	movs	r1, #0
 8001d92:	f005 f935 	bl	8007000 <xTaskGenericNotify>
		break;
 8001d96:	e013      	b.n	8001dc0 <process_command+0x60>
			xTaskNotify(handle_led_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001d98:	4b0d      	ldr	r3, [pc, #52]	@ (8001dd0 <process_command+0x70>)
 8001d9a:	6818      	ldr	r0, [r3, #0]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	2303      	movs	r3, #3
 8001da4:	2100      	movs	r1, #0
 8001da6:	f005 f92b 	bl	8007000 <xTaskGenericNotify>
		break;
 8001daa:	e009      	b.n	8001dc0 <process_command+0x60>
			xTaskNotify(handle_rtc_task, (uint32_t)cmd, eSetValueWithOverwrite);
 8001dac:	4b09      	ldr	r3, [pc, #36]	@ (8001dd4 <process_command+0x74>)
 8001dae:	6818      	ldr	r0, [r3, #0]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	2300      	movs	r3, #0
 8001db4:	9300      	str	r3, [sp, #0]
 8001db6:	2303      	movs	r3, #3
 8001db8:	2100      	movs	r1, #0
 8001dba:	f005 f921 	bl	8007000 <xTaskGenericNotify>
		break;
 8001dbe:	bf00      	nop
}
 8001dc0:	bf00      	nop
 8001dc2:	3708      	adds	r7, #8
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	2000012d 	.word	0x2000012d
 8001dcc:	20000110 	.word	0x20000110
 8001dd0:	2000011c 	.word	0x2000011c
 8001dd4:	20000120 	.word	0x20000120

08001dd8 <extract_command>:


int extract_command(command_t *cmd)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]

	uint8_t item;
	BaseType_t status;

	status = uxQueueMessagesWaiting(qdata);
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <extract_command+0x70>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f003 fd1e 	bl	8005826 <uxQueueMessagesWaiting>
 8001dea:	4603      	mov	r3, r0
 8001dec:	613b      	str	r3, [r7, #16]
	if(!status) return -1;
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d102      	bne.n	8001dfa <extract_command+0x22>
 8001df4:	f04f 33ff 	mov.w	r3, #4294967295
 8001df8:	e022      	b.n	8001e40 <extract_command+0x68>

	uint8_t i = 0;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	75fb      	strb	r3, [r7, #23]

	do
	{

		status = xQueueReceive(qdata, &item, 0);
 8001dfe:	4b12      	ldr	r3, [pc, #72]	@ (8001e48 <extract_command+0x70>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f107 010f 	add.w	r1, r7, #15
 8001e06:	2200      	movs	r2, #0
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fb7f 	bl	800550c <xQueueReceive>
 8001e0e:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE) cmd->payload[i++] = item;
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d106      	bne.n	8001e24 <extract_command+0x4c>
 8001e16:	7dfb      	ldrb	r3, [r7, #23]
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	75fa      	strb	r2, [r7, #23]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	7bf9      	ldrb	r1, [r7, #15]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	5499      	strb	r1, [r3, r2]

	}while(item != '\n');
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	2b0a      	cmp	r3, #10
 8001e28:	d1e9      	bne.n	8001dfe <extract_command+0x26>

	cmd->payload[i-1] = '\0';
 8001e2a:	7dfb      	ldrb	r3, [r7, #23]
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	2100      	movs	r1, #0
 8001e32:	54d1      	strb	r1, [r2, r3]
	cmd->len = ( i - 1 );
 8001e34:	7dfb      	ldrb	r3, [r7, #23]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	729a      	strb	r2, [r3, #10]

	return 0;
 8001e3e:	2300      	movs	r3, #0

}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3718      	adds	r7, #24
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	20000124 	.word	0x20000124

08001e4c <getnumber>:


uint8_t getnumber(uint8_t *p , int len)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]

	int value ;


	if(len > 1)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	dd0f      	ble.n	8001e7c <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 8001e64:	4613      	mov	r3, r2
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	4413      	add	r3, r2
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3301      	adds	r3, #1
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	3b30      	subs	r3, #48	@ 0x30
 8001e76:	4413      	add	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	e003      	b.n	8001e84 <getnumber+0x38>
	else
		value = p[0] - 48;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3b30      	subs	r3, #48	@ 0x30
 8001e82:	60fb      	str	r3, [r7, #12]

	return value;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	b2db      	uxtb	r3, r3

}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	3714      	adds	r7, #20
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ecc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e98:	f7ff fbce 	bl	8001638 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e9c:	480c      	ldr	r0, [pc, #48]	@ (8001ed0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e9e:	490d      	ldr	r1, [pc, #52]	@ (8001ed4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ed8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea4:	e002      	b.n	8001eac <LoopCopyDataInit>

08001ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eaa:	3304      	adds	r3, #4

08001eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb0:	d3f9      	bcc.n	8001ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8001edc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8001ee0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eb8:	e001      	b.n	8001ebe <LoopFillZerobss>

08001eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ebc:	3204      	adds	r2, #4

08001ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec0:	d3fb      	bcc.n	8001eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ec2:	f008 fd47 	bl	800a954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ec6:	f7fe fcf3 	bl	80008b0 <main>
  bx  lr    
 8001eca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ed4:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001ed8:	0800bdf0 	.word	0x0800bdf0
  ldr r2, =_sbss
 8001edc:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ee0:	2001cee0 	.word	0x2001cee0

08001ee4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ee4:	e7fe      	b.n	8001ee4 <ADC_IRQHandler>
	...

08001ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001eec:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_Init+0x40>)
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0a      	ldr	r2, [pc, #40]	@ (8001f28 <HAL_Init+0x40>)
 8001efe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_Init+0x40>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_Init+0x40>)
 8001f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f10:	2003      	movs	r0, #3
 8001f12:	f000 f8fc 	bl	800210e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f16:	2000      	movs	r0, #0
 8001f18:	f7ff fa58 	bl	80013cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f1c:	f7ff f9b2 	bl	8001284 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f20:	2300      	movs	r3, #0
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	40023c00 	.word	0x40023c00

08001f2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f30:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_IncTick+0x20>)
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	4a04      	ldr	r2, [pc, #16]	@ (8001f50 <HAL_IncTick+0x24>)
 8001f3e:	6013      	str	r3, [r2, #0]
}
 8001f40:	bf00      	nop
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	2000001c 	.word	0x2000001c
 8001f50:	200001e4 	.word	0x200001e4

08001f54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
  return uwTick;
 8001f58:	4b03      	ldr	r3, [pc, #12]	@ (8001f68 <HAL_GetTick+0x14>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200001e4 	.word	0x200001e4

08001f6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f74:	f7ff ffee 	bl	8001f54 <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f84:	d005      	beq.n	8001f92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f86:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <HAL_Delay+0x44>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	4413      	add	r3, r2
 8001f90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f92:	bf00      	nop
 8001f94:	f7ff ffde 	bl	8001f54 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d8f7      	bhi.n	8001f94 <HAL_Delay+0x28>
  {
  }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	2000001c 	.word	0x2000001c

08001fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b085      	sub	sp, #20
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fca:	68ba      	ldr	r2, [r7, #8]
 8001fcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fe0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fe6:	4a04      	ldr	r2, [pc, #16]	@ (8001ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	60d3      	str	r3, [r2, #12]
}
 8001fec:	bf00      	nop
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002000:	4b04      	ldr	r3, [pc, #16]	@ (8002014 <__NVIC_GetPriorityGrouping+0x18>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	f003 0307 	and.w	r3, r3, #7
}
 800200a:	4618      	mov	r0, r3
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000ed00 	.word	0xe000ed00

08002018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	4603      	mov	r3, r0
 8002020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	2b00      	cmp	r3, #0
 8002028:	db0b      	blt.n	8002042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	f003 021f 	and.w	r2, r3, #31
 8002030:	4907      	ldr	r1, [pc, #28]	@ (8002050 <__NVIC_EnableIRQ+0x38>)
 8002032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002036:	095b      	lsrs	r3, r3, #5
 8002038:	2001      	movs	r0, #1
 800203a:	fa00 f202 	lsl.w	r2, r0, r2
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002042:	bf00      	nop
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	e000e100 	.word	0xe000e100

08002054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002054:	b480      	push	{r7}
 8002056:	b083      	sub	sp, #12
 8002058:	af00      	add	r7, sp, #0
 800205a:	4603      	mov	r3, r0
 800205c:	6039      	str	r1, [r7, #0]
 800205e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002064:	2b00      	cmp	r3, #0
 8002066:	db0a      	blt.n	800207e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	b2da      	uxtb	r2, r3
 800206c:	490c      	ldr	r1, [pc, #48]	@ (80020a0 <__NVIC_SetPriority+0x4c>)
 800206e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002072:	0112      	lsls	r2, r2, #4
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	440b      	add	r3, r1
 8002078:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800207c:	e00a      	b.n	8002094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	b2da      	uxtb	r2, r3
 8002082:	4908      	ldr	r1, [pc, #32]	@ (80020a4 <__NVIC_SetPriority+0x50>)
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	3b04      	subs	r3, #4
 800208c:	0112      	lsls	r2, r2, #4
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	440b      	add	r3, r1
 8002092:	761a      	strb	r2, [r3, #24]
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr
 80020a0:	e000e100 	.word	0xe000e100
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b089      	sub	sp, #36	@ 0x24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f1c3 0307 	rsb	r3, r3, #7
 80020c2:	2b04      	cmp	r3, #4
 80020c4:	bf28      	it	cs
 80020c6:	2304      	movcs	r3, #4
 80020c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3304      	adds	r3, #4
 80020ce:	2b06      	cmp	r3, #6
 80020d0:	d902      	bls.n	80020d8 <NVIC_EncodePriority+0x30>
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3b03      	subs	r3, #3
 80020d6:	e000      	b.n	80020da <NVIC_EncodePriority+0x32>
 80020d8:	2300      	movs	r3, #0
 80020da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	f04f 32ff 	mov.w	r2, #4294967295
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43da      	mvns	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	401a      	ands	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f0:	f04f 31ff 	mov.w	r1, #4294967295
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43d9      	mvns	r1, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	4313      	orrs	r3, r2
         );
}
 8002102:	4618      	mov	r0, r3
 8002104:	3724      	adds	r7, #36	@ 0x24
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b082      	sub	sp, #8
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f7ff ff4c 	bl	8001fb4 <__NVIC_SetPriorityGrouping>
}
 800211c:	bf00      	nop
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002124:	b580      	push	{r7, lr}
 8002126:	b086      	sub	sp, #24
 8002128:	af00      	add	r7, sp, #0
 800212a:	4603      	mov	r3, r0
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
 8002130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002132:	2300      	movs	r3, #0
 8002134:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002136:	f7ff ff61 	bl	8001ffc <__NVIC_GetPriorityGrouping>
 800213a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	68b9      	ldr	r1, [r7, #8]
 8002140:	6978      	ldr	r0, [r7, #20]
 8002142:	f7ff ffb1 	bl	80020a8 <NVIC_EncodePriority>
 8002146:	4602      	mov	r2, r0
 8002148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800214c:	4611      	mov	r1, r2
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff ff80 	bl	8002054 <__NVIC_SetPriority>
}
 8002154:	bf00      	nop
 8002156:	3718      	adds	r7, #24
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}

0800215c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	4618      	mov	r0, r3
 800216c:	f7ff ff54 	bl	8002018 <__NVIC_EnableIRQ>
}
 8002170:	bf00      	nop
 8002172:	3708      	adds	r7, #8
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002186:	f7ff fee5 	bl	8001f54 <HAL_GetTick>
 800218a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d008      	beq.n	80021aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2280      	movs	r2, #128	@ 0x80
 800219c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e052      	b.n	8002250 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 0216 	bic.w	r2, r2, #22
 80021b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d103      	bne.n	80021da <HAL_DMA_Abort+0x62>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d007      	beq.n	80021ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f022 0208 	bic.w	r2, r2, #8
 80021e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0201 	bic.w	r2, r2, #1
 80021f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fa:	e013      	b.n	8002224 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fc:	f7ff feaa 	bl	8001f54 <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	2b05      	cmp	r3, #5
 8002208:	d90c      	bls.n	8002224 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2220      	movs	r2, #32
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2203      	movs	r2, #3
 8002214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e015      	b.n	8002250 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	2b00      	cmp	r3, #0
 8002230:	d1e4      	bne.n	80021fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	223f      	movs	r2, #63	@ 0x3f
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2201      	movs	r2, #1
 8002242:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d004      	beq.n	8002276 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2280      	movs	r2, #128	@ 0x80
 8002270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e00c      	b.n	8002290 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2205      	movs	r2, #5
 800227a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0201 	bic.w	r2, r2, #1
 800228c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	@ 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002430:	6453      	str	r3, [r2, #68]	@ 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	@ (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	@ (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	@ (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	@ (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	@ (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	@ (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	@ (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024be:	4b38      	ldr	r3, [pc, #224]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002512:	4b23      	ldr	r3, [pc, #140]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800253c:	4b18      	ldr	r3, [pc, #96]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	@ (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	@ 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	4603      	mov	r3, r0
 80025e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e4:	695a      	ldr	r2, [r3, #20]
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d006      	beq.n	80025fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ee:	4a05      	ldr	r2, [pc, #20]	@ (8002604 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f4:	88fb      	ldrh	r3, [r7, #6]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f806 	bl	8002608 <HAL_GPIO_EXTI_Callback>
  }
}
 80025fc:	bf00      	nop
 80025fe:	3708      	adds	r7, #8
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40013c00 	.word	0x40013c00

08002608 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002608:	b480      	push	{r7}
 800260a:	b083      	sub	sp, #12
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
	...

08002620 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e267      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d075      	beq.n	800272a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800263e:	4b88      	ldr	r3, [pc, #544]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 030c 	and.w	r3, r3, #12
 8002646:	2b04      	cmp	r3, #4
 8002648:	d00c      	beq.n	8002664 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800264a:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002652:	2b08      	cmp	r3, #8
 8002654:	d112      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002656:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002662:	d10b      	bne.n	800267c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4b7e      	ldr	r3, [pc, #504]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266c:	2b00      	cmp	r3, #0
 800266e:	d05b      	beq.n	8002728 <HAL_RCC_OscConfig+0x108>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d157      	bne.n	8002728 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002678:	2301      	movs	r3, #1
 800267a:	e242      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002684:	d106      	bne.n	8002694 <HAL_RCC_OscConfig+0x74>
 8002686:	4b76      	ldr	r3, [pc, #472]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a75      	ldr	r2, [pc, #468]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800268c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0x98>
 800269e:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xb0>
 80026b8:	4b69      	ldr	r3, [pc, #420]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a68      	ldr	r2, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a65      	ldr	r2, [pc, #404]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fc3c 	bl	8001f54 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fc38 	bl	8001f54 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	@ 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e207      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xc0>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fc28 	bl	8001f54 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fc24 	bl	8001f54 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	@ 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1f3      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b51      	ldr	r3, [pc, #324]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0xe8>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002736:	4b4a      	ldr	r3, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002742:	4b47      	ldr	r3, [pc, #284]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800274e:	4b44      	ldr	r3, [pc, #272]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b41      	ldr	r3, [pc, #260]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1c7      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b3b      	ldr	r3, [pc, #236]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4937      	ldr	r1, [pc, #220]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b34      	ldr	r3, [pc, #208]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7ff fbdd 	bl	8001f54 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff fbd9 	bl	8001f54 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1a8      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b28      	ldr	r3, [pc, #160]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4925      	ldr	r1, [pc, #148]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b24      	ldr	r3, [pc, #144]	@ (8002864 <HAL_RCC_OscConfig+0x244>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7ff fbbc 	bl	8001f54 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff fbb8 	bl	8001f54 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e187      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d016      	beq.n	8002840 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b15      	ldr	r3, [pc, #84]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002818:	f7ff fb9c 	bl	8001f54 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff fb98 	bl	8001f54 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e167      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b0b      	ldr	r3, [pc, #44]	@ (8002860 <HAL_RCC_OscConfig+0x240>)
 8002834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x200>
 800283e:	e01b      	b.n	8002878 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002840:	4b09      	ldr	r3, [pc, #36]	@ (8002868 <HAL_RCC_OscConfig+0x248>)
 8002842:	2200      	movs	r2, #0
 8002844:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002846:	f7ff fb85 	bl	8001f54 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800284c:	e00e      	b.n	800286c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800284e:	f7ff fb81 	bl	8001f54 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d907      	bls.n	800286c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e150      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002860:	40023800 	.word	0x40023800
 8002864:	42470000 	.word	0x42470000
 8002868:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	4b88      	ldr	r3, [pc, #544]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1ea      	bne.n	800284e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8097 	beq.w	80029b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002886:	2300      	movs	r3, #0
 8002888:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800288a:	4b81      	ldr	r3, [pc, #516]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800288e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10f      	bne.n	80028b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002896:	2300      	movs	r3, #0
 8002898:	60bb      	str	r3, [r7, #8]
 800289a:	4b7d      	ldr	r3, [pc, #500]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800289c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800289e:	4a7c      	ldr	r2, [pc, #496]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028a6:	4b7a      	ldr	r3, [pc, #488]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b6:	4b77      	ldr	r3, [pc, #476]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d118      	bne.n	80028f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c2:	4b74      	ldr	r3, [pc, #464]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a73      	ldr	r2, [pc, #460]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ce:	f7ff fb41 	bl	8001f54 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d4:	e008      	b.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028d6:	f7ff fb3d 	bl	8001f54 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d901      	bls.n	80028e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e10c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028e8:	4b6a      	ldr	r3, [pc, #424]	@ (8002a94 <HAL_RCC_OscConfig+0x474>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0f0      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d106      	bne.n	800290a <HAL_RCC_OscConfig+0x2ea>
 80028fc:	4b64      	ldr	r3, [pc, #400]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002900:	4a63      	ldr	r2, [pc, #396]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002902:	f043 0301 	orr.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	@ 0x70
 8002908:	e01c      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	2b05      	cmp	r3, #5
 8002910:	d10c      	bne.n	800292c <HAL_RCC_OscConfig+0x30c>
 8002912:	4b5f      	ldr	r3, [pc, #380]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002914:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002916:	4a5e      	ldr	r2, [pc, #376]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6713      	str	r3, [r2, #112]	@ 0x70
 800291e:	4b5c      	ldr	r3, [pc, #368]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002922:	4a5b      	ldr	r2, [pc, #364]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002924:	f043 0301 	orr.w	r3, r3, #1
 8002928:	6713      	str	r3, [r2, #112]	@ 0x70
 800292a:	e00b      	b.n	8002944 <HAL_RCC_OscConfig+0x324>
 800292c:	4b58      	ldr	r3, [pc, #352]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800292e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002930:	4a57      	ldr	r2, [pc, #348]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002932:	f023 0301 	bic.w	r3, r3, #1
 8002936:	6713      	str	r3, [r2, #112]	@ 0x70
 8002938:	4b55      	ldr	r3, [pc, #340]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293c:	4a54      	ldr	r2, [pc, #336]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800293e:	f023 0304 	bic.w	r3, r3, #4
 8002942:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d015      	beq.n	8002978 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7ff fb02 	bl	8001f54 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002952:	e00a      	b.n	800296a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002954:	f7ff fafe 	bl	8001f54 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002962:	4293      	cmp	r3, r2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e0cb      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296a:	4b49      	ldr	r3, [pc, #292]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d0ee      	beq.n	8002954 <HAL_RCC_OscConfig+0x334>
 8002976:	e014      	b.n	80029a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002978:	f7ff faec 	bl	8001f54 <HAL_GetTick>
 800297c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800297e:	e00a      	b.n	8002996 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002980:	f7ff fae8 	bl	8001f54 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298e:	4293      	cmp	r3, r2
 8002990:	d901      	bls.n	8002996 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002992:	2303      	movs	r3, #3
 8002994:	e0b5      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002996:	4b3e      	ldr	r3, [pc, #248]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ee      	bne.n	8002980 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029a2:	7dfb      	ldrb	r3, [r7, #23]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b39      	ldr	r3, [pc, #228]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	4a38      	ldr	r2, [pc, #224]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80a1 	beq.w	8002b00 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029be:	4b34      	ldr	r3, [pc, #208]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 030c 	and.w	r3, r3, #12
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d05c      	beq.n	8002a84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d141      	bne.n	8002a56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d2:	4b31      	ldr	r3, [pc, #196]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d8:	f7ff fabc 	bl	8001f54 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e0:	f7ff fab8 	bl	8001f54 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e087      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029f2:	4b27      	ldr	r3, [pc, #156]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69da      	ldr	r2, [r3, #28]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a0c:	019b      	lsls	r3, r3, #6
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a14:	085b      	lsrs	r3, r3, #1
 8002a16:	3b01      	subs	r3, #1
 8002a18:	041b      	lsls	r3, r3, #16
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a20:	061b      	lsls	r3, r3, #24
 8002a22:	491b      	ldr	r1, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a28:	4b1b      	ldr	r3, [pc, #108]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2e:	f7ff fa91 	bl	8001f54 <HAL_GetTick>
 8002a32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a36:	f7ff fa8d 	bl	8001f54 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e05c      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a48:	4b11      	ldr	r3, [pc, #68]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d0f0      	beq.n	8002a36 <HAL_RCC_OscConfig+0x416>
 8002a54:	e054      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a56:	4b10      	ldr	r3, [pc, #64]	@ (8002a98 <HAL_RCC_OscConfig+0x478>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5c:	f7ff fa7a 	bl	8001f54 <HAL_GetTick>
 8002a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a62:	e008      	b.n	8002a76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a64:	f7ff fa76 	bl	8001f54 <HAL_GetTick>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	2b02      	cmp	r3, #2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e045      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a76:	4b06      	ldr	r3, [pc, #24]	@ (8002a90 <HAL_RCC_OscConfig+0x470>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d1f0      	bne.n	8002a64 <HAL_RCC_OscConfig+0x444>
 8002a82:	e03d      	b.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	699b      	ldr	r3, [r3, #24]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d107      	bne.n	8002a9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	e038      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40007000 	.word	0x40007000
 8002a98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	@ (8002b0c <HAL_RCC_OscConfig+0x4ec>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	699b      	ldr	r3, [r3, #24]
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d028      	beq.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d121      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d11a      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ad2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d111      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d107      	bne.n	8002afc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d001      	beq.n	8002b00 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800

08002b10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0cc      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b24:	4b68      	ldr	r3, [pc, #416]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	683a      	ldr	r2, [r7, #0]
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d90c      	bls.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b32:	4b65      	ldr	r3, [pc, #404]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3a:	4b63      	ldr	r3, [pc, #396]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e0b8      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0302 	and.w	r3, r3, #2
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d020      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d005      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b64:	4b59      	ldr	r3, [pc, #356]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	4a58      	ldr	r2, [pc, #352]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002b6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d005      	beq.n	8002b88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b7c:	4b53      	ldr	r3, [pc, #332]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	4a52      	ldr	r2, [pc, #328]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002b86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	494d      	ldr	r1, [pc, #308]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d044      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d107      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bae:	4b47      	ldr	r3, [pc, #284]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d119      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e07f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d003      	beq.n	8002bce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	2b03      	cmp	r3, #3
 8002bcc:	d107      	bne.n	8002bde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d109      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e067      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bee:	4b37      	ldr	r3, [pc, #220]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f023 0203 	bic.w	r2, r3, #3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4934      	ldr	r1, [pc, #208]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c00:	f7ff f9a8 	bl	8001f54 <HAL_GetTick>
 8002c04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c06:	e00a      	b.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c08:	f7ff f9a4 	bl	8001f54 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e04f      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c1e:	4b2b      	ldr	r3, [pc, #172]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 020c 	and.w	r2, r3, #12
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	d1eb      	bne.n	8002c08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c30:	4b25      	ldr	r3, [pc, #148]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0307 	and.w	r3, r3, #7
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d20c      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	b2d2      	uxtb	r2, r2
 8002c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_RCC_ClockConfig+0x1b8>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d001      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e032      	b.n	8002cbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c64:	4b19      	ldr	r3, [pc, #100]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d009      	beq.n	8002c96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c82:	4b12      	ldr	r3, [pc, #72]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	490e      	ldr	r1, [pc, #56]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c96:	f000 f821 	bl	8002cdc <HAL_RCC_GetSysClockFreq>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	490a      	ldr	r1, [pc, #40]	@ (8002cd0 <HAL_RCC_ClockConfig+0x1c0>)
 8002ca8:	5ccb      	ldrb	r3, [r1, r3]
 8002caa:	fa22 f303 	lsr.w	r3, r2, r3
 8002cae:	4a09      	ldr	r2, [pc, #36]	@ (8002cd4 <HAL_RCC_ClockConfig+0x1c4>)
 8002cb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cb2:	4b09      	ldr	r3, [pc, #36]	@ (8002cd8 <HAL_RCC_ClockConfig+0x1c8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7fe fb88 	bl	80013cc <HAL_InitTick>

  return HAL_OK;
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	3710      	adds	r7, #16
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	40023c00 	.word	0x40023c00
 8002ccc:	40023800 	.word	0x40023800
 8002cd0:	0800bd6c 	.word	0x0800bd6c
 8002cd4:	20000010 	.word	0x20000010
 8002cd8:	20000018 	.word	0x20000018

08002cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ce0:	b094      	sub	sp, #80	@ 0x50
 8002ce2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cf4:	4b79      	ldr	r3, [pc, #484]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 030c 	and.w	r3, r3, #12
 8002cfc:	2b08      	cmp	r3, #8
 8002cfe:	d00d      	beq.n	8002d1c <HAL_RCC_GetSysClockFreq+0x40>
 8002d00:	2b08      	cmp	r3, #8
 8002d02:	f200 80e1 	bhi.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x34>
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d003      	beq.n	8002d16 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d0e:	e0db      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d10:	4b73      	ldr	r3, [pc, #460]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d12:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d14:	e0db      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d16:	4b73      	ldr	r3, [pc, #460]	@ (8002ee4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d18:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d1a:	e0d8      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d1c:	4b6f      	ldr	r3, [pc, #444]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d24:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d26:	4b6d      	ldr	r3, [pc, #436]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d063      	beq.n	8002dfa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d32:	4b6a      	ldr	r3, [pc, #424]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	099b      	lsrs	r3, r3, #6
 8002d38:	2200      	movs	r2, #0
 8002d3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d3c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d46:	2300      	movs	r3, #0
 8002d48:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d4a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002d4e:	4622      	mov	r2, r4
 8002d50:	462b      	mov	r3, r5
 8002d52:	f04f 0000 	mov.w	r0, #0
 8002d56:	f04f 0100 	mov.w	r1, #0
 8002d5a:	0159      	lsls	r1, r3, #5
 8002d5c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d60:	0150      	lsls	r0, r2, #5
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4621      	mov	r1, r4
 8002d68:	1a51      	subs	r1, r2, r1
 8002d6a:	6139      	str	r1, [r7, #16]
 8002d6c:	4629      	mov	r1, r5
 8002d6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	f04f 0200 	mov.w	r2, #0
 8002d78:	f04f 0300 	mov.w	r3, #0
 8002d7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002d80:	4659      	mov	r1, fp
 8002d82:	018b      	lsls	r3, r1, #6
 8002d84:	4651      	mov	r1, sl
 8002d86:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d8a:	4651      	mov	r1, sl
 8002d8c:	018a      	lsls	r2, r1, #6
 8002d8e:	4651      	mov	r1, sl
 8002d90:	ebb2 0801 	subs.w	r8, r2, r1
 8002d94:	4659      	mov	r1, fp
 8002d96:	eb63 0901 	sbc.w	r9, r3, r1
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	f04f 0300 	mov.w	r3, #0
 8002da2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002da6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002daa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002dae:	4690      	mov	r8, r2
 8002db0:	4699      	mov	r9, r3
 8002db2:	4623      	mov	r3, r4
 8002db4:	eb18 0303 	adds.w	r3, r8, r3
 8002db8:	60bb      	str	r3, [r7, #8]
 8002dba:	462b      	mov	r3, r5
 8002dbc:	eb49 0303 	adc.w	r3, r9, r3
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	024b      	lsls	r3, r1, #9
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dd8:	4621      	mov	r1, r4
 8002dda:	024a      	lsls	r2, r1, #9
 8002ddc:	4610      	mov	r0, r2
 8002dde:	4619      	mov	r1, r3
 8002de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002de2:	2200      	movs	r2, #0
 8002de4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002de6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002de8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002dec:	f7fd faa8 	bl	8000340 <__aeabi_uldivmod>
 8002df0:	4602      	mov	r2, r0
 8002df2:	460b      	mov	r3, r1
 8002df4:	4613      	mov	r3, r2
 8002df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002df8:	e058      	b.n	8002eac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dfa:	4b38      	ldr	r3, [pc, #224]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	099b      	lsrs	r3, r3, #6
 8002e00:	2200      	movs	r2, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	4611      	mov	r1, r2
 8002e06:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e0a:	623b      	str	r3, [r7, #32]
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e10:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e14:	4642      	mov	r2, r8
 8002e16:	464b      	mov	r3, r9
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	f04f 0100 	mov.w	r1, #0
 8002e20:	0159      	lsls	r1, r3, #5
 8002e22:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e26:	0150      	lsls	r0, r2, #5
 8002e28:	4602      	mov	r2, r0
 8002e2a:	460b      	mov	r3, r1
 8002e2c:	4641      	mov	r1, r8
 8002e2e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e32:	4649      	mov	r1, r9
 8002e34:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	f04f 0300 	mov.w	r3, #0
 8002e40:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002e44:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002e48:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002e4c:	ebb2 040a 	subs.w	r4, r2, sl
 8002e50:	eb63 050b 	sbc.w	r5, r3, fp
 8002e54:	f04f 0200 	mov.w	r2, #0
 8002e58:	f04f 0300 	mov.w	r3, #0
 8002e5c:	00eb      	lsls	r3, r5, #3
 8002e5e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e62:	00e2      	lsls	r2, r4, #3
 8002e64:	4614      	mov	r4, r2
 8002e66:	461d      	mov	r5, r3
 8002e68:	4643      	mov	r3, r8
 8002e6a:	18e3      	adds	r3, r4, r3
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	464b      	mov	r3, r9
 8002e70:	eb45 0303 	adc.w	r3, r5, r3
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	f04f 0200 	mov.w	r2, #0
 8002e7a:	f04f 0300 	mov.w	r3, #0
 8002e7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e82:	4629      	mov	r1, r5
 8002e84:	028b      	lsls	r3, r1, #10
 8002e86:	4621      	mov	r1, r4
 8002e88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e8c:	4621      	mov	r1, r4
 8002e8e:	028a      	lsls	r2, r1, #10
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e96:	2200      	movs	r2, #0
 8002e98:	61bb      	str	r3, [r7, #24]
 8002e9a:	61fa      	str	r2, [r7, #28]
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	f7fd fa4e 	bl	8000340 <__aeabi_uldivmod>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002eac:	4b0b      	ldr	r3, [pc, #44]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	005b      	lsls	r3, r3, #1
 8002eba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ebc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ebe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ec6:	e002      	b.n	8002ece <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3750      	adds	r7, #80	@ 0x50
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	00f42400 	.word	0x00f42400
 8002ee4:	007a1200 	.word	0x007a1200

08002ee8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eec:	4b03      	ldr	r3, [pc, #12]	@ (8002efc <HAL_RCC_GetHCLKFreq+0x14>)
 8002eee:	681b      	ldr	r3, [r3, #0]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	20000010 	.word	0x20000010

08002f00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f04:	f7ff fff0 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	0a9b      	lsrs	r3, r3, #10
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	4903      	ldr	r1, [pc, #12]	@ (8002f24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f16:	5ccb      	ldrb	r3, [r1, r3]
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40023800 	.word	0x40023800
 8002f24:	0800bd7c 	.word	0x0800bd7c

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f2c:	f7ff ffdc 	bl	8002ee8 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b05      	ldr	r3, [pc, #20]	@ (8002f48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0b5b      	lsrs	r3, r3, #13
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4903      	ldr	r1, [pc, #12]	@ (8002f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	0800bd7c 	.word	0x0800bd7c

08002f50 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	220f      	movs	r2, #15
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f60:	4b12      	ldr	r3, [pc, #72]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0203 	and.w	r2, r3, #3
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f78:	4b0c      	ldr	r3, [pc, #48]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f84:	4b09      	ldr	r3, [pc, #36]	@ (8002fac <HAL_RCC_GetClockConfig+0x5c>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	08db      	lsrs	r3, r3, #3
 8002f8a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f92:	4b07      	ldr	r3, [pc, #28]	@ (8002fb0 <HAL_RCC_GetClockConfig+0x60>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0207 	and.w	r2, r3, #7
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	601a      	str	r2, [r3, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	40023c00 	.word	0x40023c00

08002fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b086      	sub	sp, #24
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d038      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fdc:	4b68      	ldr	r3, [pc, #416]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fe2:	f7fe ffb7 	bl	8001f54 <HAL_GetTick>
 8002fe6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fe8:	e008      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002fea:	f7fe ffb3 	bl	8001f54 <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	2b02      	cmp	r3, #2
 8002ff6:	d901      	bls.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e0bd      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ffc:	4b61      	ldr	r3, [pc, #388]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1f0      	bne.n	8002fea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	019b      	lsls	r3, r3, #6
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	071b      	lsls	r3, r3, #28
 800301a:	495a      	ldr	r1, [pc, #360]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003022:	4b57      	ldr	r3, [pc, #348]	@ (8003180 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003028:	f7fe ff94 	bl	8001f54 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003030:	f7fe ff90 	bl	8001f54 <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e09a      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003042:	4b50      	ldr	r3, [pc, #320]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 8083 	beq.w	8003162 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800305c:	2300      	movs	r3, #0
 800305e:	60fb      	str	r3, [r7, #12]
 8003060:	4b48      	ldr	r3, [pc, #288]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003064:	4a47      	ldr	r2, [pc, #284]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003066:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800306a:	6413      	str	r3, [r2, #64]	@ 0x40
 800306c:	4b45      	ldr	r3, [pc, #276]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003074:	60fb      	str	r3, [r7, #12]
 8003076:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003078:	4b43      	ldr	r3, [pc, #268]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a42      	ldr	r2, [pc, #264]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003082:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003084:	f7fe ff66 	bl	8001f54 <HAL_GetTick>
 8003088:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800308c:	f7fe ff62 	bl	8001f54 <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e06c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800309e:	4b3a      	ldr	r3, [pc, #232]	@ (8003188 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0f0      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80030aa:	4b36      	ldr	r3, [pc, #216]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030b2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d02f      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d028      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030c8:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80030d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030d2:	4b2e      	ldr	r3, [pc, #184]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030d4:	2201      	movs	r2, #1
 80030d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030da:	2200      	movs	r2, #0
 80030dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80030de:	4a29      	ldr	r2, [pc, #164]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80030e4:	4b27      	ldr	r3, [pc, #156]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d114      	bne.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80030f0:	f7fe ff30 	bl	8001f54 <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030f6:	e00a      	b.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030f8:	f7fe ff2c 	bl	8001f54 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003106:	4293      	cmp	r3, r2
 8003108:	d901      	bls.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e034      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	4b1d      	ldr	r3, [pc, #116]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0ee      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003122:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003126:	d10d      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003128:	4b16      	ldr	r3, [pc, #88]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003138:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800313c:	4911      	ldr	r1, [pc, #68]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
 8003142:	e005      	b.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003144:	4b0f      	ldr	r3, [pc, #60]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	4a0e      	ldr	r2, [pc, #56]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800314a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800314e:	6093      	str	r3, [r2, #8]
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003152:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	4909      	ldr	r1, [pc, #36]	@ (8003184 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800315e:	4313      	orrs	r3, r2
 8003160:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	7d1a      	ldrb	r2, [r3, #20]
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003174:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	3718      	adds	r7, #24
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	42470068 	.word	0x42470068
 8003184:	40023800 	.word	0x40023800
 8003188:	40007000 	.word	0x40007000
 800318c:	42470e40 	.word	0x42470e40
 8003190:	424711e0 	.word	0x424711e0

08003194 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d101      	bne.n	80031aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e073      	b.n	8003292 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	7f5b      	ldrb	r3, [r3, #29]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d105      	bne.n	80031c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7fe f88a 	bl	80012d4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2202      	movs	r2, #2
 80031c4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	f003 0310 	and.w	r3, r3, #16
 80031d0:	2b10      	cmp	r3, #16
 80031d2:	d055      	beq.n	8003280 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	22ca      	movs	r2, #202	@ 0xca
 80031da:	625a      	str	r2, [r3, #36]	@ 0x24
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2253      	movs	r2, #83	@ 0x53
 80031e2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fa49 	bl	800367c <RTC_EnterInitMode>
 80031ea:	4603      	mov	r3, r0
 80031ec:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80031ee:	7bfb      	ldrb	r3, [r7, #15]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d12c      	bne.n	800324e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6812      	ldr	r2, [r2, #0]
 80031fe:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003202:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003206:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6899      	ldr	r1, [r3, #8]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6919      	ldr	r1, [r3, #16]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	041a      	lsls	r2, r3, #16
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fa50 	bl	80036ea <RTC_ExitInitMode>
 800324a:	4603      	mov	r3, r0
 800324c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800324e:	7bfb      	ldrb	r3, [r7, #15]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d110      	bne.n	8003276 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003262:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	699a      	ldr	r2, [r3, #24]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	22ff      	movs	r2, #255	@ 0xff
 800327c:	625a      	str	r2, [r3, #36]	@ 0x24
 800327e:	e001      	b.n	8003284 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003284:	7bfb      	ldrb	r3, [r7, #15]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003290:	7bfb      	ldrb	r3, [r7, #15]
}
 8003292:	4618      	mov	r0, r3
 8003294:	3710      	adds	r7, #16
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800329a:	b590      	push	{r4, r7, lr}
 800329c:	b087      	sub	sp, #28
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	7f1b      	ldrb	r3, [r3, #28]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_RTC_SetTime+0x1c>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e087      	b.n	80033c6 <HAL_RTC_SetTime+0x12c>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2202      	movs	r2, #2
 80032c0:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d126      	bne.n	8003316 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d102      	bne.n	80032dc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2200      	movs	r2, #0
 80032da:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f000 fa27 	bl	8003734 <RTC_ByteToBcd2>
 80032e6:	4603      	mov	r3, r0
 80032e8:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fa20 	bl	8003734 <RTC_ByteToBcd2>
 80032f4:	4603      	mov	r3, r0
 80032f6:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80032f8:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	789b      	ldrb	r3, [r3, #2]
 80032fe:	4618      	mov	r0, r3
 8003300:	f000 fa18 	bl	8003734 <RTC_ByteToBcd2>
 8003304:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003306:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	78db      	ldrb	r3, [r3, #3]
 800330e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
 8003314:	e018      	b.n	8003348 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003320:	2b00      	cmp	r3, #0
 8003322:	d102      	bne.n	800332a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003324:	68bb      	ldr	r3, [r7, #8]
 8003326:	2200      	movs	r2, #0
 8003328:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	781b      	ldrb	r3, [r3, #0]
 800332e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	785b      	ldrb	r3, [r3, #1]
 8003334:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003336:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800333c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	78db      	ldrb	r3, [r3, #3]
 8003342:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003344:	4313      	orrs	r3, r2
 8003346:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	22ca      	movs	r2, #202	@ 0xca
 800334e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2253      	movs	r2, #83	@ 0x53
 8003356:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f98f 	bl	800367c <RTC_EnterInitMode>
 800335e:	4603      	mov	r3, r0
 8003360:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003362:	7cfb      	ldrb	r3, [r7, #19]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d120      	bne.n	80033aa <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003372:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003376:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003386:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6899      	ldr	r1, [r3, #8]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	431a      	orrs	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f9a2 	bl	80036ea <RTC_ExitInitMode>
 80033a6:	4603      	mov	r3, r0
 80033a8:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80033aa:	7cfb      	ldrb	r3, [r7, #19]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d102      	bne.n	80033b6 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2201      	movs	r2, #1
 80033b4:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	22ff      	movs	r2, #255	@ 0xff
 80033bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]

  return status;
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	371c      	adds	r7, #28
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd90      	pop	{r4, r7, pc}

080033ce <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b086      	sub	sp, #24
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	60f8      	str	r0, [r7, #12]
 80033d6:	60b9      	str	r1, [r7, #8]
 80033d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003400:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003404:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003410:	b2da      	uxtb	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	0a1b      	lsrs	r3, r3, #8
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003420:	b2da      	uxtb	r2, r3
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	b2db      	uxtb	r3, r3
 800342a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800342e:	b2da      	uxtb	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	0d9b      	lsrs	r3, r3, #22
 8003438:	b2db      	uxtb	r3, r3
 800343a:	f003 0301 	and.w	r3, r3, #1
 800343e:	b2da      	uxtb	r2, r3
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d11a      	bne.n	8003480 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	4618      	mov	r0, r3
 8003450:	f000 f98e 	bl	8003770 <RTC_Bcd2ToByte>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	68bb      	ldr	r3, [r7, #8]
 800345a:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	785b      	ldrb	r3, [r3, #1]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 f985 	bl	8003770 <RTC_Bcd2ToByte>
 8003466:	4603      	mov	r3, r0
 8003468:	461a      	mov	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	789b      	ldrb	r3, [r3, #2]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 f97c 	bl	8003770 <RTC_Bcd2ToByte>
 8003478:	4603      	mov	r3, r0
 800347a:	461a      	mov	r2, r3
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3718      	adds	r7, #24
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800348a:	b590      	push	{r4, r7, lr}
 800348c:	b087      	sub	sp, #28
 800348e:	af00      	add	r7, sp, #0
 8003490:	60f8      	str	r0, [r7, #12]
 8003492:	60b9      	str	r1, [r7, #8]
 8003494:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	7f1b      	ldrb	r3, [r3, #28]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d101      	bne.n	80034a6 <HAL_RTC_SetDate+0x1c>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e071      	b.n	800358a <HAL_RTC_SetDate+0x100>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2201      	movs	r2, #1
 80034aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2202      	movs	r2, #2
 80034b0:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d10e      	bne.n	80034d6 <HAL_RTC_SetDate+0x4c>
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	f003 0310 	and.w	r3, r3, #16
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	785b      	ldrb	r3, [r3, #1]
 80034c8:	f023 0310 	bic.w	r3, r3, #16
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	330a      	adds	r3, #10
 80034d0:	b2da      	uxtb	r2, r3
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d11c      	bne.n	8003516 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	78db      	ldrb	r3, [r3, #3]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f000 f927 	bl	8003734 <RTC_ByteToBcd2>
 80034e6:	4603      	mov	r3, r0
 80034e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	785b      	ldrb	r3, [r3, #1]
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 f920 	bl	8003734 <RTC_ByteToBcd2>
 80034f4:	4603      	mov	r3, r0
 80034f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80034f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	789b      	ldrb	r3, [r3, #2]
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 f918 	bl	8003734 <RTC_ByteToBcd2>
 8003504:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003506:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e00e      	b.n	8003534 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	78db      	ldrb	r3, [r3, #3]
 800351a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	785b      	ldrb	r3, [r3, #1]
 8003520:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003522:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8003524:	68ba      	ldr	r2, [r7, #8]
 8003526:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003528:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	22ca      	movs	r2, #202	@ 0xca
 800353a:	625a      	str	r2, [r3, #36]	@ 0x24
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2253      	movs	r2, #83	@ 0x53
 8003542:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 f899 	bl	800367c <RTC_EnterInitMode>
 800354a:	4603      	mov	r3, r0
 800354c:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800354e:	7cfb      	ldrb	r3, [r7, #19]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10c      	bne.n	800356e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800355e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003562:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003564:	68f8      	ldr	r0, [r7, #12]
 8003566:	f000 f8c0 	bl	80036ea <RTC_ExitInitMode>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	22ff      	movs	r2, #255	@ 0xff
 8003580:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	771a      	strb	r2, [r3, #28]

  return status;
 8003588:	7cfb      	ldrb	r3, [r7, #19]
}
 800358a:	4618      	mov	r0, r3
 800358c:	371c      	adds	r7, #28
 800358e:	46bd      	mov	sp, r7
 8003590:	bd90      	pop	{r4, r7, pc}

08003592 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	60f8      	str	r0, [r7, #12]
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800359e:	2300      	movs	r3, #0
 80035a0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035ac:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80035b0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	0c1b      	lsrs	r3, r3, #16
 80035b6:	b2da      	uxtb	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	0a1b      	lsrs	r3, r3, #8
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	b2da      	uxtb	r2, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	0b5b      	lsrs	r3, r3, #13
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d11a      	bne.n	8003626 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	78db      	ldrb	r3, [r3, #3]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 f8bb 	bl	8003770 <RTC_Bcd2ToByte>
 80035fa:	4603      	mov	r3, r0
 80035fc:	461a      	mov	r2, r3
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	785b      	ldrb	r3, [r3, #1]
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f8b2 	bl	8003770 <RTC_Bcd2ToByte>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003614:	68bb      	ldr	r3, [r7, #8]
 8003616:	789b      	ldrb	r3, [r3, #2]
 8003618:	4618      	mov	r0, r3
 800361a:	f000 f8a9 	bl	8003770 <RTC_Bcd2ToByte>
 800361e:	4603      	mov	r3, r0
 8003620:	461a      	mov	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <HAL_RTC_WaitForSynchro+0x48>)
 8003642:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003644:	f7fe fc86 	bl	8001f54 <HAL_GetTick>
 8003648:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800364a:	e009      	b.n	8003660 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800364c:	f7fe fc82 	bl	8001f54 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800365a:	d901      	bls.n	8003660 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e007      	b.n	8003670 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	f003 0320 	and.w	r3, r3, #32
 800366a:	2b00      	cmp	r3, #0
 800366c:	d0ee      	beq.n	800364c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800366e:	2300      	movs	r3, #0
}
 8003670:	4618      	mov	r0, r3
 8003672:	3710      	adds	r7, #16
 8003674:	46bd      	mov	sp, r7
 8003676:	bd80      	pop	{r7, pc}
 8003678:	00013f5f 	.word	0x00013f5f

0800367c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003696:	2b00      	cmp	r3, #0
 8003698:	d122      	bne.n	80036e0 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036a8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036aa:	f7fe fc53 	bl	8001f54 <HAL_GetTick>
 80036ae:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036b0:	e00c      	b.n	80036cc <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036b2:	f7fe fc4f 	bl	8001f54 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80036c0:	d904      	bls.n	80036cc <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2204      	movs	r2, #4
 80036c6:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d102      	bne.n	80036e0 <RTC_EnterInitMode+0x64>
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d1e8      	bne.n	80036b2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80036e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}

080036ea <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80036ea:	b580      	push	{r7, lr}
 80036ec:	b084      	sub	sp, #16
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68da      	ldr	r2, [r3, #12]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003704:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 0320 	and.w	r3, r3, #32
 8003710:	2b00      	cmp	r3, #0
 8003712:	d10a      	bne.n	800372a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003714:	6878      	ldr	r0, [r7, #4]
 8003716:	f7ff ff8b 	bl	8003630 <HAL_RTC_WaitForSynchro>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800372a:	7bfb      	ldrb	r3, [r7, #15]
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8003742:	e005      	b.n	8003750 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	3b0a      	subs	r3, #10
 800374e:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8003750:	79fb      	ldrb	r3, [r7, #7]
 8003752:	2b09      	cmp	r3, #9
 8003754:	d8f6      	bhi.n	8003744 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	b2db      	uxtb	r3, r3
 800375a:	011b      	lsls	r3, r3, #4
 800375c:	b2da      	uxtb	r2, r3
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	4313      	orrs	r3, r2
 8003762:	b2db      	uxtb	r3, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	3714      	adds	r7, #20
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003770:	b480      	push	{r7}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800377e:	79fb      	ldrb	r3, [r7, #7]
 8003780:	091b      	lsrs	r3, r3, #4
 8003782:	b2db      	uxtb	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	b2da      	uxtb	r2, r3
 8003794:	79fb      	ldrb	r3, [r7, #7]
 8003796:	f003 030f 	and.w	r3, r3, #15
 800379a:	b2db      	uxtb	r3, r3
 800379c:	4413      	add	r3, r2
 800379e:	b2db      	uxtb	r3, r3
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3714      	adds	r7, #20
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e041      	b.n	8003842 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 f839 	bl	800384a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	4619      	mov	r1, r3
 80037ea:	4610      	mov	r0, r2
 80037ec:	f000 f9b2 	bl	8003b54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800384a:	b480      	push	{r7}
 800384c:	b083      	sub	sp, #12
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003852:	bf00      	nop
 8003854:	370c      	adds	r7, #12
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
	...

08003860 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800386e:	b2db      	uxtb	r3, r3
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e044      	b.n	8003902 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2202      	movs	r2, #2
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	68da      	ldr	r2, [r3, #12]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f042 0201 	orr.w	r2, r2, #1
 800388e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a1e      	ldr	r2, [pc, #120]	@ (8003910 <HAL_TIM_Base_Start_IT+0xb0>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d018      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x6c>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038a2:	d013      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x6c>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a1a      	ldr	r2, [pc, #104]	@ (8003914 <HAL_TIM_Base_Start_IT+0xb4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d00e      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x6c>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a19      	ldr	r2, [pc, #100]	@ (8003918 <HAL_TIM_Base_Start_IT+0xb8>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d009      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x6c>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a17      	ldr	r2, [pc, #92]	@ (800391c <HAL_TIM_Base_Start_IT+0xbc>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_TIM_Base_Start_IT+0x6c>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a16      	ldr	r2, [pc, #88]	@ (8003920 <HAL_TIM_Base_Start_IT+0xc0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d111      	bne.n	80038f0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0307 	and.w	r3, r3, #7
 80038d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2b06      	cmp	r3, #6
 80038dc:	d010      	beq.n	8003900 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f042 0201 	orr.w	r2, r2, #1
 80038ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038ee:	e007      	b.n	8003900 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0201 	orr.w	r2, r2, #1
 80038fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3714      	adds	r7, #20
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr
 800390e:	bf00      	nop
 8003910:	40010000 	.word	0x40010000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40000c00 	.word	0x40000c00
 8003920:	40014000 	.word	0x40014000

08003924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d020      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d01b      	beq.n	8003988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0202 	mvn.w	r2, #2
 8003958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 f8d2 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003974:	e005      	b.n	8003982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f000 f8c4 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f000 f8d5 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	f003 0304 	and.w	r3, r3, #4
 800398e:	2b00      	cmp	r3, #0
 8003990:	d020      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d01b      	beq.n	80039d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f06f 0204 	mvn.w	r2, #4
 80039a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2202      	movs	r2, #2
 80039aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8ac 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 80039c0:	e005      	b.n	80039ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f000 f89e 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 f8af 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	f003 0308 	and.w	r3, r3, #8
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d020      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d01b      	beq.n	8003a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f06f 0208 	mvn.w	r2, #8
 80039f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2204      	movs	r2, #4
 80039f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	69db      	ldr	r3, [r3, #28]
 80039fe:	f003 0303 	and.w	r3, r3, #3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f886 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003a0c:	e005      	b.n	8003a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f000 f878 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	f000 f889 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d020      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 0310 	and.w	r3, r3, #16
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01b      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f06f 0210 	mvn.w	r2, #16
 8003a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2208      	movs	r2, #8
 8003a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f860 	bl	8003b18 <HAL_TIM_IC_CaptureCallback>
 8003a58:	e005      	b.n	8003a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f852 	bl	8003b04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f863 	bl	8003b2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00c      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 0301 	and.w	r3, r3, #1
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d007      	beq.n	8003a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f06f 0201 	mvn.w	r2, #1
 8003a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f7fd fada 	bl	8001044 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00c      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d007      	beq.n	8003ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f000 f8e6 	bl	8003c80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00c      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d007      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f000 f834 	bl	8003b40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00c      	beq.n	8003afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f06f 0220 	mvn.w	r2, #32
 8003af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8b8 	bl	8003c6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b085      	sub	sp, #20
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a3a      	ldr	r2, [pc, #232]	@ (8003c50 <TIM_Base_SetConfig+0xfc>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <TIM_Base_SetConfig+0x38>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b72:	d00b      	beq.n	8003b8c <TIM_Base_SetConfig+0x38>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a37      	ldr	r2, [pc, #220]	@ (8003c54 <TIM_Base_SetConfig+0x100>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_Base_SetConfig+0x38>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a36      	ldr	r2, [pc, #216]	@ (8003c58 <TIM_Base_SetConfig+0x104>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_Base_SetConfig+0x38>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a35      	ldr	r2, [pc, #212]	@ (8003c5c <TIM_Base_SetConfig+0x108>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d108      	bne.n	8003b9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	68fa      	ldr	r2, [r7, #12]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c50 <TIM_Base_SetConfig+0xfc>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d01b      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003bac:	d017      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a28      	ldr	r2, [pc, #160]	@ (8003c54 <TIM_Base_SetConfig+0x100>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d013      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a27      	ldr	r2, [pc, #156]	@ (8003c58 <TIM_Base_SetConfig+0x104>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d00f      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a26      	ldr	r2, [pc, #152]	@ (8003c5c <TIM_Base_SetConfig+0x108>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00b      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a25      	ldr	r2, [pc, #148]	@ (8003c60 <TIM_Base_SetConfig+0x10c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d007      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a24      	ldr	r2, [pc, #144]	@ (8003c64 <TIM_Base_SetConfig+0x110>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d003      	beq.n	8003bde <TIM_Base_SetConfig+0x8a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <TIM_Base_SetConfig+0x114>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d108      	bne.n	8003bf0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003be4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	68fa      	ldr	r2, [r7, #12]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a0e      	ldr	r2, [pc, #56]	@ (8003c50 <TIM_Base_SetConfig+0xfc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d103      	bne.n	8003c24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	691a      	ldr	r2, [r3, #16]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2201      	movs	r2, #1
 8003c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0301 	and.w	r3, r3, #1
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d105      	bne.n	8003c42 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f023 0201 	bic.w	r2, r3, #1
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	611a      	str	r2, [r3, #16]
  }
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr
 8003c4e:	bf00      	nop
 8003c50:	40010000 	.word	0x40010000
 8003c54:	40000400 	.word	0x40000400
 8003c58:	40000800 	.word	0x40000800
 8003c5c:	40000c00 	.word	0x40000c00
 8003c60:	40014000 	.word	0x40014000
 8003c64:	40014400 	.word	0x40014400
 8003c68:	40014800 	.word	0x40014800

08003c6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e042      	b.n	8003d2c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd fb36 	bl	800132c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	@ 0x24
 8003cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fdbd 	bl	8004858 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	68da      	ldr	r2, [r3, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d2a:	2300      	movs	r3, #0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	@ 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d175      	bne.n	8003e40 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d002      	beq.n	8003d60 <HAL_UART_Transmit+0x2c>
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d101      	bne.n	8003d64 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e06e      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2221      	movs	r2, #33	@ 0x21
 8003d6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d72:	f7fe f8ef 	bl	8001f54 <HAL_GetTick>
 8003d76:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	88fa      	ldrh	r2, [r7, #6]
 8003d7c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d8c:	d108      	bne.n	8003da0 <HAL_UART_Transmit+0x6c>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d104      	bne.n	8003da0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	61bb      	str	r3, [r7, #24]
 8003d9e:	e003      	b.n	8003da8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003da8:	e02e      	b.n	8003e08 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2180      	movs	r1, #128	@ 0x80
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 fb1f 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d005      	beq.n	8003dcc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2220      	movs	r2, #32
 8003dc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e03a      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10b      	bne.n	8003dea <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	881b      	ldrh	r3, [r3, #0]
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003de0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	3302      	adds	r3, #2
 8003de6:	61bb      	str	r3, [r7, #24]
 8003de8:	e007      	b.n	8003dfa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	3301      	adds	r3, #1
 8003df8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	3b01      	subs	r3, #1
 8003e02:	b29a      	uxth	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1cb      	bne.n	8003daa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2140      	movs	r1, #64	@ 0x40
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 faeb 	bl	80043f8 <UART_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d005      	beq.n	8003e34 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e006      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	e000      	b.n	8003e42 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003e40:	2302      	movs	r3, #2
  }
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3720      	adds	r7, #32
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	4613      	mov	r3, r2
 8003e56:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b20      	cmp	r3, #32
 8003e62:	d112      	bne.n	8003e8a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <HAL_UART_Receive_IT+0x26>
 8003e6a:	88fb      	ldrh	r3, [r7, #6]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d101      	bne.n	8003e74 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e00b      	b.n	8003e8c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e7a:	88fb      	ldrh	r3, [r7, #6]
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	68b9      	ldr	r1, [r7, #8]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f000 fb12 	bl	80044aa <UART_Start_Receive_IT>
 8003e86:	4603      	mov	r3, r0
 8003e88:	e000      	b.n	8003e8c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003e8a:	2302      	movs	r3, #2
  }
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b0ba      	sub	sp, #232	@ 0xe8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68db      	ldr	r3, [r3, #12]
 8003eac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eca:	f003 030f 	and.w	r3, r3, #15
 8003ece:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003ed2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d10f      	bne.n	8003efa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ede:	f003 0320 	and.w	r3, r3, #32
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_UART_IRQHandler+0x66>
 8003ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fbf2 	bl	80046dc <UART_Receive_IT>
      return;
 8003ef8:	e25b      	b.n	80043b2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003efa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 80de 	beq.w	80040c0 <HAL_UART_IRQHandler+0x22c>
 8003f04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f08:	f003 0301 	and.w	r3, r3, #1
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d106      	bne.n	8003f1e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f14:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80d1 	beq.w	80040c0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00b      	beq.n	8003f42 <HAL_UART_IRQHandler+0xae>
 8003f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d005      	beq.n	8003f42 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f3a:	f043 0201 	orr.w	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_UART_IRQHandler+0xd2>
 8003f4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d005      	beq.n	8003f66 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f5e:	f043 0202 	orr.w	r2, r3, #2
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <HAL_UART_IRQHandler+0xf6>
 8003f72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d005      	beq.n	8003f8a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f82:	f043 0204 	orr.w	r2, r3, #4
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d011      	beq.n	8003fba <HAL_UART_IRQHandler+0x126>
 8003f96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d105      	bne.n	8003fae <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fa6:	f003 0301 	and.w	r3, r3, #1
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d005      	beq.n	8003fba <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb2:	f043 0208 	orr.w	r2, r3, #8
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	f000 81f2 	beq.w	80043a8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc8:	f003 0320 	and.w	r3, r3, #32
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x14e>
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 fb7d 	bl	80046dc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fec:	2b40      	cmp	r3, #64	@ 0x40
 8003fee:	bf0c      	ite	eq
 8003ff0:	2301      	moveq	r3, #1
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	b2db      	uxtb	r3, r3
 8003ff6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ffe:	f003 0308 	and.w	r3, r3, #8
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <HAL_UART_IRQHandler+0x17a>
 8004006:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800400a:	2b00      	cmp	r3, #0
 800400c:	d04f      	beq.n	80040ae <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 fa85 	bl	800451e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800401e:	2b40      	cmp	r3, #64	@ 0x40
 8004020:	d141      	bne.n	80040a6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	3314      	adds	r3, #20
 8004028:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004038:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800403c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004040:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	3314      	adds	r3, #20
 800404a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800404e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004052:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004056:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800405a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004066:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1d9      	bne.n	8004022 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	4a7e      	ldr	r2, [pc, #504]	@ (8004274 <HAL_UART_IRQHandler+0x3e0>)
 800407c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004082:	4618      	mov	r0, r3
 8004084:	f7fe f8e8 	bl	8002258 <HAL_DMA_Abort_IT>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d016      	beq.n	80040bc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004092:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004098:	4610      	mov	r0, r2
 800409a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00e      	b.n	80040bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f994 	bl	80043cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e00a      	b.n	80040bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f990 	bl	80043cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ac:	e006      	b.n	80040bc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f98c 	bl	80043cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040ba:	e175      	b.n	80043a8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040bc:	bf00      	nop
    return;
 80040be:	e173      	b.n	80043a8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	f040 814f 	bne.w	8004368 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040ce:	f003 0310 	and.w	r3, r3, #16
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	f000 8148 	beq.w	8004368 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 8141 	beq.w	8004368 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004106:	2b40      	cmp	r3, #64	@ 0x40
 8004108:	f040 80b6 	bne.w	8004278 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004118:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8145 	beq.w	80043ac <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412a:	429a      	cmp	r2, r3
 800412c:	f080 813e 	bcs.w	80043ac <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004136:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413c:	69db      	ldr	r3, [r3, #28]
 800413e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004142:	f000 8088 	beq.w	8004256 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	330c      	adds	r3, #12
 800414c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004150:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004154:	e853 3f00 	ldrex	r3, [r3]
 8004158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800415c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004164:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004172:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004176:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800417e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004182:	e841 2300 	strex	r3, r2, [r1]
 8004186:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800418a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1d9      	bne.n	8004146 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80041a2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041b6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041bc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041be:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041c2:	e841 2300 	strex	r3, r2, [r1]
 80041c6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1e1      	bne.n	8004192 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	3314      	adds	r3, #20
 80041d4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d8:	e853 3f00 	ldrex	r3, [r3]
 80041dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3314      	adds	r3, #20
 80041ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041f2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041f4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e3      	bne.n	80041ce <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2220      	movs	r2, #32
 800420a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800421e:	e853 3f00 	ldrex	r3, [r3]
 8004222:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004226:	f023 0310 	bic.w	r3, r3, #16
 800422a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004238:	65ba      	str	r2, [r7, #88]	@ 0x58
 800423a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800423e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004240:	e841 2300 	strex	r3, r2, [r1]
 8004244:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1e3      	bne.n	8004214 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	4618      	mov	r0, r3
 8004252:	f7fd ff91 	bl	8002178 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2202      	movs	r2, #2
 800425a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004264:	b29b      	uxth	r3, r3
 8004266:	1ad3      	subs	r3, r2, r3
 8004268:	b29b      	uxth	r3, r3
 800426a:	4619      	mov	r1, r3
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 f8b7 	bl	80043e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004272:	e09b      	b.n	80043ac <HAL_UART_IRQHandler+0x518>
 8004274:	080045e5 	.word	0x080045e5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004280:	b29b      	uxth	r3, r3
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 808e 	beq.w	80043b0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004294:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 8089 	beq.w	80043b0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a8:	e853 3f00 	ldrex	r3, [r3]
 80042ac:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042b4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	330c      	adds	r3, #12
 80042be:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042c2:	647a      	str	r2, [r7, #68]	@ 0x44
 80042c4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042ca:	e841 2300 	strex	r3, r2, [r1]
 80042ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1e3      	bne.n	800429e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	3314      	adds	r3, #20
 80042dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e0:	e853 3f00 	ldrex	r3, [r3]
 80042e4:	623b      	str	r3, [r7, #32]
   return(result);
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	f023 0301 	bic.w	r3, r3, #1
 80042ec:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3314      	adds	r3, #20
 80042f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042fa:	633a      	str	r2, [r7, #48]	@ 0x30
 80042fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004300:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004302:	e841 2300 	strex	r3, r2, [r1]
 8004306:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1e3      	bne.n	80042d6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2220      	movs	r2, #32
 8004312:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2200      	movs	r2, #0
 800431a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	330c      	adds	r3, #12
 8004322:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	e853 3f00 	ldrex	r3, [r3]
 800432a:	60fb      	str	r3, [r7, #12]
   return(result);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0310 	bic.w	r3, r3, #16
 8004332:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	330c      	adds	r3, #12
 800433c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69b9      	ldr	r1, [r7, #24]
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	617b      	str	r3, [r7, #20]
   return(result);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e3      	bne.n	800431c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2202      	movs	r2, #2
 8004358:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800435a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800435e:	4619      	mov	r1, r3
 8004360:	6878      	ldr	r0, [r7, #4]
 8004362:	f000 f83d 	bl	80043e0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004366:	e023      	b.n	80043b0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004368:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004370:	2b00      	cmp	r3, #0
 8004372:	d009      	beq.n	8004388 <HAL_UART_IRQHandler+0x4f4>
 8004374:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f943 	bl	800460c <UART_Transmit_IT>
    return;
 8004386:	e014      	b.n	80043b2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800438c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00e      	beq.n	80043b2 <HAL_UART_IRQHandler+0x51e>
 8004394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800439c:	2b00      	cmp	r3, #0
 800439e:	d008      	beq.n	80043b2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f983 	bl	80046ac <UART_EndTransmit_IT>
    return;
 80043a6:	e004      	b.n	80043b2 <HAL_UART_IRQHandler+0x51e>
    return;
 80043a8:	bf00      	nop
 80043aa:	e002      	b.n	80043b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043ac:	bf00      	nop
 80043ae:	e000      	b.n	80043b2 <HAL_UART_IRQHandler+0x51e>
      return;
 80043b0:	bf00      	nop
  }
}
 80043b2:	37e8      	adds	r7, #232	@ 0xe8
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	460b      	mov	r3, r1
 80043ea:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr

080043f8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004408:	e03b      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004410:	d037      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004412:	f7fd fd9f 	bl	8001f54 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	6a3a      	ldr	r2, [r7, #32]
 800441e:	429a      	cmp	r2, r3
 8004420:	d302      	bcc.n	8004428 <UART_WaitOnFlagUntilTimeout+0x30>
 8004422:	6a3b      	ldr	r3, [r7, #32]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d101      	bne.n	800442c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e03a      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0304 	and.w	r3, r3, #4
 8004436:	2b00      	cmp	r3, #0
 8004438:	d023      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b80      	cmp	r3, #128	@ 0x80
 800443e:	d020      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b40      	cmp	r3, #64	@ 0x40
 8004444:	d01d      	beq.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0308 	and.w	r3, r3, #8
 8004450:	2b08      	cmp	r3, #8
 8004452:	d116      	bne.n	8004482 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f857 	bl	800451e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2208      	movs	r2, #8
 8004474:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e00f      	b.n	80044a2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	4013      	ands	r3, r2
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	429a      	cmp	r2, r3
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	461a      	mov	r2, r3
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	429a      	cmp	r2, r3
 800449e:	d0b4      	beq.n	800440a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a0:	2300      	movs	r3, #0
}
 80044a2:	4618      	mov	r0, r3
 80044a4:	3718      	adds	r7, #24
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	60f8      	str	r0, [r7, #12]
 80044b2:	60b9      	str	r1, [r7, #8]
 80044b4:	4613      	mov	r3, r2
 80044b6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	88fa      	ldrh	r2, [r7, #6]
 80044c2:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	88fa      	ldrh	r2, [r7, #6]
 80044c8:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2222      	movs	r2, #34	@ 0x22
 80044d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d007      	beq.n	80044f0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68da      	ldr	r2, [r3, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044ee:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f042 0201 	orr.w	r2, r2, #1
 80044fe:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68da      	ldr	r2, [r3, #12]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0220 	orr.w	r2, r2, #32
 800450e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800451e:	b480      	push	{r7}
 8004520:	b095      	sub	sp, #84	@ 0x54
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800453c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	330c      	adds	r3, #12
 8004544:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004546:	643a      	str	r2, [r7, #64]	@ 0x40
 8004548:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800454c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	61fb      	str	r3, [r7, #28]
   return(result);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	3314      	adds	r3, #20
 8004578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800457a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800457c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004580:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004582:	e841 2300 	strex	r3, r2, [r1]
 8004586:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800458a:	2b00      	cmp	r3, #0
 800458c:	d1e5      	bne.n	800455a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004592:	2b01      	cmp	r3, #1
 8004594:	d119      	bne.n	80045ca <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	330c      	adds	r3, #12
 800459c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	330c      	adds	r3, #12
 80045b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b6:	61ba      	str	r2, [r7, #24]
 80045b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e5      	bne.n	8004596 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045d8:	bf00      	nop
 80045da:	3754      	adds	r7, #84	@ 0x54
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fee4 	bl	80043cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800460c:	b480      	push	{r7}
 800460e:	b085      	sub	sp, #20
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b21      	cmp	r3, #33	@ 0x21
 800461e:	d13e      	bne.n	800469e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004628:	d114      	bne.n	8004654 <UART_Transmit_IT+0x48>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d110      	bne.n	8004654 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	461a      	mov	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004646:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	1c9a      	adds	r2, r3, #2
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	621a      	str	r2, [r3, #32]
 8004652:	e008      	b.n	8004666 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	1c59      	adds	r1, r3, #1
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6211      	str	r1, [r2, #32]
 800465e:	781a      	ldrb	r2, [r3, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800466a:	b29b      	uxth	r3, r3
 800466c:	3b01      	subs	r3, #1
 800466e:	b29b      	uxth	r3, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4619      	mov	r1, r3
 8004674:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10f      	bne.n	800469a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004688:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68da      	ldr	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004698:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800469a:	2300      	movs	r3, #0
 800469c:	e000      	b.n	80046a0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800469e:	2302      	movs	r3, #2
  }
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3714      	adds	r7, #20
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b082      	sub	sp, #8
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046c2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7ff fe73 	bl	80043b8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046d2:	2300      	movs	r3, #0
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b08c      	sub	sp, #48	@ 0x30
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b22      	cmp	r3, #34	@ 0x22
 80046ee:	f040 80ae 	bne.w	800484e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046fa:	d117      	bne.n	800472c <UART_Receive_IT+0x50>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d113      	bne.n	800472c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004704:	2300      	movs	r3, #0
 8004706:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	b29b      	uxth	r3, r3
 8004716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800471a:	b29a      	uxth	r2, r3
 800471c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004724:	1c9a      	adds	r2, r3, #2
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	629a      	str	r2, [r3, #40]	@ 0x28
 800472a:	e026      	b.n	800477a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004730:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004732:	2300      	movs	r3, #0
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800473e:	d007      	beq.n	8004750 <UART_Receive_IT+0x74>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d10a      	bne.n	800475e <UART_Receive_IT+0x82>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d106      	bne.n	800475e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	b2da      	uxtb	r2, r3
 8004758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800475a:	701a      	strb	r2, [r3, #0]
 800475c:	e008      	b.n	8004770 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	b2db      	uxtb	r3, r3
 8004766:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800476a:	b2da      	uxtb	r2, r3
 800476c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800476e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29b      	uxth	r3, r3
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	4619      	mov	r1, r3
 8004788:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800478a:	2b00      	cmp	r3, #0
 800478c:	d15d      	bne.n	800484a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68da      	ldr	r2, [r3, #12]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 0220 	bic.w	r2, r2, #32
 800479c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68da      	ldr	r2, [r3, #12]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047ac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695a      	ldr	r2, [r3, #20]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f022 0201 	bic.w	r2, r2, #1
 80047bc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d135      	bne.n	8004840 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2200      	movs	r2, #0
 80047d8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	330c      	adds	r3, #12
 80047e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	e853 3f00 	ldrex	r3, [r3]
 80047e8:	613b      	str	r3, [r7, #16]
   return(result);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	f023 0310 	bic.w	r3, r3, #16
 80047f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	330c      	adds	r3, #12
 80047f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fa:	623a      	str	r2, [r7, #32]
 80047fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	69f9      	ldr	r1, [r7, #28]
 8004800:	6a3a      	ldr	r2, [r7, #32]
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	61bb      	str	r3, [r7, #24]
   return(result);
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e5      	bne.n	80047da <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f003 0310 	and.w	r3, r3, #16
 8004818:	2b10      	cmp	r3, #16
 800481a:	d10a      	bne.n	8004832 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60fb      	str	r3, [r7, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	60fb      	str	r3, [r7, #12]
 8004830:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004836:	4619      	mov	r1, r3
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f7ff fdd1 	bl	80043e0 <HAL_UARTEx_RxEventCallback>
 800483e:	e002      	b.n	8004846 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fc fb83 	bl	8000f4c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e002      	b.n	8004850 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800484a:	2300      	movs	r3, #0
 800484c:	e000      	b.n	8004850 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800484e:	2302      	movs	r3, #2
  }
}
 8004850:	4618      	mov	r0, r3
 8004852:	3730      	adds	r7, #48	@ 0x30
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800485c:	b0c0      	sub	sp, #256	@ 0x100
 800485e:	af00      	add	r7, sp, #0
 8004860:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	68d9      	ldr	r1, [r3, #12]
 8004876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	ea40 0301 	orr.w	r3, r0, r1
 8004880:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	689a      	ldr	r2, [r3, #8]
 8004888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	431a      	orrs	r2, r3
 8004890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	431a      	orrs	r2, r3
 8004898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489c:	69db      	ldr	r3, [r3, #28]
 800489e:	4313      	orrs	r3, r2
 80048a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048b0:	f021 010c 	bic.w	r1, r1, #12
 80048b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048be:	430b      	orrs	r3, r1
 80048c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	6999      	ldr	r1, [r3, #24]
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	ea40 0301 	orr.w	r3, r0, r1
 80048de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	4b8f      	ldr	r3, [pc, #572]	@ (8004b24 <UART_SetConfig+0x2cc>)
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d005      	beq.n	80048f8 <UART_SetConfig+0xa0>
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b28 <UART_SetConfig+0x2d0>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d104      	bne.n	8004902 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80048f8:	f7fe fb16 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 80048fc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004900:	e003      	b.n	800490a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004902:	f7fe fafd 	bl	8002f00 <HAL_RCC_GetPCLK1Freq>
 8004906:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	69db      	ldr	r3, [r3, #28]
 8004910:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004914:	f040 810c 	bne.w	8004b30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004918:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491c:	2200      	movs	r2, #0
 800491e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004922:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004926:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800492a:	4622      	mov	r2, r4
 800492c:	462b      	mov	r3, r5
 800492e:	1891      	adds	r1, r2, r2
 8004930:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004932:	415b      	adcs	r3, r3
 8004934:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004936:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800493a:	4621      	mov	r1, r4
 800493c:	eb12 0801 	adds.w	r8, r2, r1
 8004940:	4629      	mov	r1, r5
 8004942:	eb43 0901 	adc.w	r9, r3, r1
 8004946:	f04f 0200 	mov.w	r2, #0
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004952:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004956:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800495a:	4690      	mov	r8, r2
 800495c:	4699      	mov	r9, r3
 800495e:	4623      	mov	r3, r4
 8004960:	eb18 0303 	adds.w	r3, r8, r3
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004968:	462b      	mov	r3, r5
 800496a:	eb49 0303 	adc.w	r3, r9, r3
 800496e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800497e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004982:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004986:	460b      	mov	r3, r1
 8004988:	18db      	adds	r3, r3, r3
 800498a:	653b      	str	r3, [r7, #80]	@ 0x50
 800498c:	4613      	mov	r3, r2
 800498e:	eb42 0303 	adc.w	r3, r2, r3
 8004992:	657b      	str	r3, [r7, #84]	@ 0x54
 8004994:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004998:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800499c:	f7fb fcd0 	bl	8000340 <__aeabi_uldivmod>
 80049a0:	4602      	mov	r2, r0
 80049a2:	460b      	mov	r3, r1
 80049a4:	4b61      	ldr	r3, [pc, #388]	@ (8004b2c <UART_SetConfig+0x2d4>)
 80049a6:	fba3 2302 	umull	r2, r3, r3, r2
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	011c      	lsls	r4, r3, #4
 80049ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049c8:	415b      	adcs	r3, r3
 80049ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049d0:	4641      	mov	r1, r8
 80049d2:	eb12 0a01 	adds.w	sl, r2, r1
 80049d6:	4649      	mov	r1, r9
 80049d8:	eb43 0b01 	adc.w	fp, r3, r1
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049f0:	4692      	mov	sl, r2
 80049f2:	469b      	mov	fp, r3
 80049f4:	4643      	mov	r3, r8
 80049f6:	eb1a 0303 	adds.w	r3, sl, r3
 80049fa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049fe:	464b      	mov	r3, r9
 8004a00:	eb4b 0303 	adc.w	r3, fp, r3
 8004a04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a1c:	460b      	mov	r3, r1
 8004a1e:	18db      	adds	r3, r3, r3
 8004a20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a22:	4613      	mov	r3, r2
 8004a24:	eb42 0303 	adc.w	r3, r2, r3
 8004a28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a32:	f7fb fc85 	bl	8000340 <__aeabi_uldivmod>
 8004a36:	4602      	mov	r2, r0
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4611      	mov	r1, r2
 8004a3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	2264      	movs	r2, #100	@ 0x64
 8004a46:	fb02 f303 	mul.w	r3, r2, r3
 8004a4a:	1acb      	subs	r3, r1, r3
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a52:	4b36      	ldr	r3, [pc, #216]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004a54:	fba3 2302 	umull	r2, r3, r3, r2
 8004a58:	095b      	lsrs	r3, r3, #5
 8004a5a:	005b      	lsls	r3, r3, #1
 8004a5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a60:	441c      	add	r4, r3
 8004a62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a66:	2200      	movs	r2, #0
 8004a68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a74:	4642      	mov	r2, r8
 8004a76:	464b      	mov	r3, r9
 8004a78:	1891      	adds	r1, r2, r2
 8004a7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a7c:	415b      	adcs	r3, r3
 8004a7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a84:	4641      	mov	r1, r8
 8004a86:	1851      	adds	r1, r2, r1
 8004a88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	414b      	adcs	r3, r1
 8004a8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a90:	f04f 0200 	mov.w	r2, #0
 8004a94:	f04f 0300 	mov.w	r3, #0
 8004a98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004a9c:	4659      	mov	r1, fp
 8004a9e:	00cb      	lsls	r3, r1, #3
 8004aa0:	4651      	mov	r1, sl
 8004aa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	00ca      	lsls	r2, r1, #3
 8004aaa:	4610      	mov	r0, r2
 8004aac:	4619      	mov	r1, r3
 8004aae:	4603      	mov	r3, r0
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	189b      	adds	r3, r3, r2
 8004ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ab8:	464b      	mov	r3, r9
 8004aba:	460a      	mov	r2, r1
 8004abc:	eb42 0303 	adc.w	r3, r2, r3
 8004ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ad0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ad4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ad8:	460b      	mov	r3, r1
 8004ada:	18db      	adds	r3, r3, r3
 8004adc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ade:	4613      	mov	r3, r2
 8004ae0:	eb42 0303 	adc.w	r3, r2, r3
 8004ae4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ae6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004aea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004aee:	f7fb fc27 	bl	8000340 <__aeabi_uldivmod>
 8004af2:	4602      	mov	r2, r0
 8004af4:	460b      	mov	r3, r1
 8004af6:	4b0d      	ldr	r3, [pc, #52]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004af8:	fba3 1302 	umull	r1, r3, r3, r2
 8004afc:	095b      	lsrs	r3, r3, #5
 8004afe:	2164      	movs	r1, #100	@ 0x64
 8004b00:	fb01 f303 	mul.w	r3, r1, r3
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	3332      	adds	r3, #50	@ 0x32
 8004b0a:	4a08      	ldr	r2, [pc, #32]	@ (8004b2c <UART_SetConfig+0x2d4>)
 8004b0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b10:	095b      	lsrs	r3, r3, #5
 8004b12:	f003 0207 	and.w	r2, r3, #7
 8004b16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4422      	add	r2, r4
 8004b1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b20:	e106      	b.n	8004d30 <UART_SetConfig+0x4d8>
 8004b22:	bf00      	nop
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40011400 	.word	0x40011400
 8004b2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b34:	2200      	movs	r2, #0
 8004b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b42:	4642      	mov	r2, r8
 8004b44:	464b      	mov	r3, r9
 8004b46:	1891      	adds	r1, r2, r2
 8004b48:	6239      	str	r1, [r7, #32]
 8004b4a:	415b      	adcs	r3, r3
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b52:	4641      	mov	r1, r8
 8004b54:	1854      	adds	r4, r2, r1
 8004b56:	4649      	mov	r1, r9
 8004b58:	eb43 0501 	adc.w	r5, r3, r1
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	00eb      	lsls	r3, r5, #3
 8004b66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b6a:	00e2      	lsls	r2, r4, #3
 8004b6c:	4614      	mov	r4, r2
 8004b6e:	461d      	mov	r5, r3
 8004b70:	4643      	mov	r3, r8
 8004b72:	18e3      	adds	r3, r4, r3
 8004b74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b78:	464b      	mov	r3, r9
 8004b7a:	eb45 0303 	adc.w	r3, r5, r3
 8004b7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b92:	f04f 0200 	mov.w	r2, #0
 8004b96:	f04f 0300 	mov.w	r3, #0
 8004b9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	008b      	lsls	r3, r1, #2
 8004ba2:	4621      	mov	r1, r4
 8004ba4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba8:	4621      	mov	r1, r4
 8004baa:	008a      	lsls	r2, r1, #2
 8004bac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bb0:	f7fb fbc6 	bl	8000340 <__aeabi_uldivmod>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4b60      	ldr	r3, [pc, #384]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004bba:	fba3 2302 	umull	r2, r3, r3, r2
 8004bbe:	095b      	lsrs	r3, r3, #5
 8004bc0:	011c      	lsls	r4, r3, #4
 8004bc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004bd4:	4642      	mov	r2, r8
 8004bd6:	464b      	mov	r3, r9
 8004bd8:	1891      	adds	r1, r2, r2
 8004bda:	61b9      	str	r1, [r7, #24]
 8004bdc:	415b      	adcs	r3, r3
 8004bde:	61fb      	str	r3, [r7, #28]
 8004be0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004be4:	4641      	mov	r1, r8
 8004be6:	1851      	adds	r1, r2, r1
 8004be8:	6139      	str	r1, [r7, #16]
 8004bea:	4649      	mov	r1, r9
 8004bec:	414b      	adcs	r3, r1
 8004bee:	617b      	str	r3, [r7, #20]
 8004bf0:	f04f 0200 	mov.w	r2, #0
 8004bf4:	f04f 0300 	mov.w	r3, #0
 8004bf8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004bfc:	4659      	mov	r1, fp
 8004bfe:	00cb      	lsls	r3, r1, #3
 8004c00:	4651      	mov	r1, sl
 8004c02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c06:	4651      	mov	r1, sl
 8004c08:	00ca      	lsls	r2, r1, #3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4642      	mov	r2, r8
 8004c12:	189b      	adds	r3, r3, r2
 8004c14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c18:	464b      	mov	r3, r9
 8004c1a:	460a      	mov	r2, r1
 8004c1c:	eb42 0303 	adc.w	r3, r2, r3
 8004c20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c30:	f04f 0200 	mov.w	r2, #0
 8004c34:	f04f 0300 	mov.w	r3, #0
 8004c38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	008b      	lsls	r3, r1, #2
 8004c40:	4641      	mov	r1, r8
 8004c42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c46:	4641      	mov	r1, r8
 8004c48:	008a      	lsls	r2, r1, #2
 8004c4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c4e:	f7fb fb77 	bl	8000340 <__aeabi_uldivmod>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4611      	mov	r1, r2
 8004c58:	4b38      	ldr	r3, [pc, #224]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004c5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	2264      	movs	r2, #100	@ 0x64
 8004c62:	fb02 f303 	mul.w	r3, r2, r3
 8004c66:	1acb      	subs	r3, r1, r3
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	3332      	adds	r3, #50	@ 0x32
 8004c6c:	4a33      	ldr	r2, [pc, #204]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c78:	441c      	add	r4, r3
 8004c7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c7e:	2200      	movs	r2, #0
 8004c80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c82:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c88:	4642      	mov	r2, r8
 8004c8a:	464b      	mov	r3, r9
 8004c8c:	1891      	adds	r1, r2, r2
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	415b      	adcs	r3, r3
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c98:	4641      	mov	r1, r8
 8004c9a:	1851      	adds	r1, r2, r1
 8004c9c:	6039      	str	r1, [r7, #0]
 8004c9e:	4649      	mov	r1, r9
 8004ca0:	414b      	adcs	r3, r1
 8004ca2:	607b      	str	r3, [r7, #4]
 8004ca4:	f04f 0200 	mov.w	r2, #0
 8004ca8:	f04f 0300 	mov.w	r3, #0
 8004cac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cb0:	4659      	mov	r1, fp
 8004cb2:	00cb      	lsls	r3, r1, #3
 8004cb4:	4651      	mov	r1, sl
 8004cb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cba:	4651      	mov	r1, sl
 8004cbc:	00ca      	lsls	r2, r1, #3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	4619      	mov	r1, r3
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	189b      	adds	r3, r3, r2
 8004cc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cca:	464b      	mov	r3, r9
 8004ccc:	460a      	mov	r2, r1
 8004cce:	eb42 0303 	adc.w	r3, r2, r3
 8004cd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cde:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cec:	4649      	mov	r1, r9
 8004cee:	008b      	lsls	r3, r1, #2
 8004cf0:	4641      	mov	r1, r8
 8004cf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cf6:	4641      	mov	r1, r8
 8004cf8:	008a      	lsls	r2, r1, #2
 8004cfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004cfe:	f7fb fb1f 	bl	8000340 <__aeabi_uldivmod>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4b0d      	ldr	r3, [pc, #52]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004d08:	fba3 1302 	umull	r1, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	2164      	movs	r1, #100	@ 0x64
 8004d10:	fb01 f303 	mul.w	r3, r1, r3
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	3332      	adds	r3, #50	@ 0x32
 8004d1a:	4a08      	ldr	r2, [pc, #32]	@ (8004d3c <UART_SetConfig+0x4e4>)
 8004d1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d20:	095b      	lsrs	r3, r3, #5
 8004d22:	f003 020f 	and.w	r2, r3, #15
 8004d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4422      	add	r2, r4
 8004d2e:	609a      	str	r2, [r3, #8]
}
 8004d30:	bf00      	nop
 8004d32:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d36:	46bd      	mov	sp, r7
 8004d38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d3c:	51eb851f 	.word	0x51eb851f

08004d40 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f103 0208 	add.w	r2, r3, #8
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f04f 32ff 	mov.w	r2, #4294967295
 8004d58:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f103 0208 	add.w	r2, r3, #8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f103 0208 	add.w	r2, r3, #8
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 8004d74:	f240 1019 	movw	r0, #281	@ 0x119
 8004d78:	f005 f928 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8004d7c:	bf00      	nop
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 8004d92:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 8004d96:	f005 f919 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8004d9a:	bf00      	nop
 8004d9c:	3708      	adds	r7, #8
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}

08004da2 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004db8:	d103      	bne.n	8004dc2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e00c      	b.n	8004ddc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	3308      	adds	r3, #8
 8004dc6:	60fb      	str	r3, [r7, #12]
 8004dc8:	e002      	b.n	8004dd0 <vListInsert+0x2e>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	60fb      	str	r3, [r7, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d2f6      	bcs.n	8004dca <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	683a      	ldr	r2, [r7, #0]
 8004dea:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	683a      	ldr	r2, [r7, #0]
 8004df6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	1c5a      	adds	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 8004e08:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8004e0c:	f005 f8de 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8004e10:	bf00      	nop
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	6892      	ldr	r2, [r2, #8]
 8004e2e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	6852      	ldr	r2, [r2, #4]
 8004e38:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d103      	bne.n	8004e4c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689a      	ldr	r2, [r3, #8]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	1e5a      	subs	r2, r3, #1
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	f240 101d 	movw	r0, #285	@ 0x11d
 8004e66:	f005 f8ed 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b086      	sub	sp, #24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8004e82:	2301      	movs	r3, #1
 8004e84:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <xQueueGenericReset+0x30>
    __asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
}
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d05d      	beq.n	8004f6a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d059      	beq.n	8004f6a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	fba3 2302 	umull	r2, r3, r3, r2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d000      	beq.n	8004eca <xQueueGenericReset+0x52>
 8004ec8:	2101      	movs	r1, #1
 8004eca:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d14c      	bne.n	8004f6a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8004ed0:	f003 f9c8 	bl	8008264 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004edc:	6939      	ldr	r1, [r7, #16]
 8004ede:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004ee0:	fb01 f303 	mul.w	r3, r1, r3
 8004ee4:	441a      	add	r2, r3
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	2200      	movs	r2, #0
 8004eee:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f00:	3b01      	subs	r3, #1
 8004f02:	6939      	ldr	r1, [r7, #16]
 8004f04:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004f06:	fb01 f303 	mul.w	r3, r1, r3
 8004f0a:	441a      	add	r2, r3
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	22ff      	movs	r2, #255	@ 0xff
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	22ff      	movs	r2, #255	@ 0xff
 8004f1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d114      	bne.n	8004f50 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d01a      	beq.n	8004f64 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	3310      	adds	r3, #16
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 fcb8 	bl	80068a8 <xTaskRemoveFromEventList>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d012      	beq.n	8004f64 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b18      	ldr	r3, [pc, #96]	@ (8004fa0 <xQueueGenericReset+0x128>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
 8004f4e:	e009      	b.n	8004f64 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	3310      	adds	r3, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f7ff fef3 	bl	8004d40 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	3324      	adds	r3, #36	@ 0x24
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff feee 	bl	8004d40 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8004f64:	f003 f9b0 	bl	80082c8 <vPortExitCritical>
 8004f68:	e001      	b.n	8004f6e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d10b      	bne.n	8004f8c <xQueueGenericReset+0x114>
    __asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	60bb      	str	r3, [r7, #8]
}
 8004f86:	bf00      	nop
 8004f88:	bf00      	nop
 8004f8a:	e7fd      	b.n	8004f88 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	4619      	mov	r1, r3
 8004f90:	2096      	movs	r0, #150	@ 0x96
 8004f92:	f005 f857 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8004f96:	697b      	ldr	r3, [r7, #20]
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3718      	adds	r7, #24
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	e000ed04 	.word	0xe000ed04

08004fa4 <xQueueGenericCreateStatic>:
    QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength,
                                             const UBaseType_t uxItemSize,
                                             uint8_t * pucQueueStorage,
                                             StaticQueue_t * pxStaticQueue,
                                             const uint8_t ucQueueType )
    {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08c      	sub	sp, #48	@ 0x30
 8004fa8:	af02      	add	r7, sp, #8
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	603b      	str	r3, [r7, #0]
        Queue_t * pxNewQueue = NULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xQueueGenericCreateStatic( uxQueueLength, uxItemSize, pucQueueStorage, pxStaticQueue, ucQueueType );

        /* The StaticQueue_t structure and the queue storage area must be
         * supplied. */
        configASSERT( pxStaticQueue );
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d10b      	bne.n	8004fd4 <xQueueGenericCreateStatic+0x30>
    __asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	623b      	str	r3, [r7, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	bf00      	nop
 8004fd2:	e7fd      	b.n	8004fd0 <xQueueGenericCreateStatic+0x2c>

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d031      	beq.n	800503e <xQueueGenericCreateStatic+0x9a>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d02e      	beq.n	800503e <xQueueGenericCreateStatic+0x9a>
            ( pxStaticQueue != NULL ) &&
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <xQueueGenericCreateStatic+0x48>

            /* A queue storage area should be provided if the item size is not 0, and
             * should not be provided if the item size is 0. */
            ( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0U ) ) ) &&
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d028      	beq.n	800503e <xQueueGenericCreateStatic+0x9a>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d102      	bne.n	8004ff8 <xQueueGenericCreateStatic+0x54>
            ( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0U ) ) ) )
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d122      	bne.n	800503e <xQueueGenericCreateStatic+0x9a>
            #if ( configASSERT_DEFINED == 1 )
            {
                /* Sanity check that the size of the structure used to declare a
                 * variable of type StaticQueue_t or StaticSemaphore_t equals the size of
                 * the real queue and semaphore structures. */
                volatile size_t xSize = sizeof( StaticQueue_t );
 8004ff8:	2350      	movs	r3, #80	@ 0x50
 8004ffa:	617b      	str	r3, [r7, #20]

                /* This assertion cannot be branch covered in unit tests */
                configASSERT( xSize == sizeof( Queue_t ) ); /* LCOV_EXCL_BR_LINE */
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2b50      	cmp	r3, #80	@ 0x50
 8005000:	d00b      	beq.n	800501a <xQueueGenericCreateStatic+0x76>
    __asm volatile
 8005002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005006:	f383 8811 	msr	BASEPRI, r3
 800500a:	f3bf 8f6f 	isb	sy
 800500e:	f3bf 8f4f 	dsb	sy
 8005012:	61fb      	str	r3, [r7, #28]
}
 8005014:	bf00      	nop
 8005016:	bf00      	nop
 8005018:	e7fd      	b.n	8005016 <xQueueGenericCreateStatic+0x72>
                ( void ) xSize;                             /* Prevent unused variable warning when configASSERT() is not defined. */
 800501a:	697b      	ldr	r3, [r7, #20]
             * The address of a statically allocated storage area was also passed in
             * but is already set. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewQueue = ( Queue_t * ) pxStaticQueue;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
            #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
            {
                /* Queues can be allocated wither statically or dynamically, so
                 * note this queue was allocated statically in case the queue is
                 * later deleted. */
                pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	2201      	movs	r2, #1
 8005024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
            }
            #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005028:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800502c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	687a      	ldr	r2, [r7, #4]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	68f8      	ldr	r0, [r7, #12]
 8005038:	f000 f87a 	bl	8005130 <prvInitialiseNewQueue>
 800503c:	e00e      	b.n	800505c <xQueueGenericCreateStatic+0xb8>
        }
        else
        {
            configASSERT( pxNewQueue );
 800503e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005040:	2b00      	cmp	r3, #0
 8005042:	d10b      	bne.n	800505c <xQueueGenericCreateStatic+0xb8>
    __asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	61bb      	str	r3, [r7, #24]
}
 8005056:	bf00      	nop
 8005058:	bf00      	nop
 800505a:	e7fd      	b.n	8005058 <xQueueGenericCreateStatic+0xb4>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreateStatic( pxNewQueue );
 800505c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505e:	4618      	mov	r0, r3
 8005060:	f005 f98a 	bl	800a378 <SEGGER_SYSVIEW_ShrinkId>
 8005064:	4603      	mov	r3, r0
 8005066:	4619      	mov	r1, r3
 8005068:	2097      	movs	r0, #151	@ 0x97
 800506a:	f004 ffeb 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 800506e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005070:	4618      	mov	r0, r3
 8005072:	3728      	adds	r7, #40	@ 0x28
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005078:	b580      	push	{r7, lr}
 800507a:	b08a      	sub	sp, #40	@ 0x28
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	4613      	mov	r3, r2
 8005084:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d032      	beq.n	80050f6 <xQueueGenericCreate+0x7e>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8005090:	2100      	movs	r1, #0
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	fba3 2302 	umull	r2, r3, r3, r2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d000      	beq.n	80050a0 <xQueueGenericCreate+0x28>
 800509e:	2101      	movs	r1, #1
 80050a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d127      	bne.n	80050f6 <xQueueGenericCreate+0x7e>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80050ae:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80050b2:	d820      	bhi.n	80050f6 <xQueueGenericCreate+0x7e>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	fb02 f303 	mul.w	r3, r2, r3
 80050bc:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	3350      	adds	r3, #80	@ 0x50
 80050c2:	4618      	mov	r0, r3
 80050c4:	f003 f9fc 	bl	80084c0 <pvPortMalloc>
 80050c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d021      	beq.n	8005114 <xQueueGenericCreate+0x9c>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	3350      	adds	r3, #80	@ 0x50
 80050d8:	617b      	str	r3, [r7, #20]
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    /* Queues can be created either statically or dynamically, so
                     * note this task was created dynamically in case it is later
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80050e2:	79fa      	ldrb	r2, [r7, #7]
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	4613      	mov	r3, r2
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	68b9      	ldr	r1, [r7, #8]
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f000 f81e 	bl	8005130 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80050f4:	e00e      	b.n	8005114 <xQueueGenericCreate+0x9c>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d10b      	bne.n	8005114 <xQueueGenericCreate+0x9c>
    __asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	613b      	str	r3, [r7, #16]
}
 800510e:	bf00      	nop
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <xQueueGenericCreate+0x98>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	4618      	mov	r0, r3
 8005118:	f005 f92e 	bl	800a378 <SEGGER_SYSVIEW_ShrinkId>
 800511c:	4603      	mov	r3, r0
 800511e:	4619      	mov	r1, r3
 8005120:	2098      	movs	r0, #152	@ 0x98
 8005122:	f004 ff8f 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pxNewQueue;
 8005126:	69fb      	ldr	r3, [r7, #28]
    }
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d103      	bne.n	800514c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	601a      	str	r2, [r3, #0]
 800514a:	e002      	b.n	8005152 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	68fa      	ldr	r2, [r7, #12]
 8005156:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	68ba      	ldr	r2, [r7, #8]
 800515c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800515e:	2101      	movs	r1, #1
 8005160:	69b8      	ldr	r0, [r7, #24]
 8005162:	f7ff fe89 	bl	8004e78 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	78fa      	ldrb	r2, [r7, #3]
 800516a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005178 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b08e      	sub	sp, #56	@ 0x38
 800517c:	af00      	add	r7, sp, #0
 800517e:	60f8      	str	r0, [r7, #12]
 8005180:	60b9      	str	r1, [r7, #8]
 8005182:	607a      	str	r2, [r7, #4]
 8005184:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005186:	2300      	movs	r3, #0
 8005188:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	633b      	str	r3, [r7, #48]	@ 0x30

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 800518e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10b      	bne.n	80051ac <xQueueGenericSend+0x34>
    __asm volatile
 8005194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005198:	f383 8811 	msr	BASEPRI, r3
 800519c:	f3bf 8f6f 	isb	sy
 80051a0:	f3bf 8f4f 	dsb	sy
 80051a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051a6:	bf00      	nop
 80051a8:	bf00      	nop
 80051aa:	e7fd      	b.n	80051a8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d103      	bne.n	80051ba <xQueueGenericSend+0x42>
 80051b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <xQueueGenericSend+0x46>
 80051ba:	2301      	movs	r3, #1
 80051bc:	e000      	b.n	80051c0 <xQueueGenericSend+0x48>
 80051be:	2300      	movs	r3, #0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <xQueueGenericSend+0x64>
    __asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051d6:	bf00      	nop
 80051d8:	bf00      	nop
 80051da:	e7fd      	b.n	80051d8 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	d103      	bne.n	80051ea <xQueueGenericSend+0x72>
 80051e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d101      	bne.n	80051ee <xQueueGenericSend+0x76>
 80051ea:	2301      	movs	r3, #1
 80051ec:	e000      	b.n	80051f0 <xQueueGenericSend+0x78>
 80051ee:	2300      	movs	r3, #0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d10b      	bne.n	800520c <xQueueGenericSend+0x94>
    __asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	623b      	str	r3, [r7, #32]
}
 8005206:	bf00      	nop
 8005208:	bf00      	nop
 800520a:	e7fd      	b.n	8005208 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800520c:	f001 fd8e 	bl	8006d2c <xTaskGetSchedulerState>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d102      	bne.n	800521c <xQueueGenericSend+0xa4>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <xQueueGenericSend+0xa8>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <xQueueGenericSend+0xaa>
 8005220:	2300      	movs	r3, #0
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <xQueueGenericSend+0xc6>
    __asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	61fb      	str	r3, [r7, #28]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xQueueGenericSend+0xc2>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800523e:	f003 f811 	bl	8008264 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524a:	429a      	cmp	r2, r3
 800524c:	d302      	bcc.n	8005254 <xQueueGenericSend+0xdc>
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	2b02      	cmp	r3, #2
 8005252:	d12d      	bne.n	80052b0 <xQueueGenericSend+0x138>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	68b9      	ldr	r1, [r7, #8]
 8005258:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800525a:	f000 fb07 	bl	800586c <prvCopyDataToQueue>
 800525e:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005260:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005262:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005264:	2b00      	cmp	r3, #0
 8005266:	d010      	beq.n	800528a <xQueueGenericSend+0x112>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800526a:	3324      	adds	r3, #36	@ 0x24
 800526c:	4618      	mov	r0, r3
 800526e:	f001 fb1b 	bl	80068a8 <xTaskRemoveFromEventList>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d013      	beq.n	80052a0 <xQueueGenericSend+0x128>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8005278:	4b45      	ldr	r3, [pc, #276]	@ (8005390 <xQueueGenericSend+0x218>)
 800527a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	e00a      	b.n	80052a0 <xQueueGenericSend+0x128>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800528a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <xQueueGenericSend+0x128>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8005290:	4b3f      	ldr	r3, [pc, #252]	@ (8005390 <xQueueGenericSend+0x218>)
 8005292:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f3bf 8f4f 	dsb	sy
 800529c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80052a0:	f003 f812 	bl	80082c8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );
 80052a4:	2101      	movs	r1, #1
 80052a6:	20a1      	movs	r0, #161	@ 0xa1
 80052a8:	f004 fecc 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e06b      	b.n	8005388 <xQueueGenericSend+0x210>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d107      	bne.n	80052c6 <xQueueGenericSend+0x14e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80052b6:	f003 f807 	bl	80082c8 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 80052ba:	2100      	movs	r1, #0
 80052bc:	20a1      	movs	r0, #161	@ 0xa1
 80052be:	f004 fec1 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_FULL;
 80052c2:	2300      	movs	r3, #0
 80052c4:	e060      	b.n	8005388 <xQueueGenericSend+0x210>
                }
                else if( xEntryTimeSet == pdFALSE )
 80052c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <xQueueGenericSend+0x162>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80052cc:	f107 0314 	add.w	r3, r7, #20
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 fbc9 	bl	8006a68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80052d6:	2301      	movs	r3, #1
 80052d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80052da:	f002 fff5 	bl	80082c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80052de:	f000 ff89 	bl	80061f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80052e2:	f002 ffbf 	bl	8008264 <vPortEnterCritical>
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d103      	bne.n	80052fc <xQueueGenericSend+0x184>
 80052f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005302:	b25b      	sxtb	r3, r3
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d103      	bne.n	8005312 <xQueueGenericSend+0x19a>
 800530a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005312:	f002 ffd9 	bl	80082c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005316:	1d3a      	adds	r2, r7, #4
 8005318:	f107 0314 	add.w	r3, r7, #20
 800531c:	4611      	mov	r1, r2
 800531e:	4618      	mov	r0, r3
 8005320:	f001 fbba 	bl	8006a98 <xTaskCheckForTimeOut>
 8005324:	4603      	mov	r3, r0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d124      	bne.n	8005374 <xQueueGenericSend+0x1fc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800532a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800532c:	f000 fb96 	bl	8005a5c <prvIsQueueFull>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d018      	beq.n	8005368 <xQueueGenericSend+0x1f0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005336:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005338:	3310      	adds	r3, #16
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	4611      	mov	r1, r2
 800533e:	4618      	mov	r0, r3
 8005340:	f001 fa40 	bl	80067c4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8005344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005346:	f000 fb21 	bl	800598c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800534a:	f000 ff61 	bl	8006210 <xTaskResumeAll>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	f47f af74 	bne.w	800523e <xQueueGenericSend+0xc6>
                {
                    taskYIELD_WITHIN_API();
 8005356:	4b0e      	ldr	r3, [pc, #56]	@ (8005390 <xQueueGenericSend+0x218>)
 8005358:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	f3bf 8f4f 	dsb	sy
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	e76a      	b.n	800523e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8005368:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800536a:	f000 fb0f 	bl	800598c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800536e:	f000 ff4f 	bl	8006210 <xTaskResumeAll>
 8005372:	e764      	b.n	800523e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005374:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005376:	f000 fb09 	bl	800598c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800537a:	f000 ff49 	bl	8006210 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );
 800537e:	2100      	movs	r1, #0
 8005380:	20a1      	movs	r0, #161	@ 0xa1
 8005382:	f004 fe5f 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

            return errQUEUE_FULL;
 8005386:	2300      	movs	r3, #0
        }
    }
}
 8005388:	4618      	mov	r0, r3
 800538a:	3738      	adds	r7, #56	@ 0x38
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	e000ed04 	.word	0xe000ed04

08005394 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b092      	sub	sp, #72	@ 0x48
 8005398:	af00      	add	r7, sp, #0
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607a      	str	r2, [r7, #4]
 80053a0:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	643b      	str	r3, [r7, #64]	@ 0x40

    traceENTER_xQueueGenericSendFromISR( xQueue, pvItemToQueue, pxHigherPriorityTaskWoken, xCopyPosition );

    configASSERT( pxQueue );
 80053a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10b      	bne.n	80053c4 <xQueueGenericSendFromISR+0x30>
    __asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
}
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d103      	bne.n	80053d2 <xQueueGenericSendFromISR+0x3e>
 80053ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <xQueueGenericSendFromISR+0x42>
 80053d2:	2301      	movs	r3, #1
 80053d4:	e000      	b.n	80053d8 <xQueueGenericSendFromISR+0x44>
 80053d6:	2300      	movs	r3, #0
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d10b      	bne.n	80053f4 <xQueueGenericSendFromISR+0x60>
    __asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d103      	bne.n	8005402 <xQueueGenericSendFromISR+0x6e>
 80053fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <xQueueGenericSendFromISR+0x72>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <xQueueGenericSendFromISR+0x74>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10b      	bne.n	8005424 <xQueueGenericSendFromISR+0x90>
    __asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800541e:	bf00      	nop
 8005420:	bf00      	nop
 8005422:	e7fd      	b.n	8005420 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005424:	f003 f80a 	bl	800843c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8005428:	f3ef 8211 	mrs	r2, BASEPRI
 800542c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623a      	str	r2, [r7, #32]
 800543e:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8005440:	6a3b      	ldr	r3, [r7, #32]
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005444:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005448:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800544a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544c:	429a      	cmp	r2, r3
 800544e:	d302      	bcc.n	8005456 <xQueueGenericSendFromISR+0xc2>
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d147      	bne.n	80054e6 <xQueueGenericSendFromISR+0x152>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005458:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800545c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	637b      	str	r3, [r7, #52]	@ 0x34
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800546c:	f000 f9fe 	bl	800586c <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8005470:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005478:	d112      	bne.n	80054a0 <xQueueGenericSendFromISR+0x10c>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800547a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800547c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02e      	beq.n	80054e0 <xQueueGenericSendFromISR+0x14c>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005484:	3324      	adds	r3, #36	@ 0x24
 8005486:	4618      	mov	r0, r3
 8005488:	f001 fa0e 	bl	80068a8 <xTaskRemoveFromEventList>
 800548c:	4603      	mov	r3, r0
 800548e:	2b00      	cmp	r3, #0
 8005490:	d026      	beq.n	80054e0 <xQueueGenericSendFromISR+0x14c>
                        {
                            /* The task waiting has a higher priority so record that a
                             * context switch is required. */
                            if( pxHigherPriorityTaskWoken != NULL )
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d023      	beq.n	80054e0 <xQueueGenericSendFromISR+0x14c>
                            {
                                *pxHigherPriorityTaskWoken = pdTRUE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	601a      	str	r2, [r3, #0]
 800549e:	e01f      	b.n	80054e0 <xQueueGenericSendFromISR+0x14c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                prvIncrementQueueTxLock( pxQueue, cTxLock );
 80054a0:	f000 fff0 	bl	8006484 <uxTaskGetNumberOfTasks>
 80054a4:	6338      	str	r0, [r7, #48]	@ 0x30
 80054a6:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80054aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d917      	bls.n	80054e0 <xQueueGenericSendFromISR+0x14c>
 80054b0:	f997 303b 	ldrsb.w	r3, [r7, #59]	@ 0x3b
 80054b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80054b6:	d10b      	bne.n	80054d0 <xQueueGenericSendFromISR+0x13c>
    __asm volatile
 80054b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054bc:	f383 8811 	msr	BASEPRI, r3
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	f3bf 8f4f 	dsb	sy
 80054c8:	61bb      	str	r3, [r7, #24]
}
 80054ca:	bf00      	nop
 80054cc:	bf00      	nop
 80054ce:	e7fd      	b.n	80054cc <xQueueGenericSendFromISR+0x138>
 80054d0:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80054d4:	3301      	adds	r3, #1
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	b25a      	sxtb	r2, r3
 80054da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80054dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80054e0:	2301      	movs	r3, #1
 80054e2:	647b      	str	r3, [r7, #68]	@ 0x44
        {
 80054e4:	e001      	b.n	80054ea <xQueueGenericSendFromISR+0x156>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80054ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80054f4:	bf00      	nop
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueGenericSendFromISR( xReturn );
 80054f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054f8:	4619      	mov	r1, r3
 80054fa:	20a2      	movs	r0, #162	@ 0xa2
 80054fc:	f004 fda2 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8005500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8005502:	4618      	mov	r0, r3
 8005504:	3748      	adds	r7, #72	@ 0x48
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b08c      	sub	sp, #48	@ 0x30
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8005518:	2300      	movs	r3, #0
 800551a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	62bb      	str	r3, [r7, #40]	@ 0x28

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8005520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10b      	bne.n	800553e <xQueueReceive+0x32>
    __asm volatile
 8005526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800552a:	f383 8811 	msr	BASEPRI, r3
 800552e:	f3bf 8f6f 	isb	sy
 8005532:	f3bf 8f4f 	dsb	sy
 8005536:	623b      	str	r3, [r7, #32]
}
 8005538:	bf00      	nop
 800553a:	bf00      	nop
 800553c:	e7fd      	b.n	800553a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d103      	bne.n	800554c <xQueueReceive+0x40>
 8005544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <xQueueReceive+0x44>
 800554c:	2301      	movs	r3, #1
 800554e:	e000      	b.n	8005552 <xQueueReceive+0x46>
 8005550:	2300      	movs	r3, #0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10b      	bne.n	800556e <xQueueReceive+0x62>
    __asm volatile
 8005556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	61fb      	str	r3, [r7, #28]
}
 8005568:	bf00      	nop
 800556a:	bf00      	nop
 800556c:	e7fd      	b.n	800556a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800556e:	f001 fbdd 	bl	8006d2c <xTaskGetSchedulerState>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	d102      	bne.n	800557e <xQueueReceive+0x72>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <xQueueReceive+0x76>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <xQueueReceive+0x78>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <xQueueReceive+0x94>
    __asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	61bb      	str	r3, [r7, #24]
}
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xQueueReceive+0x90>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 80055a0:	f002 fe60 	bl	8008264 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055a8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <xQueueReceive+0xec>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055b0:	68b9      	ldr	r1, [r7, #8]
 80055b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055b4:	f000 f9c4 	bl	8005940 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	1e5a      	subs	r2, r3, #1
 80055bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00f      	beq.n	80055e8 <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80055c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ca:	3310      	adds	r3, #16
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 f96b 	bl	80068a8 <xTaskRemoveFromEventList>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d007      	beq.n	80055e8 <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80055d8:	4b42      	ldr	r3, [pc, #264]	@ (80056e4 <xQueueReceive+0x1d8>)
 80055da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80055e8:	f002 fe6e 	bl	80082c8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );
 80055ec:	2101      	movs	r1, #1
 80055ee:	20a4      	movs	r0, #164	@ 0xa4
 80055f0:	f004 fd28 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

                return pdPASS;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e071      	b.n	80056dc <xQueueReceive+0x1d0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d107      	bne.n	800560e <xQueueReceive+0x102>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80055fe:	f002 fe63 	bl	80082c8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 8005602:	2100      	movs	r1, #0
 8005604:	20a4      	movs	r0, #164	@ 0xa4
 8005606:	f004 fd1d 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

                    return errQUEUE_EMPTY;
 800560a:	2300      	movs	r3, #0
 800560c:	e066      	b.n	80056dc <xQueueReceive+0x1d0>
                }
                else if( xEntryTimeSet == pdFALSE )
 800560e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005610:	2b00      	cmp	r3, #0
 8005612:	d106      	bne.n	8005622 <xQueueReceive+0x116>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005614:	f107 0310 	add.w	r3, r7, #16
 8005618:	4618      	mov	r0, r3
 800561a:	f001 fa25 	bl	8006a68 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800561e:	2301      	movs	r3, #1
 8005620:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005622:	f002 fe51 	bl	80082c8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005626:	f000 fde5 	bl	80061f4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800562a:	f002 fe1b 	bl	8008264 <vPortEnterCritical>
 800562e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005630:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005634:	b25b      	sxtb	r3, r3
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d103      	bne.n	8005644 <xQueueReceive+0x138>
 800563c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005646:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800564a:	b25b      	sxtb	r3, r3
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d103      	bne.n	800565a <xQueueReceive+0x14e>
 8005652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005654:	2200      	movs	r2, #0
 8005656:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800565a:	f002 fe35 	bl	80082c8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800565e:	1d3a      	adds	r2, r7, #4
 8005660:	f107 0310 	add.w	r3, r7, #16
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f001 fa16 	bl	8006a98 <xTaskCheckForTimeOut>
 800566c:	4603      	mov	r3, r0
 800566e:	2b00      	cmp	r3, #0
 8005670:	d123      	bne.n	80056ba <xQueueReceive+0x1ae>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005672:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005674:	f000 f9dc 	bl	8005a30 <prvIsQueueEmpty>
 8005678:	4603      	mov	r3, r0
 800567a:	2b00      	cmp	r3, #0
 800567c:	d017      	beq.n	80056ae <xQueueReceive+0x1a2>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800567e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005680:	3324      	adds	r3, #36	@ 0x24
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	4611      	mov	r1, r2
 8005686:	4618      	mov	r0, r3
 8005688:	f001 f89c 	bl	80067c4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800568c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800568e:	f000 f97d 	bl	800598c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8005692:	f000 fdbd 	bl	8006210 <xTaskResumeAll>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d181      	bne.n	80055a0 <xQueueReceive+0x94>
                {
                    taskYIELD_WITHIN_API();
 800569c:	4b11      	ldr	r3, [pc, #68]	@ (80056e4 <xQueueReceive+0x1d8>)
 800569e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80056a2:	601a      	str	r2, [r3, #0]
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	f3bf 8f6f 	isb	sy
 80056ac:	e778      	b.n	80055a0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80056ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056b0:	f000 f96c 	bl	800598c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80056b4:	f000 fdac 	bl	8006210 <xTaskResumeAll>
 80056b8:	e772      	b.n	80055a0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80056ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056bc:	f000 f966 	bl	800598c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80056c0:	f000 fda6 	bl	8006210 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80056c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056c6:	f000 f9b3 	bl	8005a30 <prvIsQueueEmpty>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	f43f af67 	beq.w	80055a0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );
 80056d2:	2100      	movs	r1, #0
 80056d4:	20a4      	movs	r0, #164	@ 0xa4
 80056d6:	f004 fcb5 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

                return errQUEUE_EMPTY;
 80056da:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3730      	adds	r7, #48	@ 0x30
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}
 80056e4:	e000ed04 	.word	0xe000ed04

080056e8 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b090      	sub	sp, #64	@ 0x40
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	63bb      	str	r3, [r7, #56]	@ 0x38

    traceENTER_xQueueReceiveFromISR( xQueue, pvBuffer, pxHigherPriorityTaskWoken );

    configASSERT( pxQueue );
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10b      	bne.n	8005716 <xQueueReceiveFromISR+0x2e>
    __asm volatile
 80056fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005702:	f383 8811 	msr	BASEPRI, r3
 8005706:	f3bf 8f6f 	isb	sy
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005710:	bf00      	nop
 8005712:	bf00      	nop
 8005714:	e7fd      	b.n	8005712 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <xQueueReceiveFromISR+0x3c>
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <xQueueReceiveFromISR+0x40>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <xQueueReceiveFromISR+0x42>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <xQueueReceiveFromISR+0x5e>
    __asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	623b      	str	r3, [r7, #32]
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005746:	f002 fe79 	bl	800843c <vPortValidateInterruptPriority>
    __asm volatile
 800574a:	f3ef 8211 	mrs	r2, BASEPRI
 800574e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	61fa      	str	r2, [r7, #28]
 8005760:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8005762:	69fb      	ldr	r3, [r7, #28]

    /* MISRA Ref 4.7.1 [Return value shall be checked] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
    /* coverity[misra_c_2012_directive_4_7_violation] */
    uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005764:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576a:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800576e:	2b00      	cmp	r3, #0
 8005770:	d047      	beq.n	8005802 <xQueueReceiveFromISR+0x11a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8005772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005774:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005778:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 800577c:	68b9      	ldr	r1, [r7, #8]
 800577e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005780:	f000 f8de 	bl	8005940 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8005784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005786:	1e5a      	subs	r2, r3, #1
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 800578c:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005794:	d112      	bne.n	80057bc <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02e      	beq.n	80057fc <xQueueReceiveFromISR+0x114>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	3310      	adds	r3, #16
 80057a2:	4618      	mov	r0, r3
 80057a4:	f001 f880 	bl	80068a8 <xTaskRemoveFromEventList>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d026      	beq.n	80057fc <xQueueReceiveFromISR+0x114>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d023      	beq.n	80057fc <xQueueReceiveFromISR+0x114>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	601a      	str	r2, [r3, #0]
 80057ba:	e01f      	b.n	80057fc <xQueueReceiveFromISR+0x114>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                prvIncrementQueueRxLock( pxQueue, cRxLock );
 80057bc:	f000 fe62 	bl	8006484 <uxTaskGetNumberOfTasks>
 80057c0:	62b8      	str	r0, [r7, #40]	@ 0x28
 80057c2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d917      	bls.n	80057fc <xQueueReceiveFromISR+0x114>
 80057cc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80057d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80057d2:	d10b      	bne.n	80057ec <xQueueReceiveFromISR+0x104>
    __asm volatile
 80057d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d8:	f383 8811 	msr	BASEPRI, r3
 80057dc:	f3bf 8f6f 	isb	sy
 80057e0:	f3bf 8f4f 	dsb	sy
 80057e4:	617b      	str	r3, [r7, #20]
}
 80057e6:	bf00      	nop
 80057e8:	bf00      	nop
 80057ea:	e7fd      	b.n	80057e8 <xQueueReceiveFromISR+0x100>
 80057ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80057f0:	3301      	adds	r3, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	b25a      	sxtb	r2, r3
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 80057fc:	2301      	movs	r3, #1
 80057fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005800:	e001      	b.n	8005806 <xQueueReceiveFromISR+0x11e>
        }
        else
        {
            xReturn = pdFAIL;
 8005802:	2300      	movs	r3, #0
 8005804:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005806:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005808:	613b      	str	r3, [r7, #16]
    __asm volatile
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f383 8811 	msr	BASEPRI, r3
}
 8005810:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xQueueReceiveFromISR( xReturn );
 8005812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005814:	4619      	mov	r1, r3
 8005816:	20a7      	movs	r0, #167	@ 0xa7
 8005818:	f004 fc14 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 800581c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800581e:	4618      	mov	r0, r3
 8005820:	3740      	adds	r7, #64	@ 0x40
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <uxQueueMessagesWaiting+0x26>
    __asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	60bb      	str	r3, [r7, #8]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 800584c:	f002 fd0a 	bl	8008264 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005854:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8005856:	f002 fd37 	bl	80082c8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );
 800585a:	68f9      	ldr	r1, [r7, #12]
 800585c:	20a9      	movs	r0, #169	@ 0xa9
 800585e:	f004 fbf1 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxReturn;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005886:	2b00      	cmp	r3, #0
 8005888:	d10d      	bne.n	80058a6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d14d      	bne.n	800592e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4618      	mov	r0, r3
 8005898:	f001 fa6a 	bl	8006d70 <xTaskPriorityDisinherit>
 800589c:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2200      	movs	r2, #0
 80058a2:	609a      	str	r2, [r3, #8]
 80058a4:	e043      	b.n	800592e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d119      	bne.n	80058e0 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6858      	ldr	r0, [r3, #4]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	461a      	mov	r2, r3
 80058b6:	68b9      	ldr	r1, [r7, #8]
 80058b8:	f005 f873 	bl	800a9a2 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	685a      	ldr	r2, [r3, #4]
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d32b      	bcc.n	800592e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	605a      	str	r2, [r3, #4]
 80058de:	e026      	b.n	800592e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	68d8      	ldr	r0, [r3, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	461a      	mov	r2, r3
 80058ea:	68b9      	ldr	r1, [r7, #8]
 80058ec:	f005 f859 	bl	800a9a2 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	68da      	ldr	r2, [r3, #12]
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058f8:	425b      	negs	r3, r3
 80058fa:	441a      	add	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	429a      	cmp	r2, r3
 800590a:	d207      	bcs.n	800591c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	689a      	ldr	r2, [r3, #8]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005914:	425b      	negs	r3, r3
 8005916:	441a      	add	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b02      	cmp	r3, #2
 8005920:	d105      	bne.n	800592e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d002      	beq.n	800592e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	3b01      	subs	r3, #1
 800592c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1c5a      	adds	r2, r3, #1
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005936:	697b      	ldr	r3, [r7, #20]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b082      	sub	sp, #8
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d018      	beq.n	8005984 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68da      	ldr	r2, [r3, #12]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800595a:	441a      	add	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68da      	ldr	r2, [r3, #12]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	429a      	cmp	r2, r3
 800596a:	d303      	bcc.n	8005974 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68d9      	ldr	r1, [r3, #12]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800597c:	461a      	mov	r2, r3
 800597e:	6838      	ldr	r0, [r7, #0]
 8005980:	f005 f80f 	bl	800a9a2 <memcpy>
    }
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005994:	f002 fc66 	bl	8008264 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800599e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80059a0:	e011      	b.n	80059c6 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d012      	beq.n	80059d0 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3324      	adds	r3, #36	@ 0x24
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 ff7a 	bl	80068a8 <xTaskRemoveFromEventList>
 80059b4:	4603      	mov	r3, r0
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80059ba:	f001 f8d9 	bl	8006b70 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80059be:	7bfb      	ldrb	r3, [r7, #15]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80059c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dce9      	bgt.n	80059a2 <prvUnlockQueue+0x16>
 80059ce:	e000      	b.n	80059d2 <prvUnlockQueue+0x46>
                    break;
 80059d0:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	22ff      	movs	r2, #255	@ 0xff
 80059d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80059da:	f002 fc75 	bl	80082c8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80059de:	f002 fc41 	bl	8008264 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80059e8:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80059ea:	e011      	b.n	8005a10 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	691b      	ldr	r3, [r3, #16]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d012      	beq.n	8005a1a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3310      	adds	r3, #16
 80059f8:	4618      	mov	r0, r3
 80059fa:	f000 ff55 	bl	80068a8 <xTaskRemoveFromEventList>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005a04:	f001 f8b4 	bl	8006b70 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005a08:	7bbb      	ldrb	r3, [r7, #14]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a10:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	dce9      	bgt.n	80059ec <prvUnlockQueue+0x60>
 8005a18:	e000      	b.n	8005a1c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005a1a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	22ff      	movs	r2, #255	@ 0xff
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005a24:	f002 fc50 	bl	80082c8 <vPortExitCritical>
}
 8005a28:	bf00      	nop
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}

08005a30 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a38:	f002 fc14 	bl	8008264 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005a44:	2301      	movs	r3, #1
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	e001      	b.n	8005a4e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a4e:	f002 fc3b 	bl	80082c8 <vPortExitCritical>

    return xReturn;
 8005a52:	68fb      	ldr	r3, [r7, #12]
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005a64:	f002 fbfe 	bl	8008264 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d102      	bne.n	8005a7a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e001      	b.n	8005a7e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005a7e:	f002 fc23 	bl	80082c8 <vPortExitCritical>

    return xReturn;
 8005a82:	68fb      	ldr	r3, [r7, #12]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b086      	sub	sp, #24
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	613b      	str	r3, [r7, #16]

    traceENTER_xQueueIsQueueFullFromISR( xQueue );

    configASSERT( pxQueue );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d10b      	bne.n	8005ab6 <xQueueIsQueueFullFromISR+0x2a>
    __asm volatile
 8005a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aa2:	f383 8811 	msr	BASEPRI, r3
 8005aa6:	f3bf 8f6f 	isb	sy
 8005aaa:	f3bf 8f4f 	dsb	sy
 8005aae:	60fb      	str	r3, [r7, #12]
}
 8005ab0:	bf00      	nop
 8005ab2:	bf00      	nop
 8005ab4:	e7fd      	b.n	8005ab2 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d102      	bne.n	8005ac8 <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	617b      	str	r3, [r7, #20]
 8005ac6:	e001      	b.n	8005acc <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	617b      	str	r3, [r7, #20]
    }

    traceRETURN_xQueueIsQueueFullFromISR( xReturn );
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	4619      	mov	r1, r3
 8005ad0:	20b1      	movs	r0, #177	@ 0xb1
 8005ad2:	f004 fab7 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8005ad6:	697b      	ldr	r3, [r7, #20]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3718      	adds	r7, #24
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	613b      	str	r3, [r7, #16]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d10b      	bne.n	8005b0c <vQueueAddToRegistry+0x2c>
    __asm volatile
 8005af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005af8:	f383 8811 	msr	BASEPRI, r3
 8005afc:	f3bf 8f6f 	isb	sy
 8005b00:	f3bf 8f4f 	dsb	sy
 8005b04:	60fb      	str	r3, [r7, #12]
}
 8005b06:	bf00      	nop
 8005b08:	bf00      	nop
 8005b0a:	e7fd      	b.n	8005b08 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d024      	beq.n	8005b5c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	617b      	str	r3, [r7, #20]
 8005b16:	e01e      	b.n	8005b56 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8005b18:	4a18      	ldr	r2, [pc, #96]	@ (8005b7c <vQueueAddToRegistry+0x9c>)
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	00db      	lsls	r3, r3, #3
 8005b1e:	4413      	add	r3, r2
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	687a      	ldr	r2, [r7, #4]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d105      	bne.n	8005b34 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	00db      	lsls	r3, r3, #3
 8005b2c:	4a13      	ldr	r2, [pc, #76]	@ (8005b7c <vQueueAddToRegistry+0x9c>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
                    break;
 8005b32:	e013      	b.n	8005b5c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d10a      	bne.n	8005b50 <vQueueAddToRegistry+0x70>
 8005b3a:	4a10      	ldr	r2, [pc, #64]	@ (8005b7c <vQueueAddToRegistry+0x9c>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d104      	bne.n	8005b50 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8005b7c <vQueueAddToRegistry+0x9c>)
 8005b4c:	4413      	add	r3, r2
 8005b4e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	3301      	adds	r3, #1
 8005b54:	617b      	str	r3, [r7, #20]
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	2b07      	cmp	r3, #7
 8005b5a:	d9dd      	bls.n	8005b18 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <vQueueAddToRegistry+0x8e>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
 8005b6e:	20b6      	movs	r0, #182	@ 0xb6
 8005b70:	f004 fa2c 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
    }
 8005b74:	bf00      	nop
 8005b76:	3718      	adds	r7, #24
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	200001e8 	.word	0x200001e8

08005b80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005b90:	f002 fb68 	bl	8008264 <vPortEnterCritical>
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b9a:	b25b      	sxtb	r3, r3
 8005b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba0:	d103      	bne.n	8005baa <vQueueWaitForMessageRestricted+0x2a>
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005bb0:	b25b      	sxtb	r3, r3
 8005bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb6:	d103      	bne.n	8005bc0 <vQueueWaitForMessageRestricted+0x40>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005bc0:	f002 fb82 	bl	80082c8 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d106      	bne.n	8005bda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	3324      	adds	r3, #36	@ 0x24
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	68b9      	ldr	r1, [r7, #8]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 fe1d 	bl	8006814 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005bda:	6978      	ldr	r0, [r7, #20]
 8005bdc:	f7ff fed6 	bl	800598c <prvUnlockQueue>

        traceRETURN_vQueueWaitForMessageRestricted();
 8005be0:	20b9      	movs	r0, #185	@ 0xb9
 8005be2:	f004 f9f3 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
    }
 8005be6:	bf00      	nop
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b08e      	sub	sp, #56	@ 0x38
 8005bf2:	af04      	add	r7, sp, #16
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	607a      	str	r2, [r7, #4]
 8005bfa:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8005bfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10b      	bne.n	8005c1a <prvCreateStaticTask+0x2c>
    __asm volatile
 8005c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c06:	f383 8811 	msr	BASEPRI, r3
 8005c0a:	f3bf 8f6f 	isb	sy
 8005c0e:	f3bf 8f4f 	dsb	sy
 8005c12:	623b      	str	r3, [r7, #32]
}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	e7fd      	b.n	8005c16 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d10b      	bne.n	8005c38 <prvCreateStaticTask+0x4a>
    __asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	61fb      	str	r3, [r7, #28]
}
 8005c32:	bf00      	nop
 8005c34:	bf00      	nop
 8005c36:	e7fd      	b.n	8005c34 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8005c38:	2358      	movs	r3, #88	@ 0x58
 8005c3a:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2b58      	cmp	r3, #88	@ 0x58
 8005c40:	d00b      	beq.n	8005c5a <prvCreateStaticTask+0x6c>
    __asm volatile
 8005c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c46:	f383 8811 	msr	BASEPRI, r3
 8005c4a:	f3bf 8f6f 	isb	sy
 8005c4e:	f3bf 8f4f 	dsb	sy
 8005c52:	61bb      	str	r3, [r7, #24]
}
 8005c54:	bf00      	nop
 8005c56:	bf00      	nop
 8005c58:	e7fd      	b.n	8005c56 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8005c5a:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d01f      	beq.n	8005ca2 <prvCreateStaticTask+0xb4>
 8005c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d01c      	beq.n	8005ca2 <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8005c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005c6c:	2258      	movs	r2, #88	@ 0x58
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c72:	f004 fe2c 	bl	800a8ce <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c84:	2300      	movs	r3, #0
 8005c86:	9303      	str	r3, [sp, #12]
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	9302      	str	r3, [sp, #8]
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8e:	9301      	str	r3, [sp, #4]
 8005c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c92:	9300      	str	r3, [sp, #0]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	68b9      	ldr	r1, [r7, #8]
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f000 f89d 	bl	8005dda <prvInitialiseNewTask>
 8005ca0:	e001      	b.n	8005ca6 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3728      	adds	r7, #40	@ 0x28
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b08a      	sub	sp, #40	@ 0x28
 8005cb4:	af04      	add	r7, sp, #16
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 8005cc2:	f107 0310 	add.w	r3, r7, #16
 8005cc6:	9303      	str	r3, [sp, #12]
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	9302      	str	r3, [sp, #8]
 8005ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cce:	9301      	str	r3, [sp, #4]
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	9300      	str	r3, [sp, #0]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	68b9      	ldr	r1, [r7, #8]
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f7ff ff87 	bl	8005bee <prvCreateStaticTask>
 8005ce0:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005ce8:	6978      	ldr	r0, [r7, #20]
 8005cea:	f000 f907 	bl	8005efc <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f004 fb41 	bl	800a378 <SEGGER_SYSVIEW_ShrinkId>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	20bf      	movs	r0, #191	@ 0xbf
 8005cfc:	f004 f9a2 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8005d00:	693b      	ldr	r3, [r7, #16]
    }
 8005d02:	4618      	mov	r0, r3
 8005d04:	3718      	adds	r7, #24
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}

08005d0a <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8005d0a:	b580      	push	{r7, lr}
 8005d0c:	b08a      	sub	sp, #40	@ 0x28
 8005d0e:	af04      	add	r7, sp, #16
 8005d10:	60f8      	str	r0, [r7, #12]
 8005d12:	60b9      	str	r1, [r7, #8]
 8005d14:	607a      	str	r2, [r7, #4]
 8005d16:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f002 fbcf 	bl	80084c0 <pvPortMalloc>
 8005d22:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d013      	beq.n	8005d52 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8005d2a:	2058      	movs	r0, #88	@ 0x58
 8005d2c:	f002 fbc8 	bl	80084c0 <pvPortMalloc>
 8005d30:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d008      	beq.n	8005d4a <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8005d38:	2258      	movs	r2, #88	@ 0x58
 8005d3a:	2100      	movs	r1, #0
 8005d3c:	6978      	ldr	r0, [r7, #20]
 8005d3e:	f004 fdc6 	bl	800a8ce <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	693a      	ldr	r2, [r7, #16]
 8005d46:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d48:	e005      	b.n	8005d56 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8005d4a:	6938      	ldr	r0, [r7, #16]
 8005d4c:	f002 fcea 	bl	8008724 <vPortFree>
 8005d50:	e001      	b.n	8005d56 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d64:	2300      	movs	r3, #0
 8005d66:	9303      	str	r3, [sp, #12]
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	9302      	str	r3, [sp, #8]
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6e:	9301      	str	r3, [sp, #4]
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	68b9      	ldr	r1, [r7, #8]
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 f82d 	bl	8005dda <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8005d80:	697b      	ldr	r3, [r7, #20]
    }
 8005d82:	4618      	mov	r0, r3
 8005d84:	3718      	adds	r7, #24
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b088      	sub	sp, #32
 8005d8e:	af02      	add	r7, sp, #8
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
 8005d96:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8005d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d9a:	9301      	str	r3, [sp, #4]
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	9300      	str	r3, [sp, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	68b9      	ldr	r1, [r7, #8]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff ffaf 	bl	8005d0a <prvCreateTask>
 8005dac:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d005      	beq.n	8005dc0 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8005db4:	6938      	ldr	r0, [r7, #16]
 8005db6:	f000 f8a1 	bl	8005efc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	617b      	str	r3, [r7, #20]
 8005dbe:	e002      	b.n	8005dc6 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc4:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	4619      	mov	r1, r3
 8005dca:	20c2      	movs	r0, #194	@ 0xc2
 8005dcc:	f004 f93a 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8005dd0:	697b      	ldr	r3, [r7, #20]
    }
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3718      	adds	r7, #24
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b088      	sub	sp, #32
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	60f8      	str	r0, [r7, #12]
 8005de2:	60b9      	str	r1, [r7, #8]
 8005de4:	607a      	str	r2, [r7, #4]
 8005de6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8005de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dea:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	461a      	mov	r2, r3
 8005df2:	21a5      	movs	r1, #165	@ 0xa5
 8005df4:	f004 fd6b 	bl	800a8ce <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e02:	3b01      	subs	r3, #1
 8005e04:	009b      	lsls	r3, r3, #2
 8005e06:	4413      	add	r3, r2
 8005e08:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	f023 0307 	bic.w	r3, r3, #7
 8005e10:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8005e12:	69bb      	ldr	r3, [r7, #24]
 8005e14:	f003 0307 	and.w	r3, r3, #7
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	617b      	str	r3, [r7, #20]
}
 8005e2e:	bf00      	nop
 8005e30:	bf00      	nop
 8005e32:	e7fd      	b.n	8005e30 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d01e      	beq.n	8005e78 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	61fb      	str	r3, [r7, #28]
 8005e3e:	e012      	b.n	8005e66 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	4413      	add	r3, r2
 8005e46:	7819      	ldrb	r1, [r3, #0]
 8005e48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	3334      	adds	r3, #52	@ 0x34
 8005e50:	460a      	mov	r2, r1
 8005e52:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005e54:	68ba      	ldr	r2, [r7, #8]
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d006      	beq.n	8005e6e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	3301      	adds	r3, #1
 8005e64:	61fb      	str	r3, [r7, #28]
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	2b09      	cmp	r3, #9
 8005e6a:	d9e9      	bls.n	8005e40 <prvInitialiseNewTask+0x66>
 8005e6c:	e000      	b.n	8005e70 <prvInitialiseNewTask+0x96>
            {
                break;
 8005e6e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8005e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	d90b      	bls.n	8005e96 <prvInitialiseNewTask+0xbc>
    __asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e82:	f383 8811 	msr	BASEPRI, r3
 8005e86:	f3bf 8f6f 	isb	sy
 8005e8a:	f3bf 8f4f 	dsb	sy
 8005e8e:	613b      	str	r3, [r7, #16]
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	e7fd      	b.n	8005e92 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d901      	bls.n	8005ea0 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005eaa:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe ff67 	bl	8004d84 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb8:	3318      	adds	r3, #24
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fe ff62 	bl	8004d84 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec4:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8005ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec8:	f1c3 0205 	rsb	r2, r3, #5
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed4:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005ed6:	683a      	ldr	r2, [r7, #0]
 8005ed8:	68f9      	ldr	r1, [r7, #12]
 8005eda:	69b8      	ldr	r0, [r7, #24]
 8005edc:	f001 ffc4 	bl	8007e68 <pxPortInitialiseStack>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ee4:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8005ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005ef2:	bf00      	nop
 8005ef4:	3720      	adds	r7, #32
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
	...

08005efc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8005efc:	b5b0      	push	{r4, r5, r7, lr}
 8005efe:	b086      	sub	sp, #24
 8005f00:	af02      	add	r7, sp, #8
 8005f02:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8005f04:	f002 f9ae 	bl	8008264 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8005f08:	4b50      	ldr	r3, [pc, #320]	@ (800604c <prvAddNewTaskToReadyList+0x150>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3301      	adds	r3, #1
 8005f0e:	4a4f      	ldr	r2, [pc, #316]	@ (800604c <prvAddNewTaskToReadyList+0x150>)
 8005f10:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 8005f12:	4b4f      	ldr	r3, [pc, #316]	@ (8006050 <prvAddNewTaskToReadyList+0x154>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d109      	bne.n	8005f2e <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8005f1a:	4a4d      	ldr	r2, [pc, #308]	@ (8006050 <prvAddNewTaskToReadyList+0x154>)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f20:	4b4a      	ldr	r3, [pc, #296]	@ (800604c <prvAddNewTaskToReadyList+0x150>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d110      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8005f28:	f000 fe46 	bl	8006bb8 <prvInitialiseTaskLists>
 8005f2c:	e00d      	b.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 8005f2e:	4b49      	ldr	r3, [pc, #292]	@ (8006054 <prvAddNewTaskToReadyList+0x158>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d109      	bne.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f36:	4b46      	ldr	r3, [pc, #280]	@ (8006050 <prvAddNewTaskToReadyList+0x154>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d802      	bhi.n	8005f4a <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8005f44:	4a42      	ldr	r2, [pc, #264]	@ (8006050 <prvAddNewTaskToReadyList+0x154>)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8005f4a:	4b43      	ldr	r3, [pc, #268]	@ (8006058 <prvAddNewTaskToReadyList+0x15c>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	4a41      	ldr	r2, [pc, #260]	@ (8006058 <prvAddNewTaskToReadyList+0x15c>)
 8005f52:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f54:	4b40      	ldr	r3, [pc, #256]	@ (8006058 <prvAddNewTaskToReadyList+0x15c>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d016      	beq.n	8005f90 <prvAddNewTaskToReadyList+0x94>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4618      	mov	r0, r3
 8005f66:	f004 f8e1 	bl	800a12c <SEGGER_SYSVIEW_OnTaskCreate>
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f7a:	461d      	mov	r5, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	461c      	mov	r4, r3
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f86:	1ae3      	subs	r3, r4, r3
 8005f88:	9300      	str	r3, [sp, #0]
 8005f8a:	462b      	mov	r3, r5
 8005f8c:	f002 fdc8 	bl	8008b20 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4618      	mov	r0, r3
 8005f94:	f004 f94e 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	409a      	lsls	r2, r3
 8005fa0:	4b2e      	ldr	r3, [pc, #184]	@ (800605c <prvAddNewTaskToReadyList+0x160>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	4a2d      	ldr	r2, [pc, #180]	@ (800605c <prvAddNewTaskToReadyList+0x160>)
 8005fa8:	6013      	str	r3, [r2, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fae:	492c      	ldr	r1, [pc, #176]	@ (8006060 <prvAddNewTaskToReadyList+0x164>)
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	3304      	adds	r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	60fb      	str	r3, [r7, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	689a      	ldr	r2, [r3, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	60da      	str	r2, [r3, #12]
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	3204      	adds	r2, #4
 8005fd6:	605a      	str	r2, [r3, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	609a      	str	r2, [r3, #8]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	4413      	add	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4a1c      	ldr	r2, [pc, #112]	@ (8006060 <prvAddNewTaskToReadyList+0x164>)
 8005fee:	441a      	add	r2, r3
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	615a      	str	r2, [r3, #20]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ff8:	4919      	ldr	r1, [pc, #100]	@ (8006060 <prvAddNewTaskToReadyList+0x164>)
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	440b      	add	r3, r1
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800600a:	1c59      	adds	r1, r3, #1
 800600c:	4814      	ldr	r0, [pc, #80]	@ (8006060 <prvAddNewTaskToReadyList+0x164>)
 800600e:	4613      	mov	r3, r2
 8006010:	009b      	lsls	r3, r3, #2
 8006012:	4413      	add	r3, r2
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	4403      	add	r3, r0
 8006018:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 800601a:	f002 f955 	bl	80082c8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800601e:	4b0d      	ldr	r3, [pc, #52]	@ (8006054 <prvAddNewTaskToReadyList+0x158>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8006026:	4b0a      	ldr	r3, [pc, #40]	@ (8006050 <prvAddNewTaskToReadyList+0x154>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006030:	429a      	cmp	r2, r3
 8006032:	d207      	bcs.n	8006044 <prvAddNewTaskToReadyList+0x148>
 8006034:	4b0b      	ldr	r3, [pc, #44]	@ (8006064 <prvAddNewTaskToReadyList+0x168>)
 8006036:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	f3bf 8f4f 	dsb	sy
 8006040:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8006044:	bf00      	nop
 8006046:	3710      	adds	r7, #16
 8006048:	46bd      	mov	sp, r7
 800604a:	bdb0      	pop	{r4, r5, r7, pc}
 800604c:	20000300 	.word	0x20000300
 8006050:	20000228 	.word	0x20000228
 8006054:	2000030c 	.word	0x2000030c
 8006058:	2000031c 	.word	0x2000031c
 800605c:	20000308 	.word	0x20000308
 8006060:	2000022c 	.word	0x2000022c
 8006064:	e000ed04 	.word	0xe000ed04

08006068 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08e      	sub	sp, #56	@ 0x38
 800606c:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 800606e:	2301      	movs	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8006072:	2300      	movs	r3, #0
 8006074:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8006076:	2300      	movs	r3, #0
 8006078:	61fb      	str	r3, [r7, #28]
 800607a:	e013      	b.n	80060a4 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 800607c:	4a2b      	ldr	r2, [pc, #172]	@ (800612c <prvCreateIdleTasks+0xc4>)
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	4413      	add	r3, r2
 8006082:	7819      	ldrb	r1, [r3, #0]
 8006084:	f107 020c 	add.w	r2, r7, #12
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	4413      	add	r3, r2
 800608c:	460a      	mov	r2, r1
 800608e:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8006090:	f107 020c 	add.w	r2, r7, #12
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	4413      	add	r3, r2
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d006      	beq.n	80060ac <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b09      	cmp	r3, #9
 80060a8:	dde8      	ble.n	800607c <prvCreateIdleTasks+0x14>
 80060aa:	e000      	b.n	80060ae <prvCreateIdleTasks+0x46>
        {
            break;
 80060ac:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80060ae:	2300      	movs	r3, #0
 80060b0:	623b      	str	r3, [r7, #32]
 80060b2:	e030      	b.n	8006116 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 80060b4:	4b1e      	ldr	r3, [pc, #120]	@ (8006130 <prvCreateIdleTasks+0xc8>)
 80060b6:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 80060b8:	2300      	movs	r3, #0
 80060ba:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 80060bc:	2300      	movs	r3, #0
 80060be:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 80060c0:	463a      	mov	r2, r7
 80060c2:	1d39      	adds	r1, r7, #4
 80060c4:	f107 0308 	add.w	r3, r7, #8
 80060c8:	4618      	mov	r0, r3
 80060ca:	f001 fac7 	bl	800765c <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 80060ce:	6838      	ldr	r0, [r7, #0]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	f107 010c 	add.w	r1, r7, #12
 80060d8:	9202      	str	r2, [sp, #8]
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	2300      	movs	r3, #0
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	2300      	movs	r3, #0
 80060e2:	4602      	mov	r2, r0
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f7ff fde3 	bl	8005cb0 <xTaskCreateStatic>
 80060ea:	4602      	mov	r2, r0
 80060ec:	4911      	ldr	r1, [pc, #68]	@ (8006134 <prvCreateIdleTasks+0xcc>)
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 80060f4:	4a0f      	ldr	r2, [pc, #60]	@ (8006134 <prvCreateIdleTasks+0xcc>)
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d002      	beq.n	8006106 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8006100:	2301      	movs	r3, #1
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	e001      	b.n	800610a <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8006106:	2300      	movs	r3, #0
 8006108:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800610a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800610c:	2b00      	cmp	r3, #0
 800610e:	d006      	beq.n	800611e <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	3301      	adds	r3, #1
 8006114:	623b      	str	r3, [r7, #32]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	ddcb      	ble.n	80060b4 <prvCreateIdleTasks+0x4c>
 800611c:	e000      	b.n	8006120 <prvCreateIdleTasks+0xb8>
        {
            break;
 800611e:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8006120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006122:	4618      	mov	r0, r3
 8006124:	3728      	adds	r7, #40	@ 0x28
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	0800bc94 	.word	0x0800bc94
 8006130:	08006b89 	.word	0x08006b89
 8006134:	20000324 	.word	0x20000324

08006138 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800613e:	f7ff ff93 	bl	8006068 <prvCreateIdleTasks>
 8006142:	60f8      	str	r0, [r7, #12]

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d102      	bne.n	8006150 <vTaskStartScheduler+0x18>
        {
            xReturn = xTimerCreateTimerTask();
 800614a:	f001 fabb 	bl	80076c4 <xTimerCreateTimerTask>
 800614e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d129      	bne.n	80061aa <vTaskStartScheduler+0x72>
    __asm volatile
 8006156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615a:	f383 8811 	msr	BASEPRI, r3
 800615e:	f3bf 8f6f 	isb	sy
 8006162:	f3bf 8f4f 	dsb	sy
 8006166:	60bb      	str	r3, [r7, #8]
}
 8006168:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800616a:	4b1c      	ldr	r3, [pc, #112]	@ (80061dc <vTaskStartScheduler+0xa4>)
 800616c:	f04f 32ff 	mov.w	r2, #4294967295
 8006170:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8006172:	4b1b      	ldr	r3, [pc, #108]	@ (80061e0 <vTaskStartScheduler+0xa8>)
 8006174:	2201      	movs	r2, #1
 8006176:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006178:	4b1a      	ldr	r3, [pc, #104]	@ (80061e4 <vTaskStartScheduler+0xac>)
 800617a:	2200      	movs	r2, #0
 800617c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800617e:	4b1a      	ldr	r3, [pc, #104]	@ (80061e8 <vTaskStartScheduler+0xb0>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	3334      	adds	r3, #52	@ 0x34
 8006184:	2205      	movs	r2, #5
 8006186:	4919      	ldr	r1, [pc, #100]	@ (80061ec <vTaskStartScheduler+0xb4>)
 8006188:	4618      	mov	r0, r3
 800618a:	f004 fb90 	bl	800a8ae <memcmp>
 800618e:	4603      	mov	r3, r0
 8006190:	2b00      	cmp	r3, #0
 8006192:	d005      	beq.n	80061a0 <vTaskStartScheduler+0x68>
 8006194:	4b14      	ldr	r3, [pc, #80]	@ (80061e8 <vTaskStartScheduler+0xb0>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4618      	mov	r0, r3
 800619a:	f004 f809 	bl	800a1b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 800619e:	e001      	b.n	80061a4 <vTaskStartScheduler+0x6c>
 80061a0:	f003 ffa8 	bl	800a0f4 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80061a4:	f001 feee 	bl	8007f84 <xPortStartScheduler>
 80061a8:	e00f      	b.n	80061ca <vTaskStartScheduler+0x92>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d10b      	bne.n	80061ca <vTaskStartScheduler+0x92>
    __asm volatile
 80061b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b6:	f383 8811 	msr	BASEPRI, r3
 80061ba:	f3bf 8f6f 	isb	sy
 80061be:	f3bf 8f4f 	dsb	sy
 80061c2:	607b      	str	r3, [r7, #4]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <vTaskStartScheduler+0x8e>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80061ca:	4b09      	ldr	r3, [pc, #36]	@ (80061f0 <vTaskStartScheduler+0xb8>)
 80061cc:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 80061ce:	20cd      	movs	r0, #205	@ 0xcd
 80061d0:	f003 fefc 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000320 	.word	0x20000320
 80061e0:	2000030c 	.word	0x2000030c
 80061e4:	20000304 	.word	0x20000304
 80061e8:	20000228 	.word	0x20000228
 80061ec:	0800bc94 	.word	0x0800bc94
 80061f0:	20000020 	.word	0x20000020

080061f4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 80061f8:	4b04      	ldr	r3, [pc, #16]	@ (800620c <vTaskSuspendAll+0x18>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	3301      	adds	r3, #1
 80061fe:	4a03      	ldr	r2, [pc, #12]	@ (800620c <vTaskSuspendAll+0x18>)
 8006200:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8006202:	20cf      	movs	r0, #207	@ 0xcf
 8006204:	f003 fee2 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8006208:	bf00      	nop
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20000328 	.word	0x20000328

08006210 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b088      	sub	sp, #32
 8006214:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8006216:	2300      	movs	r3, #0
 8006218:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800621e:	f002 f821 	bl	8008264 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8006222:	2300      	movs	r3, #0
 8006224:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8006226:	4b7a      	ldr	r3, [pc, #488]	@ (8006410 <xTaskResumeAll+0x200>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10b      	bne.n	8006246 <xTaskResumeAll+0x36>
    __asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	603b      	str	r3, [r7, #0]
}
 8006240:	bf00      	nop
 8006242:	bf00      	nop
 8006244:	e7fd      	b.n	8006242 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8006246:	4b72      	ldr	r3, [pc, #456]	@ (8006410 <xTaskResumeAll+0x200>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	3b01      	subs	r3, #1
 800624c:	4a70      	ldr	r2, [pc, #448]	@ (8006410 <xTaskResumeAll+0x200>)
 800624e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006250:	4b6f      	ldr	r3, [pc, #444]	@ (8006410 <xTaskResumeAll+0x200>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2b00      	cmp	r3, #0
 8006256:	f040 80ce 	bne.w	80063f6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800625a:	4b6e      	ldr	r3, [pc, #440]	@ (8006414 <xTaskResumeAll+0x204>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80c9 	beq.w	80063f6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006264:	e092      	b.n	800638c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006266:	4b6c      	ldr	r3, [pc, #432]	@ (8006418 <xTaskResumeAll+0x208>)
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	69db      	ldr	r3, [r3, #28]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	6a12      	ldr	r2, [r2, #32]
 800627c:	609a      	str	r2, [r3, #8]
 800627e:	69fb      	ldr	r3, [r7, #28]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	69d2      	ldr	r2, [r2, #28]
 8006286:	605a      	str	r2, [r3, #4]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	685a      	ldr	r2, [r3, #4]
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	3318      	adds	r3, #24
 8006290:	429a      	cmp	r2, r3
 8006292:	d103      	bne.n	800629c <xTaskResumeAll+0x8c>
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	6a1a      	ldr	r2, [r3, #32]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	605a      	str	r2, [r3, #4]
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	2200      	movs	r2, #0
 80062a0:	629a      	str	r2, [r3, #40]	@ 0x28
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	1e5a      	subs	r2, r3, #1
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	60bb      	str	r3, [r7, #8]
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	69fa      	ldr	r2, [r7, #28]
 80062b8:	68d2      	ldr	r2, [r2, #12]
 80062ba:	609a      	str	r2, [r3, #8]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	6892      	ldr	r2, [r2, #8]
 80062c4:	605a      	str	r2, [r3, #4]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	685a      	ldr	r2, [r3, #4]
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	3304      	adds	r3, #4
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d103      	bne.n	80062da <xTaskResumeAll+0xca>
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	605a      	str	r2, [r3, #4]
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	2200      	movs	r2, #0
 80062de:	615a      	str	r2, [r3, #20]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	1e5a      	subs	r2, r3, #1
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	4618      	mov	r0, r3
 80062ee:	f003 ffa1 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	2201      	movs	r2, #1
 80062f8:	409a      	lsls	r2, r3
 80062fa:	4b48      	ldr	r3, [pc, #288]	@ (800641c <xTaskResumeAll+0x20c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4313      	orrs	r3, r2
 8006300:	4a46      	ldr	r2, [pc, #280]	@ (800641c <xTaskResumeAll+0x20c>)
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4945      	ldr	r1, [pc, #276]	@ (8006420 <xTaskResumeAll+0x210>)
 800630a:	4613      	mov	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	4413      	add	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	440b      	add	r3, r1
 8006314:	3304      	adds	r3, #4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	607b      	str	r3, [r7, #4]
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	687a      	ldr	r2, [r7, #4]
 800631e:	609a      	str	r2, [r3, #8]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689a      	ldr	r2, [r3, #8]
 8006324:	69fb      	ldr	r3, [r7, #28]
 8006326:	60da      	str	r2, [r3, #12]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	69fa      	ldr	r2, [r7, #28]
 800632e:	3204      	adds	r2, #4
 8006330:	605a      	str	r2, [r3, #4]
 8006332:	69fb      	ldr	r3, [r7, #28]
 8006334:	1d1a      	adds	r2, r3, #4
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	609a      	str	r2, [r3, #8]
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	009b      	lsls	r3, r3, #2
 8006346:	4a36      	ldr	r2, [pc, #216]	@ (8006420 <xTaskResumeAll+0x210>)
 8006348:	441a      	add	r2, r3
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	615a      	str	r2, [r3, #20]
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006352:	4933      	ldr	r1, [pc, #204]	@ (8006420 <xTaskResumeAll+0x210>)
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	440b      	add	r3, r1
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006364:	1c59      	adds	r1, r3, #1
 8006366:	482e      	ldr	r0, [pc, #184]	@ (8006420 <xTaskResumeAll+0x210>)
 8006368:	4613      	mov	r3, r2
 800636a:	009b      	lsls	r3, r3, #2
 800636c:	4413      	add	r3, r2
 800636e:	009b      	lsls	r3, r3, #2
 8006370:	4403      	add	r3, r0
 8006372:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006378:	4b2a      	ldr	r3, [pc, #168]	@ (8006424 <xTaskResumeAll+0x214>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800637e:	429a      	cmp	r2, r3
 8006380:	d904      	bls.n	800638c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8006382:	4a29      	ldr	r2, [pc, #164]	@ (8006428 <xTaskResumeAll+0x218>)
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	2101      	movs	r1, #1
 8006388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800638c:	4b22      	ldr	r3, [pc, #136]	@ (8006418 <xTaskResumeAll+0x208>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f47f af68 	bne.w	8006266 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d001      	beq.n	80063a0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 800639c:	f000 fcaa 	bl	8006cf4 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80063a0:	4b22      	ldr	r3, [pc, #136]	@ (800642c <xTaskResumeAll+0x21c>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d012      	beq.n	80063d2 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80063ac:	f000 f878 	bl	80064a0 <xTaskIncrementTick>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d004      	beq.n	80063c0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80063b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006428 <xTaskResumeAll+0x218>)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2101      	movs	r1, #1
 80063bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	3b01      	subs	r3, #1
 80063c4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ef      	bne.n	80063ac <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 80063cc:	4b17      	ldr	r3, [pc, #92]	@ (800642c <xTaskResumeAll+0x21c>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 80063d2:	4a15      	ldr	r2, [pc, #84]	@ (8006428 <xTaskResumeAll+0x218>)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d00b      	beq.n	80063f6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80063de:	2301      	movs	r3, #1
 80063e0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 80063e2:	4b10      	ldr	r3, [pc, #64]	@ (8006424 <xTaskResumeAll+0x214>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	4b12      	ldr	r3, [pc, #72]	@ (8006430 <xTaskResumeAll+0x220>)
 80063e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ec:	601a      	str	r2, [r3, #0]
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80063f6:	f001 ff67 	bl	80082c8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	4619      	mov	r1, r3
 80063fe:	20d0      	movs	r0, #208	@ 0xd0
 8006400:	f003 fe20 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8006404:	69bb      	ldr	r3, [r7, #24]
}
 8006406:	4618      	mov	r0, r3
 8006408:	3720      	adds	r7, #32
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	20000328 	.word	0x20000328
 8006414:	20000300 	.word	0x20000300
 8006418:	200002c0 	.word	0x200002c0
 800641c:	20000308 	.word	0x20000308
 8006420:	2000022c 	.word	0x2000022c
 8006424:	20000228 	.word	0x20000228
 8006428:	20000314 	.word	0x20000314
 800642c:	20000310 	.word	0x20000310
 8006430:	e000ed04 	.word	0xe000ed04

08006434 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800643a:	4b06      	ldr	r3, [pc, #24]	@ (8006454 <xTaskGetTickCount+0x20>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );
 8006440:	6879      	ldr	r1, [r7, #4]
 8006442:	20d1      	movs	r0, #209	@ 0xd1
 8006444:	f003 fdfe 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xTicks;
 8006448:	687b      	ldr	r3, [r7, #4]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	20000304 	.word	0x20000304

08006458 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800645e:	f001 ffed 	bl	800843c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8006462:	2300      	movs	r3, #0
 8006464:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8006466:	4b06      	ldr	r3, [pc, #24]	@ (8006480 <xTaskGetTickCountFromISR+0x28>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 800646c:	6839      	ldr	r1, [r7, #0]
 800646e:	20d2      	movs	r0, #210	@ 0xd2
 8006470:	f003 fde8 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8006474:	683b      	ldr	r3, [r7, #0]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	20000304 	.word	0x20000304

08006484 <uxTaskGetNumberOfTasks>:
/*-----------------------------------------------------------*/

UBaseType_t uxTaskGetNumberOfTasks( void )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	af00      	add	r7, sp, #0
    traceENTER_uxTaskGetNumberOfTasks();

    /* A critical section is not required because the variables are of type
     * BaseType_t. */
    traceRETURN_uxTaskGetNumberOfTasks( uxCurrentNumberOfTasks );
 8006488:	4b04      	ldr	r3, [pc, #16]	@ (800649c <uxTaskGetNumberOfTasks+0x18>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4619      	mov	r1, r3
 800648e:	20d3      	movs	r0, #211	@ 0xd3
 8006490:	f003 fdd8 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return uxCurrentNumberOfTasks;
 8006494:	4b01      	ldr	r3, [pc, #4]	@ (800649c <uxTaskGetNumberOfTasks+0x18>)
 8006496:	681b      	ldr	r3, [r3, #0]
}
 8006498:	4618      	mov	r0, r3
 800649a:	bd80      	pop	{r7, pc}
 800649c:	20000300 	.word	0x20000300

080064a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80064a6:	2300      	movs	r3, #0
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80064aa:	4b83      	ldr	r3, [pc, #524]	@ (80066b8 <xTaskIncrementTick+0x218>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 80f3 	bne.w	800669a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064b4:	4b81      	ldr	r3, [pc, #516]	@ (80066bc <xTaskIncrementTick+0x21c>)
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	3301      	adds	r3, #1
 80064ba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80064bc:	4a7f      	ldr	r2, [pc, #508]	@ (80066bc <xTaskIncrementTick+0x21c>)
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d121      	bne.n	800650c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 80064c8:	4b7d      	ldr	r3, [pc, #500]	@ (80066c0 <xTaskIncrementTick+0x220>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d00b      	beq.n	80064ea <xTaskIncrementTick+0x4a>
    __asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	607b      	str	r3, [r7, #4]
}
 80064e4:	bf00      	nop
 80064e6:	bf00      	nop
 80064e8:	e7fd      	b.n	80064e6 <xTaskIncrementTick+0x46>
 80064ea:	4b75      	ldr	r3, [pc, #468]	@ (80066c0 <xTaskIncrementTick+0x220>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	4b74      	ldr	r3, [pc, #464]	@ (80066c4 <xTaskIncrementTick+0x224>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a72      	ldr	r2, [pc, #456]	@ (80066c0 <xTaskIncrementTick+0x220>)
 80064f6:	6013      	str	r3, [r2, #0]
 80064f8:	4a72      	ldr	r2, [pc, #456]	@ (80066c4 <xTaskIncrementTick+0x224>)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	4b72      	ldr	r3, [pc, #456]	@ (80066c8 <xTaskIncrementTick+0x228>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	3301      	adds	r3, #1
 8006504:	4a70      	ldr	r2, [pc, #448]	@ (80066c8 <xTaskIncrementTick+0x228>)
 8006506:	6013      	str	r3, [r2, #0]
 8006508:	f000 fbf4 	bl	8006cf4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800650c:	4b6f      	ldr	r3, [pc, #444]	@ (80066cc <xTaskIncrementTick+0x22c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6a3a      	ldr	r2, [r7, #32]
 8006512:	429a      	cmp	r2, r3
 8006514:	f0c0 80ac 	bcc.w	8006670 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006518:	4b69      	ldr	r3, [pc, #420]	@ (80066c0 <xTaskIncrementTick+0x220>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d104      	bne.n	800652c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8006522:	4b6a      	ldr	r3, [pc, #424]	@ (80066cc <xTaskIncrementTick+0x22c>)
 8006524:	f04f 32ff 	mov.w	r2, #4294967295
 8006528:	601a      	str	r2, [r3, #0]
                    break;
 800652a:	e0a1      	b.n	8006670 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800652c:	4b64      	ldr	r3, [pc, #400]	@ (80066c0 <xTaskIncrementTick+0x220>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68db      	ldr	r3, [r3, #12]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800653c:	6a3a      	ldr	r2, [r7, #32]
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	429a      	cmp	r2, r3
 8006542:	d203      	bcs.n	800654c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8006544:	4a61      	ldr	r2, [pc, #388]	@ (80066cc <xTaskIncrementTick+0x22c>)
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6013      	str	r3, [r2, #0]
                        break;
 800654a:	e091      	b.n	8006670 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	613b      	str	r3, [r7, #16]
 8006552:	69bb      	ldr	r3, [r7, #24]
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	69ba      	ldr	r2, [r7, #24]
 8006558:	68d2      	ldr	r2, [r2, #12]
 800655a:	609a      	str	r2, [r3, #8]
 800655c:	69bb      	ldr	r3, [r7, #24]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	6892      	ldr	r2, [r2, #8]
 8006564:	605a      	str	r2, [r3, #4]
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	3304      	adds	r3, #4
 800656e:	429a      	cmp	r2, r3
 8006570:	d103      	bne.n	800657a <xTaskIncrementTick+0xda>
 8006572:	69bb      	ldr	r3, [r7, #24]
 8006574:	68da      	ldr	r2, [r3, #12]
 8006576:	693b      	ldr	r3, [r7, #16]
 8006578:	605a      	str	r2, [r3, #4]
 800657a:	69bb      	ldr	r3, [r7, #24]
 800657c:	2200      	movs	r2, #0
 800657e:	615a      	str	r2, [r3, #20]
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	1e5a      	subs	r2, r3, #1
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d01e      	beq.n	80065d0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006596:	60fb      	str	r3, [r7, #12]
 8006598:	69bb      	ldr	r3, [r7, #24]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	69ba      	ldr	r2, [r7, #24]
 800659e:	6a12      	ldr	r2, [r2, #32]
 80065a0:	609a      	str	r2, [r3, #8]
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	69d2      	ldr	r2, [r2, #28]
 80065aa:	605a      	str	r2, [r3, #4]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	685a      	ldr	r2, [r3, #4]
 80065b0:	69bb      	ldr	r3, [r7, #24]
 80065b2:	3318      	adds	r3, #24
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d103      	bne.n	80065c0 <xTaskIncrementTick+0x120>
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	6a1a      	ldr	r2, [r3, #32]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	605a      	str	r2, [r3, #4]
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	2200      	movs	r2, #0
 80065c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	1e5a      	subs	r2, r3, #1
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4618      	mov	r0, r3
 80065d4:	f003 fe2e 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065dc:	2201      	movs	r2, #1
 80065de:	409a      	lsls	r2, r3
 80065e0:	4b3b      	ldr	r3, [pc, #236]	@ (80066d0 <xTaskIncrementTick+0x230>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4313      	orrs	r3, r2
 80065e6:	4a3a      	ldr	r2, [pc, #232]	@ (80066d0 <xTaskIncrementTick+0x230>)
 80065e8:	6013      	str	r3, [r2, #0]
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ee:	4939      	ldr	r1, [pc, #228]	@ (80066d4 <xTaskIncrementTick+0x234>)
 80065f0:	4613      	mov	r3, r2
 80065f2:	009b      	lsls	r3, r3, #2
 80065f4:	4413      	add	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	440b      	add	r3, r1
 80065fa:	3304      	adds	r3, #4
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	60bb      	str	r3, [r7, #8]
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	609a      	str	r2, [r3, #8]
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	60da      	str	r2, [r3, #12]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	69ba      	ldr	r2, [r7, #24]
 8006614:	3204      	adds	r2, #4
 8006616:	605a      	str	r2, [r3, #4]
 8006618:	69bb      	ldr	r3, [r7, #24]
 800661a:	1d1a      	adds	r2, r3, #4
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	609a      	str	r2, [r3, #8]
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006624:	4613      	mov	r3, r2
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	4413      	add	r3, r2
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	4a29      	ldr	r2, [pc, #164]	@ (80066d4 <xTaskIncrementTick+0x234>)
 800662e:	441a      	add	r2, r3
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	615a      	str	r2, [r3, #20]
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006638:	4926      	ldr	r1, [pc, #152]	@ (80066d4 <xTaskIncrementTick+0x234>)
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800664a:	1c59      	adds	r1, r3, #1
 800664c:	4821      	ldr	r0, [pc, #132]	@ (80066d4 <xTaskIncrementTick+0x234>)
 800664e:	4613      	mov	r3, r2
 8006650:	009b      	lsls	r3, r3, #2
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	4403      	add	r3, r0
 8006658:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800665a:	69bb      	ldr	r3, [r7, #24]
 800665c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800665e:	4b1e      	ldr	r3, [pc, #120]	@ (80066d8 <xTaskIncrementTick+0x238>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006664:	429a      	cmp	r2, r3
 8006666:	f67f af57 	bls.w	8006518 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800666a:	2301      	movs	r3, #1
 800666c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800666e:	e753      	b.n	8006518 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8006670:	4b19      	ldr	r3, [pc, #100]	@ (80066d8 <xTaskIncrementTick+0x238>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006676:	4917      	ldr	r1, [pc, #92]	@ (80066d4 <xTaskIncrementTick+0x234>)
 8006678:	4613      	mov	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	4413      	add	r3, r2
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	440b      	add	r3, r1
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	2b01      	cmp	r3, #1
 8006686:	d901      	bls.n	800668c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8006688:	2301      	movs	r3, #1
 800668a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800668c:	4b13      	ldr	r3, [pc, #76]	@ (80066dc <xTaskIncrementTick+0x23c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8006694:	2301      	movs	r3, #1
 8006696:	627b      	str	r3, [r7, #36]	@ 0x24
 8006698:	e004      	b.n	80066a4 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800669a:	4b11      	ldr	r3, [pc, #68]	@ (80066e0 <xTaskIncrementTick+0x240>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	3301      	adds	r3, #1
 80066a0:	4a0f      	ldr	r2, [pc, #60]	@ (80066e0 <xTaskIncrementTick+0x240>)
 80066a2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	4619      	mov	r1, r3
 80066a8:	20db      	movs	r0, #219	@ 0xdb
 80066aa:	f003 fccb 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 80066ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3728      	adds	r7, #40	@ 0x28
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	20000328 	.word	0x20000328
 80066bc:	20000304 	.word	0x20000304
 80066c0:	200002b8 	.word	0x200002b8
 80066c4:	200002bc 	.word	0x200002bc
 80066c8:	20000318 	.word	0x20000318
 80066cc:	20000320 	.word	0x20000320
 80066d0:	20000308 	.word	0x20000308
 80066d4:	2000022c 	.word	0x2000022c
 80066d8:	20000228 	.word	0x20000228
 80066dc:	20000314 	.word	0x20000314
 80066e0:	20000310 	.word	0x20000310

080066e4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80066ea:	4b30      	ldr	r3, [pc, #192]	@ (80067ac <vTaskSwitchContext+0xc8>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80066f2:	4b2f      	ldr	r3, [pc, #188]	@ (80067b0 <vTaskSwitchContext+0xcc>)
 80066f4:	2201      	movs	r2, #1
 80066f6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80066f8:	e054      	b.n	80067a4 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 80066fa:	4b2d      	ldr	r3, [pc, #180]	@ (80067b0 <vTaskSwitchContext+0xcc>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8006700:	4b2c      	ldr	r3, [pc, #176]	@ (80067b4 <vTaskSwitchContext+0xd0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	fab3 f383 	clz	r3, r3
 800670c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 800670e:	7afb      	ldrb	r3, [r7, #11]
 8006710:	f1c3 031f 	rsb	r3, r3, #31
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	4928      	ldr	r1, [pc, #160]	@ (80067b8 <vTaskSwitchContext+0xd4>)
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4613      	mov	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	4413      	add	r3, r2
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	440b      	add	r3, r1
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d10b      	bne.n	8006742 <vTaskSwitchContext+0x5e>
    __asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800672e:	f383 8811 	msr	BASEPRI, r3
 8006732:	f3bf 8f6f 	isb	sy
 8006736:	f3bf 8f4f 	dsb	sy
 800673a:	607b      	str	r3, [r7, #4]
}
 800673c:	bf00      	nop
 800673e:	bf00      	nop
 8006740:	e7fd      	b.n	800673e <vTaskSwitchContext+0x5a>
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	4613      	mov	r3, r2
 8006746:	009b      	lsls	r3, r3, #2
 8006748:	4413      	add	r3, r2
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	4a1a      	ldr	r2, [pc, #104]	@ (80067b8 <vTaskSwitchContext+0xd4>)
 800674e:	4413      	add	r3, r2
 8006750:	613b      	str	r3, [r7, #16]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	685a      	ldr	r2, [r3, #4]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	605a      	str	r2, [r3, #4]
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	685a      	ldr	r2, [r3, #4]
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	3308      	adds	r3, #8
 8006764:	429a      	cmp	r2, r3
 8006766:	d103      	bne.n	8006770 <vTaskSwitchContext+0x8c>
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	68da      	ldr	r2, [r3, #12]
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	605a      	str	r2, [r3, #4]
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	4a11      	ldr	r2, [pc, #68]	@ (80067bc <vTaskSwitchContext+0xd8>)
 8006778:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800677a:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <vTaskSwitchContext+0xd8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3334      	adds	r3, #52	@ 0x34
 8006780:	2205      	movs	r2, #5
 8006782:	490f      	ldr	r1, [pc, #60]	@ (80067c0 <vTaskSwitchContext+0xdc>)
 8006784:	4618      	mov	r0, r3
 8006786:	f004 f892 	bl	800a8ae <memcmp>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <vTaskSwitchContext+0xb8>
 8006790:	4b0a      	ldr	r3, [pc, #40]	@ (80067bc <vTaskSwitchContext+0xd8>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f003 fd0b 	bl	800a1b0 <SEGGER_SYSVIEW_OnTaskStartExec>
 800679a:	e001      	b.n	80067a0 <vTaskSwitchContext+0xbc>
 800679c:	f003 fcaa 	bl	800a0f4 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 80067a0:	4b06      	ldr	r3, [pc, #24]	@ (80067bc <vTaskSwitchContext+0xd8>)
 80067a2:	681b      	ldr	r3, [r3, #0]
    }
 80067a4:	bf00      	nop
 80067a6:	3718      	adds	r7, #24
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	20000328 	.word	0x20000328
 80067b0:	20000314 	.word	0x20000314
 80067b4:	20000308 	.word	0x20000308
 80067b8:	2000022c 	.word	0x2000022c
 80067bc:	20000228 	.word	0x20000228
 80067c0:	0800bc94 	.word	0x0800bc94

080067c4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d10b      	bne.n	80067ec <vTaskPlaceOnEventList+0x28>
    __asm volatile
 80067d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067d8:	f383 8811 	msr	BASEPRI, r3
 80067dc:	f3bf 8f6f 	isb	sy
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	60fb      	str	r3, [r7, #12]
}
 80067e6:	bf00      	nop
 80067e8:	bf00      	nop
 80067ea:	e7fd      	b.n	80067e8 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067ec:	4b08      	ldr	r3, [pc, #32]	@ (8006810 <vTaskPlaceOnEventList+0x4c>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3318      	adds	r3, #24
 80067f2:	4619      	mov	r1, r3
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f7fe fad4 	bl	8004da2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80067fa:	2101      	movs	r1, #1
 80067fc:	6838      	ldr	r0, [r7, #0]
 80067fe:	f000 fe9f 	bl	8007540 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
 8006802:	20e1      	movs	r0, #225	@ 0xe1
 8006804:	f003 fbe2 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8006808:	bf00      	nop
 800680a:	3710      	adds	r7, #16
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20000228 	.word	0x20000228

08006814 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
        traceENTER_vTaskPlaceOnEventListRestricted( pxEventList, xTicksToWait, xWaitIndefinitely );

        configASSERT( pxEventList );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10b      	bne.n	800683e <vTaskPlaceOnEventListRestricted+0x2a>
    __asm volatile
 8006826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682a:	f383 8811 	msr	BASEPRI, r3
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f3bf 8f4f 	dsb	sy
 8006836:	613b      	str	r3, [r7, #16]
}
 8006838:	bf00      	nop
 800683a:	bf00      	nop
 800683c:	e7fd      	b.n	800683a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	617b      	str	r3, [r7, #20]
 8006844:	4b17      	ldr	r3, [pc, #92]	@ (80068a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	61da      	str	r2, [r3, #28]
 800684c:	4b15      	ldr	r3, [pc, #84]	@ (80068a4 <vTaskPlaceOnEventListRestricted+0x90>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	6892      	ldr	r2, [r2, #8]
 8006854:	621a      	str	r2, [r3, #32]
 8006856:	4b13      	ldr	r3, [pc, #76]	@ (80068a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	689b      	ldr	r3, [r3, #8]
 800685e:	3218      	adds	r2, #24
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	4b10      	ldr	r3, [pc, #64]	@ (80068a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f103 0218 	add.w	r2, r3, #24
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	609a      	str	r2, [r3, #8]
 800686e:	4b0d      	ldr	r3, [pc, #52]	@ (80068a4 <vTaskPlaceOnEventListRestricted+0x90>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68fa      	ldr	r2, [r7, #12]
 8006874:	629a      	str	r2, [r3, #40]	@ 0x28
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	1c5a      	adds	r2, r3, #1
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d002      	beq.n	800688c <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 8006886:	f04f 33ff 	mov.w	r3, #4294967295
 800688a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800688c:	6879      	ldr	r1, [r7, #4]
 800688e:	68b8      	ldr	r0, [r7, #8]
 8006890:	f000 fe56 	bl	8007540 <prvAddCurrentTaskToDelayedList>

        traceRETURN_vTaskPlaceOnEventListRestricted();
 8006894:	20e3      	movs	r0, #227	@ 0xe3
 8006896:	f003 fb99 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
    }
 800689a:	bf00      	nop
 800689c:	3718      	adds	r7, #24
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20000228 	.word	0x20000228

080068a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b08a      	sub	sp, #40	@ 0x28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	68db      	ldr	r3, [r3, #12]
 80068b6:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80068b8:	6a3b      	ldr	r3, [r7, #32]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10b      	bne.n	80068d6 <xTaskRemoveFromEventList+0x2e>
    __asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	60fb      	str	r3, [r7, #12]
}
 80068d0:	bf00      	nop
 80068d2:	bf00      	nop
 80068d4:	e7fd      	b.n	80068d2 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	69db      	ldr	r3, [r3, #28]
 80068e0:	6a3a      	ldr	r2, [r7, #32]
 80068e2:	6a12      	ldr	r2, [r2, #32]
 80068e4:	609a      	str	r2, [r3, #8]
 80068e6:	6a3b      	ldr	r3, [r7, #32]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	6a3a      	ldr	r2, [r7, #32]
 80068ec:	69d2      	ldr	r2, [r2, #28]
 80068ee:	605a      	str	r2, [r3, #4]
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	3318      	adds	r3, #24
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d103      	bne.n	8006904 <xTaskRemoveFromEventList+0x5c>
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	6a1a      	ldr	r2, [r3, #32]
 8006900:	69fb      	ldr	r3, [r7, #28]
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	6a3b      	ldr	r3, [r7, #32]
 8006906:	2200      	movs	r2, #0
 8006908:	629a      	str	r2, [r3, #40]	@ 0x28
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	1e5a      	subs	r2, r3, #1
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006914:	4b4e      	ldr	r3, [pc, #312]	@ (8006a50 <xTaskRemoveFromEventList+0x1a8>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d164      	bne.n	80069e6 <xTaskRemoveFromEventList+0x13e>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800691c:	6a3b      	ldr	r3, [r7, #32]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	6a3a      	ldr	r2, [r7, #32]
 8006928:	68d2      	ldr	r2, [r2, #12]
 800692a:	609a      	str	r2, [r3, #8]
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	6a3a      	ldr	r2, [r7, #32]
 8006932:	6892      	ldr	r2, [r2, #8]
 8006934:	605a      	str	r2, [r3, #4]
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	685a      	ldr	r2, [r3, #4]
 800693a:	6a3b      	ldr	r3, [r7, #32]
 800693c:	3304      	adds	r3, #4
 800693e:	429a      	cmp	r2, r3
 8006940:	d103      	bne.n	800694a <xTaskRemoveFromEventList+0xa2>
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	68da      	ldr	r2, [r3, #12]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	605a      	str	r2, [r3, #4]
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	2200      	movs	r2, #0
 800694e:	615a      	str	r2, [r3, #20]
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	1e5a      	subs	r2, r3, #1
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	4618      	mov	r0, r3
 800695e:	f003 fc69 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006966:	2201      	movs	r2, #1
 8006968:	409a      	lsls	r2, r3
 800696a:	4b3a      	ldr	r3, [pc, #232]	@ (8006a54 <xTaskRemoveFromEventList+0x1ac>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4313      	orrs	r3, r2
 8006970:	4a38      	ldr	r2, [pc, #224]	@ (8006a54 <xTaskRemoveFromEventList+0x1ac>)
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006978:	4937      	ldr	r1, [pc, #220]	@ (8006a58 <xTaskRemoveFromEventList+0x1b0>)
 800697a:	4613      	mov	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	3304      	adds	r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	609a      	str	r2, [r3, #8]
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	689a      	ldr	r2, [r3, #8]
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	60da      	str	r2, [r3, #12]
 8006998:	693b      	ldr	r3, [r7, #16]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	6a3a      	ldr	r2, [r7, #32]
 800699e:	3204      	adds	r2, #4
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	1d1a      	adds	r2, r3, #4
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	609a      	str	r2, [r3, #8]
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069ae:	4613      	mov	r3, r2
 80069b0:	009b      	lsls	r3, r3, #2
 80069b2:	4413      	add	r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	4a28      	ldr	r2, [pc, #160]	@ (8006a58 <xTaskRemoveFromEventList+0x1b0>)
 80069b8:	441a      	add	r2, r3
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	615a      	str	r2, [r3, #20]
 80069be:	6a3b      	ldr	r3, [r7, #32]
 80069c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c2:	4925      	ldr	r1, [pc, #148]	@ (8006a58 <xTaskRemoveFromEventList+0x1b0>)
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	440b      	add	r3, r1
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	6a3a      	ldr	r2, [r7, #32]
 80069d2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	4820      	ldr	r0, [pc, #128]	@ (8006a58 <xTaskRemoveFromEventList+0x1b0>)
 80069d8:	4613      	mov	r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4413      	add	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	4403      	add	r3, r0
 80069e2:	6019      	str	r1, [r3, #0]
 80069e4:	e01b      	b.n	8006a1e <xTaskRemoveFromEventList+0x176>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80069e6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a5c <xTaskRemoveFromEventList+0x1b4>)
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	61bb      	str	r3, [r7, #24]
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	69ba      	ldr	r2, [r7, #24]
 80069f0:	61da      	str	r2, [r3, #28]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	689a      	ldr	r2, [r3, #8]
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	621a      	str	r2, [r3, #32]
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	6a3a      	ldr	r2, [r7, #32]
 8006a00:	3218      	adds	r2, #24
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	f103 0218 	add.w	r2, r3, #24
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	609a      	str	r2, [r3, #8]
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	4a12      	ldr	r2, [pc, #72]	@ (8006a5c <xTaskRemoveFromEventList+0x1b4>)
 8006a12:	629a      	str	r2, [r3, #40]	@ 0x28
 8006a14:	4b11      	ldr	r3, [pc, #68]	@ (8006a5c <xTaskRemoveFromEventList+0x1b4>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	4a10      	ldr	r2, [pc, #64]	@ (8006a5c <xTaskRemoveFromEventList+0x1b4>)
 8006a1c:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a1e:	6a3b      	ldr	r3, [r7, #32]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	4b0f      	ldr	r3, [pc, #60]	@ (8006a60 <xTaskRemoveFromEventList+0x1b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d905      	bls.n	8006a38 <xTaskRemoveFromEventList+0x190>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8006a30:	4b0c      	ldr	r3, [pc, #48]	@ (8006a64 <xTaskRemoveFromEventList+0x1bc>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]
 8006a36:	e001      	b.n	8006a3c <xTaskRemoveFromEventList+0x194>
        }
        else
        {
            xReturn = pdFALSE;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a3e:	4619      	mov	r1, r3
 8006a40:	20e4      	movs	r0, #228	@ 0xe4
 8006a42:	f003 faff 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>
    return xReturn;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3728      	adds	r7, #40	@ 0x28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	20000328 	.word	0x20000328
 8006a54:	20000308 	.word	0x20000308
 8006a58:	2000022c 	.word	0x2000022c
 8006a5c:	200002c0 	.word	0x200002c0
 8006a60:	20000228 	.word	0x20000228
 8006a64:	20000314 	.word	0x20000314

08006a68 <vTaskInternalSetTimeOutState>:
    traceRETURN_vTaskSetTimeOutState();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b082      	sub	sp, #8
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006a70:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <vTaskInternalSetTimeOutState+0x28>)
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8006a78:	4b06      	ldr	r3, [pc, #24]	@ (8006a94 <vTaskInternalSetTimeOutState+0x2c>)
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
 8006a80:	20e7      	movs	r0, #231	@ 0xe7
 8006a82:	f003 faa3 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000318 	.word	0x20000318
 8006a94:	20000304 	.word	0x20000304

08006a98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10b      	bne.n	8006ac0 <xTaskCheckForTimeOut+0x28>
    __asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	613b      	str	r3, [r7, #16]
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10b      	bne.n	8006ade <xTaskCheckForTimeOut+0x46>
    __asm volatile
 8006ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aca:	f383 8811 	msr	BASEPRI, r3
 8006ace:	f3bf 8f6f 	isb	sy
 8006ad2:	f3bf 8f4f 	dsb	sy
 8006ad6:	60fb      	str	r3, [r7, #12]
}
 8006ad8:	bf00      	nop
 8006ada:	bf00      	nop
 8006adc:	e7fd      	b.n	8006ada <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8006ade:	f001 fbc1 	bl	8008264 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8006ae2:	4b21      	ldr	r3, [pc, #132]	@ (8006b68 <xTaskCheckForTimeOut+0xd0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afa:	d102      	bne.n	8006b02 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006afc:	2300      	movs	r3, #0
 8006afe:	61fb      	str	r3, [r7, #28]
 8006b00:	e026      	b.n	8006b50 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	4b19      	ldr	r3, [pc, #100]	@ (8006b6c <xTaskCheckForTimeOut+0xd4>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	429a      	cmp	r2, r3
 8006b0c:	d00a      	beq.n	8006b24 <xTaskCheckForTimeOut+0x8c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	69ba      	ldr	r2, [r7, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d305      	bcc.n	8006b24 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	e015      	b.n	8006b50 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	697a      	ldr	r2, [r7, #20]
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d20b      	bcs.n	8006b46 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	697b      	ldr	r3, [r7, #20]
 8006b34:	1ad2      	subs	r2, r2, r3
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7ff ff94 	bl	8006a68 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8006b40:	2300      	movs	r3, #0
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	e004      	b.n	8006b50 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8006b50:	f001 fbba 	bl	80082c8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	4619      	mov	r1, r3
 8006b58:	20e8      	movs	r0, #232	@ 0xe8
 8006b5a:	f003 fa73 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3720      	adds	r7, #32
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	20000304 	.word	0x20000304
 8006b6c:	20000318 	.word	0x20000318

08006b70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 8006b74:	4b03      	ldr	r3, [pc, #12]	@ (8006b84 <vTaskMissedYield+0x14>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
 8006b7a:	20e9      	movs	r0, #233	@ 0xe9
 8006b7c:	f003 fa26 	bl	8009fcc <SEGGER_SYSVIEW_RecordEndCall>
}
 8006b80:	bf00      	nop
 8006b82:	bd80      	pop	{r7, pc}
 8006b84:	20000314 	.word	0x20000314

08006b88 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8006b90:	f000 f852 	bl	8006c38 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8006b94:	4b06      	ldr	r3, [pc, #24]	@ (8006bb0 <prvIdleTask+0x28>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d9f9      	bls.n	8006b90 <prvIdleTask+0x8>
            {
                taskYIELD();
 8006b9c:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <prvIdleTask+0x2c>)
 8006b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8006bac:	e7f0      	b.n	8006b90 <prvIdleTask+0x8>
 8006bae:	bf00      	nop
 8006bb0:	2000022c 	.word	0x2000022c
 8006bb4:	e000ed04 	.word	0xe000ed04

08006bb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	607b      	str	r3, [r7, #4]
 8006bc2:	e00c      	b.n	8006bde <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006bc4:	687a      	ldr	r2, [r7, #4]
 8006bc6:	4613      	mov	r3, r2
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	4413      	add	r3, r2
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	4a12      	ldr	r2, [pc, #72]	@ (8006c18 <prvInitialiseTaskLists+0x60>)
 8006bd0:	4413      	add	r3, r2
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fe f8b4 	bl	8004d40 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	607b      	str	r3, [r7, #4]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b04      	cmp	r3, #4
 8006be2:	d9ef      	bls.n	8006bc4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8006be4:	480d      	ldr	r0, [pc, #52]	@ (8006c1c <prvInitialiseTaskLists+0x64>)
 8006be6:	f7fe f8ab 	bl	8004d40 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006bea:	480d      	ldr	r0, [pc, #52]	@ (8006c20 <prvInitialiseTaskLists+0x68>)
 8006bec:	f7fe f8a8 	bl	8004d40 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006bf0:	480c      	ldr	r0, [pc, #48]	@ (8006c24 <prvInitialiseTaskLists+0x6c>)
 8006bf2:	f7fe f8a5 	bl	8004d40 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8006bf6:	480c      	ldr	r0, [pc, #48]	@ (8006c28 <prvInitialiseTaskLists+0x70>)
 8006bf8:	f7fe f8a2 	bl	8004d40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8006bfc:	480b      	ldr	r0, [pc, #44]	@ (8006c2c <prvInitialiseTaskLists+0x74>)
 8006bfe:	f7fe f89f 	bl	8004d40 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8006c02:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <prvInitialiseTaskLists+0x78>)
 8006c04:	4a05      	ldr	r2, [pc, #20]	@ (8006c1c <prvInitialiseTaskLists+0x64>)
 8006c06:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006c08:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <prvInitialiseTaskLists+0x7c>)
 8006c0a:	4a05      	ldr	r2, [pc, #20]	@ (8006c20 <prvInitialiseTaskLists+0x68>)
 8006c0c:	601a      	str	r2, [r3, #0]
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	2000022c 	.word	0x2000022c
 8006c1c:	20000290 	.word	0x20000290
 8006c20:	200002a4 	.word	0x200002a4
 8006c24:	200002c0 	.word	0x200002c0
 8006c28:	200002d4 	.word	0x200002d4
 8006c2c:	200002ec 	.word	0x200002ec
 8006c30:	200002b8 	.word	0x200002b8
 8006c34:	200002bc 	.word	0x200002bc

08006c38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c3e:	e019      	b.n	8006c74 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8006c40:	f001 fb10 	bl	8008264 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006c44:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <prvCheckTasksWaitingTermination+0x50>)
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3304      	adds	r3, #4
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe f8e1 	bl	8004e18 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8006c56:	4b0d      	ldr	r3, [pc, #52]	@ (8006c8c <prvCheckTasksWaitingTermination+0x54>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c8c <prvCheckTasksWaitingTermination+0x54>)
 8006c5e:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8006c60:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <prvCheckTasksWaitingTermination+0x58>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3b01      	subs	r3, #1
 8006c66:	4a0a      	ldr	r2, [pc, #40]	@ (8006c90 <prvCheckTasksWaitingTermination+0x58>)
 8006c68:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8006c6a:	f001 fb2d 	bl	80082c8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 f810 	bl	8006c94 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006c74:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <prvCheckTasksWaitingTermination+0x58>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d1e1      	bne.n	8006c40 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8006c7c:	bf00      	nop
 8006c7e:	bf00      	nop
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}
 8006c86:	bf00      	nop
 8006c88:	200002d4 	.word	0x200002d4
 8006c8c:	20000300 	.word	0x20000300
 8006c90:	200002e8 	.word	0x200002e8

08006c94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b084      	sub	sp, #16
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d108      	bne.n	8006cb8 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006caa:	4618      	mov	r0, r3
 8006cac:	f001 fd3a 	bl	8008724 <vPortFree>
                vPortFree( pxTCB );
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f001 fd37 	bl	8008724 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8006cb6:	e019      	b.n	8006cec <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d103      	bne.n	8006cca <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fd2e 	bl	8008724 <vPortFree>
    }
 8006cc8:	e010      	b.n	8006cec <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8006cd0:	2b02      	cmp	r3, #2
 8006cd2:	d00b      	beq.n	8006cec <prvDeleteTCB+0x58>
    __asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	bf00      	nop
 8006cea:	e7fd      	b.n	8006ce8 <prvDeleteTCB+0x54>
    }
 8006cec:	bf00      	nop
 8006cee:	3710      	adds	r7, #16
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cf8:	4b0a      	ldr	r3, [pc, #40]	@ (8006d24 <prvResetNextTaskUnblockTime+0x30>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d104      	bne.n	8006d0c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8006d02:	4b09      	ldr	r3, [pc, #36]	@ (8006d28 <prvResetNextTaskUnblockTime+0x34>)
 8006d04:	f04f 32ff 	mov.w	r2, #4294967295
 8006d08:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8006d0a:	e005      	b.n	8006d18 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006d0c:	4b05      	ldr	r3, [pc, #20]	@ (8006d24 <prvResetNextTaskUnblockTime+0x30>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a04      	ldr	r2, [pc, #16]	@ (8006d28 <prvResetNextTaskUnblockTime+0x34>)
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop
 8006d24:	200002b8 	.word	0x200002b8
 8006d28:	20000320 	.word	0x20000320

08006d2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b082      	sub	sp, #8
 8006d30:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8006d32:	4b0d      	ldr	r3, [pc, #52]	@ (8006d68 <xTaskGetSchedulerState+0x3c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d102      	bne.n	8006d40 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	607b      	str	r3, [r7, #4]
 8006d3e:	e008      	b.n	8006d52 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8006d40:	4b0a      	ldr	r3, [pc, #40]	@ (8006d6c <xTaskGetSchedulerState+0x40>)
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d102      	bne.n	8006d4e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8006d48:	2302      	movs	r3, #2
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	e001      	b.n	8006d52 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	607b      	str	r3, [r7, #4]
            #if ( configNUMBER_OF_CORES > 1 )
                taskEXIT_CRITICAL();
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4619      	mov	r1, r3
 8006d56:	20f5      	movs	r0, #245	@ 0xf5
 8006d58:	f003 f974 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006d5c:	687b      	ldr	r3, [r7, #4]
    }
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	2000030c 	.word	0x2000030c
 8006d6c:	20000328 	.word	0x20000328

08006d70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b088      	sub	sp, #32
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61fb      	str	r3, [r7, #28]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	f000 8094 	beq.w	8006eb0 <xTaskPriorityDisinherit+0x140>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006d88:	4b4e      	ldr	r3, [pc, #312]	@ (8006ec4 <xTaskPriorityDisinherit+0x154>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d00b      	beq.n	8006daa <xTaskPriorityDisinherit+0x3a>
    __asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	613b      	str	r3, [r7, #16]
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	e7fd      	b.n	8006da6 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10b      	bne.n	8006dca <xTaskPriorityDisinherit+0x5a>
    __asm volatile
 8006db2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006db6:	f383 8811 	msr	BASEPRI, r3
 8006dba:	f3bf 8f6f 	isb	sy
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	60fb      	str	r3, [r7, #12]
}
 8006dc4:	bf00      	nop
 8006dc6:	bf00      	nop
 8006dc8:	e7fd      	b.n	8006dc6 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dce:	1e5a      	subs	r2, r3, #1
 8006dd0:	69bb      	ldr	r3, [r7, #24]
 8006dd2:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dd8:	69bb      	ldr	r3, [r7, #24]
 8006dda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	d067      	beq.n	8006eb0 <xTaskPriorityDisinherit+0x140>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d163      	bne.n	8006eb0 <xTaskPriorityDisinherit+0x140>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fe f813 	bl	8004e18 <uxListRemove>
 8006df2:	4603      	mov	r3, r0
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006e02:	43da      	mvns	r2, r3
 8006e04:	4b30      	ldr	r3, [pc, #192]	@ (8006ec8 <xTaskPriorityDisinherit+0x158>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	4a2f      	ldr	r2, [pc, #188]	@ (8006ec8 <xTaskPriorityDisinherit+0x158>)
 8006e0c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006e0e:	69bb      	ldr	r3, [r7, #24]
 8006e10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1a:	f1c3 0205 	rsb	r2, r3, #5
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f003 fa05 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e2e:	2201      	movs	r2, #1
 8006e30:	409a      	lsls	r2, r3
 8006e32:	4b25      	ldr	r3, [pc, #148]	@ (8006ec8 <xTaskPriorityDisinherit+0x158>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	4a23      	ldr	r2, [pc, #140]	@ (8006ec8 <xTaskPriorityDisinherit+0x158>)
 8006e3a:	6013      	str	r3, [r2, #0]
 8006e3c:	69bb      	ldr	r3, [r7, #24]
 8006e3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e40:	4922      	ldr	r1, [pc, #136]	@ (8006ecc <xTaskPriorityDisinherit+0x15c>)
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	3304      	adds	r3, #4
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	617b      	str	r3, [r7, #20]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	697a      	ldr	r2, [r7, #20]
 8006e56:	609a      	str	r2, [r3, #8]
 8006e58:	697b      	ldr	r3, [r7, #20]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	60da      	str	r2, [r3, #12]
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	3204      	adds	r2, #4
 8006e68:	605a      	str	r2, [r3, #4]
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	1d1a      	adds	r2, r3, #4
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	609a      	str	r2, [r3, #8]
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e76:	4613      	mov	r3, r2
 8006e78:	009b      	lsls	r3, r3, #2
 8006e7a:	4413      	add	r3, r2
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	4a13      	ldr	r2, [pc, #76]	@ (8006ecc <xTaskPriorityDisinherit+0x15c>)
 8006e80:	441a      	add	r2, r3
 8006e82:	69bb      	ldr	r3, [r7, #24]
 8006e84:	615a      	str	r2, [r3, #20]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e8a:	4910      	ldr	r1, [pc, #64]	@ (8006ecc <xTaskPriorityDisinherit+0x15c>)
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	4413      	add	r3, r2
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	440b      	add	r3, r1
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8006e9c:	1c59      	adds	r1, r3, #1
 8006e9e:	480b      	ldr	r0, [pc, #44]	@ (8006ecc <xTaskPriorityDisinherit+0x15c>)
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4403      	add	r3, r0
 8006eaa:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8006eac:	2301      	movs	r3, #1
 8006eae:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	20f7      	movs	r0, #247	@ 0xf7
 8006eb6:	f003 f8c5 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006eba:	69fb      	ldr	r3, [r7, #28]
    }
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	3720      	adds	r7, #32
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000228 	.word	0x20000228
 8006ec8:	20000308 	.word	0x20000308
 8006ecc:	2000022c 	.word	0x2000022c

08006ed0 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b088      	sub	sp, #32
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	60f8      	str	r0, [r7, #12]
 8006ed8:	60b9      	str	r1, [r7, #8]
 8006eda:	607a      	str	r2, [r7, #4]
 8006edc:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8006ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eec:	f383 8811 	msr	BASEPRI, r3
 8006ef0:	f3bf 8f6f 	isb	sy
 8006ef4:	f3bf 8f4f 	dsb	sy
 8006ef8:	613b      	str	r3, [r7, #16]
}
 8006efa:	bf00      	nop
 8006efc:	bf00      	nop
 8006efe:	e7fd      	b.n	8006efc <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8006f00:	f7ff f978 	bl	80061f4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8006f04:	f001 f9ae 	bl	8008264 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8006f08:	4b3b      	ldr	r3, [pc, #236]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	3354      	adds	r3, #84	@ 0x54
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b02      	cmp	r3, #2
 8006f18:	d018      	beq.n	8006f4c <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8006f1a:	4b37      	ldr	r3, [pc, #220]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	3214      	adds	r2, #20
 8006f22:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f26:	68ba      	ldr	r2, [r7, #8]
 8006f28:	43d2      	mvns	r2, r2
 8006f2a:	4011      	ands	r1, r2
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	3214      	adds	r2, #20
 8006f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8006f34:	4b30      	ldr	r3, [pc, #192]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	3354      	adds	r3, #84	@ 0x54
 8006f3e:	2201      	movs	r2, #1
 8006f40:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8006f4c:	f001 f9bc 	bl	80082c8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d103      	bne.n	8006f5e <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006f56:	2101      	movs	r1, #1
 8006f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f5a:	f000 faf1 	bl	8007540 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8006f5e:	f7ff f957 	bl	8006210 <xTaskResumeAll>
 8006f62:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d10a      	bne.n	8006f80 <xTaskGenericNotifyWait+0xb0>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d107      	bne.n	8006f80 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 8006f70:	4b22      	ldr	r3, [pc, #136]	@ (8006ffc <xTaskGenericNotifyWait+0x12c>)
 8006f72:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f76:	601a      	str	r2, [r3, #0]
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8006f80:	f001 f970 	bl	8008264 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d007      	beq.n	8006f9a <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8006f8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68fa      	ldr	r2, [r7, #12]
 8006f90:	3214      	adds	r2, #20
 8006f92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8006f9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	3354      	adds	r3, #84	@ 0x54
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d002      	beq.n	8006fb2 <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8006fac:	2300      	movs	r3, #0
 8006fae:	61fb      	str	r3, [r7, #28]
 8006fb0:	e00e      	b.n	8006fd0 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8006fb2:	4b11      	ldr	r3, [pc, #68]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68fa      	ldr	r2, [r7, #12]
 8006fb8:	3214      	adds	r2, #20
 8006fba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	43d2      	mvns	r2, r2
 8006fc2:	4011      	ands	r1, r2
 8006fc4:	68fa      	ldr	r2, [r7, #12]
 8006fc6:	3214      	adds	r2, #20
 8006fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8006fd0:	4b09      	ldr	r3, [pc, #36]	@ (8006ff8 <xTaskGenericNotifyWait+0x128>)
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	3354      	adds	r3, #84	@ 0x54
 8006fda:	2200      	movs	r2, #0
 8006fdc:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006fde:	f001 f973 	bl	80082c8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006fea:	f003 f82b 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8006fee:	69fb      	ldr	r3, [r7, #28]
    }
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3720      	adds	r7, #32
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}
 8006ff8:	20000228 	.word	0x20000228
 8006ffc:	e000ed04 	.word	0xe000ed04

08007000 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8007000:	b580      	push	{r7, lr}
 8007002:	b08e      	sub	sp, #56	@ 0x38
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 800700e:	2301      	movs	r3, #1
 8007010:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00b      	beq.n	8007030 <xTaskGenericNotify+0x30>
    __asm volatile
 8007018:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701c:	f383 8811 	msr	BASEPRI, r3
 8007020:	f3bf 8f6f 	isb	sy
 8007024:	f3bf 8f4f 	dsb	sy
 8007028:	623b      	str	r3, [r7, #32]
}
 800702a:	bf00      	nop
 800702c:	bf00      	nop
 800702e:	e7fd      	b.n	800702c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d10b      	bne.n	800704e <xTaskGenericNotify+0x4e>
    __asm volatile
 8007036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800703a:	f383 8811 	msr	BASEPRI, r3
 800703e:	f3bf 8f6f 	isb	sy
 8007042:	f3bf 8f4f 	dsb	sy
 8007046:	61fb      	str	r3, [r7, #28]
}
 8007048:	bf00      	nop
 800704a:	bf00      	nop
 800704c:	e7fd      	b.n	800704a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8007052:	f001 f907 	bl	8008264 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8007056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007058:	2b00      	cmp	r3, #0
 800705a:	d006      	beq.n	800706a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800705c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800705e:	68ba      	ldr	r2, [r7, #8]
 8007060:	3214      	adds	r2, #20
 8007062:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007068:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800706a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	4413      	add	r3, r2
 8007070:	3354      	adds	r3, #84	@ 0x54
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8007078:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	4413      	add	r3, r2
 800707e:	3354      	adds	r3, #84	@ 0x54
 8007080:	2202      	movs	r2, #2
 8007082:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007084:	78fb      	ldrb	r3, [r7, #3]
 8007086:	2b04      	cmp	r3, #4
 8007088:	d83b      	bhi.n	8007102 <xTaskGenericNotify+0x102>
 800708a:	a201      	add	r2, pc, #4	@ (adr r2, 8007090 <xTaskGenericNotify+0x90>)
 800708c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007090:	08007123 	.word	0x08007123
 8007094:	080070a5 	.word	0x080070a5
 8007098:	080070c1 	.word	0x080070c1
 800709c:	080070d9 	.word	0x080070d9
 80070a0:	080070e7 	.word	0x080070e7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80070a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	3214      	adds	r2, #20
 80070aa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	ea42 0103 	orr.w	r1, r2, r3
 80070b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	3214      	adds	r2, #20
 80070ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070be:	e033      	b.n	8007128 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	68ba      	ldr	r2, [r7, #8]
 80070c4:	3214      	adds	r2, #20
 80070c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ca:	1c59      	adds	r1, r3, #1
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	68ba      	ldr	r2, [r7, #8]
 80070d0:	3214      	adds	r2, #20
 80070d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070d6:	e027      	b.n	8007128 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80070d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070da:	68ba      	ldr	r2, [r7, #8]
 80070dc:	3214      	adds	r2, #20
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80070e4:	e020      	b.n	8007128 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80070e6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80070ea:	2b02      	cmp	r3, #2
 80070ec:	d006      	beq.n	80070fc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80070ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	3214      	adds	r2, #20
 80070f4:	6879      	ldr	r1, [r7, #4]
 80070f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80070fa:	e015      	b.n	8007128 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 80070fc:	2300      	movs	r3, #0
 80070fe:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8007100:	e012      	b.n	8007128 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007102:	4b54      	ldr	r3, [pc, #336]	@ (8007254 <xTaskGenericNotify+0x254>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00d      	beq.n	8007126 <xTaskGenericNotify+0x126>
    __asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	61bb      	str	r3, [r7, #24]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <xTaskGenericNotify+0x11e>
                    break;
 8007122:	bf00      	nop
 8007124:	e000      	b.n	8007128 <xTaskGenericNotify+0x128>

                    break;
 8007126:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800712c:	2b01      	cmp	r3, #1
 800712e:	f040 8083 	bne.w	8007238 <xTaskGenericNotify+0x238>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713a:	689b      	ldr	r3, [r3, #8]
 800713c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800713e:	68d2      	ldr	r2, [r2, #12]
 8007140:	609a      	str	r2, [r3, #8]
 8007142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007144:	68db      	ldr	r3, [r3, #12]
 8007146:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007148:	6892      	ldr	r2, [r2, #8]
 800714a:	605a      	str	r2, [r3, #4]
 800714c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800714e:	685a      	ldr	r2, [r3, #4]
 8007150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007152:	3304      	adds	r3, #4
 8007154:	429a      	cmp	r2, r3
 8007156:	d103      	bne.n	8007160 <xTaskGenericNotify+0x160>
 8007158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800715a:	68da      	ldr	r2, [r3, #12]
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715e:	605a      	str	r2, [r3, #4]
 8007160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007162:	2200      	movs	r2, #0
 8007164:	615a      	str	r2, [r3, #20]
 8007166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	1e5a      	subs	r2, r3, #1
 800716c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800716e:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8007170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007172:	4618      	mov	r0, r3
 8007174:	f003 f85e 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	2201      	movs	r2, #1
 800717e:	409a      	lsls	r2, r3
 8007180:	4b35      	ldr	r3, [pc, #212]	@ (8007258 <xTaskGenericNotify+0x258>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4313      	orrs	r3, r2
 8007186:	4a34      	ldr	r2, [pc, #208]	@ (8007258 <xTaskGenericNotify+0x258>)
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718e:	4933      	ldr	r1, [pc, #204]	@ (800725c <xTaskGenericNotify+0x25c>)
 8007190:	4613      	mov	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	4413      	add	r3, r2
 8007196:	009b      	lsls	r3, r3, #2
 8007198:	440b      	add	r3, r1
 800719a:	3304      	adds	r3, #4
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	627b      	str	r3, [r7, #36]	@ 0x24
 80071a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071a4:	609a      	str	r2, [r3, #8]
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	689a      	ldr	r2, [r3, #8]
 80071aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ac:	60da      	str	r2, [r3, #12]
 80071ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071b4:	3204      	adds	r2, #4
 80071b6:	605a      	str	r2, [r3, #4]
 80071b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071ba:	1d1a      	adds	r2, r3, #4
 80071bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071c4:	4613      	mov	r3, r2
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	4a23      	ldr	r2, [pc, #140]	@ (800725c <xTaskGenericNotify+0x25c>)
 80071ce:	441a      	add	r2, r3
 80071d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d2:	615a      	str	r2, [r3, #20]
 80071d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071d8:	4920      	ldr	r1, [pc, #128]	@ (800725c <xTaskGenericNotify+0x25c>)
 80071da:	4613      	mov	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	440b      	add	r3, r1
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071e8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80071ea:	1c59      	adds	r1, r3, #1
 80071ec:	481b      	ldr	r0, [pc, #108]	@ (800725c <xTaskGenericNotify+0x25c>)
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009b      	lsls	r3, r3, #2
 80071f6:	4403      	add	r3, r0
 80071f8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00b      	beq.n	800721a <xTaskGenericNotify+0x21a>
    __asm volatile
 8007202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007206:	f383 8811 	msr	BASEPRI, r3
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	617b      	str	r3, [r7, #20]
}
 8007214:	bf00      	nop
 8007216:	bf00      	nop
 8007218:	e7fd      	b.n	8007216 <xTaskGenericNotify+0x216>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 800721a:	4b11      	ldr	r3, [pc, #68]	@ (8007260 <xTaskGenericNotify+0x260>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007224:	429a      	cmp	r2, r3
 8007226:	d207      	bcs.n	8007238 <xTaskGenericNotify+0x238>
 8007228:	4b0e      	ldr	r3, [pc, #56]	@ (8007264 <xTaskGenericNotify+0x264>)
 800722a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	f3bf 8f4f 	dsb	sy
 8007234:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007238:	f001 f846 	bl	80082c8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );
 800723c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800723e:	4619      	mov	r1, r3
 8007240:	f240 1001 	movw	r0, #257	@ 0x101
 8007244:	f002 fefe 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007248:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800724a:	4618      	mov	r0, r3
 800724c:	3738      	adds	r7, #56	@ 0x38
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000304 	.word	0x20000304
 8007258:	20000308 	.word	0x20000308
 800725c:	2000022c 	.word	0x2000022c
 8007260:	20000228 	.word	0x20000228
 8007264:	e000ed04 	.word	0xe000ed04

08007268 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8007268:	b580      	push	{r7, lr}
 800726a:	b092      	sub	sp, #72	@ 0x48
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
 8007274:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8007276:	2301      	movs	r3, #1
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10b      	bne.n	8007298 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8007280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007284:	f383 8811 	msr	BASEPRI, r3
 8007288:	f3bf 8f6f 	isb	sy
 800728c:	f3bf 8f4f 	dsb	sy
 8007290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007292:	bf00      	nop
 8007294:	bf00      	nop
 8007296:	e7fd      	b.n	8007294 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00b      	beq.n	80072b6 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80072b6:	f001 f8c1 	bl	800843c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	643b      	str	r3, [r7, #64]	@ 0x40
    __asm volatile
 80072be:	f3ef 8211 	mrs	r2, BASEPRI
 80072c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	623a      	str	r2, [r7, #32]
 80072d4:	61fb      	str	r3, [r7, #28]
    return ulOriginalBASEPRI;
 80072d6:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80072d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80072da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d006      	beq.n	80072ee <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80072e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	3214      	adds	r2, #20
 80072e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80072ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072ec:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80072ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4413      	add	r3, r2
 80072f4:	3354      	adds	r3, #84	@ 0x54
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80072fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	4413      	add	r3, r2
 8007302:	3354      	adds	r3, #84	@ 0x54
 8007304:	2202      	movs	r2, #2
 8007306:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	2b04      	cmp	r3, #4
 800730c:	d83b      	bhi.n	8007386 <xTaskGenericNotifyFromISR+0x11e>
 800730e:	a201      	add	r2, pc, #4	@ (adr r2, 8007314 <xTaskGenericNotifyFromISR+0xac>)
 8007310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007314:	080073a7 	.word	0x080073a7
 8007318:	08007329 	.word	0x08007329
 800731c:	08007345 	.word	0x08007345
 8007320:	0800735d 	.word	0x0800735d
 8007324:	0800736b 	.word	0x0800736b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8007328:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800732a:	68ba      	ldr	r2, [r7, #8]
 800732c:	3214      	adds	r2, #20
 800732e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	ea42 0103 	orr.w	r1, r2, r3
 8007338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800733a:	68ba      	ldr	r2, [r7, #8]
 800733c:	3214      	adds	r2, #20
 800733e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007342:	e033      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8007344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	3214      	adds	r2, #20
 800734a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800734e:	1c59      	adds	r1, r3, #1
 8007350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007352:	68ba      	ldr	r2, [r7, #8]
 8007354:	3214      	adds	r2, #20
 8007356:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800735a:	e027      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800735c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	3214      	adds	r2, #20
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8007368:	e020      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800736a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800736e:	2b02      	cmp	r3, #2
 8007370:	d006      	beq.n	8007380 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8007372:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007374:	68ba      	ldr	r2, [r7, #8]
 8007376:	3214      	adds	r2, #20
 8007378:	6879      	ldr	r1, [r7, #4]
 800737a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800737e:	e015      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8007380:	2300      	movs	r3, #0
 8007382:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8007384:	e012      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8007386:	4b67      	ldr	r3, [pc, #412]	@ (8007524 <xTaskGenericNotifyFromISR+0x2bc>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d00d      	beq.n	80073aa <xTaskGenericNotifyFromISR+0x142>
    __asm volatile
 800738e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	61bb      	str	r3, [r7, #24]
}
 80073a0:	bf00      	nop
 80073a2:	bf00      	nop
 80073a4:	e7fd      	b.n	80073a2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80073a6:	bf00      	nop
 80073a8:	e000      	b.n	80073ac <xTaskGenericNotifyFromISR+0x144>
                    break;
 80073aa:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80073ac:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80073b0:	2b01      	cmp	r3, #1
 80073b2:	f040 80a5 	bne.w	8007500 <xTaskGenericNotifyFromISR+0x298>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80073b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00b      	beq.n	80073d6 <xTaskGenericNotifyFromISR+0x16e>
    __asm volatile
 80073be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c2:	f383 8811 	msr	BASEPRI, r3
 80073c6:	f3bf 8f6f 	isb	sy
 80073ca:	f3bf 8f4f 	dsb	sy
 80073ce:	617b      	str	r3, [r7, #20]
}
 80073d0:	bf00      	nop
 80073d2:	bf00      	nop
 80073d4:	e7fd      	b.n	80073d2 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80073d6:	4b54      	ldr	r3, [pc, #336]	@ (8007528 <xTaskGenericNotifyFromISR+0x2c0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d164      	bne.n	80074a8 <xTaskGenericNotifyFromISR+0x240>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80073de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e0:	695b      	ldr	r3, [r3, #20]
 80073e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80073e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073ea:	68d2      	ldr	r2, [r2, #12]
 80073ec:	609a      	str	r2, [r3, #8]
 80073ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80073f4:	6892      	ldr	r2, [r2, #8]
 80073f6:	605a      	str	r2, [r3, #4]
 80073f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073fa:	685a      	ldr	r2, [r3, #4]
 80073fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fe:	3304      	adds	r3, #4
 8007400:	429a      	cmp	r2, r3
 8007402:	d103      	bne.n	800740c <xTaskGenericNotifyFromISR+0x1a4>
 8007404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007406:	68da      	ldr	r2, [r3, #12]
 8007408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800740a:	605a      	str	r2, [r3, #4]
 800740c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800740e:	2200      	movs	r2, #0
 8007410:	615a      	str	r2, [r3, #20]
 8007412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	1e5a      	subs	r2, r3, #1
 8007418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800741c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800741e:	4618      	mov	r0, r3
 8007420:	f002 ff08 	bl	800a234 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007424:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007428:	2201      	movs	r2, #1
 800742a:	409a      	lsls	r2, r3
 800742c:	4b3f      	ldr	r3, [pc, #252]	@ (800752c <xTaskGenericNotifyFromISR+0x2c4>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4313      	orrs	r3, r2
 8007432:	4a3e      	ldr	r2, [pc, #248]	@ (800752c <xTaskGenericNotifyFromISR+0x2c4>)
 8007434:	6013      	str	r3, [r2, #0]
 8007436:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007438:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743a:	493d      	ldr	r1, [pc, #244]	@ (8007530 <xTaskGenericNotifyFromISR+0x2c8>)
 800743c:	4613      	mov	r3, r2
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	440b      	add	r3, r1
 8007446:	3304      	adds	r3, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800744c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800744e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007450:	609a      	str	r2, [r3, #8]
 8007452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007454:	689a      	ldr	r2, [r3, #8]
 8007456:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007458:	60da      	str	r2, [r3, #12]
 800745a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007460:	3204      	adds	r2, #4
 8007462:	605a      	str	r2, [r3, #4]
 8007464:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007466:	1d1a      	adds	r2, r3, #4
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	609a      	str	r2, [r3, #8]
 800746c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800746e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007470:	4613      	mov	r3, r2
 8007472:	009b      	lsls	r3, r3, #2
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	4a2d      	ldr	r2, [pc, #180]	@ (8007530 <xTaskGenericNotifyFromISR+0x2c8>)
 800747a:	441a      	add	r2, r3
 800747c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800747e:	615a      	str	r2, [r3, #20]
 8007480:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007484:	492a      	ldr	r1, [pc, #168]	@ (8007530 <xTaskGenericNotifyFromISR+0x2c8>)
 8007486:	4613      	mov	r3, r2
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	4413      	add	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	440b      	add	r3, r1
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007494:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007496:	1c59      	adds	r1, r3, #1
 8007498:	4825      	ldr	r0, [pc, #148]	@ (8007530 <xTaskGenericNotifyFromISR+0x2c8>)
 800749a:	4613      	mov	r3, r2
 800749c:	009b      	lsls	r3, r3, #2
 800749e:	4413      	add	r3, r2
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4403      	add	r3, r0
 80074a4:	6019      	str	r1, [r3, #0]
 80074a6:	e01b      	b.n	80074e0 <xTaskGenericNotifyFromISR+0x278>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80074a8:	4b22      	ldr	r3, [pc, #136]	@ (8007534 <xTaskGenericNotifyFromISR+0x2cc>)
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80074ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074b2:	61da      	str	r2, [r3, #28]
 80074b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074b6:	689a      	ldr	r2, [r3, #8]
 80074b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074ba:	621a      	str	r2, [r3, #32]
 80074bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074c2:	3218      	adds	r2, #24
 80074c4:	605a      	str	r2, [r3, #4]
 80074c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074c8:	f103 0218 	add.w	r2, r3, #24
 80074cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074d2:	4a18      	ldr	r2, [pc, #96]	@ (8007534 <xTaskGenericNotifyFromISR+0x2cc>)
 80074d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80074d6:	4b17      	ldr	r3, [pc, #92]	@ (8007534 <xTaskGenericNotifyFromISR+0x2cc>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	3301      	adds	r3, #1
 80074dc:	4a15      	ldr	r2, [pc, #84]	@ (8007534 <xTaskGenericNotifyFromISR+0x2cc>)
 80074de:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80074e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80074e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074e4:	4b14      	ldr	r3, [pc, #80]	@ (8007538 <xTaskGenericNotifyFromISR+0x2d0>)
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074ea:	429a      	cmp	r2, r3
 80074ec:	d908      	bls.n	8007500 <xTaskGenericNotifyFromISR+0x298>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80074ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d002      	beq.n	80074fa <xTaskGenericNotifyFromISR+0x292>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80074f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074f6:	2201      	movs	r2, #1
 80074f8:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80074fa:	4b10      	ldr	r3, [pc, #64]	@ (800753c <xTaskGenericNotifyFromISR+0x2d4>)
 80074fc:	2201      	movs	r2, #1
 80074fe:	601a      	str	r2, [r3, #0]
 8007500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007502:	613b      	str	r3, [r7, #16]
    __asm volatile
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	f383 8811 	msr	BASEPRI, r3
}
 800750a:	bf00      	nop
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );
 800750c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800750e:	4619      	mov	r1, r3
 8007510:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8007514:	f002 fd96 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800751a:	4618      	mov	r0, r3
 800751c:	3748      	adds	r7, #72	@ 0x48
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	20000304 	.word	0x20000304
 8007528:	20000328 	.word	0x20000328
 800752c:	20000308 	.word	0x20000308
 8007530:	2000022c 	.word	0x2000022c
 8007534:	200002c0 	.word	0x200002c0
 8007538:	20000228 	.word	0x20000228
 800753c:	20000314 	.word	0x20000314

08007540 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b088      	sub	sp, #32
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
 8007548:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800754a:	4b3d      	ldr	r3, [pc, #244]	@ (8007640 <prvAddCurrentTaskToDelayedList+0x100>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8007550:	4b3c      	ldr	r3, [pc, #240]	@ (8007644 <prvAddCurrentTaskToDelayedList+0x104>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8007556:	4b3c      	ldr	r3, [pc, #240]	@ (8007648 <prvAddCurrentTaskToDelayedList+0x108>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800755c:	4b3b      	ldr	r3, [pc, #236]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	3304      	adds	r3, #4
 8007562:	4618      	mov	r0, r3
 8007564:	f7fd fc58 	bl	8004e18 <uxListRemove>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10b      	bne.n	8007586 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800756e:	4b37      	ldr	r3, [pc, #220]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007574:	2201      	movs	r2, #1
 8007576:	fa02 f303 	lsl.w	r3, r2, r3
 800757a:	43da      	mvns	r2, r3
 800757c:	4b34      	ldr	r3, [pc, #208]	@ (8007650 <prvAddCurrentTaskToDelayedList+0x110>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4013      	ands	r3, r2
 8007582:	4a33      	ldr	r2, [pc, #204]	@ (8007650 <prvAddCurrentTaskToDelayedList+0x110>)
 8007584:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	f1b3 3fff 	cmp.w	r3, #4294967295
 800758c:	d124      	bne.n	80075d8 <prvAddCurrentTaskToDelayedList+0x98>
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d021      	beq.n	80075d8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007594:	4b2f      	ldr	r3, [pc, #188]	@ (8007654 <prvAddCurrentTaskToDelayedList+0x114>)
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	613b      	str	r3, [r7, #16]
 800759a:	4b2c      	ldr	r3, [pc, #176]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	693a      	ldr	r2, [r7, #16]
 80075a0:	609a      	str	r2, [r3, #8]
 80075a2:	4b2a      	ldr	r3, [pc, #168]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	6892      	ldr	r2, [r2, #8]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	4b27      	ldr	r3, [pc, #156]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	3204      	adds	r2, #4
 80075b6:	605a      	str	r2, [r3, #4]
 80075b8:	4b24      	ldr	r3, [pc, #144]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	1d1a      	adds	r2, r3, #4
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	609a      	str	r2, [r3, #8]
 80075c2:	4b22      	ldr	r3, [pc, #136]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a23      	ldr	r2, [pc, #140]	@ (8007654 <prvAddCurrentTaskToDelayedList+0x114>)
 80075c8:	615a      	str	r2, [r3, #20]
 80075ca:	4b22      	ldr	r3, [pc, #136]	@ (8007654 <prvAddCurrentTaskToDelayedList+0x114>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	3301      	adds	r3, #1
 80075d0:	4a20      	ldr	r2, [pc, #128]	@ (8007654 <prvAddCurrentTaskToDelayedList+0x114>)
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80075d6:	e02e      	b.n	8007636 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80075d8:	69fa      	ldr	r2, [r7, #28]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80075e0:	4b1a      	ldr	r3, [pc, #104]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80075e8:	68fa      	ldr	r2, [r7, #12]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d20d      	bcs.n	800760c <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80075f0:	4b16      	ldr	r3, [pc, #88]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2104      	movs	r1, #4
 80075f6:	4618      	mov	r0, r3
 80075f8:	f002 fe5e 	bl	800a2b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80075fc:	4b13      	ldr	r3, [pc, #76]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	3304      	adds	r3, #4
 8007602:	4619      	mov	r1, r3
 8007604:	6978      	ldr	r0, [r7, #20]
 8007606:	f7fd fbcc 	bl	8004da2 <vListInsert>
}
 800760a:	e014      	b.n	8007636 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 800760c:	4b0f      	ldr	r3, [pc, #60]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	2104      	movs	r1, #4
 8007612:	4618      	mov	r0, r3
 8007614:	f002 fe50 	bl	800a2b8 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8007618:	4b0c      	ldr	r3, [pc, #48]	@ (800764c <prvAddCurrentTaskToDelayedList+0x10c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3304      	adds	r3, #4
 800761e:	4619      	mov	r1, r3
 8007620:	69b8      	ldr	r0, [r7, #24]
 8007622:	f7fd fbbe 	bl	8004da2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8007626:	4b0c      	ldr	r3, [pc, #48]	@ (8007658 <prvAddCurrentTaskToDelayedList+0x118>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	429a      	cmp	r2, r3
 800762e:	d202      	bcs.n	8007636 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8007630:	4a09      	ldr	r2, [pc, #36]	@ (8007658 <prvAddCurrentTaskToDelayedList+0x118>)
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6013      	str	r3, [r2, #0]
}
 8007636:	bf00      	nop
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	20000304 	.word	0x20000304
 8007644:	200002b8 	.word	0x200002b8
 8007648:	200002bc 	.word	0x200002bc
 800764c:	20000228 	.word	0x20000228
 8007650:	20000308 	.word	0x20000308
 8007654:	200002ec 	.word	0x200002ec
 8007658:	20000320 	.word	0x20000320

0800765c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4a07      	ldr	r2, [pc, #28]	@ (8007688 <vApplicationGetIdleTaskMemory+0x2c>)
 800766c:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	4a06      	ldr	r2, [pc, #24]	@ (800768c <vApplicationGetIdleTaskMemory+0x30>)
 8007672:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2282      	movs	r2, #130	@ 0x82
 8007678:	601a      	str	r2, [r3, #0]
    }
 800767a:	bf00      	nop
 800767c:	3714      	adds	r7, #20
 800767e:	46bd      	mov	sp, r7
 8007680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop
 8007688:	2000032c 	.word	0x2000032c
 800768c:	20000384 	.word	0x20000384

08007690 <vApplicationGetTimerTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetTimerTaskMemory( StaticTask_t ** ppxTimerTaskTCBBuffer,
                                         StackType_t ** ppxTimerTaskStackBuffer,
                                         configSTACK_DEPTH_TYPE * puxTimerTaskStackSize )
    {
 8007690:	b480      	push	{r7}
 8007692:	b085      	sub	sp, #20
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
        static StaticTask_t xTimerTaskTCB;
        static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

        *ppxTimerTaskTCBBuffer = &( xTimerTaskTCB );
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	4a07      	ldr	r2, [pc, #28]	@ (80076bc <vApplicationGetTimerTaskMemory+0x2c>)
 80076a0:	601a      	str	r2, [r3, #0]
        *ppxTimerTaskStackBuffer = &( uxTimerTaskStack[ 0 ] );
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	4a06      	ldr	r2, [pc, #24]	@ (80076c0 <vApplicationGetTimerTaskMemory+0x30>)
 80076a6:	601a      	str	r2, [r3, #0]
        *puxTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80076ae:	601a      	str	r2, [r3, #0]
    }
 80076b0:	bf00      	nop
 80076b2:	3714      	adds	r7, #20
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr
 80076bc:	2000058c 	.word	0x2000058c
 80076c0:	200005e4 	.word	0x200005e4

080076c4 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	@ 0x28
 80076c8:	af04      	add	r7, sp, #16
        BaseType_t xReturn = pdFAIL;
 80076ca:	2300      	movs	r3, #0
 80076cc:	617b      	str	r3, [r7, #20]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80076ce:	f000 fb2f 	bl	8007d30 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80076d2:	4b20      	ldr	r3, [pc, #128]	@ (8007754 <xTimerCreateTimerTask+0x90>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d021      	beq.n	800771e <xTimerCreateTimerTask+0x5a>
            }
            #else /* #if ( ( configNUMBER_OF_CORES > 1 ) && ( configUSE_CORE_AFFINITY == 1 ) ) */
            {
                #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
                {
                    StaticTask_t * pxTimerTaskTCBBuffer = NULL;
 80076da:	2300      	movs	r3, #0
 80076dc:	60fb      	str	r3, [r7, #12]
                    StackType_t * pxTimerTaskStackBuffer = NULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	60bb      	str	r3, [r7, #8]
                    configSTACK_DEPTH_TYPE uxTimerTaskStackSize;

                    vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &uxTimerTaskStackSize );
 80076e2:	1d3a      	adds	r2, r7, #4
 80076e4:	f107 0108 	add.w	r1, r7, #8
 80076e8:	f107 030c 	add.w	r3, r7, #12
 80076ec:	4618      	mov	r0, r3
 80076ee:	f7ff ffcf 	bl	8007690 <vApplicationGetTimerTaskMemory>
                    xTimerTaskHandle = xTaskCreateStatic( prvTimerTask,
 80076f2:	6879      	ldr	r1, [r7, #4]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	9202      	str	r2, [sp, #8]
 80076fa:	9301      	str	r3, [sp, #4]
 80076fc:	2302      	movs	r3, #2
 80076fe:	9300      	str	r3, [sp, #0]
 8007700:	2300      	movs	r3, #0
 8007702:	460a      	mov	r2, r1
 8007704:	4914      	ldr	r1, [pc, #80]	@ (8007758 <xTimerCreateTimerTask+0x94>)
 8007706:	4815      	ldr	r0, [pc, #84]	@ (800775c <xTimerCreateTimerTask+0x98>)
 8007708:	f7fe fad2 	bl	8005cb0 <xTaskCreateStatic>
 800770c:	4603      	mov	r3, r0
 800770e:	4a14      	ldr	r2, [pc, #80]	@ (8007760 <xTimerCreateTimerTask+0x9c>)
 8007710:	6013      	str	r3, [r2, #0]
                                                          NULL,
                                                          ( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
                                                          pxTimerTaskStackBuffer,
                                                          pxTimerTaskTCBBuffer );

                    if( xTimerTaskHandle != NULL )
 8007712:	4b13      	ldr	r3, [pc, #76]	@ (8007760 <xTimerCreateTimerTask+0x9c>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d001      	beq.n	800771e <xTimerCreateTimerTask+0x5a>
                    {
                        xReturn = pdPASS;
 800771a:	2301      	movs	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d10b      	bne.n	800773c <xTimerCreateTimerTask+0x78>
    __asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	613b      	str	r3, [r7, #16]
}
 8007736:	bf00      	nop
 8007738:	bf00      	nop
 800773a:	e7fd      	b.n	8007738 <xTimerCreateTimerTask+0x74>

        traceRETURN_xTimerCreateTimerTask( xReturn );
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	4619      	mov	r1, r3
 8007740:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8007744:	f002 fc7e 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007748:	697b      	ldr	r3, [r7, #20]
    }
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000a24 	.word	0x20000a24
 8007758:	0800bc9c 	.word	0x0800bc9c
 800775c:	08007985 	.word	0x08007985
 8007760:	20000a28 	.word	0x20000a28

08007764 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName,
                                    const TickType_t xTimerPeriodInTicks,
                                    const BaseType_t xAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af02      	add	r7, sp, #8
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	603b      	str	r3, [r7, #0]
            traceENTER_xTimerCreate( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction );

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8007772:	202c      	movs	r0, #44	@ 0x2c
 8007774:	f000 fea4 	bl	80084c0 <pvPortMalloc>
 8007778:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00d      	beq.n	800779c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, xAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	9301      	str	r3, [sp, #4]
 800778c:	6a3b      	ldr	r3, [r7, #32]
 800778e:	9300      	str	r3, [sp, #0]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	68b9      	ldr	r1, [r7, #8]
 8007796:	68f8      	ldr	r0, [r7, #12]
 8007798:	f000 f80f 	bl	80077ba <prvInitialiseNewTimer>
            }

            traceRETURN_xTimerCreate( pxNewTimer );
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	4618      	mov	r0, r3
 80077a0:	f002 fdea 	bl	800a378 <SEGGER_SYSVIEW_ShrinkId>
 80077a4:	4603      	mov	r3, r0
 80077a6:	4619      	mov	r1, r3
 80077a8:	f240 1009 	movw	r0, #265	@ 0x109
 80077ac:	f002 fc4a 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

            return pxNewTimer;
 80077b0:	697b      	ldr	r3, [r7, #20]
        }
 80077b2:	4618      	mov	r0, r3
 80077b4:	3718      	adds	r7, #24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const BaseType_t xAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b086      	sub	sp, #24
 80077be:	af00      	add	r7, sp, #0
 80077c0:	60f8      	str	r0, [r7, #12]
 80077c2:	60b9      	str	r1, [r7, #8]
 80077c4:	607a      	str	r2, [r7, #4]
 80077c6:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10b      	bne.n	80077e6 <prvInitialiseNewTimer+0x2c>
    __asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	617b      	str	r3, [r7, #20]
}
 80077e0:	bf00      	nop
 80077e2:	bf00      	nop
 80077e4:	e7fd      	b.n	80077e2 <prvInitialiseNewTimer+0x28>

        /* Ensure the infrastructure used by the timer service task has been
         * created/initialised. */
        prvCheckForValidListAndQueue();
 80077e6:	f000 faa3 	bl	8007d30 <prvCheckForValidListAndQueue>

        /* Initialise the timer structure members using the function
         * parameters. */
        pxNewTimer->pcTimerName = pcTimerName;
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]
        pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80077f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	619a      	str	r2, [r3, #24]
        pxNewTimer->pvTimerID = pvTimerID;
 80077f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077f8:	683a      	ldr	r2, [r7, #0]
 80077fa:	61da      	str	r2, [r3, #28]
        pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80077fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fe:	6a3a      	ldr	r2, [r7, #32]
 8007800:	621a      	str	r2, [r3, #32]
        vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007804:	3304      	adds	r3, #4
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd fabc 	bl	8004d84 <vListInitialiseItem>

        if( xAutoReload != pdFALSE )
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d008      	beq.n	8007824 <prvInitialiseNewTimer+0x6a>
        {
            pxNewTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_AUTORELOAD;
 8007812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007814:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007818:	f043 0304 	orr.w	r3, r3, #4
 800781c:	b2da      	uxtb	r2, r3
 800781e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007820:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        traceTIMER_CREATE( pxNewTimer );
    }
 8007824:	bf00      	nop
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <xTimerGenericCommandFromTask>:
    BaseType_t xTimerGenericCommandFromTask( TimerHandle_t xTimer,
                                             const BaseType_t xCommandID,
                                             const TickType_t xOptionalValue,
                                             BaseType_t * const pxHigherPriorityTaskWoken,
                                             const TickType_t xTicksToWait )
    {
 800782c:	b580      	push	{r7, lr}
 800782e:	b08a      	sub	sp, #40	@ 0x28
 8007830:	af00      	add	r7, sp, #0
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
 8007838:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800783a:	2300      	movs	r3, #0
 800783c:	627b      	str	r3, [r7, #36]	@ 0x24

        ( void ) pxHigherPriorityTaskWoken;

        traceENTER_xTimerGenericCommandFromTask( xTimer, xCommandID, xOptionalValue, pxHigherPriorityTaskWoken, xTicksToWait );

        configASSERT( xTimer );
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10b      	bne.n	800785c <xTimerGenericCommandFromTask+0x30>
    __asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	623b      	str	r3, [r7, #32]
}
 8007856:	bf00      	nop
 8007858:	bf00      	nop
 800785a:	e7fd      	b.n	8007858 <xTimerGenericCommandFromTask+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 800785c:	4b1f      	ldr	r3, [pc, #124]	@ (80078dc <xTimerGenericCommandFromTask+0xb0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d02f      	beq.n	80078c4 <xTimerGenericCommandFromTask+0x98>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	613b      	str	r3, [r7, #16]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	61bb      	str	r3, [r7, #24]

            configASSERT( xCommandID < tmrFIRST_FROM_ISR_COMMAND );
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	2b05      	cmp	r3, #5
 8007874:	dd0b      	ble.n	800788e <xTimerGenericCommandFromTask+0x62>
    __asm volatile
 8007876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800787a:	f383 8811 	msr	BASEPRI, r3
 800787e:	f3bf 8f6f 	isb	sy
 8007882:	f3bf 8f4f 	dsb	sy
 8007886:	61fb      	str	r3, [r7, #28]
}
 8007888:	bf00      	nop
 800788a:	bf00      	nop
 800788c:	e7fd      	b.n	800788a <xTimerGenericCommandFromTask+0x5e>

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	2b05      	cmp	r3, #5
 8007892:	dc17      	bgt.n	80078c4 <xTimerGenericCommandFromTask+0x98>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007894:	f7ff fa4a 	bl	8006d2c <xTaskGetSchedulerState>
 8007898:	4603      	mov	r3, r0
 800789a:	2b02      	cmp	r3, #2
 800789c:	d109      	bne.n	80078b2 <xTimerGenericCommandFromTask+0x86>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800789e:	4b0f      	ldr	r3, [pc, #60]	@ (80078dc <xTimerGenericCommandFromTask+0xb0>)
 80078a0:	6818      	ldr	r0, [r3, #0]
 80078a2:	f107 0110 	add.w	r1, r7, #16
 80078a6:	2300      	movs	r3, #0
 80078a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80078aa:	f7fd fc65 	bl	8005178 <xQueueGenericSend>
 80078ae:	6278      	str	r0, [r7, #36]	@ 0x24
 80078b0:	e008      	b.n	80078c4 <xTimerGenericCommandFromTask+0x98>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80078b2:	4b0a      	ldr	r3, [pc, #40]	@ (80078dc <xTimerGenericCommandFromTask+0xb0>)
 80078b4:	6818      	ldr	r0, [r3, #0]
 80078b6:	f107 0110 	add.w	r1, r7, #16
 80078ba:	2300      	movs	r3, #0
 80078bc:	2200      	movs	r2, #0
 80078be:	f7fd fc5b 	bl	8005178 <xQueueGenericSend>
 80078c2:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTimerGenericCommandFromTask( xReturn );
 80078c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c6:	4619      	mov	r1, r3
 80078c8:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80078cc:	f002 fbba 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80078d2:	4618      	mov	r0, r3
 80078d4:	3728      	adds	r7, #40	@ 0x28
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20000a24 	.word	0x20000a24

080078e0 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80078e0:	b580      	push	{r7, lr}
 80078e2:	b084      	sub	sp, #16
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	60f8      	str	r0, [r7, #12]
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80078ec:	e008      	b.n	8007900 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	699b      	ldr	r3, [r3, #24]
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	4413      	add	r3, r2
 80078f6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	699a      	ldr	r2, [r3, #24]
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	18d1      	adds	r1, r2, r3
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	68f8      	ldr	r0, [r7, #12]
 800790e:	f000 f8df 	bl	8007ad0 <prvInsertTimerInActiveList>
 8007912:	4603      	mov	r3, r0
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ea      	bne.n	80078ee <prvReloadTimer+0xe>
        }
    }
 8007918:	bf00      	nop
 800791a:	bf00      	nop
 800791c:	3710      	adds	r7, #16
 800791e:	46bd      	mov	sp, r7
 8007920:	bd80      	pop	{r7, pc}
	...

08007924 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	6039      	str	r1, [r7, #0]
        /* MISRA Ref 11.5.3 [Void pointer assignment] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
        /* coverity[misra_c_2012_rule_11_5_violation] */
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800792e:	4b14      	ldr	r3, [pc, #80]	@ (8007980 <prvProcessExpiredTimer+0x5c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68db      	ldr	r3, [r3, #12]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	3304      	adds	r3, #4
 800793c:	4618      	mov	r0, r3
 800793e:	f7fd fa6b 	bl	8004e18 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007948:	f003 0304 	and.w	r3, r3, #4
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	6879      	ldr	r1, [r7, #4]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f7ff ffc3 	bl	80078e0 <prvReloadTimer>
 800795a:	e008      	b.n	800796e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007962:	f023 0301 	bic.w	r3, r3, #1
 8007966:	b2da      	uxtb	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	4798      	blx	r3
    }
 8007976:	bf00      	nop
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000a1c 	.word	0x20000a1c

08007984 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007984:	b580      	push	{r7, lr}
 8007986:	b084      	sub	sp, #16
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]

        for( ; configCONTROL_INFINITE_LOOP(); )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800798c:	f107 0308 	add.w	r3, r7, #8
 8007990:	4618      	mov	r0, r3
 8007992:	f000 f859 	bl	8007a48 <prvGetNextExpireTime>
 8007996:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	4619      	mov	r1, r3
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f000 f805 	bl	80079ac <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80079a2:	f000 f8d7 	bl	8007b54 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80079a6:	bf00      	nop
 80079a8:	e7f0      	b.n	800798c <prvTimerTask+0x8>
	...

080079ac <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80079b6:	f7fe fc1d 	bl	80061f4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80079ba:	f107 0308 	add.w	r3, r7, #8
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f866 	bl	8007a90 <prvSampleTimeNow>
 80079c4:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d130      	bne.n	8007a2e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d10a      	bne.n	80079e8 <prvProcessTimerOrBlockTask+0x3c>
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d806      	bhi.n	80079e8 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80079da:	f7fe fc19 	bl	8006210 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80079de:	68f9      	ldr	r1, [r7, #12]
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7ff ff9f 	bl	8007924 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80079e6:	e024      	b.n	8007a32 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d008      	beq.n	8007a00 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80079ee:	4b13      	ldr	r3, [pc, #76]	@ (8007a3c <prvProcessTimerOrBlockTask+0x90>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d101      	bne.n	80079fc <prvProcessTimerOrBlockTask+0x50>
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <prvProcessTimerOrBlockTask+0x52>
 80079fc:	2300      	movs	r3, #0
 80079fe:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a00:	4b0f      	ldr	r3, [pc, #60]	@ (8007a40 <prvProcessTimerOrBlockTask+0x94>)
 8007a02:	6818      	ldr	r0, [r3, #0]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	683a      	ldr	r2, [r7, #0]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	f7fe f8b7 	bl	8005b80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8007a12:	f7fe fbfd 	bl	8006210 <xTaskResumeAll>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d10a      	bne.n	8007a32 <prvProcessTimerOrBlockTask+0x86>
                        taskYIELD_WITHIN_API();
 8007a1c:	4b09      	ldr	r3, [pc, #36]	@ (8007a44 <prvProcessTimerOrBlockTask+0x98>)
 8007a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	f3bf 8f4f 	dsb	sy
 8007a28:	f3bf 8f6f 	isb	sy
    }
 8007a2c:	e001      	b.n	8007a32 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8007a2e:	f7fe fbef 	bl	8006210 <xTaskResumeAll>
    }
 8007a32:	bf00      	nop
 8007a34:	3710      	adds	r7, #16
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	20000a20 	.word	0x20000a20
 8007a40:	20000a24 	.word	0x20000a24
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8007a48:	b480      	push	{r7}
 8007a4a:	b085      	sub	sp, #20
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007a50:	4b0e      	ldr	r3, [pc, #56]	@ (8007a8c <prvGetNextExpireTime+0x44>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <prvGetNextExpireTime+0x16>
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	e000      	b.n	8007a60 <prvGetNextExpireTime+0x18>
 8007a5e:	2200      	movs	r2, #0
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d105      	bne.n	8007a78 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a6c:	4b07      	ldr	r3, [pc, #28]	@ (8007a8c <prvGetNextExpireTime+0x44>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68db      	ldr	r3, [r3, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	e001      	b.n	8007a7c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
    }
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3714      	adds	r7, #20
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
 8007a8a:	bf00      	nop
 8007a8c:	20000a1c 	.word	0x20000a1c

08007a90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U;

        xTimeNow = xTaskGetTickCount();
 8007a98:	f7fe fccc 	bl	8006434 <xTaskGetTickCount>
 8007a9c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007a9e:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <prvSampleTimeNow+0x3c>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68fa      	ldr	r2, [r7, #12]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d205      	bcs.n	8007ab4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8007aa8:	f000 f91c 	bl	8007ce4 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	601a      	str	r2, [r3, #0]
 8007ab2:	e002      	b.n	8007aba <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8007aba:	4a04      	ldr	r2, [pc, #16]	@ (8007acc <prvSampleTimeNow+0x3c>)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
    }
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3710      	adds	r7, #16
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000a2c 	.word	0x20000a2c

08007ad0 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
 8007adc:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	68fa      	ldr	r2, [r7, #12]
 8007aec:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007aee:	68ba      	ldr	r2, [r7, #8]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d812      	bhi.n	8007b1c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	1ad2      	subs	r2, r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	699b      	ldr	r3, [r3, #24]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d302      	bcc.n	8007b0a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007b04:	2301      	movs	r3, #1
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	e01b      	b.n	8007b42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b0a:	4b10      	ldr	r3, [pc, #64]	@ (8007b4c <prvInsertTimerInActiveList+0x7c>)
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	3304      	adds	r3, #4
 8007b12:	4619      	mov	r1, r3
 8007b14:	4610      	mov	r0, r2
 8007b16:	f7fd f944 	bl	8004da2 <vListInsert>
 8007b1a:	e012      	b.n	8007b42 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b1c:	687a      	ldr	r2, [r7, #4]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d206      	bcs.n	8007b32 <prvInsertTimerInActiveList+0x62>
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	d302      	bcc.n	8007b32 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	617b      	str	r3, [r7, #20]
 8007b30:	e007      	b.n	8007b42 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007b32:	4b07      	ldr	r3, [pc, #28]	@ (8007b50 <prvInsertTimerInActiveList+0x80>)
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	3304      	adds	r3, #4
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	f7fd f930 	bl	8004da2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8007b42:	697b      	ldr	r3, [r7, #20]
    }
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	20000a20 	.word	0x20000a20
 8007b50:	20000a1c 	.word	0x20000a1c

08007b54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b088      	sub	sp, #32
 8007b58:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage = { 0 };
 8007b5a:	f107 0308 	add.w	r3, r7, #8
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	605a      	str	r2, [r3, #4]
 8007b64:	609a      	str	r2, [r3, #8]
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8007b66:	e0a9      	b.n	8007cbc <prvProcessReceivedCommands+0x168>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f2c0 80a6 	blt.w	8007cbc <prvProcessReceivedCommands+0x168>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <prvProcessReceivedCommands+0x32>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b7c:	69fb      	ldr	r3, [r7, #28]
 8007b7e:	3304      	adds	r3, #4
 8007b80:	4618      	mov	r0, r3
 8007b82:	f7fd f949 	bl	8004e18 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b86:	1d3b      	adds	r3, r7, #4
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7ff ff81 	bl	8007a90 <prvSampleTimeNow>
 8007b8e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	3b01      	subs	r3, #1
 8007b94:	2b08      	cmp	r3, #8
 8007b96:	f200 808e 	bhi.w	8007cb6 <prvProcessReceivedCommands+0x162>
 8007b9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ba0 <prvProcessReceivedCommands+0x4c>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bc5 	.word	0x08007bc5
 8007ba4:	08007bc5 	.word	0x08007bc5
 8007ba8:	08007c2d 	.word	0x08007c2d
 8007bac:	08007c41 	.word	0x08007c41
 8007bb0:	08007c8d 	.word	0x08007c8d
 8007bb4:	08007bc5 	.word	0x08007bc5
 8007bb8:	08007bc5 	.word	0x08007bc5
 8007bbc:	08007c2d 	.word	0x08007c2d
 8007bc0:	08007c41 	.word	0x08007c41
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bca:	f043 0301 	orr.w	r3, r3, #1
 8007bce:	b2da      	uxtb	r2, r3
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	18d1      	adds	r1, r2, r3
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	69ba      	ldr	r2, [r7, #24]
 8007be2:	69f8      	ldr	r0, [r7, #28]
 8007be4:	f7ff ff74 	bl	8007ad0 <prvInsertTimerInActiveList>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d065      	beq.n	8007cba <prvProcessReceivedCommands+0x166>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0U )
 8007bee:	69fb      	ldr	r3, [r7, #28]
 8007bf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <prvProcessReceivedCommands+0xbc>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8007bfc:	68fa      	ldr	r2, [r7, #12]
 8007bfe:	69fb      	ldr	r3, [r7, #28]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	4413      	add	r3, r2
 8007c04:	69ba      	ldr	r2, [r7, #24]
 8007c06:	4619      	mov	r1, r3
 8007c08:	69f8      	ldr	r0, [r7, #28]
 8007c0a:	f7ff fe69 	bl	80078e0 <prvReloadTimer>
 8007c0e:	e008      	b.n	8007c22 <prvProcessReceivedCommands+0xce>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c10:	69fb      	ldr	r3, [r7, #28]
 8007c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	69fb      	ldr	r3, [r7, #28]
 8007c1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c22:	69fb      	ldr	r3, [r7, #28]
 8007c24:	6a1b      	ldr	r3, [r3, #32]
 8007c26:	69f8      	ldr	r0, [r7, #28]
 8007c28:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8007c2a:	e046      	b.n	8007cba <prvProcessReceivedCommands+0x166>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c32:	f023 0301 	bic.w	r3, r3, #1
 8007c36:	b2da      	uxtb	r2, r3
 8007c38:	69fb      	ldr	r3, [r7, #28]
 8007c3a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007c3e:	e03d      	b.n	8007cbc <prvProcessReceivedCommands+0x168>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= ( uint8_t ) tmrSTATUS_IS_ACTIVE;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c46:	f043 0301 	orr.w	r3, r3, #1
 8007c4a:	b2da      	uxtb	r2, r3
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c52:	68fa      	ldr	r2, [r7, #12]
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	699b      	ldr	r3, [r3, #24]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d10b      	bne.n	8007c78 <prvProcessReceivedCommands+0x124>
    __asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	617b      	str	r3, [r7, #20]
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	e7fd      	b.n	8007c74 <prvProcessReceivedCommands+0x120>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	699a      	ldr	r2, [r3, #24]
 8007c7c:	69bb      	ldr	r3, [r7, #24]
 8007c7e:	18d1      	adds	r1, r2, r3
 8007c80:	69bb      	ldr	r3, [r7, #24]
 8007c82:	69ba      	ldr	r2, [r7, #24]
 8007c84:	69f8      	ldr	r0, [r7, #28]
 8007c86:	f7ff ff23 	bl	8007ad0 <prvInsertTimerInActiveList>
                        break;
 8007c8a:	e017      	b.n	8007cbc <prvProcessReceivedCommands+0x168>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c8c:	69fb      	ldr	r3, [r7, #28]
 8007c8e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c92:	f003 0302 	and.w	r3, r3, #2
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d103      	bne.n	8007ca2 <prvProcessReceivedCommands+0x14e>
                            {
                                vPortFree( pxTimer );
 8007c9a:	69f8      	ldr	r0, [r7, #28]
 8007c9c:	f000 fd42 	bl	8008724 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8007ca0:	e00c      	b.n	8007cbc <prvProcessReceivedCommands+0x168>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8007ca2:	69fb      	ldr	r3, [r7, #28]
 8007ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	b2da      	uxtb	r2, r3
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8007cb4:	e002      	b.n	8007cbc <prvProcessReceivedCommands+0x168>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <prvProcessReceivedCommands+0x168>
                        break;
 8007cba:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
 8007cbc:	4b08      	ldr	r3, [pc, #32]	@ (8007ce0 <prvProcessReceivedCommands+0x18c>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f107 0108 	add.w	r1, r7, #8
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f7fd fc20 	bl	800550c <xQueueReceive>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f47f af4a 	bne.w	8007b68 <prvProcessReceivedCommands+0x14>
                }
            }
        }
    }
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop
 8007cd8:	3720      	adds	r7, #32
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	20000a24 	.word	0x20000a24

08007ce4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b082      	sub	sp, #8
 8007ce8:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cea:	e009      	b.n	8007d00 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cec:	4b0e      	ldr	r3, [pc, #56]	@ (8007d28 <prvSwitchTimerLists+0x44>)
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	68db      	ldr	r3, [r3, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8007cf6:	f04f 31ff 	mov.w	r1, #4294967295
 8007cfa:	6838      	ldr	r0, [r7, #0]
 8007cfc:	f7ff fe12 	bl	8007924 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d00:	4b09      	ldr	r3, [pc, #36]	@ (8007d28 <prvSwitchTimerLists+0x44>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1f0      	bne.n	8007cec <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8007d0a:	4b07      	ldr	r3, [pc, #28]	@ (8007d28 <prvSwitchTimerLists+0x44>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8007d10:	4b06      	ldr	r3, [pc, #24]	@ (8007d2c <prvSwitchTimerLists+0x48>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a04      	ldr	r2, [pc, #16]	@ (8007d28 <prvSwitchTimerLists+0x44>)
 8007d16:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007d18:	4a04      	ldr	r2, [pc, #16]	@ (8007d2c <prvSwitchTimerLists+0x48>)
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	6013      	str	r3, [r2, #0]
    }
 8007d1e:	bf00      	nop
 8007d20:	3708      	adds	r7, #8
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	20000a1c 	.word	0x20000a1c
 8007d2c:	20000a20 	.word	0x20000a20

08007d30 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b082      	sub	sp, #8
 8007d34:	af02      	add	r7, sp, #8
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8007d36:	f000 fa95 	bl	8008264 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007d3a:	4b15      	ldr	r3, [pc, #84]	@ (8007d90 <prvCheckForValidListAndQueue+0x60>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d120      	bne.n	8007d84 <prvCheckForValidListAndQueue+0x54>
            {
                vListInitialise( &xActiveTimerList1 );
 8007d42:	4814      	ldr	r0, [pc, #80]	@ (8007d94 <prvCheckForValidListAndQueue+0x64>)
 8007d44:	f7fc fffc 	bl	8004d40 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8007d48:	4813      	ldr	r0, [pc, #76]	@ (8007d98 <prvCheckForValidListAndQueue+0x68>)
 8007d4a:	f7fc fff9 	bl	8004d40 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007d4e:	4b13      	ldr	r3, [pc, #76]	@ (8007d9c <prvCheckForValidListAndQueue+0x6c>)
 8007d50:	4a10      	ldr	r2, [pc, #64]	@ (8007d94 <prvCheckForValidListAndQueue+0x64>)
 8007d52:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8007d54:	4b12      	ldr	r3, [pc, #72]	@ (8007da0 <prvCheckForValidListAndQueue+0x70>)
 8007d56:	4a10      	ldr	r2, [pc, #64]	@ (8007d98 <prvCheckForValidListAndQueue+0x68>)
 8007d58:	601a      	str	r2, [r3, #0]
                    /* The timer queue is allocated statically in case
                     * configSUPPORT_DYNAMIC_ALLOCATION is 0. */
                    PRIVILEGED_DATA static StaticQueue_t xStaticTimerQueue;
                    PRIVILEGED_DATA static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ];

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	9300      	str	r3, [sp, #0]
 8007d5e:	4b11      	ldr	r3, [pc, #68]	@ (8007da4 <prvCheckForValidListAndQueue+0x74>)
 8007d60:	4a11      	ldr	r2, [pc, #68]	@ (8007da8 <prvCheckForValidListAndQueue+0x78>)
 8007d62:	210c      	movs	r1, #12
 8007d64:	200a      	movs	r0, #10
 8007d66:	f7fd f91d 	bl	8004fa4 <xQueueGenericCreateStatic>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	4a08      	ldr	r2, [pc, #32]	@ (8007d90 <prvCheckForValidListAndQueue+0x60>)
 8007d6e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8007d70:	4b07      	ldr	r3, [pc, #28]	@ (8007d90 <prvCheckForValidListAndQueue+0x60>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <prvCheckForValidListAndQueue+0x54>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <prvCheckForValidListAndQueue+0x60>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	490b      	ldr	r1, [pc, #44]	@ (8007dac <prvCheckForValidListAndQueue+0x7c>)
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd feae 	bl	8005ae0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007d84:	f000 faa0 	bl	80082c8 <vPortExitCritical>
    }
 8007d88:	bf00      	nop
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	20000a24 	.word	0x20000a24
 8007d94:	200009f4 	.word	0x200009f4
 8007d98:	20000a08 	.word	0x20000a08
 8007d9c:	20000a1c 	.word	0x20000a1c
 8007da0:	20000a20 	.word	0x20000a20
 8007da4:	20000aa8 	.word	0x20000aa8
 8007da8:	20000a30 	.word	0x20000a30
 8007dac:	0800bca4 	.word	0x0800bca4

08007db0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b086      	sub	sp, #24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	613b      	str	r3, [r7, #16]

        traceENTER_xTimerIsTimerActive( xTimer );

        configASSERT( xTimer );
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d10b      	bne.n	8007dda <xTimerIsTimerActive+0x2a>
    __asm volatile
 8007dc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	60fb      	str	r3, [r7, #12]
}
 8007dd4:	bf00      	nop
 8007dd6:	bf00      	nop
 8007dd8:	e7fd      	b.n	8007dd6 <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 8007dda:	f000 fa43 	bl	8008264 <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0U )
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007de4:	f003 0301 	and.w	r3, r3, #1
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d102      	bne.n	8007df2 <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 8007dec:	2300      	movs	r3, #0
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	e001      	b.n	8007df6 <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 8007df2:	2301      	movs	r3, #1
 8007df4:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 8007df6:	f000 fa67 	bl	80082c8 <vPortExitCritical>

        traceRETURN_xTimerIsTimerActive( xReturn );
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f44f 7089 	mov.w	r0, #274	@ 0x112
 8007e02:	f002 f91f 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8007e06:	697b      	ldr	r3, [r7, #20]
    }
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        traceENTER_pvTimerGetTimerID( xTimer );

        configASSERT( xTimer );
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d10b      	bne.n	8007e3a <pvTimerGetTimerID+0x2a>
    __asm volatile
 8007e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e26:	f383 8811 	msr	BASEPRI, r3
 8007e2a:	f3bf 8f6f 	isb	sy
 8007e2e:	f3bf 8f4f 	dsb	sy
 8007e32:	60fb      	str	r3, [r7, #12]
}
 8007e34:	bf00      	nop
 8007e36:	bf00      	nop
 8007e38:	e7fd      	b.n	8007e36 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007e3a:	f000 fa13 	bl	8008264 <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007e3e:	697b      	ldr	r3, [r7, #20]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8007e44:	f000 fa40 	bl	80082c8 <vPortExitCritical>

        traceRETURN_pvTimerGetTimerID( pvReturn );
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f002 fa94 	bl	800a378 <SEGGER_SYSVIEW_ShrinkId>
 8007e50:	4603      	mov	r3, r0
 8007e52:	4619      	mov	r1, r3
 8007e54:	f240 1013 	movw	r0, #275	@ 0x113
 8007e58:	f002 f8f4 	bl	800a044 <SEGGER_SYSVIEW_RecordEndCallU32>

        return pvReturn;
 8007e5c:	693b      	ldr	r3, [r7, #16]
    }
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3b04      	subs	r3, #4
 8007e78:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e80:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b04      	subs	r3, #4
 8007e86:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8007e88:	68bb      	ldr	r3, [r7, #8]
 8007e8a:	f023 0201 	bic.w	r2, r3, #1
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	3b04      	subs	r3, #4
 8007e96:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8007e98:	4a0c      	ldr	r2, [pc, #48]	@ (8007ecc <pxPortInitialiseStack+0x64>)
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3b14      	subs	r3, #20
 8007ea2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	3b04      	subs	r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f06f 0202 	mvn.w	r2, #2
 8007eb6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3b20      	subs	r3, #32
 8007ebc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3714      	adds	r7, #20
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	08007ed1 	.word	0x08007ed1

08007ed0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b085      	sub	sp, #20
 8007ed4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8007eda:	4b13      	ldr	r3, [pc, #76]	@ (8007f28 <prvTaskExitError+0x58>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ee2:	d00b      	beq.n	8007efc <prvTaskExitError+0x2c>
    __asm volatile
 8007ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee8:	f383 8811 	msr	BASEPRI, r3
 8007eec:	f3bf 8f6f 	isb	sy
 8007ef0:	f3bf 8f4f 	dsb	sy
 8007ef4:	60fb      	str	r3, [r7, #12]
}
 8007ef6:	bf00      	nop
 8007ef8:	bf00      	nop
 8007efa:	e7fd      	b.n	8007ef8 <prvTaskExitError+0x28>
    __asm volatile
 8007efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f00:	f383 8811 	msr	BASEPRI, r3
 8007f04:	f3bf 8f6f 	isb	sy
 8007f08:	f3bf 8f4f 	dsb	sy
 8007f0c:	60bb      	str	r3, [r7, #8]
}
 8007f0e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8007f10:	bf00      	nop
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d0fc      	beq.n	8007f12 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	3714      	adds	r7, #20
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
 8007f26:	bf00      	nop
 8007f28:	20000024 	.word	0x20000024
 8007f2c:	00000000 	.word	0x00000000

08007f30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007f30:	4b07      	ldr	r3, [pc, #28]	@ (8007f50 <pxCurrentTCBConst2>)
 8007f32:	6819      	ldr	r1, [r3, #0]
 8007f34:	6808      	ldr	r0, [r1, #0]
 8007f36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3a:	f380 8809 	msr	PSP, r0
 8007f3e:	f3bf 8f6f 	isb	sy
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8811 	msr	BASEPRI, r0
 8007f4a:	4770      	bx	lr
 8007f4c:	f3af 8000 	nop.w

08007f50 <pxCurrentTCBConst2>:
 8007f50:	20000228 	.word	0x20000228
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8007f54:	bf00      	nop
 8007f56:	bf00      	nop

08007f58 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007f58:	4808      	ldr	r0, [pc, #32]	@ (8007f7c <prvPortStartFirstTask+0x24>)
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	6800      	ldr	r0, [r0, #0]
 8007f5e:	f380 8808 	msr	MSP, r0
 8007f62:	f04f 0000 	mov.w	r0, #0
 8007f66:	f380 8814 	msr	CONTROL, r0
 8007f6a:	b662      	cpsie	i
 8007f6c:	b661      	cpsie	f
 8007f6e:	f3bf 8f4f 	dsb	sy
 8007f72:	f3bf 8f6f 	isb	sy
 8007f76:	df00      	svc	0
 8007f78:	bf00      	nop
 8007f7a:	0000      	.short	0x0000
 8007f7c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8007f80:	bf00      	nop
 8007f82:	bf00      	nop

08007f84 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b08c      	sub	sp, #48	@ 0x30
 8007f88:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f8a:	4b69      	ldr	r3, [pc, #420]	@ (8008130 <xPortStartScheduler+0x1ac>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4a69      	ldr	r2, [pc, #420]	@ (8008134 <xPortStartScheduler+0x1b0>)
 8007f90:	4293      	cmp	r3, r2
 8007f92:	d10b      	bne.n	8007fac <xPortStartScheduler+0x28>
    __asm volatile
 8007f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007fa6:	bf00      	nop
 8007fa8:	bf00      	nop
 8007faa:	e7fd      	b.n	8007fa8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007fac:	4b60      	ldr	r3, [pc, #384]	@ (8008130 <xPortStartScheduler+0x1ac>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a61      	ldr	r2, [pc, #388]	@ (8008138 <xPortStartScheduler+0x1b4>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d10b      	bne.n	8007fce <xPortStartScheduler+0x4a>
    __asm volatile
 8007fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fba:	f383 8811 	msr	BASEPRI, r3
 8007fbe:	f3bf 8f6f 	isb	sy
 8007fc2:	f3bf 8f4f 	dsb	sy
 8007fc6:	623b      	str	r3, [r7, #32]
}
 8007fc8:	bf00      	nop
 8007fca:	bf00      	nop
 8007fcc:	e7fd      	b.n	8007fca <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8007fce:	4b5b      	ldr	r3, [pc, #364]	@ (800813c <xPortStartScheduler+0x1b8>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8007fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fd6:	332c      	adds	r3, #44	@ 0x2c
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a59      	ldr	r2, [pc, #356]	@ (8008140 <xPortStartScheduler+0x1bc>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00b      	beq.n	8007ff8 <xPortStartScheduler+0x74>
    __asm volatile
 8007fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fe4:	f383 8811 	msr	BASEPRI, r3
 8007fe8:	f3bf 8f6f 	isb	sy
 8007fec:	f3bf 8f4f 	dsb	sy
 8007ff0:	61fb      	str	r3, [r7, #28]
}
 8007ff2:	bf00      	nop
 8007ff4:	bf00      	nop
 8007ff6:	e7fd      	b.n	8007ff4 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8007ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ffa:	3338      	adds	r3, #56	@ 0x38
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a51      	ldr	r2, [pc, #324]	@ (8008144 <xPortStartScheduler+0x1c0>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d00b      	beq.n	800801c <xPortStartScheduler+0x98>
    __asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	61bb      	str	r3, [r7, #24]
}
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800801c:	2300      	movs	r3, #0
 800801e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008020:	4b49      	ldr	r3, [pc, #292]	@ (8008148 <xPortStartScheduler+0x1c4>)
 8008022:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	b2db      	uxtb	r3, r3
 800802a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800802c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800802e:	22ff      	movs	r2, #255	@ 0xff
 8008030:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b2db      	uxtb	r3, r3
 8008038:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800803a:	79fb      	ldrb	r3, [r7, #7]
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008042:	b2da      	uxtb	r2, r3
 8008044:	4b41      	ldr	r3, [pc, #260]	@ (800814c <xPortStartScheduler+0x1c8>)
 8008046:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8008048:	4b40      	ldr	r3, [pc, #256]	@ (800814c <xPortStartScheduler+0x1c8>)
 800804a:	781b      	ldrb	r3, [r3, #0]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d10b      	bne.n	8008068 <xPortStartScheduler+0xe4>
    __asm volatile
 8008050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008054:	f383 8811 	msr	BASEPRI, r3
 8008058:	f3bf 8f6f 	isb	sy
 800805c:	f3bf 8f4f 	dsb	sy
 8008060:	617b      	str	r3, [r7, #20]
}
 8008062:	bf00      	nop
 8008064:	bf00      	nop
 8008066:	e7fd      	b.n	8008064 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	b2db      	uxtb	r3, r3
 800806c:	43db      	mvns	r3, r3
 800806e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008072:	2b00      	cmp	r3, #0
 8008074:	d013      	beq.n	800809e <xPortStartScheduler+0x11a>
    __asm volatile
 8008076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800807a:	f383 8811 	msr	BASEPRI, r3
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	613b      	str	r3, [r7, #16]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	3301      	adds	r3, #1
 8008092:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008094:	79fb      	ldrb	r3, [r7, #7]
 8008096:	b2db      	uxtb	r3, r3
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	b2db      	uxtb	r3, r3
 800809c:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800809e:	79fb      	ldrb	r3, [r7, #7]
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a6:	2b80      	cmp	r3, #128	@ 0x80
 80080a8:	d0f1      	beq.n	800808e <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	2b08      	cmp	r3, #8
 80080ae:	d103      	bne.n	80080b8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80080b0:	4b27      	ldr	r3, [pc, #156]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	601a      	str	r2, [r3, #0]
 80080b6:	e004      	b.n	80080c2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	f1c3 0307 	rsb	r3, r3, #7
 80080be:	4a24      	ldr	r2, [pc, #144]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080c0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080c2:	4b23      	ldr	r3, [pc, #140]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	4a21      	ldr	r2, [pc, #132]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080ca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080cc:	4b20      	ldr	r3, [pc, #128]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080d4:	4a1e      	ldr	r2, [pc, #120]	@ (8008150 <xPortStartScheduler+0x1cc>)
 80080d6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80080d8:	7bfb      	ldrb	r3, [r7, #15]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080de:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80080e0:	4b1c      	ldr	r3, [pc, #112]	@ (8008154 <xPortStartScheduler+0x1d0>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008154 <xPortStartScheduler+0x1d0>)
 80080e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80080ea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80080ec:	4b19      	ldr	r3, [pc, #100]	@ (8008154 <xPortStartScheduler+0x1d0>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a18      	ldr	r2, [pc, #96]	@ (8008154 <xPortStartScheduler+0x1d0>)
 80080f2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80080f6:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80080f8:	4b17      	ldr	r3, [pc, #92]	@ (8008158 <xPortStartScheduler+0x1d4>)
 80080fa:	2200      	movs	r2, #0
 80080fc:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80080fe:	f000 f96d 	bl	80083dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008102:	4b16      	ldr	r3, [pc, #88]	@ (800815c <xPortStartScheduler+0x1d8>)
 8008104:	2200      	movs	r2, #0
 8008106:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008108:	f000 f98c 	bl	8008424 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800810c:	4b14      	ldr	r3, [pc, #80]	@ (8008160 <xPortStartScheduler+0x1dc>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a13      	ldr	r2, [pc, #76]	@ (8008160 <xPortStartScheduler+0x1dc>)
 8008112:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008116:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008118:	f7ff ff1e 	bl	8007f58 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800811c:	f7fe fae2 	bl	80066e4 <vTaskSwitchContext>
    prvTaskExitError();
 8008120:	f7ff fed6 	bl	8007ed0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3730      	adds	r7, #48	@ 0x30
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	e000ed00 	.word	0xe000ed00
 8008134:	410fc271 	.word	0x410fc271
 8008138:	410fc270 	.word	0x410fc270
 800813c:	e000ed08 	.word	0xe000ed08
 8008140:	08007f31 	.word	0x08007f31
 8008144:	08008321 	.word	0x08008321
 8008148:	e000e400 	.word	0xe000e400
 800814c:	20000af8 	.word	0x20000af8
 8008150:	20000afc 	.word	0x20000afc
 8008154:	e000ed20 	.word	0xe000ed20
 8008158:	e000ed1c 	.word	0xe000ed1c
 800815c:	20000024 	.word	0x20000024
 8008160:	e000ef34 	.word	0xe000ef34

08008164 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800816a:	4b38      	ldr	r3, [pc, #224]	@ (800824c <vInitPrioGroupValue+0xe8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a38      	ldr	r2, [pc, #224]	@ (8008250 <vInitPrioGroupValue+0xec>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d10b      	bne.n	800818c <vInitPrioGroupValue+0x28>
    __asm volatile
 8008174:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008178:	f383 8811 	msr	BASEPRI, r3
 800817c:	f3bf 8f6f 	isb	sy
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	613b      	str	r3, [r7, #16]
}
 8008186:	bf00      	nop
 8008188:	bf00      	nop
 800818a:	e7fd      	b.n	8008188 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800818c:	4b2f      	ldr	r3, [pc, #188]	@ (800824c <vInitPrioGroupValue+0xe8>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a30      	ldr	r2, [pc, #192]	@ (8008254 <vInitPrioGroupValue+0xf0>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d10b      	bne.n	80081ae <vInitPrioGroupValue+0x4a>
    __asm volatile
 8008196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800819a:	f383 8811 	msr	BASEPRI, r3
 800819e:	f3bf 8f6f 	isb	sy
 80081a2:	f3bf 8f4f 	dsb	sy
 80081a6:	60fb      	str	r3, [r7, #12]
}
 80081a8:	bf00      	nop
 80081aa:	bf00      	nop
 80081ac:	e7fd      	b.n	80081aa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80081ae:	4b2a      	ldr	r3, [pc, #168]	@ (8008258 <vInitPrioGroupValue+0xf4>)
 80081b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	22ff      	movs	r2, #255	@ 0xff
 80081be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081c0:	697b      	ldr	r3, [r7, #20]
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081c8:	78fb      	ldrb	r3, [r7, #3]
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	4b22      	ldr	r3, [pc, #136]	@ (800825c <vInitPrioGroupValue+0xf8>)
 80081d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081d6:	4b22      	ldr	r3, [pc, #136]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 80081d8:	2207      	movs	r2, #7
 80081da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081dc:	e009      	b.n	80081f2 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80081de:	4b20      	ldr	r3, [pc, #128]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	3b01      	subs	r3, #1
 80081e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 80081e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081e8:	78fb      	ldrb	r3, [r7, #3]
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081f2:	78fb      	ldrb	r3, [r7, #3]
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081fa:	2b80      	cmp	r3, #128	@ 0x80
 80081fc:	d0ef      	beq.n	80081de <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081fe:	4b18      	ldr	r3, [pc, #96]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f1c3 0307 	rsb	r3, r3, #7
 8008206:	2b04      	cmp	r3, #4
 8008208:	d00b      	beq.n	8008222 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	60bb      	str	r3, [r7, #8]
}
 800821c:	bf00      	nop
 800821e:	bf00      	nop
 8008220:	e7fd      	b.n	800821e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008222:	4b0f      	ldr	r3, [pc, #60]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	021b      	lsls	r3, r3, #8
 8008228:	4a0d      	ldr	r2, [pc, #52]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 800822a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800822c:	4b0c      	ldr	r3, [pc, #48]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008234:	4a0a      	ldr	r2, [pc, #40]	@ (8008260 <vInitPrioGroupValue+0xfc>)
 8008236:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8008240:	bf00      	nop
 8008242:	371c      	adds	r7, #28
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr
 800824c:	e000ed00 	.word	0xe000ed00
 8008250:	410fc271 	.word	0x410fc271
 8008254:	410fc270 	.word	0x410fc270
 8008258:	e000e400 	.word	0xe000e400
 800825c:	20000af8 	.word	0x20000af8
 8008260:	20000afc 	.word	0x20000afc

08008264 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
    __asm volatile
 800826a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800826e:	f383 8811 	msr	BASEPRI, r3
 8008272:	f3bf 8f6f 	isb	sy
 8008276:	f3bf 8f4f 	dsb	sy
 800827a:	607b      	str	r3, [r7, #4]
}
 800827c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800827e:	4b10      	ldr	r3, [pc, #64]	@ (80082c0 <vPortEnterCritical+0x5c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	3301      	adds	r3, #1
 8008284:	4a0e      	ldr	r2, [pc, #56]	@ (80082c0 <vPortEnterCritical+0x5c>)
 8008286:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008288:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <vPortEnterCritical+0x5c>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d110      	bne.n	80082b2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008290:	4b0c      	ldr	r3, [pc, #48]	@ (80082c4 <vPortEnterCritical+0x60>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	b2db      	uxtb	r3, r3
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00b      	beq.n	80082b2 <vPortEnterCritical+0x4e>
    __asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <vPortEnterCritical+0x4a>
    }
}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	20000024 	.word	0x20000024
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80082ce:	4b12      	ldr	r3, [pc, #72]	@ (8008318 <vPortExitCritical+0x50>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d10b      	bne.n	80082ee <vPortExitCritical+0x26>
    __asm volatile
 80082d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	607b      	str	r3, [r7, #4]
}
 80082e8:	bf00      	nop
 80082ea:	bf00      	nop
 80082ec:	e7fd      	b.n	80082ea <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80082ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008318 <vPortExitCritical+0x50>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3b01      	subs	r3, #1
 80082f4:	4a08      	ldr	r2, [pc, #32]	@ (8008318 <vPortExitCritical+0x50>)
 80082f6:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80082f8:	4b07      	ldr	r3, [pc, #28]	@ (8008318 <vPortExitCritical+0x50>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d105      	bne.n	800830c <vPortExitCritical+0x44>
 8008300:	2300      	movs	r3, #0
 8008302:	603b      	str	r3, [r7, #0]
    __asm volatile
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	f383 8811 	msr	BASEPRI, r3
}
 800830a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr
 8008318:	20000024 	.word	0x20000024
 800831c:	00000000 	.word	0x00000000

08008320 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8008320:	f3ef 8009 	mrs	r0, PSP
 8008324:	f3bf 8f6f 	isb	sy
 8008328:	4b15      	ldr	r3, [pc, #84]	@ (8008380 <pxCurrentTCBConst>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	f01e 0f10 	tst.w	lr, #16
 8008330:	bf08      	it	eq
 8008332:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008336:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833a:	6010      	str	r0, [r2, #0]
 800833c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008340:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008344:	f380 8811 	msr	BASEPRI, r0
 8008348:	f3bf 8f4f 	dsb	sy
 800834c:	f3bf 8f6f 	isb	sy
 8008350:	f7fe f9c8 	bl	80066e4 <vTaskSwitchContext>
 8008354:	f04f 0000 	mov.w	r0, #0
 8008358:	f380 8811 	msr	BASEPRI, r0
 800835c:	bc09      	pop	{r0, r3}
 800835e:	6819      	ldr	r1, [r3, #0]
 8008360:	6808      	ldr	r0, [r1, #0]
 8008362:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008366:	f01e 0f10 	tst.w	lr, #16
 800836a:	bf08      	it	eq
 800836c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008370:	f380 8809 	msr	PSP, r0
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop
 800837c:	f3af 8000 	nop.w

08008380 <pxCurrentTCBConst>:
 8008380:	20000228 	.word	0x20000228
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8008384:	bf00      	nop
 8008386:	bf00      	nop

08008388 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
    __asm volatile
 800838e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008392:	f383 8811 	msr	BASEPRI, r3
 8008396:	f3bf 8f6f 	isb	sy
 800839a:	f3bf 8f4f 	dsb	sy
 800839e:	607b      	str	r3, [r7, #4]
}
 80083a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80083a2:	f001 fd99 	bl	8009ed8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80083a6:	f7fe f87b 	bl	80064a0 <xTaskIncrementTick>
 80083aa:	4603      	mov	r3, r0
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d006      	beq.n	80083be <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 80083b0:	f001 fdf0 	bl	8009f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083b4:	4b08      	ldr	r3, [pc, #32]	@ (80083d8 <SysTick_Handler+0x50>)
 80083b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	e001      	b.n	80083c2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 80083be:	f001 fdcd 	bl	8009f5c <SEGGER_SYSVIEW_RecordExitISR>
 80083c2:	2300      	movs	r3, #0
 80083c4:	603b      	str	r3, [r7, #0]
    __asm volatile
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	f383 8811 	msr	BASEPRI, r3
}
 80083cc:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80083ce:	bf00      	nop
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	e000ed04 	.word	0xe000ed04

080083dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80083dc:	b480      	push	{r7}
 80083de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083e0:	4b0b      	ldr	r3, [pc, #44]	@ (8008410 <vPortSetupTimerInterrupt+0x34>)
 80083e2:	2200      	movs	r2, #0
 80083e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008414 <vPortSetupTimerInterrupt+0x38>)
 80083e8:	2200      	movs	r2, #0
 80083ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008418 <vPortSetupTimerInterrupt+0x3c>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a0a      	ldr	r2, [pc, #40]	@ (800841c <vPortSetupTimerInterrupt+0x40>)
 80083f2:	fba2 2303 	umull	r2, r3, r2, r3
 80083f6:	099b      	lsrs	r3, r3, #6
 80083f8:	4a09      	ldr	r2, [pc, #36]	@ (8008420 <vPortSetupTimerInterrupt+0x44>)
 80083fa:	3b01      	subs	r3, #1
 80083fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80083fe:	4b04      	ldr	r3, [pc, #16]	@ (8008410 <vPortSetupTimerInterrupt+0x34>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
}
 8008404:	bf00      	nop
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	e000e010 	.word	0xe000e010
 8008414:	e000e018 	.word	0xe000e018
 8008418:	20000010 	.word	0x20000010
 800841c:	10624dd3 	.word	0x10624dd3
 8008420:	e000e014 	.word	0xe000e014

08008424 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8008424:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008434 <vPortEnableVFP+0x10>
 8008428:	6801      	ldr	r1, [r0, #0]
 800842a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800842e:	6001      	str	r1, [r0, #0]
 8008430:	4770      	bx	lr
 8008432:	0000      	.short	0x0000
 8008434:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8008438:	bf00      	nop
 800843a:	bf00      	nop

0800843c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8008442:	f3ef 8305 	mrs	r3, IPSR
 8008446:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d915      	bls.n	800847a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800844e:	4a18      	ldr	r2, [pc, #96]	@ (80084b0 <vPortValidateInterruptPriority+0x74>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008458:	4b16      	ldr	r3, [pc, #88]	@ (80084b4 <vPortValidateInterruptPriority+0x78>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	7afa      	ldrb	r2, [r7, #11]
 800845e:	429a      	cmp	r2, r3
 8008460:	d20b      	bcs.n	800847a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008466:	f383 8811 	msr	BASEPRI, r3
 800846a:	f3bf 8f6f 	isb	sy
 800846e:	f3bf 8f4f 	dsb	sy
 8008472:	607b      	str	r3, [r7, #4]
}
 8008474:	bf00      	nop
 8008476:	bf00      	nop
 8008478:	e7fd      	b.n	8008476 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800847a:	4b0f      	ldr	r3, [pc, #60]	@ (80084b8 <vPortValidateInterruptPriority+0x7c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008482:	4b0e      	ldr	r3, [pc, #56]	@ (80084bc <vPortValidateInterruptPriority+0x80>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	429a      	cmp	r2, r3
 8008488:	d90b      	bls.n	80084a2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	603b      	str	r3, [r7, #0]
}
 800849c:	bf00      	nop
 800849e:	bf00      	nop
 80084a0:	e7fd      	b.n	800849e <vPortValidateInterruptPriority+0x62>
    }
 80084a2:	bf00      	nop
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	e000e3f0 	.word	0xe000e3f0
 80084b4:	20000af8 	.word	0x20000af8
 80084b8:	e000ed0c 	.word	0xe000ed0c
 80084bc:	20000afc 	.word	0x20000afc

080084c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b08e      	sub	sp, #56	@ 0x38
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80084c8:	2300      	movs	r3, #0
 80084ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d022      	beq.n	8008518 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 80084d2:	2308      	movs	r3, #8
 80084d4:	43db      	mvns	r3, r3
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	429a      	cmp	r2, r3
 80084da:	d81b      	bhi.n	8008514 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 80084dc:	2208      	movs	r2, #8
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4413      	add	r3, r2
 80084e2:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d014      	beq.n	8008518 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f003 0307 	and.w	r3, r3, #7
 80084f4:	f1c3 0308 	rsb	r3, r3, #8
 80084f8:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80084fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084fc:	43db      	mvns	r3, r3
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	429a      	cmp	r2, r3
 8008502:	d804      	bhi.n	800850e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008508:	4413      	add	r3, r2
 800850a:	607b      	str	r3, [r7, #4]
 800850c:	e004      	b.n	8008518 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800850e:	2300      	movs	r3, #0
 8008510:	607b      	str	r3, [r7, #4]
 8008512:	e001      	b.n	8008518 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8008514:	2300      	movs	r3, #0
 8008516:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8008518:	f7fd fe6c 	bl	80061f4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800851c:	4b7a      	ldr	r3, [pc, #488]	@ (8008708 <pvPortMalloc+0x248>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d101      	bne.n	8008528 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8008524:	f000 f978 	bl	8008818 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2b00      	cmp	r3, #0
 800852c:	f2c0 80d3 	blt.w	80086d6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	f000 80cf 	beq.w	80086d6 <pvPortMalloc+0x216>
 8008538:	4b74      	ldr	r3, [pc, #464]	@ (800870c <pvPortMalloc+0x24c>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	429a      	cmp	r2, r3
 8008540:	f200 80c9 	bhi.w	80086d6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8008544:	4b72      	ldr	r3, [pc, #456]	@ (8008710 <pvPortMalloc+0x250>)
 8008546:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8008548:	4b71      	ldr	r3, [pc, #452]	@ (8008710 <pvPortMalloc+0x250>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800854e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008550:	4a70      	ldr	r2, [pc, #448]	@ (8008714 <pvPortMalloc+0x254>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d305      	bcc.n	8008562 <pvPortMalloc+0xa2>
 8008556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008558:	4a6f      	ldr	r2, [pc, #444]	@ (8008718 <pvPortMalloc+0x258>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d801      	bhi.n	8008562 <pvPortMalloc+0xa2>
 800855e:	2301      	movs	r3, #1
 8008560:	e000      	b.n	8008564 <pvPortMalloc+0xa4>
 8008562:	2300      	movs	r3, #0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d129      	bne.n	80085bc <pvPortMalloc+0xfc>
    __asm volatile
 8008568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856c:	f383 8811 	msr	BASEPRI, r3
 8008570:	f3bf 8f6f 	isb	sy
 8008574:	f3bf 8f4f 	dsb	sy
 8008578:	623b      	str	r3, [r7, #32]
}
 800857a:	bf00      	nop
 800857c:	bf00      	nop
 800857e:	e7fd      	b.n	800857c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8008580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8008584:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 800858a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800858c:	4a61      	ldr	r2, [pc, #388]	@ (8008714 <pvPortMalloc+0x254>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d305      	bcc.n	800859e <pvPortMalloc+0xde>
 8008592:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008594:	4a60      	ldr	r2, [pc, #384]	@ (8008718 <pvPortMalloc+0x258>)
 8008596:	4293      	cmp	r3, r2
 8008598:	d801      	bhi.n	800859e <pvPortMalloc+0xde>
 800859a:	2301      	movs	r3, #1
 800859c:	e000      	b.n	80085a0 <pvPortMalloc+0xe0>
 800859e:	2300      	movs	r3, #0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d10b      	bne.n	80085bc <pvPortMalloc+0xfc>
    __asm volatile
 80085a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	61fb      	str	r3, [r7, #28]
}
 80085b6:	bf00      	nop
 80085b8:	bf00      	nop
 80085ba:	e7fd      	b.n	80085b8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80085bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	687a      	ldr	r2, [r7, #4]
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d903      	bls.n	80085ce <pvPortMalloc+0x10e>
 80085c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d1d8      	bne.n	8008580 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80085ce:	4b4e      	ldr	r3, [pc, #312]	@ (8008708 <pvPortMalloc+0x248>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d07e      	beq.n	80086d6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80085d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2208      	movs	r2, #8
 80085de:	4413      	add	r3, r2
 80085e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 80085e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e4:	4a4b      	ldr	r2, [pc, #300]	@ (8008714 <pvPortMalloc+0x254>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d305      	bcc.n	80085f6 <pvPortMalloc+0x136>
 80085ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085ec:	4a4a      	ldr	r2, [pc, #296]	@ (8008718 <pvPortMalloc+0x258>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d801      	bhi.n	80085f6 <pvPortMalloc+0x136>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <pvPortMalloc+0x138>
 80085f6:	2300      	movs	r3, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10b      	bne.n	8008614 <pvPortMalloc+0x154>
    __asm volatile
 80085fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008600:	f383 8811 	msr	BASEPRI, r3
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	61bb      	str	r3, [r7, #24]
}
 800860e:	bf00      	nop
 8008610:	bf00      	nop
 8008612:	e7fd      	b.n	8008610 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800861a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800861c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	429a      	cmp	r2, r3
 8008624:	d90b      	bls.n	800863e <pvPortMalloc+0x17e>
    __asm volatile
 8008626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800862a:	f383 8811 	msr	BASEPRI, r3
 800862e:	f3bf 8f6f 	isb	sy
 8008632:	f3bf 8f4f 	dsb	sy
 8008636:	617b      	str	r3, [r7, #20]
}
 8008638:	bf00      	nop
 800863a:	bf00      	nop
 800863c:	e7fd      	b.n	800863a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800863e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	1ad2      	subs	r2, r2, r3
 8008646:	2308      	movs	r3, #8
 8008648:	005b      	lsls	r3, r3, #1
 800864a:	429a      	cmp	r2, r3
 800864c:	d924      	bls.n	8008698 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800864e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4413      	add	r3, r2
 8008654:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008658:	f003 0307 	and.w	r3, r3, #7
 800865c:	2b00      	cmp	r3, #0
 800865e:	d00b      	beq.n	8008678 <pvPortMalloc+0x1b8>
    __asm volatile
 8008660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	613b      	str	r3, [r7, #16]
}
 8008672:	bf00      	nop
 8008674:	bf00      	nop
 8008676:	e7fd      	b.n	8008674 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008678:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	1ad2      	subs	r2, r2, r3
 8008680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008682:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8008684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008686:	687a      	ldr	r2, [r7, #4]
 8008688:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800868a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008690:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8008692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008696:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008698:	4b1c      	ldr	r3, [pc, #112]	@ (800870c <pvPortMalloc+0x24c>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	4a1a      	ldr	r2, [pc, #104]	@ (800870c <pvPortMalloc+0x24c>)
 80086a4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80086a6:	4b19      	ldr	r3, [pc, #100]	@ (800870c <pvPortMalloc+0x24c>)
 80086a8:	681a      	ldr	r2, [r3, #0]
 80086aa:	4b1c      	ldr	r3, [pc, #112]	@ (800871c <pvPortMalloc+0x25c>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	429a      	cmp	r2, r3
 80086b0:	d203      	bcs.n	80086ba <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80086b2:	4b16      	ldr	r3, [pc, #88]	@ (800870c <pvPortMalloc+0x24c>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a19      	ldr	r2, [pc, #100]	@ (800871c <pvPortMalloc+0x25c>)
 80086b8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80086ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086bc:	685b      	ldr	r3, [r3, #4]
 80086be:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80086c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80086c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80086cc:	4b14      	ldr	r3, [pc, #80]	@ (8008720 <pvPortMalloc+0x260>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a13      	ldr	r2, [pc, #76]	@ (8008720 <pvPortMalloc+0x260>)
 80086d4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80086d6:	f7fd fd9b 	bl	8006210 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80086da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d00b      	beq.n	80086fc <pvPortMalloc+0x23c>
    __asm volatile
 80086e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e8:	f383 8811 	msr	BASEPRI, r3
 80086ec:	f3bf 8f6f 	isb	sy
 80086f0:	f3bf 8f4f 	dsb	sy
 80086f4:	60fb      	str	r3, [r7, #12]
}
 80086f6:	bf00      	nop
 80086f8:	bf00      	nop
 80086fa:	e7fd      	b.n	80086f8 <pvPortMalloc+0x238>
    return pvReturn;
 80086fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3738      	adds	r7, #56	@ 0x38
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	20019b08 	.word	0x20019b08
 800870c:	20019b0c 	.word	0x20019b0c
 8008710:	20019b00 	.word	0x20019b00
 8008714:	20000b00 	.word	0x20000b00
 8008718:	20019aff 	.word	0x20019aff
 800871c:	20019b10 	.word	0x20019b10
 8008720:	20019b14 	.word	0x20019b14

08008724 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d064      	beq.n	8008800 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8008736:	2308      	movs	r3, #8
 8008738:	425b      	negs	r3, r3
 800873a:	69fa      	ldr	r2, [r7, #28]
 800873c:	4413      	add	r3, r2
 800873e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	4a30      	ldr	r2, [pc, #192]	@ (8008808 <vPortFree+0xe4>)
 8008748:	4293      	cmp	r3, r2
 800874a:	d305      	bcc.n	8008758 <vPortFree+0x34>
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	4a2f      	ldr	r2, [pc, #188]	@ (800880c <vPortFree+0xe8>)
 8008750:	4293      	cmp	r3, r2
 8008752:	d801      	bhi.n	8008758 <vPortFree+0x34>
 8008754:	2301      	movs	r3, #1
 8008756:	e000      	b.n	800875a <vPortFree+0x36>
 8008758:	2300      	movs	r3, #0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d10b      	bne.n	8008776 <vPortFree+0x52>
    __asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	617b      	str	r3, [r7, #20]
}
 8008770:	bf00      	nop
 8008772:	bf00      	nop
 8008774:	e7fd      	b.n	8008772 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	2b00      	cmp	r3, #0
 800877c:	db0b      	blt.n	8008796 <vPortFree+0x72>
    __asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	f383 8811 	msr	BASEPRI, r3
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	f3bf 8f4f 	dsb	sy
 800878e:	613b      	str	r3, [r7, #16]
}
 8008790:	bf00      	nop
 8008792:	bf00      	nop
 8008794:	e7fd      	b.n	8008792 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d00b      	beq.n	80087b6 <vPortFree+0x92>
    __asm volatile
 800879e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087a2:	f383 8811 	msr	BASEPRI, r3
 80087a6:	f3bf 8f6f 	isb	sy
 80087aa:	f3bf 8f4f 	dsb	sy
 80087ae:	60fb      	str	r3, [r7, #12]
}
 80087b0:	bf00      	nop
 80087b2:	bf00      	nop
 80087b4:	e7fd      	b.n	80087b2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	0fdb      	lsrs	r3, r3, #31
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	b2db      	uxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d01c      	beq.n	8008800 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d118      	bne.n	8008800 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	685b      	ldr	r3, [r3, #4]
 80087d2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80087da:	f7fd fd0b 	bl	80061f4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	4b0b      	ldr	r3, [pc, #44]	@ (8008810 <vPortFree+0xec>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4413      	add	r3, r2
 80087e8:	4a09      	ldr	r2, [pc, #36]	@ (8008810 <vPortFree+0xec>)
 80087ea:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80087ec:	69b8      	ldr	r0, [r7, #24]
 80087ee:	f000 f86d 	bl	80088cc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80087f2:	4b08      	ldr	r3, [pc, #32]	@ (8008814 <vPortFree+0xf0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	3301      	adds	r3, #1
 80087f8:	4a06      	ldr	r2, [pc, #24]	@ (8008814 <vPortFree+0xf0>)
 80087fa:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80087fc:	f7fd fd08 	bl	8006210 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8008800:	bf00      	nop
 8008802:	3720      	adds	r7, #32
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	20000b00 	.word	0x20000b00
 800880c:	20019aff 	.word	0x20019aff
 8008810:	20019b0c 	.word	0x20019b0c
 8008814:	20019b18 	.word	0x20019b18

08008818 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800881e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8008822:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8008824:	4b24      	ldr	r3, [pc, #144]	@ (80088b8 <prvHeapInit+0xa0>)
 8008826:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f003 0307 	and.w	r3, r3, #7
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00c      	beq.n	800884c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	3307      	adds	r3, #7
 8008836:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8008840:	68ba      	ldr	r2, [r7, #8]
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	1ad3      	subs	r3, r2, r3
 8008846:	4a1c      	ldr	r2, [pc, #112]	@ (80088b8 <prvHeapInit+0xa0>)
 8008848:	4413      	add	r3, r2
 800884a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	4a1b      	ldr	r2, [pc, #108]	@ (80088bc <prvHeapInit+0xa4>)
 8008850:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8008852:	4b1a      	ldr	r3, [pc, #104]	@ (80088bc <prvHeapInit+0xa4>)
 8008854:	2200      	movs	r2, #0
 8008856:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	68bb      	ldr	r3, [r7, #8]
 800885c:	4413      	add	r3, r2
 800885e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8008860:	2208      	movs	r2, #8
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	1a9b      	subs	r3, r3, r2
 8008866:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f023 0307 	bic.w	r3, r3, #7
 800886e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a13      	ldr	r2, [pc, #76]	@ (80088c0 <prvHeapInit+0xa8>)
 8008874:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8008876:	4b12      	ldr	r3, [pc, #72]	@ (80088c0 <prvHeapInit+0xa8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2200      	movs	r2, #0
 800887c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800887e:	4b10      	ldr	r3, [pc, #64]	@ (80088c0 <prvHeapInit+0xa8>)
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2200      	movs	r2, #0
 8008884:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	1ad2      	subs	r2, r2, r3
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8008894:	4b0a      	ldr	r3, [pc, #40]	@ (80088c0 <prvHeapInit+0xa8>)
 8008896:	681a      	ldr	r2, [r3, #0]
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	4a08      	ldr	r2, [pc, #32]	@ (80088c4 <prvHeapInit+0xac>)
 80088a2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	4a07      	ldr	r2, [pc, #28]	@ (80088c8 <prvHeapInit+0xb0>)
 80088aa:	6013      	str	r3, [r2, #0]
}
 80088ac:	bf00      	nop
 80088ae:	3714      	adds	r7, #20
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr
 80088b8:	20000b00 	.word	0x20000b00
 80088bc:	20019b00 	.word	0x20019b00
 80088c0:	20019b08 	.word	0x20019b08
 80088c4:	20019b10 	.word	0x20019b10
 80088c8:	20019b0c 	.word	0x20019b0c

080088cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80088cc:	b480      	push	{r7}
 80088ce:	b087      	sub	sp, #28
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80088d4:	4b36      	ldr	r3, [pc, #216]	@ (80089b0 <prvInsertBlockIntoFreeList+0xe4>)
 80088d6:	617b      	str	r3, [r7, #20]
 80088d8:	e002      	b.n	80088e0 <prvInsertBlockIntoFreeList+0x14>
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	617b      	str	r3, [r7, #20]
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	687a      	ldr	r2, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d8f7      	bhi.n	80088da <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	4a30      	ldr	r2, [pc, #192]	@ (80089b0 <prvInsertBlockIntoFreeList+0xe4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d018      	beq.n	8008924 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	4a2f      	ldr	r2, [pc, #188]	@ (80089b4 <prvInsertBlockIntoFreeList+0xe8>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d305      	bcc.n	8008906 <prvInsertBlockIntoFreeList+0x3a>
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	4a2e      	ldr	r2, [pc, #184]	@ (80089b8 <prvInsertBlockIntoFreeList+0xec>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d801      	bhi.n	8008906 <prvInsertBlockIntoFreeList+0x3a>
 8008902:	2301      	movs	r3, #1
 8008904:	e000      	b.n	8008908 <prvInsertBlockIntoFreeList+0x3c>
 8008906:	2300      	movs	r3, #0
 8008908:	2b00      	cmp	r3, #0
 800890a:	d10b      	bne.n	8008924 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800890c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008910:	f383 8811 	msr	BASEPRI, r3
 8008914:	f3bf 8f6f 	isb	sy
 8008918:	f3bf 8f4f 	dsb	sy
 800891c:	60fb      	str	r3, [r7, #12]
}
 800891e:	bf00      	nop
 8008920:	bf00      	nop
 8008922:	e7fd      	b.n	8008920 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008928:	697b      	ldr	r3, [r7, #20]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	4413      	add	r3, r2
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	429a      	cmp	r2, r3
 8008934:	d108      	bne.n	8008948 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	685a      	ldr	r2, [r3, #4]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	441a      	add	r2, r3
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	693a      	ldr	r2, [r7, #16]
 8008952:	441a      	add	r2, r3
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	429a      	cmp	r2, r3
 800895a:	d118      	bne.n	800898e <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	681a      	ldr	r2, [r3, #0]
 8008960:	4b16      	ldr	r3, [pc, #88]	@ (80089bc <prvInsertBlockIntoFreeList+0xf0>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	429a      	cmp	r2, r3
 8008966:	d00d      	beq.n	8008984 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	441a      	add	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	601a      	str	r2, [r3, #0]
 8008982:	e008      	b.n	8008996 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8008984:	4b0d      	ldr	r3, [pc, #52]	@ (80089bc <prvInsertBlockIntoFreeList+0xf0>)
 8008986:	681a      	ldr	r2, [r3, #0]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	e003      	b.n	8008996 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	429a      	cmp	r2, r3
 800899c:	d002      	beq.n	80089a4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80089a4:	bf00      	nop
 80089a6:	371c      	adds	r7, #28
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	20019b00 	.word	0x20019b00
 80089b4:	20000b00 	.word	0x20000b00
 80089b8:	20019aff 	.word	0x20019aff
 80089bc:	20019b08 	.word	0x20019b08

080089c0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80089c4:	4803      	ldr	r0, [pc, #12]	@ (80089d4 <_cbSendSystemDesc+0x14>)
 80089c6:	f001 fa31 	bl	8009e2c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80089ca:	4803      	ldr	r0, [pc, #12]	@ (80089d8 <_cbSendSystemDesc+0x18>)
 80089cc:	f001 fa2e 	bl	8009e2c <SEGGER_SYSVIEW_SendSysDesc>
}
 80089d0:	bf00      	nop
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	0800bcac 	.word	0x0800bcac
 80089d8:	0800bce8 	.word	0x0800bce8

080089dc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80089e0:	4b06      	ldr	r3, [pc, #24]	@ (80089fc <SEGGER_SYSVIEW_Conf+0x20>)
 80089e2:	6818      	ldr	r0, [r3, #0]
 80089e4:	4b05      	ldr	r3, [pc, #20]	@ (80089fc <SEGGER_SYSVIEW_Conf+0x20>)
 80089e6:	6819      	ldr	r1, [r3, #0]
 80089e8:	4b05      	ldr	r3, [pc, #20]	@ (8008a00 <SEGGER_SYSVIEW_Conf+0x24>)
 80089ea:	4a06      	ldr	r2, [pc, #24]	@ (8008a04 <SEGGER_SYSVIEW_Conf+0x28>)
 80089ec:	f000 fea4 	bl	8009738 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80089f0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80089f4:	f000 fee4 	bl	80097c0 <SEGGER_SYSVIEW_SetRAMBase>
}
 80089f8:	bf00      	nop
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	20000010 	.word	0x20000010
 8008a00:	080089c1 	.word	0x080089c1
 8008a04:	0800bd84 	.word	0x0800bd84

08008a08 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8008a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a0a:	b085      	sub	sp, #20
 8008a0c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8008a0e:	2300      	movs	r3, #0
 8008a10:	607b      	str	r3, [r7, #4]
 8008a12:	e033      	b.n	8008a7c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8008a14:	491e      	ldr	r1, [pc, #120]	@ (8008a90 <_cbSendTaskList+0x88>)
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	4413      	add	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	6818      	ldr	r0, [r3, #0]
 8008a24:	491a      	ldr	r1, [pc, #104]	@ (8008a90 <_cbSendTaskList+0x88>)
 8008a26:	687a      	ldr	r2, [r7, #4]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	009b      	lsls	r3, r3, #2
 8008a2c:	4413      	add	r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	440b      	add	r3, r1
 8008a32:	3304      	adds	r3, #4
 8008a34:	6819      	ldr	r1, [r3, #0]
 8008a36:	4c16      	ldr	r4, [pc, #88]	@ (8008a90 <_cbSendTaskList+0x88>)
 8008a38:	687a      	ldr	r2, [r7, #4]
 8008a3a:	4613      	mov	r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	4413      	add	r3, r2
 8008a40:	009b      	lsls	r3, r3, #2
 8008a42:	4423      	add	r3, r4
 8008a44:	3308      	adds	r3, #8
 8008a46:	681c      	ldr	r4, [r3, #0]
 8008a48:	4d11      	ldr	r5, [pc, #68]	@ (8008a90 <_cbSendTaskList+0x88>)
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	442b      	add	r3, r5
 8008a56:	330c      	adds	r3, #12
 8008a58:	681d      	ldr	r5, [r3, #0]
 8008a5a:	4e0d      	ldr	r6, [pc, #52]	@ (8008a90 <_cbSendTaskList+0x88>)
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4433      	add	r3, r6
 8008a68:	3310      	adds	r3, #16
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462b      	mov	r3, r5
 8008a70:	4622      	mov	r2, r4
 8008a72:	f000 f8bd 	bl	8008bf0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	3301      	adds	r3, #1
 8008a7a:	607b      	str	r3, [r7, #4]
 8008a7c:	4b05      	ldr	r3, [pc, #20]	@ (8008a94 <_cbSendTaskList+0x8c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	687a      	ldr	r2, [r7, #4]
 8008a82:	429a      	cmp	r2, r3
 8008a84:	d3c6      	bcc.n	8008a14 <_cbSendTaskList+0xc>
  }
}
 8008a86:	bf00      	nop
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a90:	20019b1c 	.word	0x20019b1c
 8008a94:	20019bbc 	.word	0x20019bbc

08008a98 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8008a98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a9c:	b082      	sub	sp, #8
 8008a9e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8008aa0:	f7fd fcda 	bl	8006458 <xTaskGetTickCountFromISR>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	469a      	mov	sl, r3
 8008aaa:	4693      	mov	fp, r2
 8008aac:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8008ab0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	460b      	mov	r3, r1
 8008ab8:	f04f 0a00 	mov.w	sl, #0
 8008abc:	f04f 0b00 	mov.w	fp, #0
 8008ac0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8008ac4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8008ac8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8008acc:	4652      	mov	r2, sl
 8008ace:	465b      	mov	r3, fp
 8008ad0:	1a14      	subs	r4, r2, r0
 8008ad2:	eb63 0501 	sbc.w	r5, r3, r1
 8008ad6:	f04f 0200 	mov.w	r2, #0
 8008ada:	f04f 0300 	mov.w	r3, #0
 8008ade:	00ab      	lsls	r3, r5, #2
 8008ae0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8008ae4:	00a2      	lsls	r2, r4, #2
 8008ae6:	4614      	mov	r4, r2
 8008ae8:	461d      	mov	r5, r3
 8008aea:	eb14 0800 	adds.w	r8, r4, r0
 8008aee:	eb45 0901 	adc.w	r9, r5, r1
 8008af2:	f04f 0200 	mov.w	r2, #0
 8008af6:	f04f 0300 	mov.w	r3, #0
 8008afa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008afe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008b02:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008b06:	4690      	mov	r8, r2
 8008b08:	4699      	mov	r9, r3
 8008b0a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8008b0e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8008b12:	4610      	mov	r0, r2
 8008b14:	4619      	mov	r1, r3
 8008b16:	3708      	adds	r7, #8
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08008b20 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
 8008b26:	60f8      	str	r0, [r7, #12]
 8008b28:	60b9      	str	r1, [r7, #8]
 8008b2a:	607a      	str	r2, [r7, #4]
 8008b2c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8008b2e:	2205      	movs	r2, #5
 8008b30:	492b      	ldr	r1, [pc, #172]	@ (8008be0 <SYSVIEW_AddTask+0xc0>)
 8008b32:	68b8      	ldr	r0, [r7, #8]
 8008b34:	f001 febb 	bl	800a8ae <memcmp>
 8008b38:	4603      	mov	r3, r0
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d04b      	beq.n	8008bd6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8008b3e:	4b29      	ldr	r3, [pc, #164]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b07      	cmp	r3, #7
 8008b44:	d903      	bls.n	8008b4e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8008b46:	4828      	ldr	r0, [pc, #160]	@ (8008be8 <SYSVIEW_AddTask+0xc8>)
 8008b48:	f001 fd0c 	bl	800a564 <SEGGER_SYSVIEW_Warn>
    return;
 8008b4c:	e044      	b.n	8008bd8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8008b4e:	4b25      	ldr	r3, [pc, #148]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	4926      	ldr	r1, [pc, #152]	@ (8008bec <SYSVIEW_AddTask+0xcc>)
 8008b54:	4613      	mov	r3, r2
 8008b56:	009b      	lsls	r3, r3, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	440b      	add	r3, r1
 8008b5e:	68fa      	ldr	r2, [r7, #12]
 8008b60:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8008b62:	4b20      	ldr	r3, [pc, #128]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008b64:	681a      	ldr	r2, [r3, #0]
 8008b66:	4921      	ldr	r1, [pc, #132]	@ (8008bec <SYSVIEW_AddTask+0xcc>)
 8008b68:	4613      	mov	r3, r2
 8008b6a:	009b      	lsls	r3, r3, #2
 8008b6c:	4413      	add	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	440b      	add	r3, r1
 8008b72:	3304      	adds	r3, #4
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8008b78:	4b1a      	ldr	r3, [pc, #104]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	491b      	ldr	r1, [pc, #108]	@ (8008bec <SYSVIEW_AddTask+0xcc>)
 8008b7e:	4613      	mov	r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	4413      	add	r3, r2
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	440b      	add	r3, r1
 8008b88:	3308      	adds	r3, #8
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8008b8e:	4b15      	ldr	r3, [pc, #84]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4916      	ldr	r1, [pc, #88]	@ (8008bec <SYSVIEW_AddTask+0xcc>)
 8008b94:	4613      	mov	r3, r2
 8008b96:	009b      	lsls	r3, r3, #2
 8008b98:	4413      	add	r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	330c      	adds	r3, #12
 8008ba0:	683a      	ldr	r2, [r7, #0]
 8008ba2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8008ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	4910      	ldr	r1, [pc, #64]	@ (8008bec <SYSVIEW_AddTask+0xcc>)
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	440b      	add	r3, r1
 8008bb4:	3310      	adds	r3, #16
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8008bba:	4b0a      	ldr	r3, [pc, #40]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	4a08      	ldr	r2, [pc, #32]	@ (8008be4 <SYSVIEW_AddTask+0xc4>)
 8008bc2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	9300      	str	r3, [sp, #0]
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	68b9      	ldr	r1, [r7, #8]
 8008bce:	68f8      	ldr	r0, [r7, #12]
 8008bd0:	f000 f80e 	bl	8008bf0 <SYSVIEW_SendTaskInfo>
 8008bd4:	e000      	b.n	8008bd8 <SYSVIEW_AddTask+0xb8>
    return;
 8008bd6:	bf00      	nop

}
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	0800bcf8 	.word	0x0800bcf8
 8008be4:	20019bbc 	.word	0x20019bbc
 8008be8:	0800bd00 	.word	0x0800bd00
 8008bec:	20019b1c 	.word	0x20019b1c

08008bf0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08a      	sub	sp, #40	@ 0x28
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	60b9      	str	r1, [r7, #8]
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8008bfe:	f107 0310 	add.w	r3, r7, #16
 8008c02:	2218      	movs	r2, #24
 8008c04:	2100      	movs	r1, #0
 8008c06:	4618      	mov	r0, r3
 8008c08:	f001 fe61 	bl	800a8ce <memset>
  TaskInfo.TaskID     = TaskID;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8008c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c1e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8008c20:	f107 0310 	add.w	r3, r7, #16
 8008c24:	4618      	mov	r0, r3
 8008c26:	f001 f809 	bl	8009c3c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8008c2a:	bf00      	nop
 8008c2c:	3728      	adds	r7, #40	@ 0x28
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}
	...

08008c34 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8008c3a:	4b26      	ldr	r3, [pc, #152]	@ (8008cd4 <_DoInit+0xa0>)
 8008c3c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8008c3e:	22a8      	movs	r2, #168	@ 0xa8
 8008c40:	2100      	movs	r1, #0
 8008c42:	6838      	ldr	r0, [r7, #0]
 8008c44:	f001 fe43 	bl	800a8ce <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	2203      	movs	r2, #3
 8008c4c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	2203      	movs	r2, #3
 8008c52:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	4a20      	ldr	r2, [pc, #128]	@ (8008cd8 <_DoInit+0xa4>)
 8008c58:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	4a1f      	ldr	r2, [pc, #124]	@ (8008cdc <_DoInit+0xa8>)
 8008c5e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008c66:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2200      	movs	r2, #0
 8008c72:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	2200      	movs	r2, #0
 8008c78:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	4a16      	ldr	r2, [pc, #88]	@ (8008cd8 <_DoInit+0xa4>)
 8008c7e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	4a17      	ldr	r2, [pc, #92]	@ (8008ce0 <_DoInit+0xac>)
 8008c84:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	2210      	movs	r2, #16
 8008c8a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	2200      	movs	r2, #0
 8008c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008c9e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	607b      	str	r3, [r7, #4]
 8008ca6:	e00c      	b.n	8008cc2 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f1c3 030f 	rsb	r3, r3, #15
 8008cae:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce4 <_DoInit+0xb0>)
 8008cb0:	5cd1      	ldrb	r1, [r2, r3]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	460a      	mov	r2, r1
 8008cba:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	3301      	adds	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	2b0f      	cmp	r3, #15
 8008cc6:	d9ef      	bls.n	8008ca8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8008cc8:	f3bf 8f5f 	dmb	sy
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}
 8008cd4:	20019bc0 	.word	0x20019bc0
 8008cd8:	0800bd50 	.word	0x0800bd50
 8008cdc:	20019c68 	.word	0x20019c68
 8008ce0:	2001bc68 	.word	0x2001bc68
 8008ce4:	0800bd8c 	.word	0x0800bd8c

08008ce8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b08a      	sub	sp, #40	@ 0x28
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	60f8      	str	r0, [r7, #12]
 8008cf0:	60b9      	str	r1, [r7, #8]
 8008cf2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68db      	ldr	r3, [r3, #12]
 8008cfc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8008d04:	69ba      	ldr	r2, [r7, #24]
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	429a      	cmp	r2, r3
 8008d0a:	d905      	bls.n	8008d18 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	69fb      	ldr	r3, [r7, #28]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	3b01      	subs	r3, #1
 8008d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8008d16:	e007      	b.n	8008d28 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	69b9      	ldr	r1, [r7, #24]
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	1acb      	subs	r3, r1, r3
 8008d22:	4413      	add	r3, r2
 8008d24:	3b01      	subs	r3, #1
 8008d26:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689a      	ldr	r2, [r3, #8]
 8008d2c:	69fb      	ldr	r3, [r7, #28]
 8008d2e:	1ad3      	subs	r3, r2, r3
 8008d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d32:	4293      	cmp	r3, r2
 8008d34:	bf28      	it	cs
 8008d36:	4613      	movcs	r3, r2
 8008d38:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8008d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4293      	cmp	r3, r2
 8008d40:	bf28      	it	cs
 8008d42:	4613      	movcs	r3, r2
 8008d44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	685a      	ldr	r2, [r3, #4]
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8008d50:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008d52:	68b9      	ldr	r1, [r7, #8]
 8008d54:	6978      	ldr	r0, [r7, #20]
 8008d56:	f001 fe24 	bl	800a9a2 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8008d5a:	6a3a      	ldr	r2, [r7, #32]
 8008d5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d5e:	4413      	add	r3, r2
 8008d60:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8008d62:	68ba      	ldr	r2, [r7, #8]
 8008d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d66:	4413      	add	r3, r2
 8008d68:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d6e:	1ad3      	subs	r3, r2, r3
 8008d70:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8008d72:	69fa      	ldr	r2, [r7, #28]
 8008d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d76:	4413      	add	r3, r2
 8008d78:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	69fa      	ldr	r2, [r7, #28]
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d101      	bne.n	8008d88 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8008d84:	2300      	movs	r3, #0
 8008d86:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008d88:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	69fa      	ldr	r2, [r7, #28]
 8008d90:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1b2      	bne.n	8008cfe <_WriteBlocking+0x16>
  return NumBytesWritten;
 8008d98:	6a3b      	ldr	r3, [r7, #32]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3728      	adds	r7, #40	@ 0x28
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}

08008da2 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8008da2:	b580      	push	{r7, lr}
 8008da4:	b088      	sub	sp, #32
 8008da6:	af00      	add	r7, sp, #0
 8008da8:	60f8      	str	r0, [r7, #12]
 8008daa:	60b9      	str	r1, [r7, #8]
 8008dac:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	689a      	ldr	r2, [r3, #8]
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	1ad3      	subs	r3, r2, r3
 8008dbc:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8008dbe:	69ba      	ldr	r2, [r7, #24]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d911      	bls.n	8008dea <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	4413      	add	r3, r2
 8008dce:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8008dd0:	687a      	ldr	r2, [r7, #4]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	6938      	ldr	r0, [r7, #16]
 8008dd6:	f001 fde4 	bl	800a9a2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008dda:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8008dde:	69fa      	ldr	r2, [r7, #28]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	441a      	add	r2, r3
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8008de8:	e01f      	b.n	8008e2a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8008dea:	69bb      	ldr	r3, [r7, #24]
 8008dec:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	685a      	ldr	r2, [r3, #4]
 8008df2:	69fb      	ldr	r3, [r7, #28]
 8008df4:	4413      	add	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8008df8:	697a      	ldr	r2, [r7, #20]
 8008dfa:	68b9      	ldr	r1, [r7, #8]
 8008dfc:	6938      	ldr	r0, [r7, #16]
 8008dfe:	f001 fdd0 	bl	800a9a2 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	1ad3      	subs	r3, r2, r3
 8008e08:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8008e10:	68ba      	ldr	r2, [r7, #8]
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	4413      	add	r3, r2
 8008e16:	697a      	ldr	r2, [r7, #20]
 8008e18:	4619      	mov	r1, r3
 8008e1a:	6938      	ldr	r0, [r7, #16]
 8008e1c:	f001 fdc1 	bl	800a9a2 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8008e20:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	697a      	ldr	r2, [r7, #20]
 8008e28:	60da      	str	r2, [r3, #12]
}
 8008e2a:	bf00      	nop
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8008e32:	b480      	push	{r7}
 8008e34:	b087      	sub	sp, #28
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	691b      	ldr	r3, [r3, #16]
 8008e3e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68db      	ldr	r3, [r3, #12]
 8008e44:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8008e46:	693a      	ldr	r2, [r7, #16]
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	429a      	cmp	r2, r3
 8008e4c:	d808      	bhi.n	8008e60 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	689a      	ldr	r2, [r3, #8]
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	1ad2      	subs	r2, r2, r3
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	4413      	add	r3, r2
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	617b      	str	r3, [r7, #20]
 8008e5e:	e004      	b.n	8008e6a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	3b01      	subs	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
  }
  return r;
 8008e6a:	697b      	ldr	r3, [r7, #20]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	371c      	adds	r7, #28
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b08c      	sub	sp, #48	@ 0x30
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	60f8      	str	r0, [r7, #12]
 8008e80:	60b9      	str	r1, [r7, #8]
 8008e82:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8008e84:	4b3e      	ldr	r3, [pc, #248]	@ (8008f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8008e86:	623b      	str	r3, [r7, #32]
 8008e88:	6a3b      	ldr	r3, [r7, #32]
 8008e8a:	781b      	ldrb	r3, [r3, #0]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	2b53      	cmp	r3, #83	@ 0x53
 8008e90:	d001      	beq.n	8008e96 <SEGGER_RTT_ReadNoLock+0x1e>
 8008e92:	f7ff fecf 	bl	8008c34 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008e96:	68fa      	ldr	r2, [r7, #12]
 8008e98:	4613      	mov	r3, r2
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	4413      	add	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	3360      	adds	r3, #96	@ 0x60
 8008ea2:	4a37      	ldr	r2, [pc, #220]	@ (8008f80 <SEGGER_RTT_ReadNoLock+0x108>)
 8008ea4:	4413      	add	r3, r2
 8008ea6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8008eb2:	69fb      	ldr	r3, [r7, #28]
 8008eb4:	68db      	ldr	r3, [r3, #12]
 8008eb6:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8008ebc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d92b      	bls.n	8008f1c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	689a      	ldr	r2, [r3, #8]
 8008ec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	bf28      	it	cs
 8008ed6:	4613      	movcs	r3, r2
 8008ed8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	685a      	ldr	r2, [r3, #4]
 8008ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee0:	4413      	add	r3, r2
 8008ee2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	6939      	ldr	r1, [r7, #16]
 8008ee8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008eea:	f001 fd5a 	bl	800a9a2 <memcpy>
    NumBytesRead += NumBytesRem;
 8008eee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	4413      	add	r3, r2
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	697b      	ldr	r3, [r7, #20]
 8008f02:	1ad3      	subs	r3, r2, r3
 8008f04:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8008f0e:	69fb      	ldr	r3, [r7, #28]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d101      	bne.n	8008f1c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8008f1c:	69ba      	ldr	r2, [r7, #24]
 8008f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f20:	1ad3      	subs	r3, r2, r3
 8008f22:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8008f24:	697a      	ldr	r2, [r7, #20]
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	bf28      	it	cs
 8008f2c:	4613      	movcs	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d019      	beq.n	8008f6a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8008f36:	69fb      	ldr	r3, [r7, #28]
 8008f38:	685a      	ldr	r2, [r3, #4]
 8008f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f3c:	4413      	add	r3, r2
 8008f3e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8008f40:	697a      	ldr	r2, [r7, #20]
 8008f42:	6939      	ldr	r1, [r7, #16]
 8008f44:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f46:	f001 fd2c 	bl	800a9a2 <memcpy>
    NumBytesRead += NumBytesRem;
 8008f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	4413      	add	r3, r2
 8008f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8008f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f54:	697b      	ldr	r3, [r7, #20]
 8008f56:	4413      	add	r3, r2
 8008f58:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	697b      	ldr	r3, [r7, #20]
 8008f5e:	1ad3      	subs	r3, r2, r3
 8008f60:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8008f62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f64:	697b      	ldr	r3, [r7, #20]
 8008f66:	4413      	add	r3, r2
 8008f68:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8008f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d002      	beq.n	8008f76 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008f74:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8008f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3730      	adds	r7, #48	@ 0x30
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	20019bc0 	.word	0x20019bc0

08008f84 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	4613      	mov	r3, r2
 8008f9a:	005b      	lsls	r3, r3, #1
 8008f9c:	4413      	add	r3, r2
 8008f9e:	00db      	lsls	r3, r3, #3
 8008fa0:	4a1f      	ldr	r2, [pc, #124]	@ (8009020 <SEGGER_RTT_WriteNoLock+0x9c>)
 8008fa2:	4413      	add	r3, r2
 8008fa4:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	695b      	ldr	r3, [r3, #20]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d029      	beq.n	8009002 <SEGGER_RTT_WriteNoLock+0x7e>
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d82e      	bhi.n	8009010 <SEGGER_RTT_WriteNoLock+0x8c>
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d002      	beq.n	8008fbc <SEGGER_RTT_WriteNoLock+0x38>
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d013      	beq.n	8008fe2 <SEGGER_RTT_WriteNoLock+0x5e>
 8008fba:	e029      	b.n	8009010 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008fbc:	6978      	ldr	r0, [r7, #20]
 8008fbe:	f7ff ff38 	bl	8008e32 <_GetAvailWriteSpace>
 8008fc2:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	429a      	cmp	r2, r3
 8008fca:	d202      	bcs.n	8008fd2 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8008fd0:	e021      	b.n	8009016 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8008fd6:	687a      	ldr	r2, [r7, #4]
 8008fd8:	69b9      	ldr	r1, [r7, #24]
 8008fda:	6978      	ldr	r0, [r7, #20]
 8008fdc:	f7ff fee1 	bl	8008da2 <_WriteNoCheck>
    break;
 8008fe0:	e019      	b.n	8009016 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8008fe2:	6978      	ldr	r0, [r7, #20]
 8008fe4:	f7ff ff25 	bl	8008e32 <_GetAvailWriteSpace>
 8008fe8:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8008fea:	687a      	ldr	r2, [r7, #4]
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bf28      	it	cs
 8008ff2:	4613      	movcs	r3, r2
 8008ff4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8008ff6:	69fa      	ldr	r2, [r7, #28]
 8008ff8:	69b9      	ldr	r1, [r7, #24]
 8008ffa:	6978      	ldr	r0, [r7, #20]
 8008ffc:	f7ff fed1 	bl	8008da2 <_WriteNoCheck>
    break;
 8009000:	e009      	b.n	8009016 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009002:	687a      	ldr	r2, [r7, #4]
 8009004:	69b9      	ldr	r1, [r7, #24]
 8009006:	6978      	ldr	r0, [r7, #20]
 8009008:	f7ff fe6e 	bl	8008ce8 <_WriteBlocking>
 800900c:	61f8      	str	r0, [r7, #28]
    break;
 800900e:	e002      	b.n	8009016 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009010:	2300      	movs	r3, #0
 8009012:	61fb      	str	r3, [r7, #28]
    break;
 8009014:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009016:	69fb      	ldr	r3, [r7, #28]
}
 8009018:	4618      	mov	r0, r3
 800901a:	3720      	adds	r7, #32
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	20019bc0 	.word	0x20019bc0

08009024 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009024:	b580      	push	{r7, lr}
 8009026:	b088      	sub	sp, #32
 8009028:	af00      	add	r7, sp, #0
 800902a:	60f8      	str	r0, [r7, #12]
 800902c:	60b9      	str	r1, [r7, #8]
 800902e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009030:	4b0e      	ldr	r3, [pc, #56]	@ (800906c <SEGGER_RTT_Write+0x48>)
 8009032:	61fb      	str	r3, [r7, #28]
 8009034:	69fb      	ldr	r3, [r7, #28]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	2b53      	cmp	r3, #83	@ 0x53
 800903c:	d001      	beq.n	8009042 <SEGGER_RTT_Write+0x1e>
 800903e:	f7ff fdf9 	bl	8008c34 <_DoInit>
  SEGGER_RTT_LOCK();
 8009042:	f3ef 8311 	mrs	r3, BASEPRI
 8009046:	f04f 0120 	mov.w	r1, #32
 800904a:	f381 8811 	msr	BASEPRI, r1
 800904e:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	68b9      	ldr	r1, [r7, #8]
 8009054:	68f8      	ldr	r0, [r7, #12]
 8009056:	f7ff ff95 	bl	8008f84 <SEGGER_RTT_WriteNoLock>
 800905a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800905c:	69bb      	ldr	r3, [r7, #24]
 800905e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009062:	697b      	ldr	r3, [r7, #20]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3720      	adds	r7, #32
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}
 800906c:	20019bc0 	.word	0x20019bc0

08009070 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af00      	add	r7, sp, #0
 8009076:	60f8      	str	r0, [r7, #12]
 8009078:	60b9      	str	r1, [r7, #8]
 800907a:	607a      	str	r2, [r7, #4]
 800907c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800907e:	4b3d      	ldr	r3, [pc, #244]	@ (8009174 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009080:	61bb      	str	r3, [r7, #24]
 8009082:	69bb      	ldr	r3, [r7, #24]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	b2db      	uxtb	r3, r3
 8009088:	2b53      	cmp	r3, #83	@ 0x53
 800908a:	d001      	beq.n	8009090 <SEGGER_RTT_AllocUpBuffer+0x20>
 800908c:	f7ff fdd2 	bl	8008c34 <_DoInit>
  SEGGER_RTT_LOCK();
 8009090:	f3ef 8311 	mrs	r3, BASEPRI
 8009094:	f04f 0120 	mov.w	r1, #32
 8009098:	f381 8811 	msr	BASEPRI, r1
 800909c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800909e:	4b35      	ldr	r3, [pc, #212]	@ (8009174 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80090a0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80090a6:	6939      	ldr	r1, [r7, #16]
 80090a8:	69fb      	ldr	r3, [r7, #28]
 80090aa:	1c5a      	adds	r2, r3, #1
 80090ac:	4613      	mov	r3, r2
 80090ae:	005b      	lsls	r3, r3, #1
 80090b0:	4413      	add	r3, r2
 80090b2:	00db      	lsls	r3, r3, #3
 80090b4:	440b      	add	r3, r1
 80090b6:	3304      	adds	r3, #4
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d008      	beq.n	80090d0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	3301      	adds	r3, #1
 80090c2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	691b      	ldr	r3, [r3, #16]
 80090c8:	69fa      	ldr	r2, [r7, #28]
 80090ca:	429a      	cmp	r2, r3
 80090cc:	dbeb      	blt.n	80090a6 <SEGGER_RTT_AllocUpBuffer+0x36>
 80090ce:	e000      	b.n	80090d2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80090d0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	69fa      	ldr	r2, [r7, #28]
 80090d8:	429a      	cmp	r2, r3
 80090da:	da3f      	bge.n	800915c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80090dc:	6939      	ldr	r1, [r7, #16]
 80090de:	69fb      	ldr	r3, [r7, #28]
 80090e0:	1c5a      	adds	r2, r3, #1
 80090e2:	4613      	mov	r3, r2
 80090e4:	005b      	lsls	r3, r3, #1
 80090e6:	4413      	add	r3, r2
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	440b      	add	r3, r1
 80090ec:	68fa      	ldr	r2, [r7, #12]
 80090ee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80090f0:	6939      	ldr	r1, [r7, #16]
 80090f2:	69fb      	ldr	r3, [r7, #28]
 80090f4:	1c5a      	adds	r2, r3, #1
 80090f6:	4613      	mov	r3, r2
 80090f8:	005b      	lsls	r3, r3, #1
 80090fa:	4413      	add	r3, r2
 80090fc:	00db      	lsls	r3, r3, #3
 80090fe:	440b      	add	r3, r1
 8009100:	3304      	adds	r3, #4
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009106:	6939      	ldr	r1, [r7, #16]
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	4613      	mov	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	4413      	add	r3, r2
 8009110:	00db      	lsls	r3, r3, #3
 8009112:	440b      	add	r3, r1
 8009114:	3320      	adds	r3, #32
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800911a:	6939      	ldr	r1, [r7, #16]
 800911c:	69fa      	ldr	r2, [r7, #28]
 800911e:	4613      	mov	r3, r2
 8009120:	005b      	lsls	r3, r3, #1
 8009122:	4413      	add	r3, r2
 8009124:	00db      	lsls	r3, r3, #3
 8009126:	440b      	add	r3, r1
 8009128:	3328      	adds	r3, #40	@ 0x28
 800912a:	2200      	movs	r2, #0
 800912c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800912e:	6939      	ldr	r1, [r7, #16]
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	4613      	mov	r3, r2
 8009134:	005b      	lsls	r3, r3, #1
 8009136:	4413      	add	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	440b      	add	r3, r1
 800913c:	3324      	adds	r3, #36	@ 0x24
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009142:	6939      	ldr	r1, [r7, #16]
 8009144:	69fa      	ldr	r2, [r7, #28]
 8009146:	4613      	mov	r3, r2
 8009148:	005b      	lsls	r3, r3, #1
 800914a:	4413      	add	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	440b      	add	r3, r1
 8009150:	332c      	adds	r3, #44	@ 0x2c
 8009152:	683a      	ldr	r2, [r7, #0]
 8009154:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009156:	f3bf 8f5f 	dmb	sy
 800915a:	e002      	b.n	8009162 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800915c:	f04f 33ff 	mov.w	r3, #4294967295
 8009160:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009162:	697b      	ldr	r3, [r7, #20]
 8009164:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009168:	69fb      	ldr	r3, [r7, #28]
}
 800916a:	4618      	mov	r0, r3
 800916c:	3720      	adds	r7, #32
 800916e:	46bd      	mov	sp, r7
 8009170:	bd80      	pop	{r7, pc}
 8009172:	bf00      	nop
 8009174:	20019bc0 	.word	0x20019bc0

08009178 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009178:	b580      	push	{r7, lr}
 800917a:	b08a      	sub	sp, #40	@ 0x28
 800917c:	af00      	add	r7, sp, #0
 800917e:	60f8      	str	r0, [r7, #12]
 8009180:	60b9      	str	r1, [r7, #8]
 8009182:	607a      	str	r2, [r7, #4]
 8009184:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8009186:	4b21      	ldr	r3, [pc, #132]	@ (800920c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009188:	623b      	str	r3, [r7, #32]
 800918a:	6a3b      	ldr	r3, [r7, #32]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	2b53      	cmp	r3, #83	@ 0x53
 8009192:	d001      	beq.n	8009198 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009194:	f7ff fd4e 	bl	8008c34 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009198:	4b1c      	ldr	r3, [pc, #112]	@ (800920c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800919a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2b02      	cmp	r3, #2
 80091a0:	d82c      	bhi.n	80091fc <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 80091a2:	f3ef 8311 	mrs	r3, BASEPRI
 80091a6:	f04f 0120 	mov.w	r1, #32
 80091aa:	f381 8811 	msr	BASEPRI, r1
 80091ae:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 80091b0:	68fa      	ldr	r2, [r7, #12]
 80091b2:	4613      	mov	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	4413      	add	r3, r2
 80091b8:	00db      	lsls	r3, r3, #3
 80091ba:	3360      	adds	r3, #96	@ 0x60
 80091bc:	69fa      	ldr	r2, [r7, #28]
 80091be:	4413      	add	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d00e      	beq.n	80091e6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80091ce:	697b      	ldr	r3, [r7, #20]
 80091d0:	687a      	ldr	r2, [r7, #4]
 80091d2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	2200      	movs	r2, #0
 80091de:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	2200      	movs	r2, #0
 80091e4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ea:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80091ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80091f6:	2300      	movs	r3, #0
 80091f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80091fa:	e002      	b.n	8009202 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80091fc:	f04f 33ff 	mov.w	r3, #4294967295
 8009200:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8009202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009204:	4618      	mov	r0, r3
 8009206:	3728      	adds	r7, #40	@ 0x28
 8009208:	46bd      	mov	sp, r7
 800920a:	bd80      	pop	{r7, pc}
 800920c:	20019bc0 	.word	0x20019bc0

08009210 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009210:	b480      	push	{r7}
 8009212:	b087      	sub	sp, #28
 8009214:	af00      	add	r7, sp, #0
 8009216:	60f8      	str	r0, [r7, #12]
 8009218:	60b9      	str	r1, [r7, #8]
 800921a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d105      	bne.n	800922e <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	60fa      	str	r2, [r7, #12]
 8009228:	2200      	movs	r2, #0
 800922a:	701a      	strb	r2, [r3, #0]
 800922c:	e022      	b.n	8009274 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	60fa      	str	r2, [r7, #12]
 8009238:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2b80      	cmp	r3, #128	@ 0x80
 800923e:	d90a      	bls.n	8009256 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8009240:	2380      	movs	r3, #128	@ 0x80
 8009242:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8009244:	e007      	b.n	8009256 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8009246:	68ba      	ldr	r2, [r7, #8]
 8009248:	1c53      	adds	r3, r2, #1
 800924a:	60bb      	str	r3, [r7, #8]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	1c59      	adds	r1, r3, #1
 8009250:	60f9      	str	r1, [r7, #12]
 8009252:	7812      	ldrb	r2, [r2, #0]
 8009254:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	1e5a      	subs	r2, r3, #1
 800925a:	607a      	str	r2, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d003      	beq.n	8009268 <_EncodeStr+0x58>
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	781b      	ldrb	r3, [r3, #0]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1ee      	bne.n	8009246 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8009268:	68ba      	ldr	r2, [r7, #8]
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	b2da      	uxtb	r2, r3
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8009274:	68fb      	ldr	r3, [r7, #12]
}
 8009276:	4618      	mov	r0, r3
 8009278:	371c      	adds	r7, #28
 800927a:	46bd      	mov	sp, r7
 800927c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009280:	4770      	bx	lr

08009282 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009282:	b480      	push	{r7}
 8009284:	b083      	sub	sp, #12
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	3307      	adds	r3, #7
}
 800928e:	4618      	mov	r0, r3
 8009290:	370c      	adds	r7, #12
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
	...

0800929c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80092a2:	4b34      	ldr	r3, [pc, #208]	@ (8009374 <_HandleIncomingPacket+0xd8>)
 80092a4:	7e1b      	ldrb	r3, [r3, #24]
 80092a6:	4618      	mov	r0, r3
 80092a8:	1cfb      	adds	r3, r7, #3
 80092aa:	2201      	movs	r2, #1
 80092ac:	4619      	mov	r1, r3
 80092ae:	f7ff fde3 	bl	8008e78 <SEGGER_RTT_ReadNoLock>
 80092b2:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d057      	beq.n	800936a <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 80092ba:	78fb      	ldrb	r3, [r7, #3]
 80092bc:	2b80      	cmp	r3, #128	@ 0x80
 80092be:	d031      	beq.n	8009324 <_HandleIncomingPacket+0x88>
 80092c0:	2b80      	cmp	r3, #128	@ 0x80
 80092c2:	dc40      	bgt.n	8009346 <_HandleIncomingPacket+0xaa>
 80092c4:	2b07      	cmp	r3, #7
 80092c6:	dc15      	bgt.n	80092f4 <_HandleIncomingPacket+0x58>
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dd3c      	ble.n	8009346 <_HandleIncomingPacket+0xaa>
 80092cc:	3b01      	subs	r3, #1
 80092ce:	2b06      	cmp	r3, #6
 80092d0:	d839      	bhi.n	8009346 <_HandleIncomingPacket+0xaa>
 80092d2:	a201      	add	r2, pc, #4	@ (adr r2, 80092d8 <_HandleIncomingPacket+0x3c>)
 80092d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092d8:	080092fb 	.word	0x080092fb
 80092dc:	08009301 	.word	0x08009301
 80092e0:	08009307 	.word	0x08009307
 80092e4:	0800930d 	.word	0x0800930d
 80092e8:	08009313 	.word	0x08009313
 80092ec:	08009319 	.word	0x08009319
 80092f0:	0800931f 	.word	0x0800931f
 80092f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80092f6:	d033      	beq.n	8009360 <_HandleIncomingPacket+0xc4>
 80092f8:	e025      	b.n	8009346 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80092fa:	f000 fb25 	bl	8009948 <SEGGER_SYSVIEW_Start>
      break;
 80092fe:	e034      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009300:	f000 fbdc 	bl	8009abc <SEGGER_SYSVIEW_Stop>
      break;
 8009304:	e031      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009306:	f000 fdb5 	bl	8009e74 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800930a:	e02e      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800930c:	f000 fd7a 	bl	8009e04 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009310:	e02b      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009312:	f000 fbf9 	bl	8009b08 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009316:	e028      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009318:	f001 f8e6 	bl	800a4e8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800931c:	e025      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800931e:	f001 f8c5 	bl	800a4ac <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009322:	e022      	b.n	800936a <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009324:	4b13      	ldr	r3, [pc, #76]	@ (8009374 <_HandleIncomingPacket+0xd8>)
 8009326:	7e1b      	ldrb	r3, [r3, #24]
 8009328:	4618      	mov	r0, r3
 800932a:	1cfb      	adds	r3, r7, #3
 800932c:	2201      	movs	r2, #1
 800932e:	4619      	mov	r1, r3
 8009330:	f7ff fda2 	bl	8008e78 <SEGGER_RTT_ReadNoLock>
 8009334:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d013      	beq.n	8009364 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800933c:	78fb      	ldrb	r3, [r7, #3]
 800933e:	4618      	mov	r0, r3
 8009340:	f001 f82a 	bl	800a398 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009344:	e00e      	b.n	8009364 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009346:	78fb      	ldrb	r3, [r7, #3]
 8009348:	b25b      	sxtb	r3, r3
 800934a:	2b00      	cmp	r3, #0
 800934c:	da0c      	bge.n	8009368 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800934e:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <_HandleIncomingPacket+0xd8>)
 8009350:	7e1b      	ldrb	r3, [r3, #24]
 8009352:	4618      	mov	r0, r3
 8009354:	1cfb      	adds	r3, r7, #3
 8009356:	2201      	movs	r2, #1
 8009358:	4619      	mov	r1, r3
 800935a:	f7ff fd8d 	bl	8008e78 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800935e:	e003      	b.n	8009368 <_HandleIncomingPacket+0xcc>
      break;
 8009360:	bf00      	nop
 8009362:	e002      	b.n	800936a <_HandleIncomingPacket+0xce>
      break;
 8009364:	bf00      	nop
 8009366:	e000      	b.n	800936a <_HandleIncomingPacket+0xce>
      break;
 8009368:	bf00      	nop
    }
  }
}
 800936a:	bf00      	nop
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	2001cc80 	.word	0x2001cc80

08009378 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009378:	b580      	push	{r7, lr}
 800937a:	b08c      	sub	sp, #48	@ 0x30
 800937c:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800937e:	2301      	movs	r3, #1
 8009380:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009382:	1d3b      	adds	r3, r7, #4
 8009384:	3301      	adds	r3, #1
 8009386:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800938c:	4b31      	ldr	r3, [pc, #196]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 800938e:	695b      	ldr	r3, [r3, #20]
 8009390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009392:	e00b      	b.n	80093ac <_TrySendOverflowPacket+0x34>
 8009394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009396:	b2da      	uxtb	r2, r3
 8009398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800939a:	1c59      	adds	r1, r3, #1
 800939c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800939e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]
 80093a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093a8:	09db      	lsrs	r3, r3, #7
 80093aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80093b0:	d8f0      	bhi.n	8009394 <_TrySendOverflowPacket+0x1c>
 80093b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093b4:	1c5a      	adds	r2, r3, #1
 80093b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80093b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	701a      	strb	r2, [r3, #0]
 80093be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093c0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80093c2:	4b25      	ldr	r3, [pc, #148]	@ (8009458 <_TrySendOverflowPacket+0xe0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 80093c8:	4b22      	ldr	r3, [pc, #136]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	69ba      	ldr	r2, [r7, #24]
 80093ce:	1ad3      	subs	r3, r2, r3
 80093d0:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	623b      	str	r3, [r7, #32]
 80093da:	e00b      	b.n	80093f4 <_TrySendOverflowPacket+0x7c>
 80093dc:	6a3b      	ldr	r3, [r7, #32]
 80093de:	b2da      	uxtb	r2, r3
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	1c59      	adds	r1, r3, #1
 80093e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80093e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	701a      	strb	r2, [r3, #0]
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	09db      	lsrs	r3, r3, #7
 80093f2:	623b      	str	r3, [r7, #32]
 80093f4:	6a3b      	ldr	r3, [r7, #32]
 80093f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80093f8:	d8f0      	bhi.n	80093dc <_TrySendOverflowPacket+0x64>
 80093fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093fc:	1c5a      	adds	r2, r3, #1
 80093fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009400:	6a3a      	ldr	r2, [r7, #32]
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009408:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800940a:	4b12      	ldr	r3, [pc, #72]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	4618      	mov	r0, r3
 8009410:	1d3b      	adds	r3, r7, #4
 8009412:	69fa      	ldr	r2, [r7, #28]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	461a      	mov	r2, r3
 8009418:	1d3b      	adds	r3, r7, #4
 800941a:	4619      	mov	r1, r3
 800941c:	f7f6 fee0 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009420:	4603      	mov	r3, r0
 8009422:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d009      	beq.n	800943e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800942a:	4a0a      	ldr	r2, [pc, #40]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009430:	4b08      	ldr	r3, [pc, #32]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 8009432:	781b      	ldrb	r3, [r3, #0]
 8009434:	3b01      	subs	r3, #1
 8009436:	b2da      	uxtb	r2, r3
 8009438:	4b06      	ldr	r3, [pc, #24]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 800943a:	701a      	strb	r2, [r3, #0]
 800943c:	e004      	b.n	8009448 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800943e:	4b05      	ldr	r3, [pc, #20]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 8009440:	695b      	ldr	r3, [r3, #20]
 8009442:	3301      	adds	r3, #1
 8009444:	4a03      	ldr	r2, [pc, #12]	@ (8009454 <_TrySendOverflowPacket+0xdc>)
 8009446:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009448:	693b      	ldr	r3, [r7, #16]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3730      	adds	r7, #48	@ 0x30
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	2001cc80 	.word	0x2001cc80
 8009458:	e0001004 	.word	0xe0001004

0800945c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800945c:	b580      	push	{r7, lr}
 800945e:	b08a      	sub	sp, #40	@ 0x28
 8009460:	af00      	add	r7, sp, #0
 8009462:	60f8      	str	r0, [r7, #12]
 8009464:	60b9      	str	r1, [r7, #8]
 8009466:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8009468:	4b98      	ldr	r3, [pc, #608]	@ (80096cc <_SendPacket+0x270>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d010      	beq.n	8009492 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8009470:	4b96      	ldr	r3, [pc, #600]	@ (80096cc <_SendPacket+0x270>)
 8009472:	781b      	ldrb	r3, [r3, #0]
 8009474:	2b00      	cmp	r3, #0
 8009476:	f000 812d 	beq.w	80096d4 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800947a:	4b94      	ldr	r3, [pc, #592]	@ (80096cc <_SendPacket+0x270>)
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d109      	bne.n	8009496 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8009482:	f7ff ff79 	bl	8009378 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8009486:	4b91      	ldr	r3, [pc, #580]	@ (80096cc <_SendPacket+0x270>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	2b01      	cmp	r3, #1
 800948c:	f040 8124 	bne.w	80096d8 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8009490:	e001      	b.n	8009496 <_SendPacket+0x3a>
    goto Send;
 8009492:	bf00      	nop
 8009494:	e000      	b.n	8009498 <_SendPacket+0x3c>
Send:
 8009496:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b1f      	cmp	r3, #31
 800949c:	d809      	bhi.n	80094b2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800949e:	4b8b      	ldr	r3, [pc, #556]	@ (80096cc <_SendPacket+0x270>)
 80094a0:	69da      	ldr	r2, [r3, #28]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	fa22 f303 	lsr.w	r3, r2, r3
 80094a8:	f003 0301 	and.w	r3, r3, #1
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f040 8115 	bne.w	80096dc <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b17      	cmp	r3, #23
 80094b6:	d807      	bhi.n	80094c8 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	3b01      	subs	r3, #1
 80094bc:	60fb      	str	r3, [r7, #12]
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	b2da      	uxtb	r2, r3
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	701a      	strb	r2, [r3, #0]
 80094c6:	e0c4      	b.n	8009652 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	1ad3      	subs	r3, r2, r3
 80094ce:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80094d4:	d912      	bls.n	80094fc <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	09da      	lsrs	r2, r3, #7
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	3b01      	subs	r3, #1
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	b2d2      	uxtb	r2, r2
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80094e6:	69fb      	ldr	r3, [r7, #28]
 80094e8:	b2db      	uxtb	r3, r3
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	3a01      	subs	r2, #1
 80094ee:	60fa      	str	r2, [r7, #12]
 80094f0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80094f4:	b2da      	uxtb	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	701a      	strb	r2, [r3, #0]
 80094fa:	e006      	b.n	800950a <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3b01      	subs	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	b2da      	uxtb	r2, r3
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b7e      	cmp	r3, #126	@ 0x7e
 800950e:	d807      	bhi.n	8009520 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3b01      	subs	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	b2da      	uxtb	r2, r3
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	701a      	strb	r2, [r3, #0]
 800951e:	e098      	b.n	8009652 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009526:	d212      	bcs.n	800954e <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	09da      	lsrs	r2, r3, #7
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	3b01      	subs	r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	b2d2      	uxtb	r2, r2
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	b2db      	uxtb	r3, r3
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	3a01      	subs	r2, #1
 8009540:	60fa      	str	r2, [r7, #12]
 8009542:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009546:	b2da      	uxtb	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	701a      	strb	r2, [r3, #0]
 800954c:	e081      	b.n	8009652 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009554:	d21d      	bcs.n	8009592 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	0b9a      	lsrs	r2, r3, #14
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	3b01      	subs	r3, #1
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	b2d2      	uxtb	r2, r2
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	09db      	lsrs	r3, r3, #7
 800956a:	b2db      	uxtb	r3, r3
 800956c:	68fa      	ldr	r2, [r7, #12]
 800956e:	3a01      	subs	r2, #1
 8009570:	60fa      	str	r2, [r7, #12]
 8009572:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009576:	b2da      	uxtb	r2, r3
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	68fa      	ldr	r2, [r7, #12]
 8009582:	3a01      	subs	r2, #1
 8009584:	60fa      	str	r2, [r7, #12]
 8009586:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800958a:	b2da      	uxtb	r2, r3
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	701a      	strb	r2, [r3, #0]
 8009590:	e05f      	b.n	8009652 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009598:	d228      	bcs.n	80095ec <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	0d5a      	lsrs	r2, r3, #21
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	3b01      	subs	r3, #1
 80095a2:	60fb      	str	r3, [r7, #12]
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	0b9b      	lsrs	r3, r3, #14
 80095ae:	b2db      	uxtb	r3, r3
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	3a01      	subs	r2, #1
 80095b4:	60fa      	str	r2, [r7, #12]
 80095b6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	09db      	lsrs	r3, r3, #7
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	3a01      	subs	r2, #1
 80095ca:	60fa      	str	r2, [r7, #12]
 80095cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095d0:	b2da      	uxtb	r2, r3
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	b2db      	uxtb	r3, r3
 80095da:	68fa      	ldr	r2, [r7, #12]
 80095dc:	3a01      	subs	r2, #1
 80095de:	60fa      	str	r2, [r7, #12]
 80095e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80095e4:	b2da      	uxtb	r2, r3
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	701a      	strb	r2, [r3, #0]
 80095ea:	e032      	b.n	8009652 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	0f1a      	lsrs	r2, r3, #28
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3b01      	subs	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	b2d2      	uxtb	r2, r2
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	0d5b      	lsrs	r3, r3, #21
 8009600:	b2db      	uxtb	r3, r3
 8009602:	68fa      	ldr	r2, [r7, #12]
 8009604:	3a01      	subs	r2, #1
 8009606:	60fa      	str	r2, [r7, #12]
 8009608:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800960c:	b2da      	uxtb	r2, r3
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	0b9b      	lsrs	r3, r3, #14
 8009616:	b2db      	uxtb	r3, r3
 8009618:	68fa      	ldr	r2, [r7, #12]
 800961a:	3a01      	subs	r2, #1
 800961c:	60fa      	str	r2, [r7, #12]
 800961e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009622:	b2da      	uxtb	r2, r3
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	09db      	lsrs	r3, r3, #7
 800962c:	b2db      	uxtb	r3, r3
 800962e:	68fa      	ldr	r2, [r7, #12]
 8009630:	3a01      	subs	r2, #1
 8009632:	60fa      	str	r2, [r7, #12]
 8009634:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009638:	b2da      	uxtb	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	68fa      	ldr	r2, [r7, #12]
 8009644:	3a01      	subs	r2, #1
 8009646:	60fa      	str	r2, [r7, #12]
 8009648:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800964c:	b2da      	uxtb	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009652:	4b1f      	ldr	r3, [pc, #124]	@ (80096d0 <_SendPacket+0x274>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009658:	4b1c      	ldr	r3, [pc, #112]	@ (80096cc <_SendPacket+0x270>)
 800965a:	68db      	ldr	r3, [r3, #12]
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	1ad3      	subs	r3, r2, r3
 8009660:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	627b      	str	r3, [r7, #36]	@ 0x24
 8009666:	697b      	ldr	r3, [r7, #20]
 8009668:	623b      	str	r3, [r7, #32]
 800966a:	e00b      	b.n	8009684 <_SendPacket+0x228>
 800966c:	6a3b      	ldr	r3, [r7, #32]
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009672:	1c59      	adds	r1, r3, #1
 8009674:	6279      	str	r1, [r7, #36]	@ 0x24
 8009676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800967a:	b2d2      	uxtb	r2, r2
 800967c:	701a      	strb	r2, [r3, #0]
 800967e:	6a3b      	ldr	r3, [r7, #32]
 8009680:	09db      	lsrs	r3, r3, #7
 8009682:	623b      	str	r3, [r7, #32]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	2b7f      	cmp	r3, #127	@ 0x7f
 8009688:	d8f0      	bhi.n	800966c <_SendPacket+0x210>
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800968c:	1c5a      	adds	r2, r3, #1
 800968e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009690:	6a3a      	ldr	r2, [r7, #32]
 8009692:	b2d2      	uxtb	r2, r2
 8009694:	701a      	strb	r2, [r3, #0]
 8009696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009698:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800969a:	4b0c      	ldr	r3, [pc, #48]	@ (80096cc <_SendPacket+0x270>)
 800969c:	785b      	ldrb	r3, [r3, #1]
 800969e:	4618      	mov	r0, r3
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	1ad3      	subs	r3, r2, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	68f9      	ldr	r1, [r7, #12]
 80096aa:	f7f6 fd99 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80096ae:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d003      	beq.n	80096be <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80096b6:	4a05      	ldr	r2, [pc, #20]	@ (80096cc <_SendPacket+0x270>)
 80096b8:	69bb      	ldr	r3, [r7, #24]
 80096ba:	60d3      	str	r3, [r2, #12]
 80096bc:	e00f      	b.n	80096de <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80096be:	4b03      	ldr	r3, [pc, #12]	@ (80096cc <_SendPacket+0x270>)
 80096c0:	781b      	ldrb	r3, [r3, #0]
 80096c2:	3301      	adds	r3, #1
 80096c4:	b2da      	uxtb	r2, r3
 80096c6:	4b01      	ldr	r3, [pc, #4]	@ (80096cc <_SendPacket+0x270>)
 80096c8:	701a      	strb	r2, [r3, #0]
 80096ca:	e008      	b.n	80096de <_SendPacket+0x282>
 80096cc:	2001cc80 	.word	0x2001cc80
 80096d0:	e0001004 	.word	0xe0001004
    goto SendDone;
 80096d4:	bf00      	nop
 80096d6:	e002      	b.n	80096de <_SendPacket+0x282>
      goto SendDone;
 80096d8:	bf00      	nop
 80096da:	e000      	b.n	80096de <_SendPacket+0x282>
      goto SendDone;
 80096dc:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80096de:	4b14      	ldr	r3, [pc, #80]	@ (8009730 <_SendPacket+0x2d4>)
 80096e0:	7e1b      	ldrb	r3, [r3, #24]
 80096e2:	4619      	mov	r1, r3
 80096e4:	4a13      	ldr	r2, [pc, #76]	@ (8009734 <_SendPacket+0x2d8>)
 80096e6:	460b      	mov	r3, r1
 80096e8:	005b      	lsls	r3, r3, #1
 80096ea:	440b      	add	r3, r1
 80096ec:	00db      	lsls	r3, r3, #3
 80096ee:	4413      	add	r3, r2
 80096f0:	336c      	adds	r3, #108	@ 0x6c
 80096f2:	681a      	ldr	r2, [r3, #0]
 80096f4:	4b0e      	ldr	r3, [pc, #56]	@ (8009730 <_SendPacket+0x2d4>)
 80096f6:	7e1b      	ldrb	r3, [r3, #24]
 80096f8:	4618      	mov	r0, r3
 80096fa:	490e      	ldr	r1, [pc, #56]	@ (8009734 <_SendPacket+0x2d8>)
 80096fc:	4603      	mov	r3, r0
 80096fe:	005b      	lsls	r3, r3, #1
 8009700:	4403      	add	r3, r0
 8009702:	00db      	lsls	r3, r3, #3
 8009704:	440b      	add	r3, r1
 8009706:	3370      	adds	r3, #112	@ 0x70
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d00b      	beq.n	8009726 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800970e:	4b08      	ldr	r3, [pc, #32]	@ (8009730 <_SendPacket+0x2d4>)
 8009710:	789b      	ldrb	r3, [r3, #2]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d107      	bne.n	8009726 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8009716:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <_SendPacket+0x2d4>)
 8009718:	2201      	movs	r2, #1
 800971a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800971c:	f7ff fdbe 	bl	800929c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8009720:	4b03      	ldr	r3, [pc, #12]	@ (8009730 <_SendPacket+0x2d4>)
 8009722:	2200      	movs	r2, #0
 8009724:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8009726:	bf00      	nop
 8009728:	3728      	adds	r7, #40	@ 0x28
 800972a:	46bd      	mov	sp, r7
 800972c:	bd80      	pop	{r7, pc}
 800972e:	bf00      	nop
 8009730:	2001cc80 	.word	0x2001cc80
 8009734:	20019bc0 	.word	0x20019bc0

08009738 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8009738:	b580      	push	{r7, lr}
 800973a:	b086      	sub	sp, #24
 800973c:	af02      	add	r7, sp, #8
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	60b9      	str	r1, [r7, #8]
 8009742:	607a      	str	r2, [r7, #4]
 8009744:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009746:	2300      	movs	r3, #0
 8009748:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800974c:	4917      	ldr	r1, [pc, #92]	@ (80097ac <SEGGER_SYSVIEW_Init+0x74>)
 800974e:	4818      	ldr	r0, [pc, #96]	@ (80097b0 <SEGGER_SYSVIEW_Init+0x78>)
 8009750:	f7ff fc8e 	bl	8009070 <SEGGER_RTT_AllocUpBuffer>
 8009754:	4603      	mov	r3, r0
 8009756:	b2da      	uxtb	r2, r3
 8009758:	4b16      	ldr	r3, [pc, #88]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800975a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800975c:	4b15      	ldr	r3, [pc, #84]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800975e:	785a      	ldrb	r2, [r3, #1]
 8009760:	4b14      	ldr	r3, [pc, #80]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8009762:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8009764:	4b13      	ldr	r3, [pc, #76]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8009766:	7e1b      	ldrb	r3, [r3, #24]
 8009768:	4618      	mov	r0, r3
 800976a:	2300      	movs	r3, #0
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	2308      	movs	r3, #8
 8009770:	4a11      	ldr	r2, [pc, #68]	@ (80097b8 <SEGGER_SYSVIEW_Init+0x80>)
 8009772:	490f      	ldr	r1, [pc, #60]	@ (80097b0 <SEGGER_SYSVIEW_Init+0x78>)
 8009774:	f7ff fd00 	bl	8009178 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8009778:	4b0e      	ldr	r3, [pc, #56]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800977a:	2200      	movs	r2, #0
 800977c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800977e:	4b0f      	ldr	r3, [pc, #60]	@ (80097bc <SEGGER_SYSVIEW_Init+0x84>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a0c      	ldr	r2, [pc, #48]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8009784:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8009786:	4a0b      	ldr	r2, [pc, #44]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800978c:	4a09      	ldr	r2, [pc, #36]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8009792:	4a08      	ldr	r2, [pc, #32]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8009798:	4a06      	ldr	r2, [pc, #24]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800979e:	4b05      	ldr	r3, [pc, #20]	@ (80097b4 <SEGGER_SYSVIEW_Init+0x7c>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80097a4:	bf00      	nop
 80097a6:	3710      	adds	r7, #16
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}
 80097ac:	2001bc78 	.word	0x2001bc78
 80097b0:	0800bd64 	.word	0x0800bd64
 80097b4:	2001cc80 	.word	0x2001cc80
 80097b8:	2001cc78 	.word	0x2001cc78
 80097bc:	e0001004 	.word	0xe0001004

080097c0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80097c0:	b480      	push	{r7}
 80097c2:	b083      	sub	sp, #12
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80097c8:	4a04      	ldr	r2, [pc, #16]	@ (80097dc <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6113      	str	r3, [r2, #16]
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	2001cc80 	.word	0x2001cc80

080097e0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b084      	sub	sp, #16
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80097e8:	f3ef 8311 	mrs	r3, BASEPRI
 80097ec:	f04f 0120 	mov.w	r1, #32
 80097f0:	f381 8811 	msr	BASEPRI, r1
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	4808      	ldr	r0, [pc, #32]	@ (8009818 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80097f8:	f7ff fd43 	bl	8009282 <_PreparePacket>
 80097fc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	68b9      	ldr	r1, [r7, #8]
 8009802:	68b8      	ldr	r0, [r7, #8]
 8009804:	f7ff fe2a 	bl	800945c <_SendPacket>
  RECORD_END();
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f383 8811 	msr	BASEPRI, r3
}
 800980e:	bf00      	nop
 8009810:	3710      	adds	r7, #16
 8009812:	46bd      	mov	sp, r7
 8009814:	bd80      	pop	{r7, pc}
 8009816:	bf00      	nop
 8009818:	2001ccb0 	.word	0x2001ccb0

0800981c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800981c:	b580      	push	{r7, lr}
 800981e:	b088      	sub	sp, #32
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009826:	f3ef 8311 	mrs	r3, BASEPRI
 800982a:	f04f 0120 	mov.w	r1, #32
 800982e:	f381 8811 	msr	BASEPRI, r1
 8009832:	617b      	str	r3, [r7, #20]
 8009834:	4816      	ldr	r0, [pc, #88]	@ (8009890 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8009836:	f7ff fd24 	bl	8009282 <_PreparePacket>
 800983a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	61fb      	str	r3, [r7, #28]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	61bb      	str	r3, [r7, #24]
 8009848:	e00b      	b.n	8009862 <SEGGER_SYSVIEW_RecordU32+0x46>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	b2da      	uxtb	r2, r3
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	1c59      	adds	r1, r3, #1
 8009852:	61f9      	str	r1, [r7, #28]
 8009854:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009858:	b2d2      	uxtb	r2, r2
 800985a:	701a      	strb	r2, [r3, #0]
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	09db      	lsrs	r3, r3, #7
 8009860:	61bb      	str	r3, [r7, #24]
 8009862:	69bb      	ldr	r3, [r7, #24]
 8009864:	2b7f      	cmp	r3, #127	@ 0x7f
 8009866:	d8f0      	bhi.n	800984a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8009868:	69fb      	ldr	r3, [r7, #28]
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	61fa      	str	r2, [r7, #28]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	b2d2      	uxtb	r2, r2
 8009872:	701a      	strb	r2, [r3, #0]
 8009874:	69fb      	ldr	r3, [r7, #28]
 8009876:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	68f9      	ldr	r1, [r7, #12]
 800987c:	6938      	ldr	r0, [r7, #16]
 800987e:	f7ff fded 	bl	800945c <_SendPacket>
  RECORD_END();
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	f383 8811 	msr	BASEPRI, r3
}
 8009888:	bf00      	nop
 800988a:	3720      	adds	r7, #32
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	2001ccb0 	.word	0x2001ccb0

08009894 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8009894:	b580      	push	{r7, lr}
 8009896:	b08c      	sub	sp, #48	@ 0x30
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80098a0:	f3ef 8311 	mrs	r3, BASEPRI
 80098a4:	f04f 0120 	mov.w	r1, #32
 80098a8:	f381 8811 	msr	BASEPRI, r1
 80098ac:	61fb      	str	r3, [r7, #28]
 80098ae:	4825      	ldr	r0, [pc, #148]	@ (8009944 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80098b0:	f7ff fce7 	bl	8009282 <_PreparePacket>
 80098b4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098c2:	e00b      	b.n	80098dc <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80098c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098c6:	b2da      	uxtb	r2, r3
 80098c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098ca:	1c59      	adds	r1, r3, #1
 80098cc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80098ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80098d2:	b2d2      	uxtb	r2, r2
 80098d4:	701a      	strb	r2, [r3, #0]
 80098d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098d8:	09db      	lsrs	r3, r3, #7
 80098da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80098dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098de:	2b7f      	cmp	r3, #127	@ 0x7f
 80098e0:	d8f0      	bhi.n	80098c4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80098e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098e4:	1c5a      	adds	r2, r3, #1
 80098e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80098e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80098ea:	b2d2      	uxtb	r2, r2
 80098ec:	701a      	strb	r2, [r3, #0]
 80098ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098f0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	623b      	str	r3, [r7, #32]
 80098fa:	e00b      	b.n	8009914 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80098fc:	6a3b      	ldr	r3, [r7, #32]
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009902:	1c59      	adds	r1, r3, #1
 8009904:	6279      	str	r1, [r7, #36]	@ 0x24
 8009906:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	09db      	lsrs	r3, r3, #7
 8009912:	623b      	str	r3, [r7, #32]
 8009914:	6a3b      	ldr	r3, [r7, #32]
 8009916:	2b7f      	cmp	r3, #127	@ 0x7f
 8009918:	d8f0      	bhi.n	80098fc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800991a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991c:	1c5a      	adds	r2, r3, #1
 800991e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009920:	6a3a      	ldr	r2, [r7, #32]
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	701a      	strb	r2, [r3, #0]
 8009926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009928:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800992a:	68fa      	ldr	r2, [r7, #12]
 800992c:	6979      	ldr	r1, [r7, #20]
 800992e:	69b8      	ldr	r0, [r7, #24]
 8009930:	f7ff fd94 	bl	800945c <_SendPacket>
  RECORD_END();
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	f383 8811 	msr	BASEPRI, r3
}
 800993a:	bf00      	nop
 800993c:	3730      	adds	r7, #48	@ 0x30
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}
 8009942:	bf00      	nop
 8009944:	2001ccb0 	.word	0x2001ccb0

08009948 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8009948:	b580      	push	{r7, lr}
 800994a:	b08c      	sub	sp, #48	@ 0x30
 800994c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800994e:	4b58      	ldr	r3, [pc, #352]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8009950:	2201      	movs	r2, #1
 8009952:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8009954:	f3ef 8311 	mrs	r3, BASEPRI
 8009958:	f04f 0120 	mov.w	r1, #32
 800995c:	f381 8811 	msr	BASEPRI, r1
 8009960:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8009962:	4b53      	ldr	r3, [pc, #332]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8009964:	785b      	ldrb	r3, [r3, #1]
 8009966:	220a      	movs	r2, #10
 8009968:	4952      	ldr	r1, [pc, #328]	@ (8009ab4 <SEGGER_SYSVIEW_Start+0x16c>)
 800996a:	4618      	mov	r0, r3
 800996c:	f7f6 fc38 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8009976:	200a      	movs	r0, #10
 8009978:	f7ff ff32 	bl	80097e0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800997c:	f3ef 8311 	mrs	r3, BASEPRI
 8009980:	f04f 0120 	mov.w	r1, #32
 8009984:	f381 8811 	msr	BASEPRI, r1
 8009988:	60bb      	str	r3, [r7, #8]
 800998a:	484b      	ldr	r0, [pc, #300]	@ (8009ab8 <SEGGER_SYSVIEW_Start+0x170>)
 800998c:	f7ff fc79 	bl	8009282 <_PreparePacket>
 8009990:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800999a:	4b45      	ldr	r3, [pc, #276]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 800999c:	685b      	ldr	r3, [r3, #4]
 800999e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099a0:	e00b      	b.n	80099ba <SEGGER_SYSVIEW_Start+0x72>
 80099a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a4:	b2da      	uxtb	r2, r3
 80099a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099a8:	1c59      	adds	r1, r3, #1
 80099aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80099ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80099b0:	b2d2      	uxtb	r2, r2
 80099b2:	701a      	strb	r2, [r3, #0]
 80099b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b6:	09db      	lsrs	r3, r3, #7
 80099b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80099ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80099be:	d8f0      	bhi.n	80099a2 <SEGGER_SYSVIEW_Start+0x5a>
 80099c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80099c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099c8:	b2d2      	uxtb	r2, r2
 80099ca:	701a      	strb	r2, [r3, #0]
 80099cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099ce:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80099d4:	4b36      	ldr	r3, [pc, #216]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	623b      	str	r3, [r7, #32]
 80099da:	e00b      	b.n	80099f4 <SEGGER_SYSVIEW_Start+0xac>
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	b2da      	uxtb	r2, r3
 80099e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e2:	1c59      	adds	r1, r3, #1
 80099e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80099e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]
 80099ee:	6a3b      	ldr	r3, [r7, #32]
 80099f0:	09db      	lsrs	r3, r3, #7
 80099f2:	623b      	str	r3, [r7, #32]
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80099f8:	d8f0      	bhi.n	80099dc <SEGGER_SYSVIEW_Start+0x94>
 80099fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099fc:	1c5a      	adds	r2, r3, #1
 80099fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009a00:	6a3a      	ldr	r2, [r7, #32]
 8009a02:	b2d2      	uxtb	r2, r2
 8009a04:	701a      	strb	r2, [r3, #0]
 8009a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a08:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	61fb      	str	r3, [r7, #28]
 8009a0e:	4b28      	ldr	r3, [pc, #160]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8009a10:	691b      	ldr	r3, [r3, #16]
 8009a12:	61bb      	str	r3, [r7, #24]
 8009a14:	e00b      	b.n	8009a2e <SEGGER_SYSVIEW_Start+0xe6>
 8009a16:	69bb      	ldr	r3, [r7, #24]
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	1c59      	adds	r1, r3, #1
 8009a1e:	61f9      	str	r1, [r7, #28]
 8009a20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a24:	b2d2      	uxtb	r2, r2
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	09db      	lsrs	r3, r3, #7
 8009a2c:	61bb      	str	r3, [r7, #24]
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a32:	d8f0      	bhi.n	8009a16 <SEGGER_SYSVIEW_Start+0xce>
 8009a34:	69fb      	ldr	r3, [r7, #28]
 8009a36:	1c5a      	adds	r2, r3, #1
 8009a38:	61fa      	str	r2, [r7, #28]
 8009a3a:	69ba      	ldr	r2, [r7, #24]
 8009a3c:	b2d2      	uxtb	r2, r2
 8009a3e:	701a      	strb	r2, [r3, #0]
 8009a40:	69fb      	ldr	r3, [r7, #28]
 8009a42:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	617b      	str	r3, [r7, #20]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	613b      	str	r3, [r7, #16]
 8009a4c:	e00b      	b.n	8009a66 <SEGGER_SYSVIEW_Start+0x11e>
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	b2da      	uxtb	r2, r3
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	1c59      	adds	r1, r3, #1
 8009a56:	6179      	str	r1, [r7, #20]
 8009a58:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009a5c:	b2d2      	uxtb	r2, r2
 8009a5e:	701a      	strb	r2, [r3, #0]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	09db      	lsrs	r3, r3, #7
 8009a64:	613b      	str	r3, [r7, #16]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	2b7f      	cmp	r3, #127	@ 0x7f
 8009a6a:	d8f0      	bhi.n	8009a4e <SEGGER_SYSVIEW_Start+0x106>
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	617a      	str	r2, [r7, #20]
 8009a72:	693a      	ldr	r2, [r7, #16]
 8009a74:	b2d2      	uxtb	r2, r2
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009a7c:	2218      	movs	r2, #24
 8009a7e:	6839      	ldr	r1, [r7, #0]
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f7ff fceb 	bl	800945c <_SendPacket>
      RECORD_END();
 8009a86:	68bb      	ldr	r3, [r7, #8]
 8009a88:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009a8c:	4b08      	ldr	r3, [pc, #32]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8009a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d002      	beq.n	8009a9a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8009a94:	4b06      	ldr	r3, [pc, #24]	@ (8009ab0 <SEGGER_SYSVIEW_Start+0x168>)
 8009a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a98:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8009a9a:	f000 f9eb 	bl	8009e74 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8009a9e:	f000 f9b1 	bl	8009e04 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8009aa2:	f000 fd21 	bl	800a4e8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8009aa6:	bf00      	nop
 8009aa8:	3730      	adds	r7, #48	@ 0x30
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	2001cc80 	.word	0x2001cc80
 8009ab4:	0800bda0 	.word	0x0800bda0
 8009ab8:	2001ccb0 	.word	0x2001ccb0

08009abc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8009ac6:	f04f 0120 	mov.w	r1, #32
 8009aca:	f381 8811 	msr	BASEPRI, r1
 8009ace:	607b      	str	r3, [r7, #4]
 8009ad0:	480b      	ldr	r0, [pc, #44]	@ (8009b00 <SEGGER_SYSVIEW_Stop+0x44>)
 8009ad2:	f7ff fbd6 	bl	8009282 <_PreparePacket>
 8009ad6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8009b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d007      	beq.n	8009af0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8009ae0:	220b      	movs	r2, #11
 8009ae2:	6839      	ldr	r1, [r7, #0]
 8009ae4:	6838      	ldr	r0, [r7, #0]
 8009ae6:	f7ff fcb9 	bl	800945c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8009aea:	4b06      	ldr	r3, [pc, #24]	@ (8009b04 <SEGGER_SYSVIEW_Stop+0x48>)
 8009aec:	2200      	movs	r2, #0
 8009aee:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f383 8811 	msr	BASEPRI, r3
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	2001ccb0 	.word	0x2001ccb0
 8009b04:	2001cc80 	.word	0x2001cc80

08009b08 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08c      	sub	sp, #48	@ 0x30
 8009b0c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8009b0e:	f3ef 8311 	mrs	r3, BASEPRI
 8009b12:	f04f 0120 	mov.w	r1, #32
 8009b16:	f381 8811 	msr	BASEPRI, r1
 8009b1a:	60fb      	str	r3, [r7, #12]
 8009b1c:	4845      	ldr	r0, [pc, #276]	@ (8009c34 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8009b1e:	f7ff fbb0 	bl	8009282 <_PreparePacket>
 8009b22:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b2c:	4b42      	ldr	r3, [pc, #264]	@ (8009c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009b2e:	685b      	ldr	r3, [r3, #4]
 8009b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b32:	e00b      	b.n	8009b4c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8009b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b36:	b2da      	uxtb	r2, r3
 8009b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b3a:	1c59      	adds	r1, r3, #1
 8009b3c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009b3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b42:	b2d2      	uxtb	r2, r2
 8009b44:	701a      	strb	r2, [r3, #0]
 8009b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b48:	09db      	lsrs	r3, r3, #7
 8009b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b50:	d8f0      	bhi.n	8009b34 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8009b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b54:	1c5a      	adds	r2, r3, #1
 8009b56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b5a:	b2d2      	uxtb	r2, r2
 8009b5c:	701a      	strb	r2, [r3, #0]
 8009b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24
 8009b66:	4b34      	ldr	r3, [pc, #208]	@ (8009c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009b68:	689b      	ldr	r3, [r3, #8]
 8009b6a:	623b      	str	r3, [r7, #32]
 8009b6c:	e00b      	b.n	8009b86 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	b2da      	uxtb	r2, r3
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b74:	1c59      	adds	r1, r3, #1
 8009b76:	6279      	str	r1, [r7, #36]	@ 0x24
 8009b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009b7c:	b2d2      	uxtb	r2, r2
 8009b7e:	701a      	strb	r2, [r3, #0]
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	09db      	lsrs	r3, r3, #7
 8009b84:	623b      	str	r3, [r7, #32]
 8009b86:	6a3b      	ldr	r3, [r7, #32]
 8009b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8009b8a:	d8f0      	bhi.n	8009b6e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8009b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b8e:	1c5a      	adds	r2, r3, #1
 8009b90:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b92:	6a3a      	ldr	r2, [r7, #32]
 8009b94:	b2d2      	uxtb	r2, r2
 8009b96:	701a      	strb	r2, [r3, #0]
 8009b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b9a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	61fb      	str	r3, [r7, #28]
 8009ba0:	4b25      	ldr	r3, [pc, #148]	@ (8009c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	61bb      	str	r3, [r7, #24]
 8009ba6:	e00b      	b.n	8009bc0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8009ba8:	69bb      	ldr	r3, [r7, #24]
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	1c59      	adds	r1, r3, #1
 8009bb0:	61f9      	str	r1, [r7, #28]
 8009bb2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009bb6:	b2d2      	uxtb	r2, r2
 8009bb8:	701a      	strb	r2, [r3, #0]
 8009bba:	69bb      	ldr	r3, [r7, #24]
 8009bbc:	09db      	lsrs	r3, r3, #7
 8009bbe:	61bb      	str	r3, [r7, #24]
 8009bc0:	69bb      	ldr	r3, [r7, #24]
 8009bc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bc4:	d8f0      	bhi.n	8009ba8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8009bc6:	69fb      	ldr	r3, [r7, #28]
 8009bc8:	1c5a      	adds	r2, r3, #1
 8009bca:	61fa      	str	r2, [r7, #28]
 8009bcc:	69ba      	ldr	r2, [r7, #24]
 8009bce:	b2d2      	uxtb	r2, r2
 8009bd0:	701a      	strb	r2, [r3, #0]
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	617b      	str	r3, [r7, #20]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	e00b      	b.n	8009bf8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	b2da      	uxtb	r2, r3
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	1c59      	adds	r1, r3, #1
 8009be8:	6179      	str	r1, [r7, #20]
 8009bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009bee:	b2d2      	uxtb	r2, r2
 8009bf0:	701a      	strb	r2, [r3, #0]
 8009bf2:	693b      	ldr	r3, [r7, #16]
 8009bf4:	09db      	lsrs	r3, r3, #7
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8009bfc:	d8f0      	bhi.n	8009be0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	1c5a      	adds	r2, r3, #1
 8009c02:	617a      	str	r2, [r7, #20]
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	b2d2      	uxtb	r2, r2
 8009c08:	701a      	strb	r2, [r3, #0]
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8009c0e:	2218      	movs	r2, #24
 8009c10:	6879      	ldr	r1, [r7, #4]
 8009c12:	68b8      	ldr	r0, [r7, #8]
 8009c14:	f7ff fc22 	bl	800945c <_SendPacket>
  RECORD_END();
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8009c1e:	4b06      	ldr	r3, [pc, #24]	@ (8009c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d002      	beq.n	8009c2c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8009c26:	4b04      	ldr	r3, [pc, #16]	@ (8009c38 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8009c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2a:	4798      	blx	r3
  }
}
 8009c2c:	bf00      	nop
 8009c2e:	3730      	adds	r7, #48	@ 0x30
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	2001ccb0 	.word	0x2001ccb0
 8009c38:	2001cc80 	.word	0x2001cc80

08009c3c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b092      	sub	sp, #72	@ 0x48
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8009c44:	f3ef 8311 	mrs	r3, BASEPRI
 8009c48:	f04f 0120 	mov.w	r1, #32
 8009c4c:	f381 8811 	msr	BASEPRI, r1
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	486a      	ldr	r0, [pc, #424]	@ (8009dfc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8009c54:	f7ff fb15 	bl	8009282 <_PreparePacket>
 8009c58:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681a      	ldr	r2, [r3, #0]
 8009c66:	4b66      	ldr	r3, [pc, #408]	@ (8009e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009c68:	691b      	ldr	r3, [r3, #16]
 8009c6a:	1ad3      	subs	r3, r2, r3
 8009c6c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c6e:	e00b      	b.n	8009c88 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8009c70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c72:	b2da      	uxtb	r2, r3
 8009c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c76:	1c59      	adds	r1, r3, #1
 8009c78:	6479      	str	r1, [r7, #68]	@ 0x44
 8009c7a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009c7e:	b2d2      	uxtb	r2, r2
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c84:	09db      	lsrs	r3, r3, #7
 8009c86:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c8a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009c8c:	d8f0      	bhi.n	8009c70 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8009c8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8009c94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c96:	b2d2      	uxtb	r2, r2
 8009c98:	701a      	strb	r2, [r3, #0]
 8009c9a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009c9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	689b      	ldr	r3, [r3, #8]
 8009ca6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009ca8:	e00b      	b.n	8009cc2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8009caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cac:	b2da      	uxtb	r2, r3
 8009cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cb0:	1c59      	adds	r1, r3, #1
 8009cb2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8009cb4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009cb8:	b2d2      	uxtb	r2, r2
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cbe:	09db      	lsrs	r3, r3, #7
 8009cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009cc4:	2b7f      	cmp	r3, #127	@ 0x7f
 8009cc6:	d8f0      	bhi.n	8009caa <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cca:	1c5a      	adds	r2, r3, #1
 8009ccc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8009cce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009cd0:	b2d2      	uxtb	r2, r2
 8009cd2:	701a      	strb	r2, [r3, #0]
 8009cd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cd6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	685b      	ldr	r3, [r3, #4]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	4619      	mov	r1, r3
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f7ff fa95 	bl	8009210 <_EncodeStr>
 8009ce6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8009ce8:	2209      	movs	r2, #9
 8009cea:	68f9      	ldr	r1, [r7, #12]
 8009cec:	6938      	ldr	r0, [r7, #16]
 8009cee:	f7ff fbb5 	bl	800945c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8009cf2:	693b      	ldr	r3, [r7, #16]
 8009cf4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681a      	ldr	r2, [r3, #0]
 8009cfe:	4b40      	ldr	r3, [pc, #256]	@ (8009e00 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d06:	e00b      	b.n	8009d20 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8009d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d0e:	1c59      	adds	r1, r3, #1
 8009d10:	6379      	str	r1, [r7, #52]	@ 0x34
 8009d12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d16:	b2d2      	uxtb	r2, r2
 8009d18:	701a      	strb	r2, [r3, #0]
 8009d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d1c:	09db      	lsrs	r3, r3, #7
 8009d1e:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d24:	d8f0      	bhi.n	8009d08 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8009d26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d28:	1c5a      	adds	r2, r3, #1
 8009d2a:	637a      	str	r2, [r7, #52]	@ 0x34
 8009d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d2e:	b2d2      	uxtb	r2, r2
 8009d30:	701a      	strb	r2, [r3, #0]
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d40:	e00b      	b.n	8009d5a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8009d42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d48:	1c59      	adds	r1, r3, #1
 8009d4a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009d4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d50:	b2d2      	uxtb	r2, r2
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d56:	09db      	lsrs	r3, r3, #7
 8009d58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d5e:	d8f0      	bhi.n	8009d42 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009d66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009d68:	b2d2      	uxtb	r2, r2
 8009d6a:	701a      	strb	r2, [r3, #0]
 8009d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d6e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	691b      	ldr	r3, [r3, #16]
 8009d78:	623b      	str	r3, [r7, #32]
 8009d7a:	e00b      	b.n	8009d94 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8009d7c:	6a3b      	ldr	r3, [r7, #32]
 8009d7e:	b2da      	uxtb	r2, r3
 8009d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d82:	1c59      	adds	r1, r3, #1
 8009d84:	6279      	str	r1, [r7, #36]	@ 0x24
 8009d86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009d8a:	b2d2      	uxtb	r2, r2
 8009d8c:	701a      	strb	r2, [r3, #0]
 8009d8e:	6a3b      	ldr	r3, [r7, #32]
 8009d90:	09db      	lsrs	r3, r3, #7
 8009d92:	623b      	str	r3, [r7, #32]
 8009d94:	6a3b      	ldr	r3, [r7, #32]
 8009d96:	2b7f      	cmp	r3, #127	@ 0x7f
 8009d98:	d8f0      	bhi.n	8009d7c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d9c:	1c5a      	adds	r2, r3, #1
 8009d9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009da0:	6a3a      	ldr	r2, [r7, #32]
 8009da2:	b2d2      	uxtb	r2, r2
 8009da4:	701a      	strb	r2, [r3, #0]
 8009da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009da8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	61fb      	str	r3, [r7, #28]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	61bb      	str	r3, [r7, #24]
 8009db4:	e00b      	b.n	8009dce <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	61f9      	str	r1, [r7, #28]
 8009dc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009dc4:	b2d2      	uxtb	r2, r2
 8009dc6:	701a      	strb	r2, [r3, #0]
 8009dc8:	69bb      	ldr	r3, [r7, #24]
 8009dca:	09db      	lsrs	r3, r3, #7
 8009dcc:	61bb      	str	r3, [r7, #24]
 8009dce:	69bb      	ldr	r3, [r7, #24]
 8009dd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8009dd2:	d8f0      	bhi.n	8009db6 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	1c5a      	adds	r2, r3, #1
 8009dd8:	61fa      	str	r2, [r7, #28]
 8009dda:	69ba      	ldr	r2, [r7, #24]
 8009ddc:	b2d2      	uxtb	r2, r2
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8009de4:	2215      	movs	r2, #21
 8009de6:	68f9      	ldr	r1, [r7, #12]
 8009de8:	6938      	ldr	r0, [r7, #16]
 8009dea:	f7ff fb37 	bl	800945c <_SendPacket>
  RECORD_END();
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f383 8811 	msr	BASEPRI, r3
}
 8009df4:	bf00      	nop
 8009df6:	3748      	adds	r7, #72	@ 0x48
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}
 8009dfc:	2001ccb0 	.word	0x2001ccb0
 8009e00:	2001cc80 	.word	0x2001cc80

08009e04 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8009e04:	b580      	push	{r7, lr}
 8009e06:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8009e08:	4b07      	ldr	r3, [pc, #28]	@ (8009e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e0a:	6a1b      	ldr	r3, [r3, #32]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d008      	beq.n	8009e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8009e10:	4b05      	ldr	r3, [pc, #20]	@ (8009e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e12:	6a1b      	ldr	r3, [r3, #32]
 8009e14:	685b      	ldr	r3, [r3, #4]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d003      	beq.n	8009e22 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8009e1a:	4b03      	ldr	r3, [pc, #12]	@ (8009e28 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8009e1c:	6a1b      	ldr	r3, [r3, #32]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	4798      	blx	r3
  }
}
 8009e22:	bf00      	nop
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	2001cc80 	.word	0x2001cc80

08009e2c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e34:	f3ef 8311 	mrs	r3, BASEPRI
 8009e38:	f04f 0120 	mov.w	r1, #32
 8009e3c:	f381 8811 	msr	BASEPRI, r1
 8009e40:	617b      	str	r3, [r7, #20]
 8009e42:	480b      	ldr	r0, [pc, #44]	@ (8009e70 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8009e44:	f7ff fa1d 	bl	8009282 <_PreparePacket>
 8009e48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8009e4a:	2280      	movs	r2, #128	@ 0x80
 8009e4c:	6879      	ldr	r1, [r7, #4]
 8009e4e:	6938      	ldr	r0, [r7, #16]
 8009e50:	f7ff f9de 	bl	8009210 <_EncodeStr>
 8009e54:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8009e56:	220e      	movs	r2, #14
 8009e58:	68f9      	ldr	r1, [r7, #12]
 8009e5a:	6938      	ldr	r0, [r7, #16]
 8009e5c:	f7ff fafe 	bl	800945c <_SendPacket>
  RECORD_END();
 8009e60:	697b      	ldr	r3, [r7, #20]
 8009e62:	f383 8811 	msr	BASEPRI, r3
}
 8009e66:	bf00      	nop
 8009e68:	3718      	adds	r7, #24
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	2001ccb0 	.word	0x2001ccb0

08009e74 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8009e74:	b590      	push	{r4, r7, lr}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8009e7a:	4b15      	ldr	r3, [pc, #84]	@ (8009ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009e7c:	6a1b      	ldr	r3, [r3, #32]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d01a      	beq.n	8009eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8009e82:	4b13      	ldr	r3, [pc, #76]	@ (8009ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009e84:	6a1b      	ldr	r3, [r3, #32]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d015      	beq.n	8009eb8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8009e8c:	4b10      	ldr	r3, [pc, #64]	@ (8009ed0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8009e8e:	6a1b      	ldr	r3, [r3, #32]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4798      	blx	r3
 8009e94:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009e98:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8009e9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e9e:	f04f 0200 	mov.w	r2, #0
 8009ea2:	f04f 0300 	mov.w	r3, #0
 8009ea6:	000a      	movs	r2, r1
 8009ea8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8009eaa:	4613      	mov	r3, r2
 8009eac:	461a      	mov	r2, r3
 8009eae:	4621      	mov	r1, r4
 8009eb0:	200d      	movs	r0, #13
 8009eb2:	f7ff fcef 	bl	8009894 <SEGGER_SYSVIEW_RecordU32x2>
 8009eb6:	e006      	b.n	8009ec6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8009eb8:	4b06      	ldr	r3, [pc, #24]	@ (8009ed4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	200c      	movs	r0, #12
 8009ec0:	f7ff fcac 	bl	800981c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8009ec4:	bf00      	nop
 8009ec6:	bf00      	nop
 8009ec8:	370c      	adds	r7, #12
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd90      	pop	{r4, r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	2001cc80 	.word	0x2001cc80
 8009ed4:	e0001004 	.word	0xe0001004

08009ed8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b086      	sub	sp, #24
 8009edc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009ede:	f3ef 8311 	mrs	r3, BASEPRI
 8009ee2:	f04f 0120 	mov.w	r1, #32
 8009ee6:	f381 8811 	msr	BASEPRI, r1
 8009eea:	60fb      	str	r3, [r7, #12]
 8009eec:	4819      	ldr	r0, [pc, #100]	@ (8009f54 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8009eee:	f7ff f9c8 	bl	8009282 <_PreparePacket>
 8009ef2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8009ef8:	4b17      	ldr	r3, [pc, #92]	@ (8009f58 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f00:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	617b      	str	r3, [r7, #20]
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	e00b      	b.n	8009f24 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	b2da      	uxtb	r2, r3
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	1c59      	adds	r1, r3, #1
 8009f14:	6179      	str	r1, [r7, #20]
 8009f16:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f1a:	b2d2      	uxtb	r2, r2
 8009f1c:	701a      	strb	r2, [r3, #0]
 8009f1e:	693b      	ldr	r3, [r7, #16]
 8009f20:	09db      	lsrs	r3, r3, #7
 8009f22:	613b      	str	r3, [r7, #16]
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f28:	d8f0      	bhi.n	8009f0c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	1c5a      	adds	r2, r3, #1
 8009f2e:	617a      	str	r2, [r7, #20]
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	b2d2      	uxtb	r2, r2
 8009f34:	701a      	strb	r2, [r3, #0]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8009f3a:	2202      	movs	r2, #2
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	68b8      	ldr	r0, [r7, #8]
 8009f40:	f7ff fa8c 	bl	800945c <_SendPacket>
  RECORD_END();
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f383 8811 	msr	BASEPRI, r3
}
 8009f4a:	bf00      	nop
 8009f4c:	3718      	adds	r7, #24
 8009f4e:	46bd      	mov	sp, r7
 8009f50:	bd80      	pop	{r7, pc}
 8009f52:	bf00      	nop
 8009f54:	2001ccb0 	.word	0x2001ccb0
 8009f58:	e000ed04 	.word	0xe000ed04

08009f5c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f62:	f3ef 8311 	mrs	r3, BASEPRI
 8009f66:	f04f 0120 	mov.w	r1, #32
 8009f6a:	f381 8811 	msr	BASEPRI, r1
 8009f6e:	607b      	str	r3, [r7, #4]
 8009f70:	4807      	ldr	r0, [pc, #28]	@ (8009f90 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8009f72:	f7ff f986 	bl	8009282 <_PreparePacket>
 8009f76:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8009f78:	2203      	movs	r2, #3
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	6838      	ldr	r0, [r7, #0]
 8009f7e:	f7ff fa6d 	bl	800945c <_SendPacket>
  RECORD_END();
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	f383 8811 	msr	BASEPRI, r3
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}
 8009f90:	2001ccb0 	.word	0x2001ccb0

08009f94 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b082      	sub	sp, #8
 8009f98:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8009f9a:	f3ef 8311 	mrs	r3, BASEPRI
 8009f9e:	f04f 0120 	mov.w	r1, #32
 8009fa2:	f381 8811 	msr	BASEPRI, r1
 8009fa6:	607b      	str	r3, [r7, #4]
 8009fa8:	4807      	ldr	r0, [pc, #28]	@ (8009fc8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8009faa:	f7ff f96a 	bl	8009282 <_PreparePacket>
 8009fae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8009fb0:	2212      	movs	r2, #18
 8009fb2:	6839      	ldr	r1, [r7, #0]
 8009fb4:	6838      	ldr	r0, [r7, #0]
 8009fb6:	f7ff fa51 	bl	800945c <_SendPacket>
  RECORD_END();
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f383 8811 	msr	BASEPRI, r3
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	2001ccb0 	.word	0x2001ccb0

08009fcc <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b088      	sub	sp, #32
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8009fd4:	f3ef 8311 	mrs	r3, BASEPRI
 8009fd8:	f04f 0120 	mov.w	r1, #32
 8009fdc:	f381 8811 	msr	BASEPRI, r1
 8009fe0:	617b      	str	r3, [r7, #20]
 8009fe2:	4817      	ldr	r0, [pc, #92]	@ (800a040 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8009fe4:	f7ff f94d 	bl	8009282 <_PreparePacket>
 8009fe8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8009fea:	693b      	ldr	r3, [r7, #16]
 8009fec:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	61fb      	str	r3, [r7, #28]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	61bb      	str	r3, [r7, #24]
 8009ff6:	e00b      	b.n	800a010 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8009ff8:	69bb      	ldr	r3, [r7, #24]
 8009ffa:	b2da      	uxtb	r2, r3
 8009ffc:	69fb      	ldr	r3, [r7, #28]
 8009ffe:	1c59      	adds	r1, r3, #1
 800a000:	61f9      	str	r1, [r7, #28]
 800a002:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a006:	b2d2      	uxtb	r2, r2
 800a008:	701a      	strb	r2, [r3, #0]
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	09db      	lsrs	r3, r3, #7
 800a00e:	61bb      	str	r3, [r7, #24]
 800a010:	69bb      	ldr	r3, [r7, #24]
 800a012:	2b7f      	cmp	r3, #127	@ 0x7f
 800a014:	d8f0      	bhi.n	8009ff8 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	1c5a      	adds	r2, r3, #1
 800a01a:	61fa      	str	r2, [r7, #28]
 800a01c:	69ba      	ldr	r2, [r7, #24]
 800a01e:	b2d2      	uxtb	r2, r2
 800a020:	701a      	strb	r2, [r3, #0]
 800a022:	69fb      	ldr	r3, [r7, #28]
 800a024:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a026:	221c      	movs	r2, #28
 800a028:	68f9      	ldr	r1, [r7, #12]
 800a02a:	6938      	ldr	r0, [r7, #16]
 800a02c:	f7ff fa16 	bl	800945c <_SendPacket>
  RECORD_END();
 800a030:	697b      	ldr	r3, [r7, #20]
 800a032:	f383 8811 	msr	BASEPRI, r3
}
 800a036:	bf00      	nop
 800a038:	3720      	adds	r7, #32
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	2001ccb0 	.word	0x2001ccb0

0800a044 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 800a044:	b580      	push	{r7, lr}
 800a046:	b08a      	sub	sp, #40	@ 0x28
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a04e:	f3ef 8311 	mrs	r3, BASEPRI
 800a052:	f04f 0120 	mov.w	r1, #32
 800a056:	f381 8811 	msr	BASEPRI, r1
 800a05a:	617b      	str	r3, [r7, #20]
 800a05c:	4824      	ldr	r0, [pc, #144]	@ (800a0f0 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 800a05e:	f7ff f910 	bl	8009282 <_PreparePacket>
 800a062:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a064:	693b      	ldr	r3, [r7, #16]
 800a066:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	623b      	str	r3, [r7, #32]
 800a070:	e00b      	b.n	800a08a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 800a072:	6a3b      	ldr	r3, [r7, #32]
 800a074:	b2da      	uxtb	r2, r3
 800a076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a078:	1c59      	adds	r1, r3, #1
 800a07a:	6279      	str	r1, [r7, #36]	@ 0x24
 800a07c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a080:	b2d2      	uxtb	r2, r2
 800a082:	701a      	strb	r2, [r3, #0]
 800a084:	6a3b      	ldr	r3, [r7, #32]
 800a086:	09db      	lsrs	r3, r3, #7
 800a088:	623b      	str	r3, [r7, #32]
 800a08a:	6a3b      	ldr	r3, [r7, #32]
 800a08c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a08e:	d8f0      	bhi.n	800a072 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 800a090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a092:	1c5a      	adds	r2, r3, #1
 800a094:	627a      	str	r2, [r7, #36]	@ 0x24
 800a096:	6a3a      	ldr	r2, [r7, #32]
 800a098:	b2d2      	uxtb	r2, r2
 800a09a:	701a      	strb	r2, [r3, #0]
 800a09c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a09e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	61fb      	str	r3, [r7, #28]
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	61bb      	str	r3, [r7, #24]
 800a0a8:	e00b      	b.n	800a0c2 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800a0aa:	69bb      	ldr	r3, [r7, #24]
 800a0ac:	b2da      	uxtb	r2, r3
 800a0ae:	69fb      	ldr	r3, [r7, #28]
 800a0b0:	1c59      	adds	r1, r3, #1
 800a0b2:	61f9      	str	r1, [r7, #28]
 800a0b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a0b8:	b2d2      	uxtb	r2, r2
 800a0ba:	701a      	strb	r2, [r3, #0]
 800a0bc:	69bb      	ldr	r3, [r7, #24]
 800a0be:	09db      	lsrs	r3, r3, #7
 800a0c0:	61bb      	str	r3, [r7, #24]
 800a0c2:	69bb      	ldr	r3, [r7, #24]
 800a0c4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a0c6:	d8f0      	bhi.n	800a0aa <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800a0c8:	69fb      	ldr	r3, [r7, #28]
 800a0ca:	1c5a      	adds	r2, r3, #1
 800a0cc:	61fa      	str	r2, [r7, #28]
 800a0ce:	69ba      	ldr	r2, [r7, #24]
 800a0d0:	b2d2      	uxtb	r2, r2
 800a0d2:	701a      	strb	r2, [r3, #0]
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 800a0d8:	221c      	movs	r2, #28
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	6938      	ldr	r0, [r7, #16]
 800a0de:	f7ff f9bd 	bl	800945c <_SendPacket>
  RECORD_END();
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f383 8811 	msr	BASEPRI, r3
}
 800a0e8:	bf00      	nop
 800a0ea:	3728      	adds	r7, #40	@ 0x28
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}
 800a0f0:	2001ccb0 	.word	0x2001ccb0

0800a0f4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	b082      	sub	sp, #8
 800a0f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a0fa:	f3ef 8311 	mrs	r3, BASEPRI
 800a0fe:	f04f 0120 	mov.w	r1, #32
 800a102:	f381 8811 	msr	BASEPRI, r1
 800a106:	607b      	str	r3, [r7, #4]
 800a108:	4807      	ldr	r0, [pc, #28]	@ (800a128 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800a10a:	f7ff f8ba 	bl	8009282 <_PreparePacket>
 800a10e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800a110:	2211      	movs	r2, #17
 800a112:	6839      	ldr	r1, [r7, #0]
 800a114:	6838      	ldr	r0, [r7, #0]
 800a116:	f7ff f9a1 	bl	800945c <_SendPacket>
  RECORD_END();
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f383 8811 	msr	BASEPRI, r3
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}
 800a128:	2001ccb0 	.word	0x2001ccb0

0800a12c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b088      	sub	sp, #32
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a134:	f3ef 8311 	mrs	r3, BASEPRI
 800a138:	f04f 0120 	mov.w	r1, #32
 800a13c:	f381 8811 	msr	BASEPRI, r1
 800a140:	617b      	str	r3, [r7, #20]
 800a142:	4819      	ldr	r0, [pc, #100]	@ (800a1a8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800a144:	f7ff f89d 	bl	8009282 <_PreparePacket>
 800a148:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a14e:	4b17      	ldr	r3, [pc, #92]	@ (800a1ac <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	61fb      	str	r3, [r7, #28]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	61bb      	str	r3, [r7, #24]
 800a160:	e00b      	b.n	800a17a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800a162:	69bb      	ldr	r3, [r7, #24]
 800a164:	b2da      	uxtb	r2, r3
 800a166:	69fb      	ldr	r3, [r7, #28]
 800a168:	1c59      	adds	r1, r3, #1
 800a16a:	61f9      	str	r1, [r7, #28]
 800a16c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a170:	b2d2      	uxtb	r2, r2
 800a172:	701a      	strb	r2, [r3, #0]
 800a174:	69bb      	ldr	r3, [r7, #24]
 800a176:	09db      	lsrs	r3, r3, #7
 800a178:	61bb      	str	r3, [r7, #24]
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a17e:	d8f0      	bhi.n	800a162 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	1c5a      	adds	r2, r3, #1
 800a184:	61fa      	str	r2, [r7, #28]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	b2d2      	uxtb	r2, r2
 800a18a:	701a      	strb	r2, [r3, #0]
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800a190:	2208      	movs	r2, #8
 800a192:	68f9      	ldr	r1, [r7, #12]
 800a194:	6938      	ldr	r0, [r7, #16]
 800a196:	f7ff f961 	bl	800945c <_SendPacket>
  RECORD_END();
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f383 8811 	msr	BASEPRI, r3
}
 800a1a0:	bf00      	nop
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	2001ccb0 	.word	0x2001ccb0
 800a1ac:	2001cc80 	.word	0x2001cc80

0800a1b0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b088      	sub	sp, #32
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a1b8:	f3ef 8311 	mrs	r3, BASEPRI
 800a1bc:	f04f 0120 	mov.w	r1, #32
 800a1c0:	f381 8811 	msr	BASEPRI, r1
 800a1c4:	617b      	str	r3, [r7, #20]
 800a1c6:	4819      	ldr	r0, [pc, #100]	@ (800a22c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800a1c8:	f7ff f85b 	bl	8009282 <_PreparePacket>
 800a1cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a1ce:	693b      	ldr	r3, [r7, #16]
 800a1d0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a1d2:	4b17      	ldr	r3, [pc, #92]	@ (800a230 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	1ad3      	subs	r3, r2, r3
 800a1da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	61fb      	str	r3, [r7, #28]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	61bb      	str	r3, [r7, #24]
 800a1e4:	e00b      	b.n	800a1fe <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	69fb      	ldr	r3, [r7, #28]
 800a1ec:	1c59      	adds	r1, r3, #1
 800a1ee:	61f9      	str	r1, [r7, #28]
 800a1f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a1f4:	b2d2      	uxtb	r2, r2
 800a1f6:	701a      	strb	r2, [r3, #0]
 800a1f8:	69bb      	ldr	r3, [r7, #24]
 800a1fa:	09db      	lsrs	r3, r3, #7
 800a1fc:	61bb      	str	r3, [r7, #24]
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b7f      	cmp	r3, #127	@ 0x7f
 800a202:	d8f0      	bhi.n	800a1e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800a204:	69fb      	ldr	r3, [r7, #28]
 800a206:	1c5a      	adds	r2, r3, #1
 800a208:	61fa      	str	r2, [r7, #28]
 800a20a:	69ba      	ldr	r2, [r7, #24]
 800a20c:	b2d2      	uxtb	r2, r2
 800a20e:	701a      	strb	r2, [r3, #0]
 800a210:	69fb      	ldr	r3, [r7, #28]
 800a212:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800a214:	2204      	movs	r2, #4
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	6938      	ldr	r0, [r7, #16]
 800a21a:	f7ff f91f 	bl	800945c <_SendPacket>
  RECORD_END();
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f383 8811 	msr	BASEPRI, r3
}
 800a224:	bf00      	nop
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}
 800a22c:	2001ccb0 	.word	0x2001ccb0
 800a230:	2001cc80 	.word	0x2001cc80

0800a234 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800a234:	b580      	push	{r7, lr}
 800a236:	b088      	sub	sp, #32
 800a238:	af00      	add	r7, sp, #0
 800a23a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a23c:	f3ef 8311 	mrs	r3, BASEPRI
 800a240:	f04f 0120 	mov.w	r1, #32
 800a244:	f381 8811 	msr	BASEPRI, r1
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	4819      	ldr	r0, [pc, #100]	@ (800a2b0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800a24c:	f7ff f819 	bl	8009282 <_PreparePacket>
 800a250:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a256:	4b17      	ldr	r3, [pc, #92]	@ (800a2b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	687a      	ldr	r2, [r7, #4]
 800a25c:	1ad3      	subs	r3, r2, r3
 800a25e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	61fb      	str	r3, [r7, #28]
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	61bb      	str	r3, [r7, #24]
 800a268:	e00b      	b.n	800a282 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800a26a:	69bb      	ldr	r3, [r7, #24]
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	69fb      	ldr	r3, [r7, #28]
 800a270:	1c59      	adds	r1, r3, #1
 800a272:	61f9      	str	r1, [r7, #28]
 800a274:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a278:	b2d2      	uxtb	r2, r2
 800a27a:	701a      	strb	r2, [r3, #0]
 800a27c:	69bb      	ldr	r3, [r7, #24]
 800a27e:	09db      	lsrs	r3, r3, #7
 800a280:	61bb      	str	r3, [r7, #24]
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	2b7f      	cmp	r3, #127	@ 0x7f
 800a286:	d8f0      	bhi.n	800a26a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800a288:	69fb      	ldr	r3, [r7, #28]
 800a28a:	1c5a      	adds	r2, r3, #1
 800a28c:	61fa      	str	r2, [r7, #28]
 800a28e:	69ba      	ldr	r2, [r7, #24]
 800a290:	b2d2      	uxtb	r2, r2
 800a292:	701a      	strb	r2, [r3, #0]
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800a298:	2206      	movs	r2, #6
 800a29a:	68f9      	ldr	r1, [r7, #12]
 800a29c:	6938      	ldr	r0, [r7, #16]
 800a29e:	f7ff f8dd 	bl	800945c <_SendPacket>
  RECORD_END();
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f383 8811 	msr	BASEPRI, r3
}
 800a2a8:	bf00      	nop
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	2001ccb0 	.word	0x2001ccb0
 800a2b4:	2001cc80 	.word	0x2001cc80

0800a2b8 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08a      	sub	sp, #40	@ 0x28
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a2c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a2c6:	f04f 0120 	mov.w	r1, #32
 800a2ca:	f381 8811 	msr	BASEPRI, r1
 800a2ce:	617b      	str	r3, [r7, #20]
 800a2d0:	4827      	ldr	r0, [pc, #156]	@ (800a370 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800a2d2:	f7fe ffd6 	bl	8009282 <_PreparePacket>
 800a2d6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800a2dc:	4b25      	ldr	r3, [pc, #148]	@ (800a374 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800a2de:	691b      	ldr	r3, [r3, #16]
 800a2e0:	687a      	ldr	r2, [r7, #4]
 800a2e2:	1ad3      	subs	r3, r2, r3
 800a2e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	623b      	str	r3, [r7, #32]
 800a2ee:	e00b      	b.n	800a308 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	b2da      	uxtb	r2, r3
 800a2f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2f6:	1c59      	adds	r1, r3, #1
 800a2f8:	6279      	str	r1, [r7, #36]	@ 0x24
 800a2fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a2fe:	b2d2      	uxtb	r2, r2
 800a300:	701a      	strb	r2, [r3, #0]
 800a302:	6a3b      	ldr	r3, [r7, #32]
 800a304:	09db      	lsrs	r3, r3, #7
 800a306:	623b      	str	r3, [r7, #32]
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	2b7f      	cmp	r3, #127	@ 0x7f
 800a30c:	d8f0      	bhi.n	800a2f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800a30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	627a      	str	r2, [r7, #36]	@ 0x24
 800a314:	6a3a      	ldr	r2, [r7, #32]
 800a316:	b2d2      	uxtb	r2, r2
 800a318:	701a      	strb	r2, [r3, #0]
 800a31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a31c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	61fb      	str	r3, [r7, #28]
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	61bb      	str	r3, [r7, #24]
 800a326:	e00b      	b.n	800a340 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	1c59      	adds	r1, r3, #1
 800a330:	61f9      	str	r1, [r7, #28]
 800a332:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a336:	b2d2      	uxtb	r2, r2
 800a338:	701a      	strb	r2, [r3, #0]
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	09db      	lsrs	r3, r3, #7
 800a33e:	61bb      	str	r3, [r7, #24]
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	2b7f      	cmp	r3, #127	@ 0x7f
 800a344:	d8f0      	bhi.n	800a328 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800a346:	69fb      	ldr	r3, [r7, #28]
 800a348:	1c5a      	adds	r2, r3, #1
 800a34a:	61fa      	str	r2, [r7, #28]
 800a34c:	69ba      	ldr	r2, [r7, #24]
 800a34e:	b2d2      	uxtb	r2, r2
 800a350:	701a      	strb	r2, [r3, #0]
 800a352:	69fb      	ldr	r3, [r7, #28]
 800a354:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800a356:	2207      	movs	r2, #7
 800a358:	68f9      	ldr	r1, [r7, #12]
 800a35a:	6938      	ldr	r0, [r7, #16]
 800a35c:	f7ff f87e 	bl	800945c <_SendPacket>
  RECORD_END();
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	f383 8811 	msr	BASEPRI, r3
}
 800a366:	bf00      	nop
 800a368:	3728      	adds	r7, #40	@ 0x28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop
 800a370:	2001ccb0 	.word	0x2001ccb0
 800a374:	2001cc80 	.word	0x2001cc80

0800a378 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800a380:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800a382:	691b      	ldr	r3, [r3, #16]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	1ad3      	subs	r3, r2, r3
}
 800a388:	4618      	mov	r0, r3
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	2001cc80 	.word	0x2001cc80

0800a398 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800a398:	b580      	push	{r7, lr}
 800a39a:	b08c      	sub	sp, #48	@ 0x30
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	4603      	mov	r3, r0
 800a3a0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800a3a2:	4b40      	ldr	r3, [pc, #256]	@ (800a4a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d077      	beq.n	800a49a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800a3aa:	4b3e      	ldr	r3, [pc, #248]	@ (800a4a4 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3b4:	e008      	b.n	800a3c8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800a3b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800a3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d007      	beq.n	800a3d2 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800a3c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a3c8:	79fb      	ldrb	r3, [r7, #7]
 800a3ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d3f2      	bcc.n	800a3b6 <SEGGER_SYSVIEW_SendModule+0x1e>
 800a3d0:	e000      	b.n	800a3d4 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800a3d2:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800a3d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d055      	beq.n	800a486 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a3da:	f3ef 8311 	mrs	r3, BASEPRI
 800a3de:	f04f 0120 	mov.w	r1, #32
 800a3e2:	f381 8811 	msr	BASEPRI, r1
 800a3e6:	617b      	str	r3, [r7, #20]
 800a3e8:	482f      	ldr	r0, [pc, #188]	@ (800a4a8 <SEGGER_SYSVIEW_SendModule+0x110>)
 800a3ea:	f7fe ff4a 	bl	8009282 <_PreparePacket>
 800a3ee:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f8:	79fb      	ldrb	r3, [r7, #7]
 800a3fa:	623b      	str	r3, [r7, #32]
 800a3fc:	e00b      	b.n	800a416 <SEGGER_SYSVIEW_SendModule+0x7e>
 800a3fe:	6a3b      	ldr	r3, [r7, #32]
 800a400:	b2da      	uxtb	r2, r3
 800a402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a404:	1c59      	adds	r1, r3, #1
 800a406:	6279      	str	r1, [r7, #36]	@ 0x24
 800a408:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a40c:	b2d2      	uxtb	r2, r2
 800a40e:	701a      	strb	r2, [r3, #0]
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	09db      	lsrs	r3, r3, #7
 800a414:	623b      	str	r3, [r7, #32]
 800a416:	6a3b      	ldr	r3, [r7, #32]
 800a418:	2b7f      	cmp	r3, #127	@ 0x7f
 800a41a:	d8f0      	bhi.n	800a3fe <SEGGER_SYSVIEW_SendModule+0x66>
 800a41c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	627a      	str	r2, [r7, #36]	@ 0x24
 800a422:	6a3a      	ldr	r2, [r7, #32]
 800a424:	b2d2      	uxtb	r2, r2
 800a426:	701a      	strb	r2, [r3, #0]
 800a428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	61fb      	str	r3, [r7, #28]
 800a430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	61bb      	str	r3, [r7, #24]
 800a436:	e00b      	b.n	800a450 <SEGGER_SYSVIEW_SendModule+0xb8>
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	b2da      	uxtb	r2, r3
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	1c59      	adds	r1, r3, #1
 800a440:	61f9      	str	r1, [r7, #28]
 800a442:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a446:	b2d2      	uxtb	r2, r2
 800a448:	701a      	strb	r2, [r3, #0]
 800a44a:	69bb      	ldr	r3, [r7, #24]
 800a44c:	09db      	lsrs	r3, r3, #7
 800a44e:	61bb      	str	r3, [r7, #24]
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	2b7f      	cmp	r3, #127	@ 0x7f
 800a454:	d8f0      	bhi.n	800a438 <SEGGER_SYSVIEW_SendModule+0xa0>
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	1c5a      	adds	r2, r3, #1
 800a45a:	61fa      	str	r2, [r7, #28]
 800a45c:	69ba      	ldr	r2, [r7, #24]
 800a45e:	b2d2      	uxtb	r2, r2
 800a460:	701a      	strb	r2, [r3, #0]
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2280      	movs	r2, #128	@ 0x80
 800a46c:	4619      	mov	r1, r3
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f7fe fece 	bl	8009210 <_EncodeStr>
 800a474:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800a476:	2216      	movs	r2, #22
 800a478:	68f9      	ldr	r1, [r7, #12]
 800a47a:	6938      	ldr	r0, [r7, #16]
 800a47c:	f7fe ffee 	bl	800945c <_SendPacket>
      RECORD_END();
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800a486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d006      	beq.n	800a49a <SEGGER_SYSVIEW_SendModule+0x102>
 800a48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d002      	beq.n	800a49a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800a494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	4798      	blx	r3
    }
  }
}
 800a49a:	bf00      	nop
 800a49c:	3730      	adds	r7, #48	@ 0x30
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	bd80      	pop	{r7, pc}
 800a4a2:	bf00      	nop
 800a4a4:	2001cca8 	.word	0x2001cca8
 800a4a8:	2001ccb0 	.word	0x2001ccb0

0800a4ac <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800a4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d00f      	beq.n	800a4da <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800a4ba:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	68db      	ldr	r3, [r3, #12]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d002      	beq.n	800a4ce <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	691b      	ldr	r3, [r3, #16]
 800a4d2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1f2      	bne.n	800a4c0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800a4da:	bf00      	nop
 800a4dc:	3708      	adds	r7, #8
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	2001cca8 	.word	0x2001cca8

0800a4e8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b086      	sub	sp, #24
 800a4ec:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800a4ee:	f3ef 8311 	mrs	r3, BASEPRI
 800a4f2:	f04f 0120 	mov.w	r1, #32
 800a4f6:	f381 8811 	msr	BASEPRI, r1
 800a4fa:	60fb      	str	r3, [r7, #12]
 800a4fc:	4817      	ldr	r0, [pc, #92]	@ (800a55c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800a4fe:	f7fe fec0 	bl	8009282 <_PreparePacket>
 800a502:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	617b      	str	r3, [r7, #20]
 800a50c:	4b14      	ldr	r3, [pc, #80]	@ (800a560 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800a50e:	781b      	ldrb	r3, [r3, #0]
 800a510:	613b      	str	r3, [r7, #16]
 800a512:	e00b      	b.n	800a52c <SEGGER_SYSVIEW_SendNumModules+0x44>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	b2da      	uxtb	r2, r3
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	1c59      	adds	r1, r3, #1
 800a51c:	6179      	str	r1, [r7, #20]
 800a51e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a522:	b2d2      	uxtb	r2, r2
 800a524:	701a      	strb	r2, [r3, #0]
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	09db      	lsrs	r3, r3, #7
 800a52a:	613b      	str	r3, [r7, #16]
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a530:	d8f0      	bhi.n	800a514 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800a532:	697b      	ldr	r3, [r7, #20]
 800a534:	1c5a      	adds	r2, r3, #1
 800a536:	617a      	str	r2, [r7, #20]
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	b2d2      	uxtb	r2, r2
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800a542:	221b      	movs	r2, #27
 800a544:	6879      	ldr	r1, [r7, #4]
 800a546:	68b8      	ldr	r0, [r7, #8]
 800a548:	f7fe ff88 	bl	800945c <_SendPacket>
  RECORD_END();
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f383 8811 	msr	BASEPRI, r3
}
 800a552:	bf00      	nop
 800a554:	3718      	adds	r7, #24
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}
 800a55a:	bf00      	nop
 800a55c:	2001ccb0 	.word	0x2001ccb0
 800a560:	2001ccac 	.word	0x2001ccac

0800a564 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800a564:	b580      	push	{r7, lr}
 800a566:	b08a      	sub	sp, #40	@ 0x28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a56c:	f3ef 8311 	mrs	r3, BASEPRI
 800a570:	f04f 0120 	mov.w	r1, #32
 800a574:	f381 8811 	msr	BASEPRI, r1
 800a578:	617b      	str	r3, [r7, #20]
 800a57a:	4827      	ldr	r0, [pc, #156]	@ (800a618 <SEGGER_SYSVIEW_Warn+0xb4>)
 800a57c:	f7fe fe81 	bl	8009282 <_PreparePacket>
 800a580:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a582:	2280      	movs	r2, #128	@ 0x80
 800a584:	6879      	ldr	r1, [r7, #4]
 800a586:	6938      	ldr	r0, [r7, #16]
 800a588:	f7fe fe42 	bl	8009210 <_EncodeStr>
 800a58c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	627b      	str	r3, [r7, #36]	@ 0x24
 800a592:	2301      	movs	r3, #1
 800a594:	623b      	str	r3, [r7, #32]
 800a596:	e00b      	b.n	800a5b0 <SEGGER_SYSVIEW_Warn+0x4c>
 800a598:	6a3b      	ldr	r3, [r7, #32]
 800a59a:	b2da      	uxtb	r2, r3
 800a59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a59e:	1c59      	adds	r1, r3, #1
 800a5a0:	6279      	str	r1, [r7, #36]	@ 0x24
 800a5a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5a6:	b2d2      	uxtb	r2, r2
 800a5a8:	701a      	strb	r2, [r3, #0]
 800a5aa:	6a3b      	ldr	r3, [r7, #32]
 800a5ac:	09db      	lsrs	r3, r3, #7
 800a5ae:	623b      	str	r3, [r7, #32]
 800a5b0:	6a3b      	ldr	r3, [r7, #32]
 800a5b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5b4:	d8f0      	bhi.n	800a598 <SEGGER_SYSVIEW_Warn+0x34>
 800a5b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5bc:	6a3a      	ldr	r2, [r7, #32]
 800a5be:	b2d2      	uxtb	r2, r2
 800a5c0:	701a      	strb	r2, [r3, #0]
 800a5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	61fb      	str	r3, [r7, #28]
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	61bb      	str	r3, [r7, #24]
 800a5ce:	e00b      	b.n	800a5e8 <SEGGER_SYSVIEW_Warn+0x84>
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	b2da      	uxtb	r2, r3
 800a5d4:	69fb      	ldr	r3, [r7, #28]
 800a5d6:	1c59      	adds	r1, r3, #1
 800a5d8:	61f9      	str	r1, [r7, #28]
 800a5da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5de:	b2d2      	uxtb	r2, r2
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	09db      	lsrs	r3, r3, #7
 800a5e6:	61bb      	str	r3, [r7, #24]
 800a5e8:	69bb      	ldr	r3, [r7, #24]
 800a5ea:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5ec:	d8f0      	bhi.n	800a5d0 <SEGGER_SYSVIEW_Warn+0x6c>
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	1c5a      	adds	r2, r3, #1
 800a5f2:	61fa      	str	r2, [r7, #28]
 800a5f4:	69ba      	ldr	r2, [r7, #24]
 800a5f6:	b2d2      	uxtb	r2, r2
 800a5f8:	701a      	strb	r2, [r3, #0]
 800a5fa:	69fb      	ldr	r3, [r7, #28]
 800a5fc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a5fe:	221a      	movs	r2, #26
 800a600:	68f9      	ldr	r1, [r7, #12]
 800a602:	6938      	ldr	r0, [r7, #16]
 800a604:	f7fe ff2a 	bl	800945c <_SendPacket>
  RECORD_END();
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	f383 8811 	msr	BASEPRI, r3
}
 800a60e:	bf00      	nop
 800a610:	3728      	adds	r7, #40	@ 0x28
 800a612:	46bd      	mov	sp, r7
 800a614:	bd80      	pop	{r7, pc}
 800a616:	bf00      	nop
 800a618:	2001ccb0 	.word	0x2001ccb0

0800a61c <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	60f8      	str	r0, [r7, #12]
 800a624:	60b9      	str	r1, [r7, #8]
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800a62a:	683a      	ldr	r2, [r7, #0]
 800a62c:	6879      	ldr	r1, [r7, #4]
 800a62e:	2000      	movs	r0, #0
 800a630:	f7fe fcf8 	bl	8009024 <SEGGER_RTT_Write>
  return len;
 800a634:	683b      	ldr	r3, [r7, #0]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3710      	adds	r7, #16
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
	...

0800a640 <std>:
 800a640:	2300      	movs	r3, #0
 800a642:	b510      	push	{r4, lr}
 800a644:	4604      	mov	r4, r0
 800a646:	e9c0 3300 	strd	r3, r3, [r0]
 800a64a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a64e:	6083      	str	r3, [r0, #8]
 800a650:	8181      	strh	r1, [r0, #12]
 800a652:	6643      	str	r3, [r0, #100]	@ 0x64
 800a654:	81c2      	strh	r2, [r0, #14]
 800a656:	6183      	str	r3, [r0, #24]
 800a658:	4619      	mov	r1, r3
 800a65a:	2208      	movs	r2, #8
 800a65c:	305c      	adds	r0, #92	@ 0x5c
 800a65e:	f000 f936 	bl	800a8ce <memset>
 800a662:	4b0d      	ldr	r3, [pc, #52]	@ (800a698 <std+0x58>)
 800a664:	6263      	str	r3, [r4, #36]	@ 0x24
 800a666:	4b0d      	ldr	r3, [pc, #52]	@ (800a69c <std+0x5c>)
 800a668:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <std+0x60>)
 800a66c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a66e:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a4 <std+0x64>)
 800a670:	6323      	str	r3, [r4, #48]	@ 0x30
 800a672:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a8 <std+0x68>)
 800a674:	6224      	str	r4, [r4, #32]
 800a676:	429c      	cmp	r4, r3
 800a678:	d006      	beq.n	800a688 <std+0x48>
 800a67a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a67e:	4294      	cmp	r4, r2
 800a680:	d002      	beq.n	800a688 <std+0x48>
 800a682:	33d0      	adds	r3, #208	@ 0xd0
 800a684:	429c      	cmp	r4, r3
 800a686:	d105      	bne.n	800a694 <std+0x54>
 800a688:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a690:	f000 b984 	b.w	800a99c <__retarget_lock_init_recursive>
 800a694:	bd10      	pop	{r4, pc}
 800a696:	bf00      	nop
 800a698:	0800a829 	.word	0x0800a829
 800a69c:	0800a84b 	.word	0x0800a84b
 800a6a0:	0800a883 	.word	0x0800a883
 800a6a4:	0800a8a7 	.word	0x0800a8a7
 800a6a8:	2001cd94 	.word	0x2001cd94

0800a6ac <stdio_exit_handler>:
 800a6ac:	4a02      	ldr	r2, [pc, #8]	@ (800a6b8 <stdio_exit_handler+0xc>)
 800a6ae:	4903      	ldr	r1, [pc, #12]	@ (800a6bc <stdio_exit_handler+0x10>)
 800a6b0:	4803      	ldr	r0, [pc, #12]	@ (800a6c0 <stdio_exit_handler+0x14>)
 800a6b2:	f000 b869 	b.w	800a788 <_fwalk_sglue>
 800a6b6:	bf00      	nop
 800a6b8:	20000028 	.word	0x20000028
 800a6bc:	0800b509 	.word	0x0800b509
 800a6c0:	20000038 	.word	0x20000038

0800a6c4 <cleanup_stdio>:
 800a6c4:	6841      	ldr	r1, [r0, #4]
 800a6c6:	4b0c      	ldr	r3, [pc, #48]	@ (800a6f8 <cleanup_stdio+0x34>)
 800a6c8:	4299      	cmp	r1, r3
 800a6ca:	b510      	push	{r4, lr}
 800a6cc:	4604      	mov	r4, r0
 800a6ce:	d001      	beq.n	800a6d4 <cleanup_stdio+0x10>
 800a6d0:	f000 ff1a 	bl	800b508 <_fflush_r>
 800a6d4:	68a1      	ldr	r1, [r4, #8]
 800a6d6:	4b09      	ldr	r3, [pc, #36]	@ (800a6fc <cleanup_stdio+0x38>)
 800a6d8:	4299      	cmp	r1, r3
 800a6da:	d002      	beq.n	800a6e2 <cleanup_stdio+0x1e>
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f000 ff13 	bl	800b508 <_fflush_r>
 800a6e2:	68e1      	ldr	r1, [r4, #12]
 800a6e4:	4b06      	ldr	r3, [pc, #24]	@ (800a700 <cleanup_stdio+0x3c>)
 800a6e6:	4299      	cmp	r1, r3
 800a6e8:	d004      	beq.n	800a6f4 <cleanup_stdio+0x30>
 800a6ea:	4620      	mov	r0, r4
 800a6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6f0:	f000 bf0a 	b.w	800b508 <_fflush_r>
 800a6f4:	bd10      	pop	{r4, pc}
 800a6f6:	bf00      	nop
 800a6f8:	2001cd94 	.word	0x2001cd94
 800a6fc:	2001cdfc 	.word	0x2001cdfc
 800a700:	2001ce64 	.word	0x2001ce64

0800a704 <global_stdio_init.part.0>:
 800a704:	b510      	push	{r4, lr}
 800a706:	4b0b      	ldr	r3, [pc, #44]	@ (800a734 <global_stdio_init.part.0+0x30>)
 800a708:	4c0b      	ldr	r4, [pc, #44]	@ (800a738 <global_stdio_init.part.0+0x34>)
 800a70a:	4a0c      	ldr	r2, [pc, #48]	@ (800a73c <global_stdio_init.part.0+0x38>)
 800a70c:	601a      	str	r2, [r3, #0]
 800a70e:	4620      	mov	r0, r4
 800a710:	2200      	movs	r2, #0
 800a712:	2104      	movs	r1, #4
 800a714:	f7ff ff94 	bl	800a640 <std>
 800a718:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a71c:	2201      	movs	r2, #1
 800a71e:	2109      	movs	r1, #9
 800a720:	f7ff ff8e 	bl	800a640 <std>
 800a724:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a728:	2202      	movs	r2, #2
 800a72a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a72e:	2112      	movs	r1, #18
 800a730:	f7ff bf86 	b.w	800a640 <std>
 800a734:	2001cecc 	.word	0x2001cecc
 800a738:	2001cd94 	.word	0x2001cd94
 800a73c:	0800a6ad 	.word	0x0800a6ad

0800a740 <__sfp_lock_acquire>:
 800a740:	4801      	ldr	r0, [pc, #4]	@ (800a748 <__sfp_lock_acquire+0x8>)
 800a742:	f000 b92c 	b.w	800a99e <__retarget_lock_acquire_recursive>
 800a746:	bf00      	nop
 800a748:	2001ced5 	.word	0x2001ced5

0800a74c <__sfp_lock_release>:
 800a74c:	4801      	ldr	r0, [pc, #4]	@ (800a754 <__sfp_lock_release+0x8>)
 800a74e:	f000 b927 	b.w	800a9a0 <__retarget_lock_release_recursive>
 800a752:	bf00      	nop
 800a754:	2001ced5 	.word	0x2001ced5

0800a758 <__sinit>:
 800a758:	b510      	push	{r4, lr}
 800a75a:	4604      	mov	r4, r0
 800a75c:	f7ff fff0 	bl	800a740 <__sfp_lock_acquire>
 800a760:	6a23      	ldr	r3, [r4, #32]
 800a762:	b11b      	cbz	r3, 800a76c <__sinit+0x14>
 800a764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a768:	f7ff bff0 	b.w	800a74c <__sfp_lock_release>
 800a76c:	4b04      	ldr	r3, [pc, #16]	@ (800a780 <__sinit+0x28>)
 800a76e:	6223      	str	r3, [r4, #32]
 800a770:	4b04      	ldr	r3, [pc, #16]	@ (800a784 <__sinit+0x2c>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1f5      	bne.n	800a764 <__sinit+0xc>
 800a778:	f7ff ffc4 	bl	800a704 <global_stdio_init.part.0>
 800a77c:	e7f2      	b.n	800a764 <__sinit+0xc>
 800a77e:	bf00      	nop
 800a780:	0800a6c5 	.word	0x0800a6c5
 800a784:	2001cecc 	.word	0x2001cecc

0800a788 <_fwalk_sglue>:
 800a788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a78c:	4607      	mov	r7, r0
 800a78e:	4688      	mov	r8, r1
 800a790:	4614      	mov	r4, r2
 800a792:	2600      	movs	r6, #0
 800a794:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a798:	f1b9 0901 	subs.w	r9, r9, #1
 800a79c:	d505      	bpl.n	800a7aa <_fwalk_sglue+0x22>
 800a79e:	6824      	ldr	r4, [r4, #0]
 800a7a0:	2c00      	cmp	r4, #0
 800a7a2:	d1f7      	bne.n	800a794 <_fwalk_sglue+0xc>
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d907      	bls.n	800a7c0 <_fwalk_sglue+0x38>
 800a7b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7b4:	3301      	adds	r3, #1
 800a7b6:	d003      	beq.n	800a7c0 <_fwalk_sglue+0x38>
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4638      	mov	r0, r7
 800a7bc:	47c0      	blx	r8
 800a7be:	4306      	orrs	r6, r0
 800a7c0:	3568      	adds	r5, #104	@ 0x68
 800a7c2:	e7e9      	b.n	800a798 <_fwalk_sglue+0x10>

0800a7c4 <iprintf>:
 800a7c4:	b40f      	push	{r0, r1, r2, r3}
 800a7c6:	b507      	push	{r0, r1, r2, lr}
 800a7c8:	4906      	ldr	r1, [pc, #24]	@ (800a7e4 <iprintf+0x20>)
 800a7ca:	ab04      	add	r3, sp, #16
 800a7cc:	6808      	ldr	r0, [r1, #0]
 800a7ce:	f853 2b04 	ldr.w	r2, [r3], #4
 800a7d2:	6881      	ldr	r1, [r0, #8]
 800a7d4:	9301      	str	r3, [sp, #4]
 800a7d6:	f000 fb6d 	bl	800aeb4 <_vfiprintf_r>
 800a7da:	b003      	add	sp, #12
 800a7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a7e0:	b004      	add	sp, #16
 800a7e2:	4770      	bx	lr
 800a7e4:	20000034 	.word	0x20000034

0800a7e8 <siprintf>:
 800a7e8:	b40e      	push	{r1, r2, r3}
 800a7ea:	b500      	push	{lr}
 800a7ec:	b09c      	sub	sp, #112	@ 0x70
 800a7ee:	ab1d      	add	r3, sp, #116	@ 0x74
 800a7f0:	9002      	str	r0, [sp, #8]
 800a7f2:	9006      	str	r0, [sp, #24]
 800a7f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a7f8:	4809      	ldr	r0, [pc, #36]	@ (800a820 <siprintf+0x38>)
 800a7fa:	9107      	str	r1, [sp, #28]
 800a7fc:	9104      	str	r1, [sp, #16]
 800a7fe:	4909      	ldr	r1, [pc, #36]	@ (800a824 <siprintf+0x3c>)
 800a800:	f853 2b04 	ldr.w	r2, [r3], #4
 800a804:	9105      	str	r1, [sp, #20]
 800a806:	6800      	ldr	r0, [r0, #0]
 800a808:	9301      	str	r3, [sp, #4]
 800a80a:	a902      	add	r1, sp, #8
 800a80c:	f000 fa2c 	bl	800ac68 <_svfiprintf_r>
 800a810:	9b02      	ldr	r3, [sp, #8]
 800a812:	2200      	movs	r2, #0
 800a814:	701a      	strb	r2, [r3, #0]
 800a816:	b01c      	add	sp, #112	@ 0x70
 800a818:	f85d eb04 	ldr.w	lr, [sp], #4
 800a81c:	b003      	add	sp, #12
 800a81e:	4770      	bx	lr
 800a820:	20000034 	.word	0x20000034
 800a824:	ffff0208 	.word	0xffff0208

0800a828 <__sread>:
 800a828:	b510      	push	{r4, lr}
 800a82a:	460c      	mov	r4, r1
 800a82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a830:	f000 f878 	bl	800a924 <_read_r>
 800a834:	2800      	cmp	r0, #0
 800a836:	bfab      	itete	ge
 800a838:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a83a:	89a3      	ldrhlt	r3, [r4, #12]
 800a83c:	181b      	addge	r3, r3, r0
 800a83e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a842:	bfac      	ite	ge
 800a844:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a846:	81a3      	strhlt	r3, [r4, #12]
 800a848:	bd10      	pop	{r4, pc}

0800a84a <__swrite>:
 800a84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a84e:	461f      	mov	r7, r3
 800a850:	898b      	ldrh	r3, [r1, #12]
 800a852:	05db      	lsls	r3, r3, #23
 800a854:	4605      	mov	r5, r0
 800a856:	460c      	mov	r4, r1
 800a858:	4616      	mov	r6, r2
 800a85a:	d505      	bpl.n	800a868 <__swrite+0x1e>
 800a85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a860:	2302      	movs	r3, #2
 800a862:	2200      	movs	r2, #0
 800a864:	f000 f84c 	bl	800a900 <_lseek_r>
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a86e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a872:	81a3      	strh	r3, [r4, #12]
 800a874:	4632      	mov	r2, r6
 800a876:	463b      	mov	r3, r7
 800a878:	4628      	mov	r0, r5
 800a87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a87e:	f7ff becd 	b.w	800a61c <_write_r>

0800a882 <__sseek>:
 800a882:	b510      	push	{r4, lr}
 800a884:	460c      	mov	r4, r1
 800a886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a88a:	f000 f839 	bl	800a900 <_lseek_r>
 800a88e:	1c43      	adds	r3, r0, #1
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	bf15      	itete	ne
 800a894:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a896:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a89a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a89e:	81a3      	strheq	r3, [r4, #12]
 800a8a0:	bf18      	it	ne
 800a8a2:	81a3      	strhne	r3, [r4, #12]
 800a8a4:	bd10      	pop	{r4, pc}

0800a8a6 <__sclose>:
 800a8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8aa:	f000 b819 	b.w	800a8e0 <_close_r>

0800a8ae <memcmp>:
 800a8ae:	b510      	push	{r4, lr}
 800a8b0:	3901      	subs	r1, #1
 800a8b2:	4402      	add	r2, r0
 800a8b4:	4290      	cmp	r0, r2
 800a8b6:	d101      	bne.n	800a8bc <memcmp+0xe>
 800a8b8:	2000      	movs	r0, #0
 800a8ba:	e005      	b.n	800a8c8 <memcmp+0x1a>
 800a8bc:	7803      	ldrb	r3, [r0, #0]
 800a8be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800a8c2:	42a3      	cmp	r3, r4
 800a8c4:	d001      	beq.n	800a8ca <memcmp+0x1c>
 800a8c6:	1b18      	subs	r0, r3, r4
 800a8c8:	bd10      	pop	{r4, pc}
 800a8ca:	3001      	adds	r0, #1
 800a8cc:	e7f2      	b.n	800a8b4 <memcmp+0x6>

0800a8ce <memset>:
 800a8ce:	4402      	add	r2, r0
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d100      	bne.n	800a8d8 <memset+0xa>
 800a8d6:	4770      	bx	lr
 800a8d8:	f803 1b01 	strb.w	r1, [r3], #1
 800a8dc:	e7f9      	b.n	800a8d2 <memset+0x4>
	...

0800a8e0 <_close_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	4d06      	ldr	r5, [pc, #24]	@ (800a8fc <_close_r+0x1c>)
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	4604      	mov	r4, r0
 800a8e8:	4608      	mov	r0, r1
 800a8ea:	602b      	str	r3, [r5, #0]
 800a8ec:	f7f6 fe39 	bl	8001562 <_close>
 800a8f0:	1c43      	adds	r3, r0, #1
 800a8f2:	d102      	bne.n	800a8fa <_close_r+0x1a>
 800a8f4:	682b      	ldr	r3, [r5, #0]
 800a8f6:	b103      	cbz	r3, 800a8fa <_close_r+0x1a>
 800a8f8:	6023      	str	r3, [r4, #0]
 800a8fa:	bd38      	pop	{r3, r4, r5, pc}
 800a8fc:	2001ced0 	.word	0x2001ced0

0800a900 <_lseek_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	4d07      	ldr	r5, [pc, #28]	@ (800a920 <_lseek_r+0x20>)
 800a904:	4604      	mov	r4, r0
 800a906:	4608      	mov	r0, r1
 800a908:	4611      	mov	r1, r2
 800a90a:	2200      	movs	r2, #0
 800a90c:	602a      	str	r2, [r5, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	f7f6 fe4e 	bl	80015b0 <_lseek>
 800a914:	1c43      	adds	r3, r0, #1
 800a916:	d102      	bne.n	800a91e <_lseek_r+0x1e>
 800a918:	682b      	ldr	r3, [r5, #0]
 800a91a:	b103      	cbz	r3, 800a91e <_lseek_r+0x1e>
 800a91c:	6023      	str	r3, [r4, #0]
 800a91e:	bd38      	pop	{r3, r4, r5, pc}
 800a920:	2001ced0 	.word	0x2001ced0

0800a924 <_read_r>:
 800a924:	b538      	push	{r3, r4, r5, lr}
 800a926:	4d07      	ldr	r5, [pc, #28]	@ (800a944 <_read_r+0x20>)
 800a928:	4604      	mov	r4, r0
 800a92a:	4608      	mov	r0, r1
 800a92c:	4611      	mov	r1, r2
 800a92e:	2200      	movs	r2, #0
 800a930:	602a      	str	r2, [r5, #0]
 800a932:	461a      	mov	r2, r3
 800a934:	f7f6 fdf8 	bl	8001528 <_read>
 800a938:	1c43      	adds	r3, r0, #1
 800a93a:	d102      	bne.n	800a942 <_read_r+0x1e>
 800a93c:	682b      	ldr	r3, [r5, #0]
 800a93e:	b103      	cbz	r3, 800a942 <_read_r+0x1e>
 800a940:	6023      	str	r3, [r4, #0]
 800a942:	bd38      	pop	{r3, r4, r5, pc}
 800a944:	2001ced0 	.word	0x2001ced0

0800a948 <__errno>:
 800a948:	4b01      	ldr	r3, [pc, #4]	@ (800a950 <__errno+0x8>)
 800a94a:	6818      	ldr	r0, [r3, #0]
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	20000034 	.word	0x20000034

0800a954 <__libc_init_array>:
 800a954:	b570      	push	{r4, r5, r6, lr}
 800a956:	4d0d      	ldr	r5, [pc, #52]	@ (800a98c <__libc_init_array+0x38>)
 800a958:	4c0d      	ldr	r4, [pc, #52]	@ (800a990 <__libc_init_array+0x3c>)
 800a95a:	1b64      	subs	r4, r4, r5
 800a95c:	10a4      	asrs	r4, r4, #2
 800a95e:	2600      	movs	r6, #0
 800a960:	42a6      	cmp	r6, r4
 800a962:	d109      	bne.n	800a978 <__libc_init_array+0x24>
 800a964:	4d0b      	ldr	r5, [pc, #44]	@ (800a994 <__libc_init_array+0x40>)
 800a966:	4c0c      	ldr	r4, [pc, #48]	@ (800a998 <__libc_init_array+0x44>)
 800a968:	f000 ff6e 	bl	800b848 <_init>
 800a96c:	1b64      	subs	r4, r4, r5
 800a96e:	10a4      	asrs	r4, r4, #2
 800a970:	2600      	movs	r6, #0
 800a972:	42a6      	cmp	r6, r4
 800a974:	d105      	bne.n	800a982 <__libc_init_array+0x2e>
 800a976:	bd70      	pop	{r4, r5, r6, pc}
 800a978:	f855 3b04 	ldr.w	r3, [r5], #4
 800a97c:	4798      	blx	r3
 800a97e:	3601      	adds	r6, #1
 800a980:	e7ee      	b.n	800a960 <__libc_init_array+0xc>
 800a982:	f855 3b04 	ldr.w	r3, [r5], #4
 800a986:	4798      	blx	r3
 800a988:	3601      	adds	r6, #1
 800a98a:	e7f2      	b.n	800a972 <__libc_init_array+0x1e>
 800a98c:	0800bde8 	.word	0x0800bde8
 800a990:	0800bde8 	.word	0x0800bde8
 800a994:	0800bde8 	.word	0x0800bde8
 800a998:	0800bdec 	.word	0x0800bdec

0800a99c <__retarget_lock_init_recursive>:
 800a99c:	4770      	bx	lr

0800a99e <__retarget_lock_acquire_recursive>:
 800a99e:	4770      	bx	lr

0800a9a0 <__retarget_lock_release_recursive>:
 800a9a0:	4770      	bx	lr

0800a9a2 <memcpy>:
 800a9a2:	440a      	add	r2, r1
 800a9a4:	4291      	cmp	r1, r2
 800a9a6:	f100 33ff 	add.w	r3, r0, #4294967295
 800a9aa:	d100      	bne.n	800a9ae <memcpy+0xc>
 800a9ac:	4770      	bx	lr
 800a9ae:	b510      	push	{r4, lr}
 800a9b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9b8:	4291      	cmp	r1, r2
 800a9ba:	d1f9      	bne.n	800a9b0 <memcpy+0xe>
 800a9bc:	bd10      	pop	{r4, pc}
	...

0800a9c0 <_free_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	2900      	cmp	r1, #0
 800a9c6:	d041      	beq.n	800aa4c <_free_r+0x8c>
 800a9c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9cc:	1f0c      	subs	r4, r1, #4
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	bfb8      	it	lt
 800a9d2:	18e4      	addlt	r4, r4, r3
 800a9d4:	f000 f8e0 	bl	800ab98 <__malloc_lock>
 800a9d8:	4a1d      	ldr	r2, [pc, #116]	@ (800aa50 <_free_r+0x90>)
 800a9da:	6813      	ldr	r3, [r2, #0]
 800a9dc:	b933      	cbnz	r3, 800a9ec <_free_r+0x2c>
 800a9de:	6063      	str	r3, [r4, #4]
 800a9e0:	6014      	str	r4, [r2, #0]
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9e8:	f000 b8dc 	b.w	800aba4 <__malloc_unlock>
 800a9ec:	42a3      	cmp	r3, r4
 800a9ee:	d908      	bls.n	800aa02 <_free_r+0x42>
 800a9f0:	6820      	ldr	r0, [r4, #0]
 800a9f2:	1821      	adds	r1, r4, r0
 800a9f4:	428b      	cmp	r3, r1
 800a9f6:	bf01      	itttt	eq
 800a9f8:	6819      	ldreq	r1, [r3, #0]
 800a9fa:	685b      	ldreq	r3, [r3, #4]
 800a9fc:	1809      	addeq	r1, r1, r0
 800a9fe:	6021      	streq	r1, [r4, #0]
 800aa00:	e7ed      	b.n	800a9de <_free_r+0x1e>
 800aa02:	461a      	mov	r2, r3
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	b10b      	cbz	r3, 800aa0c <_free_r+0x4c>
 800aa08:	42a3      	cmp	r3, r4
 800aa0a:	d9fa      	bls.n	800aa02 <_free_r+0x42>
 800aa0c:	6811      	ldr	r1, [r2, #0]
 800aa0e:	1850      	adds	r0, r2, r1
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d10b      	bne.n	800aa2c <_free_r+0x6c>
 800aa14:	6820      	ldr	r0, [r4, #0]
 800aa16:	4401      	add	r1, r0
 800aa18:	1850      	adds	r0, r2, r1
 800aa1a:	4283      	cmp	r3, r0
 800aa1c:	6011      	str	r1, [r2, #0]
 800aa1e:	d1e0      	bne.n	800a9e2 <_free_r+0x22>
 800aa20:	6818      	ldr	r0, [r3, #0]
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	6053      	str	r3, [r2, #4]
 800aa26:	4408      	add	r0, r1
 800aa28:	6010      	str	r0, [r2, #0]
 800aa2a:	e7da      	b.n	800a9e2 <_free_r+0x22>
 800aa2c:	d902      	bls.n	800aa34 <_free_r+0x74>
 800aa2e:	230c      	movs	r3, #12
 800aa30:	602b      	str	r3, [r5, #0]
 800aa32:	e7d6      	b.n	800a9e2 <_free_r+0x22>
 800aa34:	6820      	ldr	r0, [r4, #0]
 800aa36:	1821      	adds	r1, r4, r0
 800aa38:	428b      	cmp	r3, r1
 800aa3a:	bf04      	itt	eq
 800aa3c:	6819      	ldreq	r1, [r3, #0]
 800aa3e:	685b      	ldreq	r3, [r3, #4]
 800aa40:	6063      	str	r3, [r4, #4]
 800aa42:	bf04      	itt	eq
 800aa44:	1809      	addeq	r1, r1, r0
 800aa46:	6021      	streq	r1, [r4, #0]
 800aa48:	6054      	str	r4, [r2, #4]
 800aa4a:	e7ca      	b.n	800a9e2 <_free_r+0x22>
 800aa4c:	bd38      	pop	{r3, r4, r5, pc}
 800aa4e:	bf00      	nop
 800aa50:	2001cedc 	.word	0x2001cedc

0800aa54 <sbrk_aligned>:
 800aa54:	b570      	push	{r4, r5, r6, lr}
 800aa56:	4e0f      	ldr	r6, [pc, #60]	@ (800aa94 <sbrk_aligned+0x40>)
 800aa58:	460c      	mov	r4, r1
 800aa5a:	6831      	ldr	r1, [r6, #0]
 800aa5c:	4605      	mov	r5, r0
 800aa5e:	b911      	cbnz	r1, 800aa66 <sbrk_aligned+0x12>
 800aa60:	f000 fe28 	bl	800b6b4 <_sbrk_r>
 800aa64:	6030      	str	r0, [r6, #0]
 800aa66:	4621      	mov	r1, r4
 800aa68:	4628      	mov	r0, r5
 800aa6a:	f000 fe23 	bl	800b6b4 <_sbrk_r>
 800aa6e:	1c43      	adds	r3, r0, #1
 800aa70:	d103      	bne.n	800aa7a <sbrk_aligned+0x26>
 800aa72:	f04f 34ff 	mov.w	r4, #4294967295
 800aa76:	4620      	mov	r0, r4
 800aa78:	bd70      	pop	{r4, r5, r6, pc}
 800aa7a:	1cc4      	adds	r4, r0, #3
 800aa7c:	f024 0403 	bic.w	r4, r4, #3
 800aa80:	42a0      	cmp	r0, r4
 800aa82:	d0f8      	beq.n	800aa76 <sbrk_aligned+0x22>
 800aa84:	1a21      	subs	r1, r4, r0
 800aa86:	4628      	mov	r0, r5
 800aa88:	f000 fe14 	bl	800b6b4 <_sbrk_r>
 800aa8c:	3001      	adds	r0, #1
 800aa8e:	d1f2      	bne.n	800aa76 <sbrk_aligned+0x22>
 800aa90:	e7ef      	b.n	800aa72 <sbrk_aligned+0x1e>
 800aa92:	bf00      	nop
 800aa94:	2001ced8 	.word	0x2001ced8

0800aa98 <_malloc_r>:
 800aa98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa9c:	1ccd      	adds	r5, r1, #3
 800aa9e:	f025 0503 	bic.w	r5, r5, #3
 800aaa2:	3508      	adds	r5, #8
 800aaa4:	2d0c      	cmp	r5, #12
 800aaa6:	bf38      	it	cc
 800aaa8:	250c      	movcc	r5, #12
 800aaaa:	2d00      	cmp	r5, #0
 800aaac:	4606      	mov	r6, r0
 800aaae:	db01      	blt.n	800aab4 <_malloc_r+0x1c>
 800aab0:	42a9      	cmp	r1, r5
 800aab2:	d904      	bls.n	800aabe <_malloc_r+0x26>
 800aab4:	230c      	movs	r3, #12
 800aab6:	6033      	str	r3, [r6, #0]
 800aab8:	2000      	movs	r0, #0
 800aaba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aabe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab94 <_malloc_r+0xfc>
 800aac2:	f000 f869 	bl	800ab98 <__malloc_lock>
 800aac6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaca:	461c      	mov	r4, r3
 800aacc:	bb44      	cbnz	r4, 800ab20 <_malloc_r+0x88>
 800aace:	4629      	mov	r1, r5
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff ffbf 	bl	800aa54 <sbrk_aligned>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	4604      	mov	r4, r0
 800aada:	d158      	bne.n	800ab8e <_malloc_r+0xf6>
 800aadc:	f8d8 4000 	ldr.w	r4, [r8]
 800aae0:	4627      	mov	r7, r4
 800aae2:	2f00      	cmp	r7, #0
 800aae4:	d143      	bne.n	800ab6e <_malloc_r+0xd6>
 800aae6:	2c00      	cmp	r4, #0
 800aae8:	d04b      	beq.n	800ab82 <_malloc_r+0xea>
 800aaea:	6823      	ldr	r3, [r4, #0]
 800aaec:	4639      	mov	r1, r7
 800aaee:	4630      	mov	r0, r6
 800aaf0:	eb04 0903 	add.w	r9, r4, r3
 800aaf4:	f000 fdde 	bl	800b6b4 <_sbrk_r>
 800aaf8:	4581      	cmp	r9, r0
 800aafa:	d142      	bne.n	800ab82 <_malloc_r+0xea>
 800aafc:	6821      	ldr	r1, [r4, #0]
 800aafe:	1a6d      	subs	r5, r5, r1
 800ab00:	4629      	mov	r1, r5
 800ab02:	4630      	mov	r0, r6
 800ab04:	f7ff ffa6 	bl	800aa54 <sbrk_aligned>
 800ab08:	3001      	adds	r0, #1
 800ab0a:	d03a      	beq.n	800ab82 <_malloc_r+0xea>
 800ab0c:	6823      	ldr	r3, [r4, #0]
 800ab0e:	442b      	add	r3, r5
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	f8d8 3000 	ldr.w	r3, [r8]
 800ab16:	685a      	ldr	r2, [r3, #4]
 800ab18:	bb62      	cbnz	r2, 800ab74 <_malloc_r+0xdc>
 800ab1a:	f8c8 7000 	str.w	r7, [r8]
 800ab1e:	e00f      	b.n	800ab40 <_malloc_r+0xa8>
 800ab20:	6822      	ldr	r2, [r4, #0]
 800ab22:	1b52      	subs	r2, r2, r5
 800ab24:	d420      	bmi.n	800ab68 <_malloc_r+0xd0>
 800ab26:	2a0b      	cmp	r2, #11
 800ab28:	d917      	bls.n	800ab5a <_malloc_r+0xc2>
 800ab2a:	1961      	adds	r1, r4, r5
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	6025      	str	r5, [r4, #0]
 800ab30:	bf18      	it	ne
 800ab32:	6059      	strne	r1, [r3, #4]
 800ab34:	6863      	ldr	r3, [r4, #4]
 800ab36:	bf08      	it	eq
 800ab38:	f8c8 1000 	streq.w	r1, [r8]
 800ab3c:	5162      	str	r2, [r4, r5]
 800ab3e:	604b      	str	r3, [r1, #4]
 800ab40:	4630      	mov	r0, r6
 800ab42:	f000 f82f 	bl	800aba4 <__malloc_unlock>
 800ab46:	f104 000b 	add.w	r0, r4, #11
 800ab4a:	1d23      	adds	r3, r4, #4
 800ab4c:	f020 0007 	bic.w	r0, r0, #7
 800ab50:	1ac2      	subs	r2, r0, r3
 800ab52:	bf1c      	itt	ne
 800ab54:	1a1b      	subne	r3, r3, r0
 800ab56:	50a3      	strne	r3, [r4, r2]
 800ab58:	e7af      	b.n	800aaba <_malloc_r+0x22>
 800ab5a:	6862      	ldr	r2, [r4, #4]
 800ab5c:	42a3      	cmp	r3, r4
 800ab5e:	bf0c      	ite	eq
 800ab60:	f8c8 2000 	streq.w	r2, [r8]
 800ab64:	605a      	strne	r2, [r3, #4]
 800ab66:	e7eb      	b.n	800ab40 <_malloc_r+0xa8>
 800ab68:	4623      	mov	r3, r4
 800ab6a:	6864      	ldr	r4, [r4, #4]
 800ab6c:	e7ae      	b.n	800aacc <_malloc_r+0x34>
 800ab6e:	463c      	mov	r4, r7
 800ab70:	687f      	ldr	r7, [r7, #4]
 800ab72:	e7b6      	b.n	800aae2 <_malloc_r+0x4a>
 800ab74:	461a      	mov	r2, r3
 800ab76:	685b      	ldr	r3, [r3, #4]
 800ab78:	42a3      	cmp	r3, r4
 800ab7a:	d1fb      	bne.n	800ab74 <_malloc_r+0xdc>
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	6053      	str	r3, [r2, #4]
 800ab80:	e7de      	b.n	800ab40 <_malloc_r+0xa8>
 800ab82:	230c      	movs	r3, #12
 800ab84:	6033      	str	r3, [r6, #0]
 800ab86:	4630      	mov	r0, r6
 800ab88:	f000 f80c 	bl	800aba4 <__malloc_unlock>
 800ab8c:	e794      	b.n	800aab8 <_malloc_r+0x20>
 800ab8e:	6005      	str	r5, [r0, #0]
 800ab90:	e7d6      	b.n	800ab40 <_malloc_r+0xa8>
 800ab92:	bf00      	nop
 800ab94:	2001cedc 	.word	0x2001cedc

0800ab98 <__malloc_lock>:
 800ab98:	4801      	ldr	r0, [pc, #4]	@ (800aba0 <__malloc_lock+0x8>)
 800ab9a:	f7ff bf00 	b.w	800a99e <__retarget_lock_acquire_recursive>
 800ab9e:	bf00      	nop
 800aba0:	2001ced4 	.word	0x2001ced4

0800aba4 <__malloc_unlock>:
 800aba4:	4801      	ldr	r0, [pc, #4]	@ (800abac <__malloc_unlock+0x8>)
 800aba6:	f7ff befb 	b.w	800a9a0 <__retarget_lock_release_recursive>
 800abaa:	bf00      	nop
 800abac:	2001ced4 	.word	0x2001ced4

0800abb0 <__ssputs_r>:
 800abb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abb4:	688e      	ldr	r6, [r1, #8]
 800abb6:	461f      	mov	r7, r3
 800abb8:	42be      	cmp	r6, r7
 800abba:	680b      	ldr	r3, [r1, #0]
 800abbc:	4682      	mov	sl, r0
 800abbe:	460c      	mov	r4, r1
 800abc0:	4690      	mov	r8, r2
 800abc2:	d82d      	bhi.n	800ac20 <__ssputs_r+0x70>
 800abc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800abc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800abcc:	d026      	beq.n	800ac1c <__ssputs_r+0x6c>
 800abce:	6965      	ldr	r5, [r4, #20]
 800abd0:	6909      	ldr	r1, [r1, #16]
 800abd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800abd6:	eba3 0901 	sub.w	r9, r3, r1
 800abda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800abde:	1c7b      	adds	r3, r7, #1
 800abe0:	444b      	add	r3, r9
 800abe2:	106d      	asrs	r5, r5, #1
 800abe4:	429d      	cmp	r5, r3
 800abe6:	bf38      	it	cc
 800abe8:	461d      	movcc	r5, r3
 800abea:	0553      	lsls	r3, r2, #21
 800abec:	d527      	bpl.n	800ac3e <__ssputs_r+0x8e>
 800abee:	4629      	mov	r1, r5
 800abf0:	f7ff ff52 	bl	800aa98 <_malloc_r>
 800abf4:	4606      	mov	r6, r0
 800abf6:	b360      	cbz	r0, 800ac52 <__ssputs_r+0xa2>
 800abf8:	6921      	ldr	r1, [r4, #16]
 800abfa:	464a      	mov	r2, r9
 800abfc:	f7ff fed1 	bl	800a9a2 <memcpy>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ac06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	6126      	str	r6, [r4, #16]
 800ac0e:	6165      	str	r5, [r4, #20]
 800ac10:	444e      	add	r6, r9
 800ac12:	eba5 0509 	sub.w	r5, r5, r9
 800ac16:	6026      	str	r6, [r4, #0]
 800ac18:	60a5      	str	r5, [r4, #8]
 800ac1a:	463e      	mov	r6, r7
 800ac1c:	42be      	cmp	r6, r7
 800ac1e:	d900      	bls.n	800ac22 <__ssputs_r+0x72>
 800ac20:	463e      	mov	r6, r7
 800ac22:	6820      	ldr	r0, [r4, #0]
 800ac24:	4632      	mov	r2, r6
 800ac26:	4641      	mov	r1, r8
 800ac28:	f000 fd2a 	bl	800b680 <memmove>
 800ac2c:	68a3      	ldr	r3, [r4, #8]
 800ac2e:	1b9b      	subs	r3, r3, r6
 800ac30:	60a3      	str	r3, [r4, #8]
 800ac32:	6823      	ldr	r3, [r4, #0]
 800ac34:	4433      	add	r3, r6
 800ac36:	6023      	str	r3, [r4, #0]
 800ac38:	2000      	movs	r0, #0
 800ac3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac3e:	462a      	mov	r2, r5
 800ac40:	f000 fd48 	bl	800b6d4 <_realloc_r>
 800ac44:	4606      	mov	r6, r0
 800ac46:	2800      	cmp	r0, #0
 800ac48:	d1e0      	bne.n	800ac0c <__ssputs_r+0x5c>
 800ac4a:	6921      	ldr	r1, [r4, #16]
 800ac4c:	4650      	mov	r0, sl
 800ac4e:	f7ff feb7 	bl	800a9c0 <_free_r>
 800ac52:	230c      	movs	r3, #12
 800ac54:	f8ca 3000 	str.w	r3, [sl]
 800ac58:	89a3      	ldrh	r3, [r4, #12]
 800ac5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac5e:	81a3      	strh	r3, [r4, #12]
 800ac60:	f04f 30ff 	mov.w	r0, #4294967295
 800ac64:	e7e9      	b.n	800ac3a <__ssputs_r+0x8a>
	...

0800ac68 <_svfiprintf_r>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	4698      	mov	r8, r3
 800ac6e:	898b      	ldrh	r3, [r1, #12]
 800ac70:	061b      	lsls	r3, r3, #24
 800ac72:	b09d      	sub	sp, #116	@ 0x74
 800ac74:	4607      	mov	r7, r0
 800ac76:	460d      	mov	r5, r1
 800ac78:	4614      	mov	r4, r2
 800ac7a:	d510      	bpl.n	800ac9e <_svfiprintf_r+0x36>
 800ac7c:	690b      	ldr	r3, [r1, #16]
 800ac7e:	b973      	cbnz	r3, 800ac9e <_svfiprintf_r+0x36>
 800ac80:	2140      	movs	r1, #64	@ 0x40
 800ac82:	f7ff ff09 	bl	800aa98 <_malloc_r>
 800ac86:	6028      	str	r0, [r5, #0]
 800ac88:	6128      	str	r0, [r5, #16]
 800ac8a:	b930      	cbnz	r0, 800ac9a <_svfiprintf_r+0x32>
 800ac8c:	230c      	movs	r3, #12
 800ac8e:	603b      	str	r3, [r7, #0]
 800ac90:	f04f 30ff 	mov.w	r0, #4294967295
 800ac94:	b01d      	add	sp, #116	@ 0x74
 800ac96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac9a:	2340      	movs	r3, #64	@ 0x40
 800ac9c:	616b      	str	r3, [r5, #20]
 800ac9e:	2300      	movs	r3, #0
 800aca0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca2:	2320      	movs	r3, #32
 800aca4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aca8:	f8cd 800c 	str.w	r8, [sp, #12]
 800acac:	2330      	movs	r3, #48	@ 0x30
 800acae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ae4c <_svfiprintf_r+0x1e4>
 800acb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800acb6:	f04f 0901 	mov.w	r9, #1
 800acba:	4623      	mov	r3, r4
 800acbc:	469a      	mov	sl, r3
 800acbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acc2:	b10a      	cbz	r2, 800acc8 <_svfiprintf_r+0x60>
 800acc4:	2a25      	cmp	r2, #37	@ 0x25
 800acc6:	d1f9      	bne.n	800acbc <_svfiprintf_r+0x54>
 800acc8:	ebba 0b04 	subs.w	fp, sl, r4
 800accc:	d00b      	beq.n	800ace6 <_svfiprintf_r+0x7e>
 800acce:	465b      	mov	r3, fp
 800acd0:	4622      	mov	r2, r4
 800acd2:	4629      	mov	r1, r5
 800acd4:	4638      	mov	r0, r7
 800acd6:	f7ff ff6b 	bl	800abb0 <__ssputs_r>
 800acda:	3001      	adds	r0, #1
 800acdc:	f000 80a7 	beq.w	800ae2e <_svfiprintf_r+0x1c6>
 800ace0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ace2:	445a      	add	r2, fp
 800ace4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ace6:	f89a 3000 	ldrb.w	r3, [sl]
 800acea:	2b00      	cmp	r3, #0
 800acec:	f000 809f 	beq.w	800ae2e <_svfiprintf_r+0x1c6>
 800acf0:	2300      	movs	r3, #0
 800acf2:	f04f 32ff 	mov.w	r2, #4294967295
 800acf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acfa:	f10a 0a01 	add.w	sl, sl, #1
 800acfe:	9304      	str	r3, [sp, #16]
 800ad00:	9307      	str	r3, [sp, #28]
 800ad02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ad06:	931a      	str	r3, [sp, #104]	@ 0x68
 800ad08:	4654      	mov	r4, sl
 800ad0a:	2205      	movs	r2, #5
 800ad0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad10:	484e      	ldr	r0, [pc, #312]	@ (800ae4c <_svfiprintf_r+0x1e4>)
 800ad12:	f7f5 fac5 	bl	80002a0 <memchr>
 800ad16:	9a04      	ldr	r2, [sp, #16]
 800ad18:	b9d8      	cbnz	r0, 800ad52 <_svfiprintf_r+0xea>
 800ad1a:	06d0      	lsls	r0, r2, #27
 800ad1c:	bf44      	itt	mi
 800ad1e:	2320      	movmi	r3, #32
 800ad20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad24:	0711      	lsls	r1, r2, #28
 800ad26:	bf44      	itt	mi
 800ad28:	232b      	movmi	r3, #43	@ 0x2b
 800ad2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ad2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ad32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad34:	d015      	beq.n	800ad62 <_svfiprintf_r+0xfa>
 800ad36:	9a07      	ldr	r2, [sp, #28]
 800ad38:	4654      	mov	r4, sl
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	f04f 0c0a 	mov.w	ip, #10
 800ad40:	4621      	mov	r1, r4
 800ad42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad46:	3b30      	subs	r3, #48	@ 0x30
 800ad48:	2b09      	cmp	r3, #9
 800ad4a:	d94b      	bls.n	800ade4 <_svfiprintf_r+0x17c>
 800ad4c:	b1b0      	cbz	r0, 800ad7c <_svfiprintf_r+0x114>
 800ad4e:	9207      	str	r2, [sp, #28]
 800ad50:	e014      	b.n	800ad7c <_svfiprintf_r+0x114>
 800ad52:	eba0 0308 	sub.w	r3, r0, r8
 800ad56:	fa09 f303 	lsl.w	r3, r9, r3
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	9304      	str	r3, [sp, #16]
 800ad5e:	46a2      	mov	sl, r4
 800ad60:	e7d2      	b.n	800ad08 <_svfiprintf_r+0xa0>
 800ad62:	9b03      	ldr	r3, [sp, #12]
 800ad64:	1d19      	adds	r1, r3, #4
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	9103      	str	r1, [sp, #12]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	bfbb      	ittet	lt
 800ad6e:	425b      	neglt	r3, r3
 800ad70:	f042 0202 	orrlt.w	r2, r2, #2
 800ad74:	9307      	strge	r3, [sp, #28]
 800ad76:	9307      	strlt	r3, [sp, #28]
 800ad78:	bfb8      	it	lt
 800ad7a:	9204      	strlt	r2, [sp, #16]
 800ad7c:	7823      	ldrb	r3, [r4, #0]
 800ad7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad80:	d10a      	bne.n	800ad98 <_svfiprintf_r+0x130>
 800ad82:	7863      	ldrb	r3, [r4, #1]
 800ad84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad86:	d132      	bne.n	800adee <_svfiprintf_r+0x186>
 800ad88:	9b03      	ldr	r3, [sp, #12]
 800ad8a:	1d1a      	adds	r2, r3, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	9203      	str	r2, [sp, #12]
 800ad90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad94:	3402      	adds	r4, #2
 800ad96:	9305      	str	r3, [sp, #20]
 800ad98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae5c <_svfiprintf_r+0x1f4>
 800ad9c:	7821      	ldrb	r1, [r4, #0]
 800ad9e:	2203      	movs	r2, #3
 800ada0:	4650      	mov	r0, sl
 800ada2:	f7f5 fa7d 	bl	80002a0 <memchr>
 800ada6:	b138      	cbz	r0, 800adb8 <_svfiprintf_r+0x150>
 800ada8:	9b04      	ldr	r3, [sp, #16]
 800adaa:	eba0 000a 	sub.w	r0, r0, sl
 800adae:	2240      	movs	r2, #64	@ 0x40
 800adb0:	4082      	lsls	r2, r0
 800adb2:	4313      	orrs	r3, r2
 800adb4:	3401      	adds	r4, #1
 800adb6:	9304      	str	r3, [sp, #16]
 800adb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adbc:	4824      	ldr	r0, [pc, #144]	@ (800ae50 <_svfiprintf_r+0x1e8>)
 800adbe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800adc2:	2206      	movs	r2, #6
 800adc4:	f7f5 fa6c 	bl	80002a0 <memchr>
 800adc8:	2800      	cmp	r0, #0
 800adca:	d036      	beq.n	800ae3a <_svfiprintf_r+0x1d2>
 800adcc:	4b21      	ldr	r3, [pc, #132]	@ (800ae54 <_svfiprintf_r+0x1ec>)
 800adce:	bb1b      	cbnz	r3, 800ae18 <_svfiprintf_r+0x1b0>
 800add0:	9b03      	ldr	r3, [sp, #12]
 800add2:	3307      	adds	r3, #7
 800add4:	f023 0307 	bic.w	r3, r3, #7
 800add8:	3308      	adds	r3, #8
 800adda:	9303      	str	r3, [sp, #12]
 800addc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800adde:	4433      	add	r3, r6
 800ade0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ade2:	e76a      	b.n	800acba <_svfiprintf_r+0x52>
 800ade4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ade8:	460c      	mov	r4, r1
 800adea:	2001      	movs	r0, #1
 800adec:	e7a8      	b.n	800ad40 <_svfiprintf_r+0xd8>
 800adee:	2300      	movs	r3, #0
 800adf0:	3401      	adds	r4, #1
 800adf2:	9305      	str	r3, [sp, #20]
 800adf4:	4619      	mov	r1, r3
 800adf6:	f04f 0c0a 	mov.w	ip, #10
 800adfa:	4620      	mov	r0, r4
 800adfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae00:	3a30      	subs	r2, #48	@ 0x30
 800ae02:	2a09      	cmp	r2, #9
 800ae04:	d903      	bls.n	800ae0e <_svfiprintf_r+0x1a6>
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d0c6      	beq.n	800ad98 <_svfiprintf_r+0x130>
 800ae0a:	9105      	str	r1, [sp, #20]
 800ae0c:	e7c4      	b.n	800ad98 <_svfiprintf_r+0x130>
 800ae0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae12:	4604      	mov	r4, r0
 800ae14:	2301      	movs	r3, #1
 800ae16:	e7f0      	b.n	800adfa <_svfiprintf_r+0x192>
 800ae18:	ab03      	add	r3, sp, #12
 800ae1a:	9300      	str	r3, [sp, #0]
 800ae1c:	462a      	mov	r2, r5
 800ae1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae58 <_svfiprintf_r+0x1f0>)
 800ae20:	a904      	add	r1, sp, #16
 800ae22:	4638      	mov	r0, r7
 800ae24:	f3af 8000 	nop.w
 800ae28:	1c42      	adds	r2, r0, #1
 800ae2a:	4606      	mov	r6, r0
 800ae2c:	d1d6      	bne.n	800addc <_svfiprintf_r+0x174>
 800ae2e:	89ab      	ldrh	r3, [r5, #12]
 800ae30:	065b      	lsls	r3, r3, #25
 800ae32:	f53f af2d 	bmi.w	800ac90 <_svfiprintf_r+0x28>
 800ae36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ae38:	e72c      	b.n	800ac94 <_svfiprintf_r+0x2c>
 800ae3a:	ab03      	add	r3, sp, #12
 800ae3c:	9300      	str	r3, [sp, #0]
 800ae3e:	462a      	mov	r2, r5
 800ae40:	4b05      	ldr	r3, [pc, #20]	@ (800ae58 <_svfiprintf_r+0x1f0>)
 800ae42:	a904      	add	r1, sp, #16
 800ae44:	4638      	mov	r0, r7
 800ae46:	f000 f9bb 	bl	800b1c0 <_printf_i>
 800ae4a:	e7ed      	b.n	800ae28 <_svfiprintf_r+0x1c0>
 800ae4c:	0800bdaa 	.word	0x0800bdaa
 800ae50:	0800bdb4 	.word	0x0800bdb4
 800ae54:	00000000 	.word	0x00000000
 800ae58:	0800abb1 	.word	0x0800abb1
 800ae5c:	0800bdb0 	.word	0x0800bdb0

0800ae60 <__sfputc_r>:
 800ae60:	6893      	ldr	r3, [r2, #8]
 800ae62:	3b01      	subs	r3, #1
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	b410      	push	{r4}
 800ae68:	6093      	str	r3, [r2, #8]
 800ae6a:	da08      	bge.n	800ae7e <__sfputc_r+0x1e>
 800ae6c:	6994      	ldr	r4, [r2, #24]
 800ae6e:	42a3      	cmp	r3, r4
 800ae70:	db01      	blt.n	800ae76 <__sfputc_r+0x16>
 800ae72:	290a      	cmp	r1, #10
 800ae74:	d103      	bne.n	800ae7e <__sfputc_r+0x1e>
 800ae76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae7a:	f000 bb6d 	b.w	800b558 <__swbuf_r>
 800ae7e:	6813      	ldr	r3, [r2, #0]
 800ae80:	1c58      	adds	r0, r3, #1
 800ae82:	6010      	str	r0, [r2, #0]
 800ae84:	7019      	strb	r1, [r3, #0]
 800ae86:	4608      	mov	r0, r1
 800ae88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <__sfputs_r>:
 800ae8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae90:	4606      	mov	r6, r0
 800ae92:	460f      	mov	r7, r1
 800ae94:	4614      	mov	r4, r2
 800ae96:	18d5      	adds	r5, r2, r3
 800ae98:	42ac      	cmp	r4, r5
 800ae9a:	d101      	bne.n	800aea0 <__sfputs_r+0x12>
 800ae9c:	2000      	movs	r0, #0
 800ae9e:	e007      	b.n	800aeb0 <__sfputs_r+0x22>
 800aea0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aea4:	463a      	mov	r2, r7
 800aea6:	4630      	mov	r0, r6
 800aea8:	f7ff ffda 	bl	800ae60 <__sfputc_r>
 800aeac:	1c43      	adds	r3, r0, #1
 800aeae:	d1f3      	bne.n	800ae98 <__sfputs_r+0xa>
 800aeb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800aeb4 <_vfiprintf_r>:
 800aeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb8:	460d      	mov	r5, r1
 800aeba:	b09d      	sub	sp, #116	@ 0x74
 800aebc:	4614      	mov	r4, r2
 800aebe:	4698      	mov	r8, r3
 800aec0:	4606      	mov	r6, r0
 800aec2:	b118      	cbz	r0, 800aecc <_vfiprintf_r+0x18>
 800aec4:	6a03      	ldr	r3, [r0, #32]
 800aec6:	b90b      	cbnz	r3, 800aecc <_vfiprintf_r+0x18>
 800aec8:	f7ff fc46 	bl	800a758 <__sinit>
 800aecc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aece:	07d9      	lsls	r1, r3, #31
 800aed0:	d405      	bmi.n	800aede <_vfiprintf_r+0x2a>
 800aed2:	89ab      	ldrh	r3, [r5, #12]
 800aed4:	059a      	lsls	r2, r3, #22
 800aed6:	d402      	bmi.n	800aede <_vfiprintf_r+0x2a>
 800aed8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aeda:	f7ff fd60 	bl	800a99e <__retarget_lock_acquire_recursive>
 800aede:	89ab      	ldrh	r3, [r5, #12]
 800aee0:	071b      	lsls	r3, r3, #28
 800aee2:	d501      	bpl.n	800aee8 <_vfiprintf_r+0x34>
 800aee4:	692b      	ldr	r3, [r5, #16]
 800aee6:	b99b      	cbnz	r3, 800af10 <_vfiprintf_r+0x5c>
 800aee8:	4629      	mov	r1, r5
 800aeea:	4630      	mov	r0, r6
 800aeec:	f000 fb72 	bl	800b5d4 <__swsetup_r>
 800aef0:	b170      	cbz	r0, 800af10 <_vfiprintf_r+0x5c>
 800aef2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aef4:	07dc      	lsls	r4, r3, #31
 800aef6:	d504      	bpl.n	800af02 <_vfiprintf_r+0x4e>
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295
 800aefc:	b01d      	add	sp, #116	@ 0x74
 800aefe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af02:	89ab      	ldrh	r3, [r5, #12]
 800af04:	0598      	lsls	r0, r3, #22
 800af06:	d4f7      	bmi.n	800aef8 <_vfiprintf_r+0x44>
 800af08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af0a:	f7ff fd49 	bl	800a9a0 <__retarget_lock_release_recursive>
 800af0e:	e7f3      	b.n	800aef8 <_vfiprintf_r+0x44>
 800af10:	2300      	movs	r3, #0
 800af12:	9309      	str	r3, [sp, #36]	@ 0x24
 800af14:	2320      	movs	r3, #32
 800af16:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800af1a:	f8cd 800c 	str.w	r8, [sp, #12]
 800af1e:	2330      	movs	r3, #48	@ 0x30
 800af20:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b0d0 <_vfiprintf_r+0x21c>
 800af24:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800af28:	f04f 0901 	mov.w	r9, #1
 800af2c:	4623      	mov	r3, r4
 800af2e:	469a      	mov	sl, r3
 800af30:	f813 2b01 	ldrb.w	r2, [r3], #1
 800af34:	b10a      	cbz	r2, 800af3a <_vfiprintf_r+0x86>
 800af36:	2a25      	cmp	r2, #37	@ 0x25
 800af38:	d1f9      	bne.n	800af2e <_vfiprintf_r+0x7a>
 800af3a:	ebba 0b04 	subs.w	fp, sl, r4
 800af3e:	d00b      	beq.n	800af58 <_vfiprintf_r+0xa4>
 800af40:	465b      	mov	r3, fp
 800af42:	4622      	mov	r2, r4
 800af44:	4629      	mov	r1, r5
 800af46:	4630      	mov	r0, r6
 800af48:	f7ff ffa1 	bl	800ae8e <__sfputs_r>
 800af4c:	3001      	adds	r0, #1
 800af4e:	f000 80a7 	beq.w	800b0a0 <_vfiprintf_r+0x1ec>
 800af52:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800af54:	445a      	add	r2, fp
 800af56:	9209      	str	r2, [sp, #36]	@ 0x24
 800af58:	f89a 3000 	ldrb.w	r3, [sl]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f000 809f 	beq.w	800b0a0 <_vfiprintf_r+0x1ec>
 800af62:	2300      	movs	r3, #0
 800af64:	f04f 32ff 	mov.w	r2, #4294967295
 800af68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af6c:	f10a 0a01 	add.w	sl, sl, #1
 800af70:	9304      	str	r3, [sp, #16]
 800af72:	9307      	str	r3, [sp, #28]
 800af74:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800af78:	931a      	str	r3, [sp, #104]	@ 0x68
 800af7a:	4654      	mov	r4, sl
 800af7c:	2205      	movs	r2, #5
 800af7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af82:	4853      	ldr	r0, [pc, #332]	@ (800b0d0 <_vfiprintf_r+0x21c>)
 800af84:	f7f5 f98c 	bl	80002a0 <memchr>
 800af88:	9a04      	ldr	r2, [sp, #16]
 800af8a:	b9d8      	cbnz	r0, 800afc4 <_vfiprintf_r+0x110>
 800af8c:	06d1      	lsls	r1, r2, #27
 800af8e:	bf44      	itt	mi
 800af90:	2320      	movmi	r3, #32
 800af92:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800af96:	0713      	lsls	r3, r2, #28
 800af98:	bf44      	itt	mi
 800af9a:	232b      	movmi	r3, #43	@ 0x2b
 800af9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800afa0:	f89a 3000 	ldrb.w	r3, [sl]
 800afa4:	2b2a      	cmp	r3, #42	@ 0x2a
 800afa6:	d015      	beq.n	800afd4 <_vfiprintf_r+0x120>
 800afa8:	9a07      	ldr	r2, [sp, #28]
 800afaa:	4654      	mov	r4, sl
 800afac:	2000      	movs	r0, #0
 800afae:	f04f 0c0a 	mov.w	ip, #10
 800afb2:	4621      	mov	r1, r4
 800afb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800afb8:	3b30      	subs	r3, #48	@ 0x30
 800afba:	2b09      	cmp	r3, #9
 800afbc:	d94b      	bls.n	800b056 <_vfiprintf_r+0x1a2>
 800afbe:	b1b0      	cbz	r0, 800afee <_vfiprintf_r+0x13a>
 800afc0:	9207      	str	r2, [sp, #28]
 800afc2:	e014      	b.n	800afee <_vfiprintf_r+0x13a>
 800afc4:	eba0 0308 	sub.w	r3, r0, r8
 800afc8:	fa09 f303 	lsl.w	r3, r9, r3
 800afcc:	4313      	orrs	r3, r2
 800afce:	9304      	str	r3, [sp, #16]
 800afd0:	46a2      	mov	sl, r4
 800afd2:	e7d2      	b.n	800af7a <_vfiprintf_r+0xc6>
 800afd4:	9b03      	ldr	r3, [sp, #12]
 800afd6:	1d19      	adds	r1, r3, #4
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	9103      	str	r1, [sp, #12]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	bfbb      	ittet	lt
 800afe0:	425b      	neglt	r3, r3
 800afe2:	f042 0202 	orrlt.w	r2, r2, #2
 800afe6:	9307      	strge	r3, [sp, #28]
 800afe8:	9307      	strlt	r3, [sp, #28]
 800afea:	bfb8      	it	lt
 800afec:	9204      	strlt	r2, [sp, #16]
 800afee:	7823      	ldrb	r3, [r4, #0]
 800aff0:	2b2e      	cmp	r3, #46	@ 0x2e
 800aff2:	d10a      	bne.n	800b00a <_vfiprintf_r+0x156>
 800aff4:	7863      	ldrb	r3, [r4, #1]
 800aff6:	2b2a      	cmp	r3, #42	@ 0x2a
 800aff8:	d132      	bne.n	800b060 <_vfiprintf_r+0x1ac>
 800affa:	9b03      	ldr	r3, [sp, #12]
 800affc:	1d1a      	adds	r2, r3, #4
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	9203      	str	r2, [sp, #12]
 800b002:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b006:	3402      	adds	r4, #2
 800b008:	9305      	str	r3, [sp, #20]
 800b00a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b0e0 <_vfiprintf_r+0x22c>
 800b00e:	7821      	ldrb	r1, [r4, #0]
 800b010:	2203      	movs	r2, #3
 800b012:	4650      	mov	r0, sl
 800b014:	f7f5 f944 	bl	80002a0 <memchr>
 800b018:	b138      	cbz	r0, 800b02a <_vfiprintf_r+0x176>
 800b01a:	9b04      	ldr	r3, [sp, #16]
 800b01c:	eba0 000a 	sub.w	r0, r0, sl
 800b020:	2240      	movs	r2, #64	@ 0x40
 800b022:	4082      	lsls	r2, r0
 800b024:	4313      	orrs	r3, r2
 800b026:	3401      	adds	r4, #1
 800b028:	9304      	str	r3, [sp, #16]
 800b02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b02e:	4829      	ldr	r0, [pc, #164]	@ (800b0d4 <_vfiprintf_r+0x220>)
 800b030:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b034:	2206      	movs	r2, #6
 800b036:	f7f5 f933 	bl	80002a0 <memchr>
 800b03a:	2800      	cmp	r0, #0
 800b03c:	d03f      	beq.n	800b0be <_vfiprintf_r+0x20a>
 800b03e:	4b26      	ldr	r3, [pc, #152]	@ (800b0d8 <_vfiprintf_r+0x224>)
 800b040:	bb1b      	cbnz	r3, 800b08a <_vfiprintf_r+0x1d6>
 800b042:	9b03      	ldr	r3, [sp, #12]
 800b044:	3307      	adds	r3, #7
 800b046:	f023 0307 	bic.w	r3, r3, #7
 800b04a:	3308      	adds	r3, #8
 800b04c:	9303      	str	r3, [sp, #12]
 800b04e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b050:	443b      	add	r3, r7
 800b052:	9309      	str	r3, [sp, #36]	@ 0x24
 800b054:	e76a      	b.n	800af2c <_vfiprintf_r+0x78>
 800b056:	fb0c 3202 	mla	r2, ip, r2, r3
 800b05a:	460c      	mov	r4, r1
 800b05c:	2001      	movs	r0, #1
 800b05e:	e7a8      	b.n	800afb2 <_vfiprintf_r+0xfe>
 800b060:	2300      	movs	r3, #0
 800b062:	3401      	adds	r4, #1
 800b064:	9305      	str	r3, [sp, #20]
 800b066:	4619      	mov	r1, r3
 800b068:	f04f 0c0a 	mov.w	ip, #10
 800b06c:	4620      	mov	r0, r4
 800b06e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b072:	3a30      	subs	r2, #48	@ 0x30
 800b074:	2a09      	cmp	r2, #9
 800b076:	d903      	bls.n	800b080 <_vfiprintf_r+0x1cc>
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d0c6      	beq.n	800b00a <_vfiprintf_r+0x156>
 800b07c:	9105      	str	r1, [sp, #20]
 800b07e:	e7c4      	b.n	800b00a <_vfiprintf_r+0x156>
 800b080:	fb0c 2101 	mla	r1, ip, r1, r2
 800b084:	4604      	mov	r4, r0
 800b086:	2301      	movs	r3, #1
 800b088:	e7f0      	b.n	800b06c <_vfiprintf_r+0x1b8>
 800b08a:	ab03      	add	r3, sp, #12
 800b08c:	9300      	str	r3, [sp, #0]
 800b08e:	462a      	mov	r2, r5
 800b090:	4b12      	ldr	r3, [pc, #72]	@ (800b0dc <_vfiprintf_r+0x228>)
 800b092:	a904      	add	r1, sp, #16
 800b094:	4630      	mov	r0, r6
 800b096:	f3af 8000 	nop.w
 800b09a:	4607      	mov	r7, r0
 800b09c:	1c78      	adds	r0, r7, #1
 800b09e:	d1d6      	bne.n	800b04e <_vfiprintf_r+0x19a>
 800b0a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b0a2:	07d9      	lsls	r1, r3, #31
 800b0a4:	d405      	bmi.n	800b0b2 <_vfiprintf_r+0x1fe>
 800b0a6:	89ab      	ldrh	r3, [r5, #12]
 800b0a8:	059a      	lsls	r2, r3, #22
 800b0aa:	d402      	bmi.n	800b0b2 <_vfiprintf_r+0x1fe>
 800b0ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b0ae:	f7ff fc77 	bl	800a9a0 <__retarget_lock_release_recursive>
 800b0b2:	89ab      	ldrh	r3, [r5, #12]
 800b0b4:	065b      	lsls	r3, r3, #25
 800b0b6:	f53f af1f 	bmi.w	800aef8 <_vfiprintf_r+0x44>
 800b0ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b0bc:	e71e      	b.n	800aefc <_vfiprintf_r+0x48>
 800b0be:	ab03      	add	r3, sp, #12
 800b0c0:	9300      	str	r3, [sp, #0]
 800b0c2:	462a      	mov	r2, r5
 800b0c4:	4b05      	ldr	r3, [pc, #20]	@ (800b0dc <_vfiprintf_r+0x228>)
 800b0c6:	a904      	add	r1, sp, #16
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f879 	bl	800b1c0 <_printf_i>
 800b0ce:	e7e4      	b.n	800b09a <_vfiprintf_r+0x1e6>
 800b0d0:	0800bdaa 	.word	0x0800bdaa
 800b0d4:	0800bdb4 	.word	0x0800bdb4
 800b0d8:	00000000 	.word	0x00000000
 800b0dc:	0800ae8f 	.word	0x0800ae8f
 800b0e0:	0800bdb0 	.word	0x0800bdb0

0800b0e4 <_printf_common>:
 800b0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0e8:	4616      	mov	r6, r2
 800b0ea:	4698      	mov	r8, r3
 800b0ec:	688a      	ldr	r2, [r1, #8]
 800b0ee:	690b      	ldr	r3, [r1, #16]
 800b0f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	bfb8      	it	lt
 800b0f8:	4613      	movlt	r3, r2
 800b0fa:	6033      	str	r3, [r6, #0]
 800b0fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b100:	4607      	mov	r7, r0
 800b102:	460c      	mov	r4, r1
 800b104:	b10a      	cbz	r2, 800b10a <_printf_common+0x26>
 800b106:	3301      	adds	r3, #1
 800b108:	6033      	str	r3, [r6, #0]
 800b10a:	6823      	ldr	r3, [r4, #0]
 800b10c:	0699      	lsls	r1, r3, #26
 800b10e:	bf42      	ittt	mi
 800b110:	6833      	ldrmi	r3, [r6, #0]
 800b112:	3302      	addmi	r3, #2
 800b114:	6033      	strmi	r3, [r6, #0]
 800b116:	6825      	ldr	r5, [r4, #0]
 800b118:	f015 0506 	ands.w	r5, r5, #6
 800b11c:	d106      	bne.n	800b12c <_printf_common+0x48>
 800b11e:	f104 0a19 	add.w	sl, r4, #25
 800b122:	68e3      	ldr	r3, [r4, #12]
 800b124:	6832      	ldr	r2, [r6, #0]
 800b126:	1a9b      	subs	r3, r3, r2
 800b128:	42ab      	cmp	r3, r5
 800b12a:	dc26      	bgt.n	800b17a <_printf_common+0x96>
 800b12c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b130:	6822      	ldr	r2, [r4, #0]
 800b132:	3b00      	subs	r3, #0
 800b134:	bf18      	it	ne
 800b136:	2301      	movne	r3, #1
 800b138:	0692      	lsls	r2, r2, #26
 800b13a:	d42b      	bmi.n	800b194 <_printf_common+0xb0>
 800b13c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b140:	4641      	mov	r1, r8
 800b142:	4638      	mov	r0, r7
 800b144:	47c8      	blx	r9
 800b146:	3001      	adds	r0, #1
 800b148:	d01e      	beq.n	800b188 <_printf_common+0xa4>
 800b14a:	6823      	ldr	r3, [r4, #0]
 800b14c:	6922      	ldr	r2, [r4, #16]
 800b14e:	f003 0306 	and.w	r3, r3, #6
 800b152:	2b04      	cmp	r3, #4
 800b154:	bf02      	ittt	eq
 800b156:	68e5      	ldreq	r5, [r4, #12]
 800b158:	6833      	ldreq	r3, [r6, #0]
 800b15a:	1aed      	subeq	r5, r5, r3
 800b15c:	68a3      	ldr	r3, [r4, #8]
 800b15e:	bf0c      	ite	eq
 800b160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b164:	2500      	movne	r5, #0
 800b166:	4293      	cmp	r3, r2
 800b168:	bfc4      	itt	gt
 800b16a:	1a9b      	subgt	r3, r3, r2
 800b16c:	18ed      	addgt	r5, r5, r3
 800b16e:	2600      	movs	r6, #0
 800b170:	341a      	adds	r4, #26
 800b172:	42b5      	cmp	r5, r6
 800b174:	d11a      	bne.n	800b1ac <_printf_common+0xc8>
 800b176:	2000      	movs	r0, #0
 800b178:	e008      	b.n	800b18c <_printf_common+0xa8>
 800b17a:	2301      	movs	r3, #1
 800b17c:	4652      	mov	r2, sl
 800b17e:	4641      	mov	r1, r8
 800b180:	4638      	mov	r0, r7
 800b182:	47c8      	blx	r9
 800b184:	3001      	adds	r0, #1
 800b186:	d103      	bne.n	800b190 <_printf_common+0xac>
 800b188:	f04f 30ff 	mov.w	r0, #4294967295
 800b18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b190:	3501      	adds	r5, #1
 800b192:	e7c6      	b.n	800b122 <_printf_common+0x3e>
 800b194:	18e1      	adds	r1, r4, r3
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	2030      	movs	r0, #48	@ 0x30
 800b19a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b19e:	4422      	add	r2, r4
 800b1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b1a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b1a8:	3302      	adds	r3, #2
 800b1aa:	e7c7      	b.n	800b13c <_printf_common+0x58>
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	4622      	mov	r2, r4
 800b1b0:	4641      	mov	r1, r8
 800b1b2:	4638      	mov	r0, r7
 800b1b4:	47c8      	blx	r9
 800b1b6:	3001      	adds	r0, #1
 800b1b8:	d0e6      	beq.n	800b188 <_printf_common+0xa4>
 800b1ba:	3601      	adds	r6, #1
 800b1bc:	e7d9      	b.n	800b172 <_printf_common+0x8e>
	...

0800b1c0 <_printf_i>:
 800b1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	7e0f      	ldrb	r7, [r1, #24]
 800b1c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b1c8:	2f78      	cmp	r7, #120	@ 0x78
 800b1ca:	4691      	mov	r9, r2
 800b1cc:	4680      	mov	r8, r0
 800b1ce:	460c      	mov	r4, r1
 800b1d0:	469a      	mov	sl, r3
 800b1d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b1d6:	d807      	bhi.n	800b1e8 <_printf_i+0x28>
 800b1d8:	2f62      	cmp	r7, #98	@ 0x62
 800b1da:	d80a      	bhi.n	800b1f2 <_printf_i+0x32>
 800b1dc:	2f00      	cmp	r7, #0
 800b1de:	f000 80d2 	beq.w	800b386 <_printf_i+0x1c6>
 800b1e2:	2f58      	cmp	r7, #88	@ 0x58
 800b1e4:	f000 80b9 	beq.w	800b35a <_printf_i+0x19a>
 800b1e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b1ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b1f0:	e03a      	b.n	800b268 <_printf_i+0xa8>
 800b1f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b1f6:	2b15      	cmp	r3, #21
 800b1f8:	d8f6      	bhi.n	800b1e8 <_printf_i+0x28>
 800b1fa:	a101      	add	r1, pc, #4	@ (adr r1, 800b200 <_printf_i+0x40>)
 800b1fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b200:	0800b259 	.word	0x0800b259
 800b204:	0800b26d 	.word	0x0800b26d
 800b208:	0800b1e9 	.word	0x0800b1e9
 800b20c:	0800b1e9 	.word	0x0800b1e9
 800b210:	0800b1e9 	.word	0x0800b1e9
 800b214:	0800b1e9 	.word	0x0800b1e9
 800b218:	0800b26d 	.word	0x0800b26d
 800b21c:	0800b1e9 	.word	0x0800b1e9
 800b220:	0800b1e9 	.word	0x0800b1e9
 800b224:	0800b1e9 	.word	0x0800b1e9
 800b228:	0800b1e9 	.word	0x0800b1e9
 800b22c:	0800b36d 	.word	0x0800b36d
 800b230:	0800b297 	.word	0x0800b297
 800b234:	0800b327 	.word	0x0800b327
 800b238:	0800b1e9 	.word	0x0800b1e9
 800b23c:	0800b1e9 	.word	0x0800b1e9
 800b240:	0800b38f 	.word	0x0800b38f
 800b244:	0800b1e9 	.word	0x0800b1e9
 800b248:	0800b297 	.word	0x0800b297
 800b24c:	0800b1e9 	.word	0x0800b1e9
 800b250:	0800b1e9 	.word	0x0800b1e9
 800b254:	0800b32f 	.word	0x0800b32f
 800b258:	6833      	ldr	r3, [r6, #0]
 800b25a:	1d1a      	adds	r2, r3, #4
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	6032      	str	r2, [r6, #0]
 800b260:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b264:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b268:	2301      	movs	r3, #1
 800b26a:	e09d      	b.n	800b3a8 <_printf_i+0x1e8>
 800b26c:	6833      	ldr	r3, [r6, #0]
 800b26e:	6820      	ldr	r0, [r4, #0]
 800b270:	1d19      	adds	r1, r3, #4
 800b272:	6031      	str	r1, [r6, #0]
 800b274:	0606      	lsls	r6, r0, #24
 800b276:	d501      	bpl.n	800b27c <_printf_i+0xbc>
 800b278:	681d      	ldr	r5, [r3, #0]
 800b27a:	e003      	b.n	800b284 <_printf_i+0xc4>
 800b27c:	0645      	lsls	r5, r0, #25
 800b27e:	d5fb      	bpl.n	800b278 <_printf_i+0xb8>
 800b280:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b284:	2d00      	cmp	r5, #0
 800b286:	da03      	bge.n	800b290 <_printf_i+0xd0>
 800b288:	232d      	movs	r3, #45	@ 0x2d
 800b28a:	426d      	negs	r5, r5
 800b28c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b290:	4859      	ldr	r0, [pc, #356]	@ (800b3f8 <_printf_i+0x238>)
 800b292:	230a      	movs	r3, #10
 800b294:	e011      	b.n	800b2ba <_printf_i+0xfa>
 800b296:	6821      	ldr	r1, [r4, #0]
 800b298:	6833      	ldr	r3, [r6, #0]
 800b29a:	0608      	lsls	r0, r1, #24
 800b29c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b2a0:	d402      	bmi.n	800b2a8 <_printf_i+0xe8>
 800b2a2:	0649      	lsls	r1, r1, #25
 800b2a4:	bf48      	it	mi
 800b2a6:	b2ad      	uxthmi	r5, r5
 800b2a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b2aa:	4853      	ldr	r0, [pc, #332]	@ (800b3f8 <_printf_i+0x238>)
 800b2ac:	6033      	str	r3, [r6, #0]
 800b2ae:	bf14      	ite	ne
 800b2b0:	230a      	movne	r3, #10
 800b2b2:	2308      	moveq	r3, #8
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b2ba:	6866      	ldr	r6, [r4, #4]
 800b2bc:	60a6      	str	r6, [r4, #8]
 800b2be:	2e00      	cmp	r6, #0
 800b2c0:	bfa2      	ittt	ge
 800b2c2:	6821      	ldrge	r1, [r4, #0]
 800b2c4:	f021 0104 	bicge.w	r1, r1, #4
 800b2c8:	6021      	strge	r1, [r4, #0]
 800b2ca:	b90d      	cbnz	r5, 800b2d0 <_printf_i+0x110>
 800b2cc:	2e00      	cmp	r6, #0
 800b2ce:	d04b      	beq.n	800b368 <_printf_i+0x1a8>
 800b2d0:	4616      	mov	r6, r2
 800b2d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b2d6:	fb03 5711 	mls	r7, r3, r1, r5
 800b2da:	5dc7      	ldrb	r7, [r0, r7]
 800b2dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b2e0:	462f      	mov	r7, r5
 800b2e2:	42bb      	cmp	r3, r7
 800b2e4:	460d      	mov	r5, r1
 800b2e6:	d9f4      	bls.n	800b2d2 <_printf_i+0x112>
 800b2e8:	2b08      	cmp	r3, #8
 800b2ea:	d10b      	bne.n	800b304 <_printf_i+0x144>
 800b2ec:	6823      	ldr	r3, [r4, #0]
 800b2ee:	07df      	lsls	r7, r3, #31
 800b2f0:	d508      	bpl.n	800b304 <_printf_i+0x144>
 800b2f2:	6923      	ldr	r3, [r4, #16]
 800b2f4:	6861      	ldr	r1, [r4, #4]
 800b2f6:	4299      	cmp	r1, r3
 800b2f8:	bfde      	ittt	le
 800b2fa:	2330      	movle	r3, #48	@ 0x30
 800b2fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b300:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b304:	1b92      	subs	r2, r2, r6
 800b306:	6122      	str	r2, [r4, #16]
 800b308:	f8cd a000 	str.w	sl, [sp]
 800b30c:	464b      	mov	r3, r9
 800b30e:	aa03      	add	r2, sp, #12
 800b310:	4621      	mov	r1, r4
 800b312:	4640      	mov	r0, r8
 800b314:	f7ff fee6 	bl	800b0e4 <_printf_common>
 800b318:	3001      	adds	r0, #1
 800b31a:	d14a      	bne.n	800b3b2 <_printf_i+0x1f2>
 800b31c:	f04f 30ff 	mov.w	r0, #4294967295
 800b320:	b004      	add	sp, #16
 800b322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b326:	6823      	ldr	r3, [r4, #0]
 800b328:	f043 0320 	orr.w	r3, r3, #32
 800b32c:	6023      	str	r3, [r4, #0]
 800b32e:	4833      	ldr	r0, [pc, #204]	@ (800b3fc <_printf_i+0x23c>)
 800b330:	2778      	movs	r7, #120	@ 0x78
 800b332:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b336:	6823      	ldr	r3, [r4, #0]
 800b338:	6831      	ldr	r1, [r6, #0]
 800b33a:	061f      	lsls	r7, r3, #24
 800b33c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b340:	d402      	bmi.n	800b348 <_printf_i+0x188>
 800b342:	065f      	lsls	r7, r3, #25
 800b344:	bf48      	it	mi
 800b346:	b2ad      	uxthmi	r5, r5
 800b348:	6031      	str	r1, [r6, #0]
 800b34a:	07d9      	lsls	r1, r3, #31
 800b34c:	bf44      	itt	mi
 800b34e:	f043 0320 	orrmi.w	r3, r3, #32
 800b352:	6023      	strmi	r3, [r4, #0]
 800b354:	b11d      	cbz	r5, 800b35e <_printf_i+0x19e>
 800b356:	2310      	movs	r3, #16
 800b358:	e7ac      	b.n	800b2b4 <_printf_i+0xf4>
 800b35a:	4827      	ldr	r0, [pc, #156]	@ (800b3f8 <_printf_i+0x238>)
 800b35c:	e7e9      	b.n	800b332 <_printf_i+0x172>
 800b35e:	6823      	ldr	r3, [r4, #0]
 800b360:	f023 0320 	bic.w	r3, r3, #32
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	e7f6      	b.n	800b356 <_printf_i+0x196>
 800b368:	4616      	mov	r6, r2
 800b36a:	e7bd      	b.n	800b2e8 <_printf_i+0x128>
 800b36c:	6833      	ldr	r3, [r6, #0]
 800b36e:	6825      	ldr	r5, [r4, #0]
 800b370:	6961      	ldr	r1, [r4, #20]
 800b372:	1d18      	adds	r0, r3, #4
 800b374:	6030      	str	r0, [r6, #0]
 800b376:	062e      	lsls	r6, r5, #24
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	d501      	bpl.n	800b380 <_printf_i+0x1c0>
 800b37c:	6019      	str	r1, [r3, #0]
 800b37e:	e002      	b.n	800b386 <_printf_i+0x1c6>
 800b380:	0668      	lsls	r0, r5, #25
 800b382:	d5fb      	bpl.n	800b37c <_printf_i+0x1bc>
 800b384:	8019      	strh	r1, [r3, #0]
 800b386:	2300      	movs	r3, #0
 800b388:	6123      	str	r3, [r4, #16]
 800b38a:	4616      	mov	r6, r2
 800b38c:	e7bc      	b.n	800b308 <_printf_i+0x148>
 800b38e:	6833      	ldr	r3, [r6, #0]
 800b390:	1d1a      	adds	r2, r3, #4
 800b392:	6032      	str	r2, [r6, #0]
 800b394:	681e      	ldr	r6, [r3, #0]
 800b396:	6862      	ldr	r2, [r4, #4]
 800b398:	2100      	movs	r1, #0
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7f4 ff80 	bl	80002a0 <memchr>
 800b3a0:	b108      	cbz	r0, 800b3a6 <_printf_i+0x1e6>
 800b3a2:	1b80      	subs	r0, r0, r6
 800b3a4:	6060      	str	r0, [r4, #4]
 800b3a6:	6863      	ldr	r3, [r4, #4]
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3b0:	e7aa      	b.n	800b308 <_printf_i+0x148>
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	4632      	mov	r2, r6
 800b3b6:	4649      	mov	r1, r9
 800b3b8:	4640      	mov	r0, r8
 800b3ba:	47d0      	blx	sl
 800b3bc:	3001      	adds	r0, #1
 800b3be:	d0ad      	beq.n	800b31c <_printf_i+0x15c>
 800b3c0:	6823      	ldr	r3, [r4, #0]
 800b3c2:	079b      	lsls	r3, r3, #30
 800b3c4:	d413      	bmi.n	800b3ee <_printf_i+0x22e>
 800b3c6:	68e0      	ldr	r0, [r4, #12]
 800b3c8:	9b03      	ldr	r3, [sp, #12]
 800b3ca:	4298      	cmp	r0, r3
 800b3cc:	bfb8      	it	lt
 800b3ce:	4618      	movlt	r0, r3
 800b3d0:	e7a6      	b.n	800b320 <_printf_i+0x160>
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	4632      	mov	r2, r6
 800b3d6:	4649      	mov	r1, r9
 800b3d8:	4640      	mov	r0, r8
 800b3da:	47d0      	blx	sl
 800b3dc:	3001      	adds	r0, #1
 800b3de:	d09d      	beq.n	800b31c <_printf_i+0x15c>
 800b3e0:	3501      	adds	r5, #1
 800b3e2:	68e3      	ldr	r3, [r4, #12]
 800b3e4:	9903      	ldr	r1, [sp, #12]
 800b3e6:	1a5b      	subs	r3, r3, r1
 800b3e8:	42ab      	cmp	r3, r5
 800b3ea:	dcf2      	bgt.n	800b3d2 <_printf_i+0x212>
 800b3ec:	e7eb      	b.n	800b3c6 <_printf_i+0x206>
 800b3ee:	2500      	movs	r5, #0
 800b3f0:	f104 0619 	add.w	r6, r4, #25
 800b3f4:	e7f5      	b.n	800b3e2 <_printf_i+0x222>
 800b3f6:	bf00      	nop
 800b3f8:	0800bdbb 	.word	0x0800bdbb
 800b3fc:	0800bdcc 	.word	0x0800bdcc

0800b400 <__sflush_r>:
 800b400:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b408:	0716      	lsls	r6, r2, #28
 800b40a:	4605      	mov	r5, r0
 800b40c:	460c      	mov	r4, r1
 800b40e:	d454      	bmi.n	800b4ba <__sflush_r+0xba>
 800b410:	684b      	ldr	r3, [r1, #4]
 800b412:	2b00      	cmp	r3, #0
 800b414:	dc02      	bgt.n	800b41c <__sflush_r+0x1c>
 800b416:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	dd48      	ble.n	800b4ae <__sflush_r+0xae>
 800b41c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b41e:	2e00      	cmp	r6, #0
 800b420:	d045      	beq.n	800b4ae <__sflush_r+0xae>
 800b422:	2300      	movs	r3, #0
 800b424:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b428:	682f      	ldr	r7, [r5, #0]
 800b42a:	6a21      	ldr	r1, [r4, #32]
 800b42c:	602b      	str	r3, [r5, #0]
 800b42e:	d030      	beq.n	800b492 <__sflush_r+0x92>
 800b430:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b432:	89a3      	ldrh	r3, [r4, #12]
 800b434:	0759      	lsls	r1, r3, #29
 800b436:	d505      	bpl.n	800b444 <__sflush_r+0x44>
 800b438:	6863      	ldr	r3, [r4, #4]
 800b43a:	1ad2      	subs	r2, r2, r3
 800b43c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b43e:	b10b      	cbz	r3, 800b444 <__sflush_r+0x44>
 800b440:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b442:	1ad2      	subs	r2, r2, r3
 800b444:	2300      	movs	r3, #0
 800b446:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b448:	6a21      	ldr	r1, [r4, #32]
 800b44a:	4628      	mov	r0, r5
 800b44c:	47b0      	blx	r6
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	89a3      	ldrh	r3, [r4, #12]
 800b452:	d106      	bne.n	800b462 <__sflush_r+0x62>
 800b454:	6829      	ldr	r1, [r5, #0]
 800b456:	291d      	cmp	r1, #29
 800b458:	d82b      	bhi.n	800b4b2 <__sflush_r+0xb2>
 800b45a:	4a2a      	ldr	r2, [pc, #168]	@ (800b504 <__sflush_r+0x104>)
 800b45c:	410a      	asrs	r2, r1
 800b45e:	07d6      	lsls	r6, r2, #31
 800b460:	d427      	bmi.n	800b4b2 <__sflush_r+0xb2>
 800b462:	2200      	movs	r2, #0
 800b464:	6062      	str	r2, [r4, #4]
 800b466:	04d9      	lsls	r1, r3, #19
 800b468:	6922      	ldr	r2, [r4, #16]
 800b46a:	6022      	str	r2, [r4, #0]
 800b46c:	d504      	bpl.n	800b478 <__sflush_r+0x78>
 800b46e:	1c42      	adds	r2, r0, #1
 800b470:	d101      	bne.n	800b476 <__sflush_r+0x76>
 800b472:	682b      	ldr	r3, [r5, #0]
 800b474:	b903      	cbnz	r3, 800b478 <__sflush_r+0x78>
 800b476:	6560      	str	r0, [r4, #84]	@ 0x54
 800b478:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b47a:	602f      	str	r7, [r5, #0]
 800b47c:	b1b9      	cbz	r1, 800b4ae <__sflush_r+0xae>
 800b47e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b482:	4299      	cmp	r1, r3
 800b484:	d002      	beq.n	800b48c <__sflush_r+0x8c>
 800b486:	4628      	mov	r0, r5
 800b488:	f7ff fa9a 	bl	800a9c0 <_free_r>
 800b48c:	2300      	movs	r3, #0
 800b48e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b490:	e00d      	b.n	800b4ae <__sflush_r+0xae>
 800b492:	2301      	movs	r3, #1
 800b494:	4628      	mov	r0, r5
 800b496:	47b0      	blx	r6
 800b498:	4602      	mov	r2, r0
 800b49a:	1c50      	adds	r0, r2, #1
 800b49c:	d1c9      	bne.n	800b432 <__sflush_r+0x32>
 800b49e:	682b      	ldr	r3, [r5, #0]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d0c6      	beq.n	800b432 <__sflush_r+0x32>
 800b4a4:	2b1d      	cmp	r3, #29
 800b4a6:	d001      	beq.n	800b4ac <__sflush_r+0xac>
 800b4a8:	2b16      	cmp	r3, #22
 800b4aa:	d11e      	bne.n	800b4ea <__sflush_r+0xea>
 800b4ac:	602f      	str	r7, [r5, #0]
 800b4ae:	2000      	movs	r0, #0
 800b4b0:	e022      	b.n	800b4f8 <__sflush_r+0xf8>
 800b4b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4b6:	b21b      	sxth	r3, r3
 800b4b8:	e01b      	b.n	800b4f2 <__sflush_r+0xf2>
 800b4ba:	690f      	ldr	r7, [r1, #16]
 800b4bc:	2f00      	cmp	r7, #0
 800b4be:	d0f6      	beq.n	800b4ae <__sflush_r+0xae>
 800b4c0:	0793      	lsls	r3, r2, #30
 800b4c2:	680e      	ldr	r6, [r1, #0]
 800b4c4:	bf08      	it	eq
 800b4c6:	694b      	ldreq	r3, [r1, #20]
 800b4c8:	600f      	str	r7, [r1, #0]
 800b4ca:	bf18      	it	ne
 800b4cc:	2300      	movne	r3, #0
 800b4ce:	eba6 0807 	sub.w	r8, r6, r7
 800b4d2:	608b      	str	r3, [r1, #8]
 800b4d4:	f1b8 0f00 	cmp.w	r8, #0
 800b4d8:	dde9      	ble.n	800b4ae <__sflush_r+0xae>
 800b4da:	6a21      	ldr	r1, [r4, #32]
 800b4dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b4de:	4643      	mov	r3, r8
 800b4e0:	463a      	mov	r2, r7
 800b4e2:	4628      	mov	r0, r5
 800b4e4:	47b0      	blx	r6
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	dc08      	bgt.n	800b4fc <__sflush_r+0xfc>
 800b4ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b4f2:	81a3      	strh	r3, [r4, #12]
 800b4f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4fc:	4407      	add	r7, r0
 800b4fe:	eba8 0800 	sub.w	r8, r8, r0
 800b502:	e7e7      	b.n	800b4d4 <__sflush_r+0xd4>
 800b504:	dfbffffe 	.word	0xdfbffffe

0800b508 <_fflush_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	690b      	ldr	r3, [r1, #16]
 800b50c:	4605      	mov	r5, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	b913      	cbnz	r3, 800b518 <_fflush_r+0x10>
 800b512:	2500      	movs	r5, #0
 800b514:	4628      	mov	r0, r5
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	b118      	cbz	r0, 800b522 <_fflush_r+0x1a>
 800b51a:	6a03      	ldr	r3, [r0, #32]
 800b51c:	b90b      	cbnz	r3, 800b522 <_fflush_r+0x1a>
 800b51e:	f7ff f91b 	bl	800a758 <__sinit>
 800b522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d0f3      	beq.n	800b512 <_fflush_r+0xa>
 800b52a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b52c:	07d0      	lsls	r0, r2, #31
 800b52e:	d404      	bmi.n	800b53a <_fflush_r+0x32>
 800b530:	0599      	lsls	r1, r3, #22
 800b532:	d402      	bmi.n	800b53a <_fflush_r+0x32>
 800b534:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b536:	f7ff fa32 	bl	800a99e <__retarget_lock_acquire_recursive>
 800b53a:	4628      	mov	r0, r5
 800b53c:	4621      	mov	r1, r4
 800b53e:	f7ff ff5f 	bl	800b400 <__sflush_r>
 800b542:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b544:	07da      	lsls	r2, r3, #31
 800b546:	4605      	mov	r5, r0
 800b548:	d4e4      	bmi.n	800b514 <_fflush_r+0xc>
 800b54a:	89a3      	ldrh	r3, [r4, #12]
 800b54c:	059b      	lsls	r3, r3, #22
 800b54e:	d4e1      	bmi.n	800b514 <_fflush_r+0xc>
 800b550:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b552:	f7ff fa25 	bl	800a9a0 <__retarget_lock_release_recursive>
 800b556:	e7dd      	b.n	800b514 <_fflush_r+0xc>

0800b558 <__swbuf_r>:
 800b558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b55a:	460e      	mov	r6, r1
 800b55c:	4614      	mov	r4, r2
 800b55e:	4605      	mov	r5, r0
 800b560:	b118      	cbz	r0, 800b56a <__swbuf_r+0x12>
 800b562:	6a03      	ldr	r3, [r0, #32]
 800b564:	b90b      	cbnz	r3, 800b56a <__swbuf_r+0x12>
 800b566:	f7ff f8f7 	bl	800a758 <__sinit>
 800b56a:	69a3      	ldr	r3, [r4, #24]
 800b56c:	60a3      	str	r3, [r4, #8]
 800b56e:	89a3      	ldrh	r3, [r4, #12]
 800b570:	071a      	lsls	r2, r3, #28
 800b572:	d501      	bpl.n	800b578 <__swbuf_r+0x20>
 800b574:	6923      	ldr	r3, [r4, #16]
 800b576:	b943      	cbnz	r3, 800b58a <__swbuf_r+0x32>
 800b578:	4621      	mov	r1, r4
 800b57a:	4628      	mov	r0, r5
 800b57c:	f000 f82a 	bl	800b5d4 <__swsetup_r>
 800b580:	b118      	cbz	r0, 800b58a <__swbuf_r+0x32>
 800b582:	f04f 37ff 	mov.w	r7, #4294967295
 800b586:	4638      	mov	r0, r7
 800b588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	6922      	ldr	r2, [r4, #16]
 800b58e:	1a98      	subs	r0, r3, r2
 800b590:	6963      	ldr	r3, [r4, #20]
 800b592:	b2f6      	uxtb	r6, r6
 800b594:	4283      	cmp	r3, r0
 800b596:	4637      	mov	r7, r6
 800b598:	dc05      	bgt.n	800b5a6 <__swbuf_r+0x4e>
 800b59a:	4621      	mov	r1, r4
 800b59c:	4628      	mov	r0, r5
 800b59e:	f7ff ffb3 	bl	800b508 <_fflush_r>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d1ed      	bne.n	800b582 <__swbuf_r+0x2a>
 800b5a6:	68a3      	ldr	r3, [r4, #8]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	60a3      	str	r3, [r4, #8]
 800b5ac:	6823      	ldr	r3, [r4, #0]
 800b5ae:	1c5a      	adds	r2, r3, #1
 800b5b0:	6022      	str	r2, [r4, #0]
 800b5b2:	701e      	strb	r6, [r3, #0]
 800b5b4:	6962      	ldr	r2, [r4, #20]
 800b5b6:	1c43      	adds	r3, r0, #1
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d004      	beq.n	800b5c6 <__swbuf_r+0x6e>
 800b5bc:	89a3      	ldrh	r3, [r4, #12]
 800b5be:	07db      	lsls	r3, r3, #31
 800b5c0:	d5e1      	bpl.n	800b586 <__swbuf_r+0x2e>
 800b5c2:	2e0a      	cmp	r6, #10
 800b5c4:	d1df      	bne.n	800b586 <__swbuf_r+0x2e>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	f7ff ff9d 	bl	800b508 <_fflush_r>
 800b5ce:	2800      	cmp	r0, #0
 800b5d0:	d0d9      	beq.n	800b586 <__swbuf_r+0x2e>
 800b5d2:	e7d6      	b.n	800b582 <__swbuf_r+0x2a>

0800b5d4 <__swsetup_r>:
 800b5d4:	b538      	push	{r3, r4, r5, lr}
 800b5d6:	4b29      	ldr	r3, [pc, #164]	@ (800b67c <__swsetup_r+0xa8>)
 800b5d8:	4605      	mov	r5, r0
 800b5da:	6818      	ldr	r0, [r3, #0]
 800b5dc:	460c      	mov	r4, r1
 800b5de:	b118      	cbz	r0, 800b5e8 <__swsetup_r+0x14>
 800b5e0:	6a03      	ldr	r3, [r0, #32]
 800b5e2:	b90b      	cbnz	r3, 800b5e8 <__swsetup_r+0x14>
 800b5e4:	f7ff f8b8 	bl	800a758 <__sinit>
 800b5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ec:	0719      	lsls	r1, r3, #28
 800b5ee:	d422      	bmi.n	800b636 <__swsetup_r+0x62>
 800b5f0:	06da      	lsls	r2, r3, #27
 800b5f2:	d407      	bmi.n	800b604 <__swsetup_r+0x30>
 800b5f4:	2209      	movs	r2, #9
 800b5f6:	602a      	str	r2, [r5, #0]
 800b5f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5fc:	81a3      	strh	r3, [r4, #12]
 800b5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800b602:	e033      	b.n	800b66c <__swsetup_r+0x98>
 800b604:	0758      	lsls	r0, r3, #29
 800b606:	d512      	bpl.n	800b62e <__swsetup_r+0x5a>
 800b608:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b60a:	b141      	cbz	r1, 800b61e <__swsetup_r+0x4a>
 800b60c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b610:	4299      	cmp	r1, r3
 800b612:	d002      	beq.n	800b61a <__swsetup_r+0x46>
 800b614:	4628      	mov	r0, r5
 800b616:	f7ff f9d3 	bl	800a9c0 <_free_r>
 800b61a:	2300      	movs	r3, #0
 800b61c:	6363      	str	r3, [r4, #52]	@ 0x34
 800b61e:	89a3      	ldrh	r3, [r4, #12]
 800b620:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b624:	81a3      	strh	r3, [r4, #12]
 800b626:	2300      	movs	r3, #0
 800b628:	6063      	str	r3, [r4, #4]
 800b62a:	6923      	ldr	r3, [r4, #16]
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	89a3      	ldrh	r3, [r4, #12]
 800b630:	f043 0308 	orr.w	r3, r3, #8
 800b634:	81a3      	strh	r3, [r4, #12]
 800b636:	6923      	ldr	r3, [r4, #16]
 800b638:	b94b      	cbnz	r3, 800b64e <__swsetup_r+0x7a>
 800b63a:	89a3      	ldrh	r3, [r4, #12]
 800b63c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b640:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b644:	d003      	beq.n	800b64e <__swsetup_r+0x7a>
 800b646:	4621      	mov	r1, r4
 800b648:	4628      	mov	r0, r5
 800b64a:	f000 f897 	bl	800b77c <__smakebuf_r>
 800b64e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b652:	f013 0201 	ands.w	r2, r3, #1
 800b656:	d00a      	beq.n	800b66e <__swsetup_r+0x9a>
 800b658:	2200      	movs	r2, #0
 800b65a:	60a2      	str	r2, [r4, #8]
 800b65c:	6962      	ldr	r2, [r4, #20]
 800b65e:	4252      	negs	r2, r2
 800b660:	61a2      	str	r2, [r4, #24]
 800b662:	6922      	ldr	r2, [r4, #16]
 800b664:	b942      	cbnz	r2, 800b678 <__swsetup_r+0xa4>
 800b666:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b66a:	d1c5      	bne.n	800b5f8 <__swsetup_r+0x24>
 800b66c:	bd38      	pop	{r3, r4, r5, pc}
 800b66e:	0799      	lsls	r1, r3, #30
 800b670:	bf58      	it	pl
 800b672:	6962      	ldrpl	r2, [r4, #20]
 800b674:	60a2      	str	r2, [r4, #8]
 800b676:	e7f4      	b.n	800b662 <__swsetup_r+0x8e>
 800b678:	2000      	movs	r0, #0
 800b67a:	e7f7      	b.n	800b66c <__swsetup_r+0x98>
 800b67c:	20000034 	.word	0x20000034

0800b680 <memmove>:
 800b680:	4288      	cmp	r0, r1
 800b682:	b510      	push	{r4, lr}
 800b684:	eb01 0402 	add.w	r4, r1, r2
 800b688:	d902      	bls.n	800b690 <memmove+0x10>
 800b68a:	4284      	cmp	r4, r0
 800b68c:	4623      	mov	r3, r4
 800b68e:	d807      	bhi.n	800b6a0 <memmove+0x20>
 800b690:	1e43      	subs	r3, r0, #1
 800b692:	42a1      	cmp	r1, r4
 800b694:	d008      	beq.n	800b6a8 <memmove+0x28>
 800b696:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b69a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b69e:	e7f8      	b.n	800b692 <memmove+0x12>
 800b6a0:	4402      	add	r2, r0
 800b6a2:	4601      	mov	r1, r0
 800b6a4:	428a      	cmp	r2, r1
 800b6a6:	d100      	bne.n	800b6aa <memmove+0x2a>
 800b6a8:	bd10      	pop	{r4, pc}
 800b6aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b6ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b6b2:	e7f7      	b.n	800b6a4 <memmove+0x24>

0800b6b4 <_sbrk_r>:
 800b6b4:	b538      	push	{r3, r4, r5, lr}
 800b6b6:	4d06      	ldr	r5, [pc, #24]	@ (800b6d0 <_sbrk_r+0x1c>)
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	4608      	mov	r0, r1
 800b6be:	602b      	str	r3, [r5, #0]
 800b6c0:	f7f5 ff84 	bl	80015cc <_sbrk>
 800b6c4:	1c43      	adds	r3, r0, #1
 800b6c6:	d102      	bne.n	800b6ce <_sbrk_r+0x1a>
 800b6c8:	682b      	ldr	r3, [r5, #0]
 800b6ca:	b103      	cbz	r3, 800b6ce <_sbrk_r+0x1a>
 800b6cc:	6023      	str	r3, [r4, #0]
 800b6ce:	bd38      	pop	{r3, r4, r5, pc}
 800b6d0:	2001ced0 	.word	0x2001ced0

0800b6d4 <_realloc_r>:
 800b6d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6d8:	4680      	mov	r8, r0
 800b6da:	4615      	mov	r5, r2
 800b6dc:	460c      	mov	r4, r1
 800b6de:	b921      	cbnz	r1, 800b6ea <_realloc_r+0x16>
 800b6e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	4611      	mov	r1, r2
 800b6e6:	f7ff b9d7 	b.w	800aa98 <_malloc_r>
 800b6ea:	b92a      	cbnz	r2, 800b6f8 <_realloc_r+0x24>
 800b6ec:	f7ff f968 	bl	800a9c0 <_free_r>
 800b6f0:	2400      	movs	r4, #0
 800b6f2:	4620      	mov	r0, r4
 800b6f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f8:	f000 f89e 	bl	800b838 <_malloc_usable_size_r>
 800b6fc:	4285      	cmp	r5, r0
 800b6fe:	4606      	mov	r6, r0
 800b700:	d802      	bhi.n	800b708 <_realloc_r+0x34>
 800b702:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b706:	d8f4      	bhi.n	800b6f2 <_realloc_r+0x1e>
 800b708:	4629      	mov	r1, r5
 800b70a:	4640      	mov	r0, r8
 800b70c:	f7ff f9c4 	bl	800aa98 <_malloc_r>
 800b710:	4607      	mov	r7, r0
 800b712:	2800      	cmp	r0, #0
 800b714:	d0ec      	beq.n	800b6f0 <_realloc_r+0x1c>
 800b716:	42b5      	cmp	r5, r6
 800b718:	462a      	mov	r2, r5
 800b71a:	4621      	mov	r1, r4
 800b71c:	bf28      	it	cs
 800b71e:	4632      	movcs	r2, r6
 800b720:	f7ff f93f 	bl	800a9a2 <memcpy>
 800b724:	4621      	mov	r1, r4
 800b726:	4640      	mov	r0, r8
 800b728:	f7ff f94a 	bl	800a9c0 <_free_r>
 800b72c:	463c      	mov	r4, r7
 800b72e:	e7e0      	b.n	800b6f2 <_realloc_r+0x1e>

0800b730 <__swhatbuf_r>:
 800b730:	b570      	push	{r4, r5, r6, lr}
 800b732:	460c      	mov	r4, r1
 800b734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b738:	2900      	cmp	r1, #0
 800b73a:	b096      	sub	sp, #88	@ 0x58
 800b73c:	4615      	mov	r5, r2
 800b73e:	461e      	mov	r6, r3
 800b740:	da0d      	bge.n	800b75e <__swhatbuf_r+0x2e>
 800b742:	89a3      	ldrh	r3, [r4, #12]
 800b744:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b748:	f04f 0100 	mov.w	r1, #0
 800b74c:	bf14      	ite	ne
 800b74e:	2340      	movne	r3, #64	@ 0x40
 800b750:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b754:	2000      	movs	r0, #0
 800b756:	6031      	str	r1, [r6, #0]
 800b758:	602b      	str	r3, [r5, #0]
 800b75a:	b016      	add	sp, #88	@ 0x58
 800b75c:	bd70      	pop	{r4, r5, r6, pc}
 800b75e:	466a      	mov	r2, sp
 800b760:	f000 f848 	bl	800b7f4 <_fstat_r>
 800b764:	2800      	cmp	r0, #0
 800b766:	dbec      	blt.n	800b742 <__swhatbuf_r+0x12>
 800b768:	9901      	ldr	r1, [sp, #4]
 800b76a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b76e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b772:	4259      	negs	r1, r3
 800b774:	4159      	adcs	r1, r3
 800b776:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b77a:	e7eb      	b.n	800b754 <__swhatbuf_r+0x24>

0800b77c <__smakebuf_r>:
 800b77c:	898b      	ldrh	r3, [r1, #12]
 800b77e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b780:	079d      	lsls	r5, r3, #30
 800b782:	4606      	mov	r6, r0
 800b784:	460c      	mov	r4, r1
 800b786:	d507      	bpl.n	800b798 <__smakebuf_r+0x1c>
 800b788:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b78c:	6023      	str	r3, [r4, #0]
 800b78e:	6123      	str	r3, [r4, #16]
 800b790:	2301      	movs	r3, #1
 800b792:	6163      	str	r3, [r4, #20]
 800b794:	b003      	add	sp, #12
 800b796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b798:	ab01      	add	r3, sp, #4
 800b79a:	466a      	mov	r2, sp
 800b79c:	f7ff ffc8 	bl	800b730 <__swhatbuf_r>
 800b7a0:	9f00      	ldr	r7, [sp, #0]
 800b7a2:	4605      	mov	r5, r0
 800b7a4:	4639      	mov	r1, r7
 800b7a6:	4630      	mov	r0, r6
 800b7a8:	f7ff f976 	bl	800aa98 <_malloc_r>
 800b7ac:	b948      	cbnz	r0, 800b7c2 <__smakebuf_r+0x46>
 800b7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7b2:	059a      	lsls	r2, r3, #22
 800b7b4:	d4ee      	bmi.n	800b794 <__smakebuf_r+0x18>
 800b7b6:	f023 0303 	bic.w	r3, r3, #3
 800b7ba:	f043 0302 	orr.w	r3, r3, #2
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	e7e2      	b.n	800b788 <__smakebuf_r+0xc>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	6020      	str	r0, [r4, #0]
 800b7c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ca:	81a3      	strh	r3, [r4, #12]
 800b7cc:	9b01      	ldr	r3, [sp, #4]
 800b7ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7d2:	b15b      	cbz	r3, 800b7ec <__smakebuf_r+0x70>
 800b7d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7d8:	4630      	mov	r0, r6
 800b7da:	f000 f81d 	bl	800b818 <_isatty_r>
 800b7de:	b128      	cbz	r0, 800b7ec <__smakebuf_r+0x70>
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	f023 0303 	bic.w	r3, r3, #3
 800b7e6:	f043 0301 	orr.w	r3, r3, #1
 800b7ea:	81a3      	strh	r3, [r4, #12]
 800b7ec:	89a3      	ldrh	r3, [r4, #12]
 800b7ee:	431d      	orrs	r5, r3
 800b7f0:	81a5      	strh	r5, [r4, #12]
 800b7f2:	e7cf      	b.n	800b794 <__smakebuf_r+0x18>

0800b7f4 <_fstat_r>:
 800b7f4:	b538      	push	{r3, r4, r5, lr}
 800b7f6:	4d07      	ldr	r5, [pc, #28]	@ (800b814 <_fstat_r+0x20>)
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4604      	mov	r4, r0
 800b7fc:	4608      	mov	r0, r1
 800b7fe:	4611      	mov	r1, r2
 800b800:	602b      	str	r3, [r5, #0]
 800b802:	f7f5 feba 	bl	800157a <_fstat>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	d102      	bne.n	800b810 <_fstat_r+0x1c>
 800b80a:	682b      	ldr	r3, [r5, #0]
 800b80c:	b103      	cbz	r3, 800b810 <_fstat_r+0x1c>
 800b80e:	6023      	str	r3, [r4, #0]
 800b810:	bd38      	pop	{r3, r4, r5, pc}
 800b812:	bf00      	nop
 800b814:	2001ced0 	.word	0x2001ced0

0800b818 <_isatty_r>:
 800b818:	b538      	push	{r3, r4, r5, lr}
 800b81a:	4d06      	ldr	r5, [pc, #24]	@ (800b834 <_isatty_r+0x1c>)
 800b81c:	2300      	movs	r3, #0
 800b81e:	4604      	mov	r4, r0
 800b820:	4608      	mov	r0, r1
 800b822:	602b      	str	r3, [r5, #0]
 800b824:	f7f5 feb9 	bl	800159a <_isatty>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_isatty_r+0x1a>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_isatty_r+0x1a>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	2001ced0 	.word	0x2001ced0

0800b838 <_malloc_usable_size_r>:
 800b838:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b83c:	1f18      	subs	r0, r3, #4
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfbc      	itt	lt
 800b842:	580b      	ldrlt	r3, [r1, r0]
 800b844:	18c0      	addlt	r0, r0, r3
 800b846:	4770      	bx	lr

0800b848 <_init>:
 800b848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b84a:	bf00      	nop
 800b84c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b84e:	bc08      	pop	{r3}
 800b850:	469e      	mov	lr, r3
 800b852:	4770      	bx	lr

0800b854 <_fini>:
 800b854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b856:	bf00      	nop
 800b858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b85a:	bc08      	pop	{r3}
 800b85c:	469e      	mov	lr, r3
 800b85e:	4770      	bx	lr
