
005LED_Btn_ISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065f0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08006790  08006790  00007790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006938  08006938  00008014  2**0
                  CONTENTS
  4 .ARM          00000008  08006938  08006938  00007938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006940  08006940  00008014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006940  08006940  00007940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006944  08006944  00007944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08006948  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c67c  20000014  0800695c  00008014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001c690  0800695c  00008690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b26  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029c1  00000000  00000000  0001ab6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  0001d530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000db5  00000000  00000000  0001e6f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001f4ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001422f  00000000  00000000  00038655  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aab1e  00000000  00000000  0004c884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f73a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a40  00000000  00000000  000f73e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f3  00000000  00000000  000fbe28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006778 	.word	0x08006778

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08006778 	.word	0x08006778

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194bc 	.word	0x200194bc

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b088      	sub	sp, #32
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fc63 	bl	8000e34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f895 	bl	800069c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8fd 	bl	8000770 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 8000576:	4b3d      	ldr	r3, [pc, #244]	@ (800066c <main+0x108>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a3c      	ldr	r2, [pc, #240]	@ (800066c <main+0x108>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000582:	f003 ff3b 	bl	80043fc <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 8000586:	f005 fa2f 	bl	80059e8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED-Green-Task", 200, NULL, 3, &led_green_h);
 800058a:	4b39      	ldr	r3, [pc, #228]	@ (8000670 <main+0x10c>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2303      	movs	r3, #3
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	4937      	ldr	r1, [pc, #220]	@ (8000674 <main+0x110>)
 8000598:	4837      	ldr	r0, [pc, #220]	@ (8000678 <main+0x114>)
 800059a:	f002 f804 	bl	80025a6 <xTaskCreate>
 800059e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x5a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	613b      	str	r3, [r7, #16]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x56>

  next_task_handle = led_green_h;
 80005be:	4b2c      	ldr	r3, [pc, #176]	@ (8000670 <main+0x10c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4a2e      	ldr	r2, [pc, #184]	@ (800067c <main+0x118>)
 80005c4:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_orange_handler, "LED-Green-Task", 200, NULL, 2, &led_orange_h);
 80005c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000680 <main+0x11c>)
 80005c8:	9301      	str	r3, [sp, #4]
 80005ca:	2302      	movs	r3, #2
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	22c8      	movs	r2, #200	@ 0xc8
 80005d2:	4928      	ldr	r1, [pc, #160]	@ (8000674 <main+0x110>)
 80005d4:	482b      	ldr	r0, [pc, #172]	@ (8000684 <main+0x120>)
 80005d6:	f001 ffe6 	bl	80025a6 <xTaskCreate>
 80005da:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d00b      	beq.n	80005fa <main+0x96>
    __asm volatile
 80005e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e6:	f383 8811 	msr	BASEPRI, r3
 80005ea:	f3bf 8f6f 	isb	sy
 80005ee:	f3bf 8f4f 	dsb	sy
 80005f2:	60fb      	str	r3, [r7, #12]
}
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	e7fd      	b.n	80005f6 <main+0x92>

  status = xTaskCreate(led_red_handler, "LED-Green-Task", 200, NULL, 1, &led_red_h);
 80005fa:	4b23      	ldr	r3, [pc, #140]	@ (8000688 <main+0x124>)
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	@ 0xc8
 8000606:	491b      	ldr	r1, [pc, #108]	@ (8000674 <main+0x110>)
 8000608:	4820      	ldr	r0, [pc, #128]	@ (800068c <main+0x128>)
 800060a:	f001 ffcc 	bl	80025a6 <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0xca>
    __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	60bb      	str	r3, [r7, #8]
}
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xc6>

  status = xTaskCreate(button_handler, "Button-Task", 200, NULL, 4, &button_h);
 800062e:	4b18      	ldr	r3, [pc, #96]	@ (8000690 <main+0x12c>)
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2304      	movs	r3, #4
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	4916      	ldr	r1, [pc, #88]	@ (8000694 <main+0x130>)
 800063c:	4816      	ldr	r0, [pc, #88]	@ (8000698 <main+0x134>)
 800063e:	f001 ffb2 	bl	80025a6 <xTaskCreate>
 8000642:	6178      	str	r0, [r7, #20]
  configASSERT(status == pdPASS);
 8000644:	697b      	ldr	r3, [r7, #20]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xfe>
    __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	607b      	str	r3, [r7, #4]
}
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xfa>

  vTaskStartScheduler();
 8000662:	f002 fa6f 	bl	8002b44 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0x102>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	20000030 	.word	0x20000030
 8000674:	08006790 	.word	0x08006790
 8000678:	08000a3d 	.word	0x08000a3d
 800067c:	20000040 	.word	0x20000040
 8000680:	20000034 	.word	0x20000034
 8000684:	08000aad 	.word	0x08000aad
 8000688:	20000038 	.word	0x20000038
 800068c:	08000b1d 	.word	0x08000b1d
 8000690:	2000003c 	.word	0x2000003c
 8000694:	080067a0 	.word	0x080067a0
 8000698:	08000be1 	.word	0x08000be1

0800069c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b094      	sub	sp, #80	@ 0x50
 80006a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2230      	movs	r2, #48	@ 0x30
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 f82a 	bl	8006704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c0:	2300      	movs	r3, #0
 80006c2:	60bb      	str	r3, [r7, #8]
 80006c4:	4b28      	ldr	r3, [pc, #160]	@ (8000768 <SystemClock_Config+0xcc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c8:	4a27      	ldr	r2, [pc, #156]	@ (8000768 <SystemClock_Config+0xcc>)
 80006ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80006d0:	4b25      	ldr	r3, [pc, #148]	@ (8000768 <SystemClock_Config+0xcc>)
 80006d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xd0>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xd0>)
 80006e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xd0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000710:	2360      	movs	r3, #96	@ 0x60
 8000712:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000714:	2302      	movs	r3, #2
 8000716:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000718:	2308      	movs	r3, #8
 800071a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f000 fe87 	bl	8001434 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800072c:	f000 fa72 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000734:	2302      	movs	r3, #2
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2103      	movs	r1, #3
 800074e:	4618      	mov	r0, r3
 8000750:	f001 f8e8 	bl	8001924 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800075a:	f000 fa5b 	bl	8000c14 <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	@ 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	@ 0x30
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4ba6      	ldr	r3, [pc, #664]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4aa5      	ldr	r2, [pc, #660]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000790:	f043 0310 	orr.w	r3, r3, #16
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4ba3      	ldr	r3, [pc, #652]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0310 	and.w	r3, r3, #16
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b9f      	ldr	r3, [pc, #636]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	4a9e      	ldr	r2, [pc, #632]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b2:	4b9c      	ldr	r3, [pc, #624]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b98      	ldr	r3, [pc, #608]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	4a97      	ldr	r2, [pc, #604]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ce:	4b95      	ldr	r3, [pc, #596]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b91      	ldr	r3, [pc, #580]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	4a90      	ldr	r2, [pc, #576]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ea:	4b8e      	ldr	r3, [pc, #568]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b8a      	ldr	r3, [pc, #552]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	4a89      	ldr	r2, [pc, #548]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000800:	f043 0302 	orr.w	r3, r3, #2
 8000804:	6313      	str	r3, [r2, #48]	@ 0x30
 8000806:	4b87      	ldr	r3, [pc, #540]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	f003 0302 	and.w	r3, r3, #2
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b83      	ldr	r3, [pc, #524]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	4a82      	ldr	r2, [pc, #520]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 800081c:	f043 0308 	orr.w	r3, r3, #8
 8000820:	6313      	str	r3, [r2, #48]	@ 0x30
 8000822:	4b80      	ldr	r3, [pc, #512]	@ (8000a24 <MX_GPIO_Init+0x2b4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000826:	f003 0308 	and.w	r3, r3, #8
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	2108      	movs	r1, #8
 8000832:	487d      	ldr	r0, [pc, #500]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 8000834:	f000 fda6 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000838:	2201      	movs	r2, #1
 800083a:	2101      	movs	r1, #1
 800083c:	487b      	ldr	r0, [pc, #492]	@ (8000a2c <MX_GPIO_Init+0x2bc>)
 800083e:	f000 fda1 	bl	8001384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000842:	2200      	movs	r2, #0
 8000844:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000848:	4879      	ldr	r0, [pc, #484]	@ (8000a30 <MX_GPIO_Init+0x2c0>)
 800084a:	f000 fd9b 	bl	8001384 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800084e:	2304      	movs	r3, #4
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	4871      	ldr	r0, [pc, #452]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 8000862:	f000 fc0b 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000866:	2308      	movs	r3, #8
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	486a      	ldr	r0, [pc, #424]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 800087e:	f000 fbfd 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000882:	2332      	movs	r3, #50	@ 0x32
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000886:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4864      	ldr	r0, [pc, #400]	@ (8000a28 <MX_GPIO_Init+0x2b8>)
 8000898:	f000 fbf0 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	485e      	ldr	r0, [pc, #376]	@ (8000a2c <MX_GPIO_Init+0x2bc>)
 80008b4:	f000 fbe2 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008b8:	2308      	movs	r3, #8
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008c8:	2305      	movs	r3, #5
 80008ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4856      	ldr	r0, [pc, #344]	@ (8000a2c <MX_GPIO_Init+0x2bc>)
 80008d4:	f000 fbd2 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008d8:	2301      	movs	r3, #1
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	4851      	ldr	r0, [pc, #324]	@ (8000a34 <MX_GPIO_Init+0x2c4>)
 80008ee:	f000 fbc5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008f2:	2310      	movs	r3, #16
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f6:	2302      	movs	r3, #2
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000902:	2306      	movs	r3, #6
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000906:	f107 031c 	add.w	r3, r7, #28
 800090a:	4619      	mov	r1, r3
 800090c:	4849      	ldr	r0, [pc, #292]	@ (8000a34 <MX_GPIO_Init+0x2c4>)
 800090e:	f000 fbb5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000912:	23e0      	movs	r3, #224	@ 0xe0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000922:	2305      	movs	r3, #5
 8000924:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4841      	ldr	r0, [pc, #260]	@ (8000a34 <MX_GPIO_Init+0x2c4>)
 800092e:	f000 fba5 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000932:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000940:	2300      	movs	r3, #0
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000944:	2305      	movs	r3, #5
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	483a      	ldr	r0, [pc, #232]	@ (8000a38 <MX_GPIO_Init+0x2c8>)
 8000950:	f000 fb94 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000954:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000958:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095a:	2301      	movs	r3, #1
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000966:	f107 031c 	add.w	r3, r7, #28
 800096a:	4619      	mov	r1, r3
 800096c:	4830      	ldr	r0, [pc, #192]	@ (8000a30 <MX_GPIO_Init+0x2c0>)
 800096e:	f000 fb85 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000972:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000980:	2300      	movs	r3, #0
 8000982:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000984:	2306      	movs	r3, #6
 8000986:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4619      	mov	r1, r3
 800098e:	4827      	ldr	r0, [pc, #156]	@ (8000a2c <MX_GPIO_Init+0x2bc>)
 8000990:	f000 fb74 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000994:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	4619      	mov	r1, r3
 80009a8:	4822      	ldr	r0, [pc, #136]	@ (8000a34 <MX_GPIO_Init+0x2c4>)
 80009aa:	f000 fb67 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80009ae:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80009b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b4:	2302      	movs	r3, #2
 80009b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009bc:	2303      	movs	r3, #3
 80009be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009c0:	230a      	movs	r3, #10
 80009c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	481a      	ldr	r0, [pc, #104]	@ (8000a34 <MX_GPIO_Init+0x2c4>)
 80009cc:	f000 fb56 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009d0:	2320      	movs	r3, #32
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009dc:	f107 031c 	add.w	r3, r7, #28
 80009e0:	4619      	mov	r1, r3
 80009e2:	4813      	ldr	r0, [pc, #76]	@ (8000a30 <MX_GPIO_Init+0x2c0>)
 80009e4:	f000 fb4a 	bl	800107c <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80009e8:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ee:	2312      	movs	r3, #18
 80009f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009fa:	2304      	movs	r3, #4
 80009fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	480c      	ldr	r0, [pc, #48]	@ (8000a38 <MX_GPIO_Init+0x2c8>)
 8000a06:	f000 fb39 	bl	800107c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2106      	movs	r1, #6
 8000a0e:	2006      	movs	r0, #6
 8000a10:	f000 fb0a 	bl	8001028 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a14:	2006      	movs	r0, #6
 8000a16:	f000 fb23 	bl	8001060 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a1a:	bf00      	nop
 8000a1c:	3730      	adds	r7, #48	@ 0x30
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40020800 	.word	0x40020800
 8000a30:	40020c00 	.word	0x40020c00
 8000a34:	40020000 	.word	0x40020000
 8000a38:	40020400 	.word	0x40020400

08000a3c <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void *parameters)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a44:	4814      	ldr	r0, [pc, #80]	@ (8000a98 <led_green_handler+0x5c>)
 8000a46:	f005 fddd 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000a4a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a4e:	4813      	ldr	r0, [pc, #76]	@ (8000a9c <led_green_handler+0x60>)
 8000a50:	f000 fcb1 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(1000));
 8000a54:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a58:	9300      	str	r3, [sp, #0]
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f002 fc61 	bl	8003328 <xTaskGenericNotifyWait>
 8000a66:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d1ea      	bne.n	8000a44 <led_green_handler+0x8>
		{

			portENTER_CRITICAL();
 8000a6e:	f003 f909 	bl	8003c84 <vPortEnterCritical>
			next_task_handle = led_orange_h;
 8000a72:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <led_green_handler+0x64>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	4a0b      	ldr	r2, [pc, #44]	@ (8000aa4 <led_green_handler+0x68>)
 8000a78:	6013      	str	r3, [r2, #0]
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED");
 8000a7a:	480b      	ldr	r0, [pc, #44]	@ (8000aa8 <led_green_handler+0x6c>)
 8000a7c:	f005 fdc2 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, SET);
 8000a80:	2201      	movs	r2, #1
 8000a82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <led_green_handler+0x60>)
 8000a88:	f000 fc7c 	bl	8001384 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000a8c:	f003 f92c 	bl	8003ce8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f001 fef7 	bl	8002884 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000a96:	e7d5      	b.n	8000a44 <led_green_handler+0x8>
 8000a98:	080067ac 	.word	0x080067ac
 8000a9c:	40020c00 	.word	0x40020c00
 8000aa0:	20000034 	.word	0x20000034
 8000aa4:	20000040 	.word	0x20000040
 8000aa8:	080067c0 	.word	0x080067c0

08000aac <led_orange_handler>:
	}

}

static void led_orange_handler(void *parameters)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af02      	add	r7, sp, #8
 8000ab2:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ab4:	4814      	ldr	r0, [pc, #80]	@ (8000b08 <led_orange_handler+0x5c>)
 8000ab6:	f005 fda5 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000aba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000abe:	4813      	ldr	r0, [pc, #76]	@ (8000b0c <led_orange_handler+0x60>)
 8000ac0:	f000 fc79 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(800));
 8000ac4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2300      	movs	r3, #0
 8000acc:	2200      	movs	r2, #0
 8000ace:	2100      	movs	r1, #0
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f002 fc29 	bl	8003328 <xTaskGenericNotifyWait>
 8000ad6:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	2b01      	cmp	r3, #1
 8000adc:	d1ea      	bne.n	8000ab4 <led_orange_handler+0x8>
		{

			portENTER_CRITICAL();
 8000ade:	f003 f8d1 	bl	8003c84 <vPortEnterCritical>
			next_task_handle = led_red_h;
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <led_orange_handler+0x64>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b14 <led_orange_handler+0x68>)
 8000ae8:	6013      	str	r3, [r2, #0]
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED");
 8000aea:	480b      	ldr	r0, [pc, #44]	@ (8000b18 <led_orange_handler+0x6c>)
 8000aec:	f005 fd8a 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, SET);
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000af6:	4805      	ldr	r0, [pc, #20]	@ (8000b0c <led_orange_handler+0x60>)
 8000af8:	f000 fc44 	bl	8001384 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000afc:	f003 f8f4 	bl	8003ce8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f001 febf 	bl	8002884 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000b06:	e7d5      	b.n	8000ab4 <led_orange_handler+0x8>
 8000b08:	080067d4 	.word	0x080067d4
 8000b0c:	40020c00 	.word	0x40020c00
 8000b10:	20000038 	.word	0x20000038
 8000b14:	20000040 	.word	0x20000040
 8000b18:	080067e8 	.word	0x080067e8

08000b1c <led_red_handler>:
	}

}

static void led_red_handler(void *parameters)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	6078      	str	r0, [r7, #4]
	BaseType_t status;

	while(1)
	{

		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b24:	4814      	ldr	r0, [pc, #80]	@ (8000b78 <led_red_handler+0x5c>)
 8000b26:	f005 fd6d 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000b2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b2e:	4813      	ldr	r0, [pc, #76]	@ (8000b7c <led_red_handler+0x60>)
 8000b30:	f000 fc41 	bl	80013b6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0, 0, NULL, pdMS_TO_TICKS(400));
 8000b34:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	2100      	movs	r1, #0
 8000b40:	2000      	movs	r0, #0
 8000b42:	f002 fbf1 	bl	8003328 <xTaskGenericNotifyWait>
 8000b46:	60f8      	str	r0, [r7, #12]

		if(status == pdTRUE)
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d1ea      	bne.n	8000b24 <led_red_handler+0x8>
		{

			portENTER_CRITICAL();
 8000b4e:	f003 f899 	bl	8003c84 <vPortEnterCritical>
			next_task_handle = NULL;
 8000b52:	4b0b      	ldr	r3, [pc, #44]	@ (8000b80 <led_red_handler+0x64>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED");
 8000b58:	480a      	ldr	r0, [pc, #40]	@ (8000b84 <led_red_handler+0x68>)
 8000b5a:	f005 fd53 	bl	8006604 <SEGGER_SYSVIEW_PrintfTarget>
			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, SET);
 8000b5e:	2201      	movs	r2, #1
 8000b60:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b64:	4805      	ldr	r0, [pc, #20]	@ (8000b7c <led_red_handler+0x60>)
 8000b66:	f000 fc0d 	bl	8001384 <HAL_GPIO_WritePin>
			portEXIT_CRITICAL();
 8000b6a:	f003 f8bd 	bl	8003ce8 <vPortExitCritical>
			vTaskDelete(NULL);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f001 fe88 	bl	8002884 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b74:	e7d6      	b.n	8000b24 <led_red_handler+0x8>
 8000b76:	bf00      	nop
 8000b78:	080067fc 	.word	0x080067fc
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	20000040 	.word	0x20000040
 8000b84:	08006810 	.word	0x08006810

08000b88 <button_interrupt_handler>:
	}

}

void button_interrupt_handler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]

	traceISR_ENTER(); // To trace ISR with SEGGER
 8000b92:	f005 f9f1 	bl	8005f78 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction, &pxHigherPriorityTaskWoken);
 8000b96:	4b10      	ldr	r3, [pc, #64]	@ (8000bd8 <button_interrupt_handler+0x50>)
 8000b98:	6818      	ldr	r0, [r3, #0]
 8000b9a:	1d3b      	adds	r3, r7, #4
 8000b9c:	9301      	str	r3, [sp, #4]
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	9300      	str	r3, [sp, #0]
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f002 fc56 	bl	8003458 <xTaskGenericNotifyFromISR>

	// When ISR exits, the higher priority task that got unblocket will resume here (calls the scheduler as soon as possible)
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00a      	beq.n	8000bc8 <button_interrupt_handler+0x40>
 8000bb2:	f005 fa3f 	bl	8006034 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <button_interrupt_handler+0x54>)
 8000bb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	f3bf 8f4f 	dsb	sy
 8000bc2:	f3bf 8f6f 	isb	sy
 8000bc6:	e001      	b.n	8000bcc <button_interrupt_handler+0x44>
 8000bc8:	f005 fa18 	bl	8005ffc <SEGGER_SYSVIEW_RecordExitISR>

	traceISR_EXIT();
 8000bcc:	f005 fa16 	bl	8005ffc <SEGGER_SYSVIEW_RecordExitISR>

}
 8000bd0:	bf00      	nop
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	20000040 	.word	0x20000040
 8000bdc:	e000ed04 	.word	0xe000ed04

08000be0 <button_handler>:


static void button_handler(void *parameters)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		vTaskDelay(pdMS_TO_TICKS(10));
 8000be8:	200a      	movs	r0, #10
 8000bea:	f001 ff0b 	bl	8002a04 <vTaskDelay>
 8000bee:	e7fb      	b.n	8000be8 <button_handler+0x8>

08000bf0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d101      	bne.n	8000c06 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c02:	f000 f939 	bl	8000e78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40000c00 	.word	0x40000c00

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	607b      	str	r3, [r7, #4]
 8000c2a:	4b10      	ldr	r3, [pc, #64]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c34:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c36:	4b0d      	ldr	r3, [pc, #52]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c3e:	607b      	str	r3, [r7, #4]
 8000c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	603b      	str	r3, [r7, #0]
 8000c46:	4b09      	ldr	r3, [pc, #36]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_MspInit+0x4c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c5e:	f002 ff91 	bl	8003b84 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08e      	sub	sp, #56	@ 0x38
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	4b33      	ldr	r3, [pc, #204]	@ (8000d54 <HAL_InitTick+0xe4>)
 8000c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c88:	4a32      	ldr	r2, [pc, #200]	@ (8000d54 <HAL_InitTick+0xe4>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c90:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <HAL_InitTick+0xe4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	60fb      	str	r3, [r7, #12]
 8000c9a:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c9c:	f107 0210 	add.w	r2, r7, #16
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4611      	mov	r1, r2
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f001 f848 	bl	8001d3c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d103      	bne.n	8000cbe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cb6:	f001 f82d 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8000cba:	6378      	str	r0, [r7, #52]	@ 0x34
 8000cbc:	e004      	b.n	8000cc8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cbe:	f001 f829 	bl	8001d14 <HAL_RCC_GetPCLK1Freq>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000cca:	4a23      	ldr	r2, [pc, #140]	@ (8000d58 <HAL_InitTick+0xe8>)
 8000ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd0:	0c9b      	lsrs	r3, r3, #18
 8000cd2:	3b01      	subs	r3, #1
 8000cd4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000cd6:	4b21      	ldr	r3, [pc, #132]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cd8:	4a21      	ldr	r2, [pc, #132]	@ (8000d60 <HAL_InitTick+0xf0>)
 8000cda:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cde:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ce2:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000ce4:	4a1d      	ldr	r2, [pc, #116]	@ (8000d5c <HAL_InitTick+0xec>)
 8000ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ce8:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000cfc:	4817      	ldr	r0, [pc, #92]	@ (8000d5c <HAL_InitTick+0xec>)
 8000cfe:	f001 f84f 	bl	8001da0 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000d08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11b      	bne.n	8000d48 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000d10:	4812      	ldr	r0, [pc, #72]	@ (8000d5c <HAL_InitTick+0xec>)
 8000d12:	f001 f89f 	bl	8001e54 <HAL_TIM_Base_Start_IT>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000d1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d111      	bne.n	8000d48 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000d24:	2032      	movs	r0, #50	@ 0x32
 8000d26:	f000 f99b 	bl	8001060 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d808      	bhi.n	8000d42 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2032      	movs	r0, #50	@ 0x32
 8000d36:	f000 f977 	bl	8001028 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <HAL_InitTick+0xf4>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e002      	b.n	8000d48 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d48:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3738      	adds	r7, #56	@ 0x38
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40023800 	.word	0x40023800
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	20000044 	.word	0x20000044
 8000d60:	40000c00 	.word	0x40000c00
 8000d64:	20000004 	.word	0x20000004

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d6c:	bf00      	nop
 8000d6e:	e7fd      	b.n	8000d6c <NMI_Handler+0x4>

08000d70 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d74:	bf00      	nop
 8000d76:	e7fd      	b.n	8000d74 <HardFault_Handler+0x4>

08000d78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d7c:	bf00      	nop
 8000d7e:	e7fd      	b.n	8000d7c <MemManage_Handler+0x4>

08000d80 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d84:	bf00      	nop
 8000d86:	e7fd      	b.n	8000d84 <BusFault_Handler+0x4>

08000d88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d8c:	bf00      	nop
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  button_interrupt_handler();
 8000d9a:	f7ff fef5 	bl	8000b88 <button_interrupt_handler>

  // Clear EXTI 0 pending bit from pending register
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d9e:	2001      	movs	r0, #1
 8000da0:	f000 fb24 	bl	80013ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000da4:	bf00      	nop
 8000da6:	bd80      	pop	{r7, pc}

08000da8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000dac:	4802      	ldr	r0, [pc, #8]	@ (8000db8 <TIM5_IRQHandler+0x10>)
 8000dae:	f001 f8b3 	bl	8001f18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000044 	.word	0x20000044

08000dbc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dc0:	4b06      	ldr	r3, [pc, #24]	@ (8000ddc <SystemInit+0x20>)
 8000dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dc6:	4a05      	ldr	r2, [pc, #20]	@ (8000ddc <SystemInit+0x20>)
 8000dc8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dcc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000de4:	f7ff ffea 	bl	8000dbc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000de8:	480c      	ldr	r0, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dea:	490d      	ldr	r1, [pc, #52]	@ (8000e20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dec:	4a0d      	ldr	r2, [pc, #52]	@ (8000e24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e00:	4c0a      	ldr	r4, [pc, #40]	@ (8000e2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f005 fc81 	bl	8006714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e12:	f7ff fba7 	bl	8000564 <main>
  bx  lr    
 8000e16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e20:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000e24:	08006948 	.word	0x08006948
  ldr r2, =_sbss
 8000e28:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000e2c:	2001c690 	.word	0x2001c690

08000e30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e30:	e7fe      	b.n	8000e30 <ADC_IRQHandler>
	...

08000e34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e38:	4b0e      	ldr	r3, [pc, #56]	@ (8000e74 <HAL_Init+0x40>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e74 <HAL_Init+0x40>)
 8000e3e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e44:	4b0b      	ldr	r3, [pc, #44]	@ (8000e74 <HAL_Init+0x40>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_Init+0x40>)
 8000e4a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	@ (8000e74 <HAL_Init+0x40>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	@ (8000e74 <HAL_Init+0x40>)
 8000e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f8d8 	bl	8001012 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ff04 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff feda 	bl	8000c20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40023c00 	.word	0x40023c00

08000e78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e7c:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <HAL_IncTick+0x20>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	461a      	mov	r2, r3
 8000e82:	4b06      	ldr	r3, [pc, #24]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <HAL_IncTick+0x24>)
 8000e8a:	6013      	str	r3, [r2, #0]
}
 8000e8c:	bf00      	nop
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	2000008c 	.word	0x2000008c

08000ea0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ea4:	4b03      	ldr	r3, [pc, #12]	@ (8000eb4 <HAL_GetTick+0x14>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	2000008c 	.word	0x2000008c

08000eb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f003 0307 	and.w	r3, r3, #7
 8000ec6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ece:	68ba      	ldr	r2, [r7, #8]
 8000ed0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eea:	4a04      	ldr	r2, [pc, #16]	@ (8000efc <__NVIC_SetPriorityGrouping+0x44>)
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	60d3      	str	r3, [r2, #12]
}
 8000ef0:	bf00      	nop
 8000ef2:	3714      	adds	r7, #20
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f04:	4b04      	ldr	r3, [pc, #16]	@ (8000f18 <__NVIC_GetPriorityGrouping+0x18>)
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	0a1b      	lsrs	r3, r3, #8
 8000f0a:	f003 0307 	and.w	r3, r3, #7
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	db0b      	blt.n	8000f46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	f003 021f 	and.w	r2, r3, #31
 8000f34:	4907      	ldr	r1, [pc, #28]	@ (8000f54 <__NVIC_EnableIRQ+0x38>)
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	095b      	lsrs	r3, r3, #5
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f46:	bf00      	nop
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr

08001012 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff ff4c 	bl	8000eb8 <__NVIC_SetPriorityGrouping>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800103a:	f7ff ff61 	bl	8000f00 <__NVIC_GetPriorityGrouping>
 800103e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	68b9      	ldr	r1, [r7, #8]
 8001044:	6978      	ldr	r0, [r7, #20]
 8001046:	f7ff ffb1 	bl	8000fac <NVIC_EncodePriority>
 800104a:	4602      	mov	r2, r0
 800104c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001050:	4611      	mov	r1, r2
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff ff80 	bl	8000f58 <__NVIC_SetPriority>
}
 8001058:	bf00      	nop
 800105a:	3718      	adds	r7, #24
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff ff54 	bl	8000f1c <__NVIC_EnableIRQ>
}
 8001074:	bf00      	nop
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800107c:	b480      	push	{r7}
 800107e:	b089      	sub	sp, #36	@ 0x24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
 8001096:	e159      	b.n	800134c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001098:	2201      	movs	r2, #1
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	f040 8148 	bne.w	8001346 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0303 	and.w	r3, r3, #3
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d005      	beq.n	80010ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d130      	bne.n	8001130 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4013      	ands	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	68da      	ldr	r2, [r3, #12]
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	005b      	lsls	r3, r3, #1
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001104:	2201      	movs	r2, #1
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	091b      	lsrs	r3, r3, #4
 800111a:	f003 0201 	and.w	r2, r3, #1
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f003 0303 	and.w	r3, r3, #3
 8001138:	2b03      	cmp	r3, #3
 800113a:	d017      	beq.n	800116c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	2203      	movs	r2, #3
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	689a      	ldr	r2, [r3, #8]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	69ba      	ldr	r2, [r7, #24]
 800116a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	2b02      	cmp	r3, #2
 8001176:	d123      	bne.n	80011c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001178:	69fb      	ldr	r3, [r7, #28]
 800117a:	08da      	lsrs	r2, r3, #3
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	3208      	adds	r2, #8
 8001180:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001184:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	220f      	movs	r2, #15
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4013      	ands	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691a      	ldr	r2, [r3, #16]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	009b      	lsls	r3, r3, #2
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	69ba      	ldr	r2, [r7, #24]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	08da      	lsrs	r2, r3, #3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	3208      	adds	r2, #8
 80011ba:	69b9      	ldr	r1, [r7, #24]
 80011bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	2203      	movs	r2, #3
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	43db      	mvns	r3, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4013      	ands	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0203 	and.w	r2, r3, #3
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4313      	orrs	r3, r2
 80011ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	f000 80a2 	beq.w	8001346 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
 8001206:	4b57      	ldr	r3, [pc, #348]	@ (8001364 <HAL_GPIO_Init+0x2e8>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	4a56      	ldr	r2, [pc, #344]	@ (8001364 <HAL_GPIO_Init+0x2e8>)
 800120c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001210:	6453      	str	r3, [r2, #68]	@ 0x44
 8001212:	4b54      	ldr	r3, [pc, #336]	@ (8001364 <HAL_GPIO_Init+0x2e8>)
 8001214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001216:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800121a:	60fb      	str	r3, [r7, #12]
 800121c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800121e:	4a52      	ldr	r2, [pc, #328]	@ (8001368 <HAL_GPIO_Init+0x2ec>)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	089b      	lsrs	r3, r3, #2
 8001224:	3302      	adds	r3, #2
 8001226:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800122a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f003 0303 	and.w	r3, r3, #3
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	220f      	movs	r2, #15
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4013      	ands	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a49      	ldr	r2, [pc, #292]	@ (800136c <HAL_GPIO_Init+0x2f0>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d019      	beq.n	800127e <HAL_GPIO_Init+0x202>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a48      	ldr	r2, [pc, #288]	@ (8001370 <HAL_GPIO_Init+0x2f4>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d013      	beq.n	800127a <HAL_GPIO_Init+0x1fe>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a47      	ldr	r2, [pc, #284]	@ (8001374 <HAL_GPIO_Init+0x2f8>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d00d      	beq.n	8001276 <HAL_GPIO_Init+0x1fa>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a46      	ldr	r2, [pc, #280]	@ (8001378 <HAL_GPIO_Init+0x2fc>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d007      	beq.n	8001272 <HAL_GPIO_Init+0x1f6>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a45      	ldr	r2, [pc, #276]	@ (800137c <HAL_GPIO_Init+0x300>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d101      	bne.n	800126e <HAL_GPIO_Init+0x1f2>
 800126a:	2304      	movs	r3, #4
 800126c:	e008      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800126e:	2307      	movs	r3, #7
 8001270:	e006      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001272:	2303      	movs	r3, #3
 8001274:	e004      	b.n	8001280 <HAL_GPIO_Init+0x204>
 8001276:	2302      	movs	r3, #2
 8001278:	e002      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <HAL_GPIO_Init+0x204>
 800127e:	2300      	movs	r3, #0
 8001280:	69fa      	ldr	r2, [r7, #28]
 8001282:	f002 0203 	and.w	r2, r2, #3
 8001286:	0092      	lsls	r2, r2, #2
 8001288:	4093      	lsls	r3, r2
 800128a:	69ba      	ldr	r2, [r7, #24]
 800128c:	4313      	orrs	r3, r2
 800128e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001290:	4935      	ldr	r1, [pc, #212]	@ (8001368 <HAL_GPIO_Init+0x2ec>)
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	089b      	lsrs	r3, r3, #2
 8001296:	3302      	adds	r3, #2
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800129e:	4b38      	ldr	r3, [pc, #224]	@ (8001380 <HAL_GPIO_Init+0x304>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4013      	ands	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	693b      	ldr	r3, [r7, #16]
 80012be:	4313      	orrs	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012c2:	4a2f      	ldr	r2, [pc, #188]	@ (8001380 <HAL_GPIO_Init+0x304>)
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012c8:	4b2d      	ldr	r3, [pc, #180]	@ (8001380 <HAL_GPIO_Init+0x304>)
 80012ca:	68db      	ldr	r3, [r3, #12]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80012e4:	69ba      	ldr	r2, [r7, #24]
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012ec:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <HAL_GPIO_Init+0x304>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80012f2:	4b23      	ldr	r3, [pc, #140]	@ (8001380 <HAL_GPIO_Init+0x304>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800130e:	69ba      	ldr	r2, [r7, #24]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001316:	4a1a      	ldr	r2, [pc, #104]	@ (8001380 <HAL_GPIO_Init+0x304>)
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800131c:	4b18      	ldr	r3, [pc, #96]	@ (8001380 <HAL_GPIO_Init+0x304>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001340:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <HAL_GPIO_Init+0x304>)
 8001342:	69bb      	ldr	r3, [r7, #24]
 8001344:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	2b0f      	cmp	r3, #15
 8001350:	f67f aea2 	bls.w	8001098 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3724      	adds	r7, #36	@ 0x24
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800
 8001368:	40013800 	.word	0x40013800
 800136c:	40020000 	.word	0x40020000
 8001370:	40020400 	.word	0x40020400
 8001374:	40020800 	.word	0x40020800
 8001378:	40020c00 	.word	0x40020c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40013c00 	.word	0x40013c00

08001384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	460b      	mov	r3, r1
 800138e:	807b      	strh	r3, [r7, #2]
 8001390:	4613      	mov	r3, r2
 8001392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001394:	787b      	ldrb	r3, [r7, #1]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d003      	beq.n	80013a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013a0:	e003      	b.n	80013aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013a2:	887b      	ldrh	r3, [r7, #2]
 80013a4:	041a      	lsls	r2, r3, #16
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	619a      	str	r2, [r3, #24]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b085      	sub	sp, #20
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013c8:	887a      	ldrh	r2, [r7, #2]
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	4013      	ands	r3, r2
 80013ce:	041a      	lsls	r2, r3, #16
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	400b      	ands	r3, r1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	88fb      	ldrh	r3, [r7, #6]
 80013fc:	4013      	ands	r3, r2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d006      	beq.n	8001410 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f806 	bl	800141c <HAL_GPIO_EXTI_Callback>
  }
}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40013c00 	.word	0x40013c00

0800141c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
	...

08001434 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e267      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	2b00      	cmp	r3, #0
 8001450:	d075      	beq.n	800153e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001452:	4b88      	ldr	r3, [pc, #544]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f003 030c 	and.w	r3, r3, #12
 800145a:	2b04      	cmp	r3, #4
 800145c:	d00c      	beq.n	8001478 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800145e:	4b85      	ldr	r3, [pc, #532]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001466:	2b08      	cmp	r3, #8
 8001468:	d112      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800146a:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001472:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001476:	d10b      	bne.n	8001490 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001478:	4b7e      	ldr	r3, [pc, #504]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d05b      	beq.n	800153c <HAL_RCC_OscConfig+0x108>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d157      	bne.n	800153c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e242      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001498:	d106      	bne.n	80014a8 <HAL_RCC_OscConfig+0x74>
 800149a:	4b76      	ldr	r3, [pc, #472]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a75      	ldr	r2, [pc, #468]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0x98>
 80014b2:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6d      	ldr	r3, [pc, #436]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6c      	ldr	r2, [pc, #432]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xb0>
 80014cc:	4b69      	ldr	r3, [pc, #420]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a68      	ldr	r2, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcd8 	bl	8000ea0 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcd4 	bl	8000ea0 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e207      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5b      	ldr	r3, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xc0>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fcc4 	bl	8000ea0 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fcc0 	bl	8000ea0 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1f3      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b51      	ldr	r3, [pc, #324]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0xe8>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800154a:	4b4a      	ldr	r3, [pc, #296]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001556:	4b47      	ldr	r3, [pc, #284]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001562:	4b44      	ldr	r3, [pc, #272]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b41      	ldr	r3, [pc, #260]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c7      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3b      	ldr	r3, [pc, #236]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4937      	ldr	r1, [pc, #220]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b34      	ldr	r3, [pc, #208]	@ (8001678 <HAL_RCC_OscConfig+0x244>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc79 	bl	8000ea0 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc75 	bl	8000ea0 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a8      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2b      	ldr	r3, [pc, #172]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b28      	ldr	r3, [pc, #160]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	691b      	ldr	r3, [r3, #16]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4925      	ldr	r1, [pc, #148]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b24      	ldr	r3, [pc, #144]	@ (8001678 <HAL_RCC_OscConfig+0x244>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc58 	bl	8000ea0 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc54 	bl	8000ea0 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e187      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1b      	ldr	r3, [pc, #108]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d036      	beq.n	800168c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d016      	beq.n	8001654 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_RCC_OscConfig+0x248>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800162c:	f7ff fc38 	bl	8000ea0 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc34 	bl	8000ea0 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e167      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0b      	ldr	r3, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x240>)
 8001648:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x200>
 8001652:	e01b      	b.n	800168c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001654:	4b09      	ldr	r3, [pc, #36]	@ (800167c <HAL_RCC_OscConfig+0x248>)
 8001656:	2200      	movs	r2, #0
 8001658:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800165a:	f7ff fc21 	bl	8000ea0 <HAL_GetTick>
 800165e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001660:	e00e      	b.n	8001680 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001662:	f7ff fc1d 	bl	8000ea0 <HAL_GetTick>
 8001666:	4602      	mov	r2, r0
 8001668:	693b      	ldr	r3, [r7, #16]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d907      	bls.n	8001680 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001670:	2303      	movs	r3, #3
 8001672:	e150      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 8001674:	40023800 	.word	0x40023800
 8001678:	42470000 	.word	0x42470000
 800167c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	4b88      	ldr	r3, [pc, #544]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001682:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1ea      	bne.n	8001662 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8097 	beq.w	80017c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800169a:	2300      	movs	r3, #0
 800169c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b81      	ldr	r3, [pc, #516]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d10f      	bne.n	80016ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b7d      	ldr	r3, [pc, #500]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b2:	4a7c      	ldr	r2, [pc, #496]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80016ba:	4b7a      	ldr	r3, [pc, #488]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80016bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016c6:	2301      	movs	r3, #1
 80016c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ca:	4b77      	ldr	r3, [pc, #476]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d118      	bne.n	8001708 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016d6:	4b74      	ldr	r3, [pc, #464]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a73      	ldr	r2, [pc, #460]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e2:	f7ff fbdd 	bl	8000ea0 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ea:	f7ff fbd9 	bl	8000ea0 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e10c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fc:	4b6a      	ldr	r3, [pc, #424]	@ (80018a8 <HAL_RCC_OscConfig+0x474>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	2b01      	cmp	r3, #1
 800170e:	d106      	bne.n	800171e <HAL_RCC_OscConfig+0x2ea>
 8001710:	4b64      	ldr	r3, [pc, #400]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001714:	4a63      	ldr	r2, [pc, #396]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6713      	str	r3, [r2, #112]	@ 0x70
 800171c:	e01c      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	2b05      	cmp	r3, #5
 8001724:	d10c      	bne.n	8001740 <HAL_RCC_OscConfig+0x30c>
 8001726:	4b5f      	ldr	r3, [pc, #380]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800172a:	4a5e      	ldr	r2, [pc, #376]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800172c:	f043 0304 	orr.w	r3, r3, #4
 8001730:	6713      	str	r3, [r2, #112]	@ 0x70
 8001732:	4b5c      	ldr	r3, [pc, #368]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001736:	4a5b      	ldr	r2, [pc, #364]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6713      	str	r3, [r2, #112]	@ 0x70
 800173e:	e00b      	b.n	8001758 <HAL_RCC_OscConfig+0x324>
 8001740:	4b58      	ldr	r3, [pc, #352]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001742:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001744:	4a57      	ldr	r2, [pc, #348]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001746:	f023 0301 	bic.w	r3, r3, #1
 800174a:	6713      	str	r3, [r2, #112]	@ 0x70
 800174c:	4b55      	ldr	r3, [pc, #340]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001750:	4a54      	ldr	r2, [pc, #336]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001752:	f023 0304 	bic.w	r3, r3, #4
 8001756:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d015      	beq.n	800178c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001760:	f7ff fb9e 	bl	8000ea0 <HAL_GetTick>
 8001764:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001766:	e00a      	b.n	800177e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001768:	f7ff fb9a 	bl	8000ea0 <HAL_GetTick>
 800176c:	4602      	mov	r2, r0
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	1ad3      	subs	r3, r2, r3
 8001772:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001776:	4293      	cmp	r3, r2
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e0cb      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800177e:	4b49      	ldr	r3, [pc, #292]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001780:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d0ee      	beq.n	8001768 <HAL_RCC_OscConfig+0x334>
 800178a:	e014      	b.n	80017b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178c:	f7ff fb88 	bl	8000ea0 <HAL_GetTick>
 8001790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001792:	e00a      	b.n	80017aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001794:	f7ff fb84 	bl	8000ea0 <HAL_GetTick>
 8001798:	4602      	mov	r2, r0
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e0b5      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017aa:	4b3e      	ldr	r3, [pc, #248]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ae:	f003 0302 	and.w	r3, r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1ee      	bne.n	8001794 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017b6:	7dfb      	ldrb	r3, [r7, #23]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d105      	bne.n	80017c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017bc:	4b39      	ldr	r3, [pc, #228]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	4a38      	ldr	r2, [pc, #224]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 80a1 	beq.w	8001914 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017d2:	4b34      	ldr	r3, [pc, #208]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 030c 	and.w	r3, r3, #12
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d05c      	beq.n	8001898 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	699b      	ldr	r3, [r3, #24]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d141      	bne.n	800186a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e6:	4b31      	ldr	r3, [pc, #196]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fb58 	bl	8000ea0 <HAL_GetTick>
 80017f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017f2:	e008      	b.n	8001806 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff fb54 	bl	8000ea0 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	2b02      	cmp	r3, #2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e087      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001806:	4b27      	ldr	r3, [pc, #156]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	431a      	orrs	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001820:	019b      	lsls	r3, r3, #6
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001828:	085b      	lsrs	r3, r3, #1
 800182a:	3b01      	subs	r3, #1
 800182c:	041b      	lsls	r3, r3, #16
 800182e:	431a      	orrs	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001834:	061b      	lsls	r3, r3, #24
 8001836:	491b      	ldr	r1, [pc, #108]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 8001838:	4313      	orrs	r3, r2
 800183a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800183c:	4b1b      	ldr	r3, [pc, #108]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001842:	f7ff fb2d 	bl	8000ea0 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184a:	f7ff fb29 	bl	8000ea0 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e05c      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	4b11      	ldr	r3, [pc, #68]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x416>
 8001868:	e054      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b10      	ldr	r3, [pc, #64]	@ (80018ac <HAL_RCC_OscConfig+0x478>)
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff fb16 	bl	8000ea0 <HAL_GetTick>
 8001874:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001876:	e008      	b.n	800188a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001878:	f7ff fb12 	bl	8000ea0 <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e045      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800188a:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <HAL_RCC_OscConfig+0x470>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1f0      	bne.n	8001878 <HAL_RCC_OscConfig+0x444>
 8001896:	e03d      	b.n	8001914 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	699b      	ldr	r3, [r3, #24]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d107      	bne.n	80018b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018a0:	2301      	movs	r3, #1
 80018a2:	e038      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
 80018a4:	40023800 	.word	0x40023800
 80018a8:	40007000 	.word	0x40007000
 80018ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001920 <HAL_RCC_OscConfig+0x4ec>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b01      	cmp	r3, #1
 80018bc:	d028      	beq.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d121      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11a      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80018e0:	4013      	ands	r3, r2
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d111      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	085b      	lsrs	r3, r3, #1
 80018f8:	3b01      	subs	r3, #1
 80018fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d107      	bne.n	8001910 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	429a      	cmp	r2, r3
 800190e:	d001      	beq.n	8001914 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40023800 	.word	0x40023800

08001924 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
 800192c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d101      	bne.n	8001938 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e0cc      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001938:	4b68      	ldr	r3, [pc, #416]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	683a      	ldr	r2, [r7, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d90c      	bls.n	8001960 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001946:	4b65      	ldr	r3, [pc, #404]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	b2d2      	uxtb	r2, r2
 800194c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194e:	4b63      	ldr	r3, [pc, #396]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d001      	beq.n	8001960 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e0b8      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d020      	beq.n	80019ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d005      	beq.n	8001984 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001978:	4b59      	ldr	r3, [pc, #356]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800197e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001982:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0308 	and.w	r3, r3, #8
 800198c:	2b00      	cmp	r3, #0
 800198e:	d005      	beq.n	800199c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001990:	4b53      	ldr	r3, [pc, #332]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a52      	ldr	r2, [pc, #328]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001996:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800199a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800199c:	4b50      	ldr	r3, [pc, #320]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	494d      	ldr	r1, [pc, #308]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0301 	and.w	r3, r3, #1
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d044      	beq.n	8001a44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d107      	bne.n	80019d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019c2:	4b47      	ldr	r3, [pc, #284]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d119      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e07f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d003      	beq.n	80019e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019de:	2b03      	cmp	r3, #3
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019e2:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d109      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f2:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e067      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a02:	4b37      	ldr	r3, [pc, #220]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f023 0203 	bic.w	r2, r3, #3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4934      	ldr	r1, [pc, #208]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a14:	f7ff fa44 	bl	8000ea0 <HAL_GetTick>
 8001a18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	e00a      	b.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1c:	f7ff fa40 	bl	8000ea0 <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e04f      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a32:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f003 020c 	and.w	r2, r3, #12
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d1eb      	bne.n	8001a1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a44:	4b25      	ldr	r3, [pc, #148]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d20c      	bcs.n	8001a6c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a52:	4b22      	ldr	r3, [pc, #136]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a54:	683a      	ldr	r2, [r7, #0]
 8001a56:	b2d2      	uxtb	r2, r2
 8001a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a5a:	4b20      	ldr	r3, [pc, #128]	@ (8001adc <HAL_RCC_ClockConfig+0x1b8>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d001      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e032      	b.n	8001ad2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 0304 	and.w	r3, r3, #4
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d008      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a78:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	4916      	ldr	r1, [pc, #88]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	4313      	orrs	r3, r2
 8001a88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d009      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a96:	4b12      	ldr	r3, [pc, #72]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	490e      	ldr	r1, [pc, #56]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aaa:	f000 f821 	bl	8001af0 <HAL_RCC_GetSysClockFreq>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	490a      	ldr	r1, [pc, #40]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1c0>)
 8001abc:	5ccb      	ldrb	r3, [r1, r3]
 8001abe:	fa22 f303 	lsr.w	r3, r2, r3
 8001ac2:	4a09      	ldr	r2, [pc, #36]	@ (8001ae8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ac4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <HAL_RCC_ClockConfig+0x1c8>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff f8d0 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40023c00 	.word	0x40023c00
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	080068e8 	.word	0x080068e8
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	20000004 	.word	0x20000004

08001af0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001af0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001af4:	b094      	sub	sp, #80	@ 0x50
 8001af6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b08:	4b79      	ldr	r3, [pc, #484]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	f003 030c 	and.w	r3, r3, #12
 8001b10:	2b08      	cmp	r3, #8
 8001b12:	d00d      	beq.n	8001b30 <HAL_RCC_GetSysClockFreq+0x40>
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	f200 80e1 	bhi.w	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_RCC_GetSysClockFreq+0x34>
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	d003      	beq.n	8001b2a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b22:	e0db      	b.n	8001cdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b24:	4b73      	ldr	r3, [pc, #460]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b26:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b28:	e0db      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b2a:	4b73      	ldr	r3, [pc, #460]	@ (8001cf8 <HAL_RCC_GetSysClockFreq+0x208>)
 8001b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001b2e:	e0d8      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b30:	4b6f      	ldr	r3, [pc, #444]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b38:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b3a:	4b6d      	ldr	r3, [pc, #436]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d063      	beq.n	8001c0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b46:	4b6a      	ldr	r3, [pc, #424]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	099b      	lsrs	r3, r3, #6
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001b50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001b52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8001b5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001b62:	4622      	mov	r2, r4
 8001b64:	462b      	mov	r3, r5
 8001b66:	f04f 0000 	mov.w	r0, #0
 8001b6a:	f04f 0100 	mov.w	r1, #0
 8001b6e:	0159      	lsls	r1, r3, #5
 8001b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b74:	0150      	lsls	r0, r2, #5
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4621      	mov	r1, r4
 8001b7c:	1a51      	subs	r1, r2, r1
 8001b7e:	6139      	str	r1, [r7, #16]
 8001b80:	4629      	mov	r1, r5
 8001b82:	eb63 0301 	sbc.w	r3, r3, r1
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	f04f 0200 	mov.w	r2, #0
 8001b8c:	f04f 0300 	mov.w	r3, #0
 8001b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001b94:	4659      	mov	r1, fp
 8001b96:	018b      	lsls	r3, r1, #6
 8001b98:	4651      	mov	r1, sl
 8001b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001b9e:	4651      	mov	r1, sl
 8001ba0:	018a      	lsls	r2, r1, #6
 8001ba2:	4651      	mov	r1, sl
 8001ba4:	ebb2 0801 	subs.w	r8, r2, r1
 8001ba8:	4659      	mov	r1, fp
 8001baa:	eb63 0901 	sbc.w	r9, r3, r1
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bc2:	4690      	mov	r8, r2
 8001bc4:	4699      	mov	r9, r3
 8001bc6:	4623      	mov	r3, r4
 8001bc8:	eb18 0303 	adds.w	r3, r8, r3
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	462b      	mov	r3, r5
 8001bd0:	eb49 0303 	adc.w	r3, r9, r3
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	f04f 0200 	mov.w	r2, #0
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001be2:	4629      	mov	r1, r5
 8001be4:	024b      	lsls	r3, r1, #9
 8001be6:	4621      	mov	r1, r4
 8001be8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001bec:	4621      	mov	r1, r4
 8001bee:	024a      	lsls	r2, r1, #9
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001bfa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001bfc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001c00:	f7fe fb38 	bl	8000274 <__aeabi_uldivmod>
 8001c04:	4602      	mov	r2, r0
 8001c06:	460b      	mov	r3, r1
 8001c08:	4613      	mov	r3, r2
 8001c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c0c:	e058      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c0e:	4b38      	ldr	r3, [pc, #224]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	099b      	lsrs	r3, r3, #6
 8001c14:	2200      	movs	r2, #0
 8001c16:	4618      	mov	r0, r3
 8001c18:	4611      	mov	r1, r2
 8001c1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c1e:	623b      	str	r3, [r7, #32]
 8001c20:	2300      	movs	r3, #0
 8001c22:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001c28:	4642      	mov	r2, r8
 8001c2a:	464b      	mov	r3, r9
 8001c2c:	f04f 0000 	mov.w	r0, #0
 8001c30:	f04f 0100 	mov.w	r1, #0
 8001c34:	0159      	lsls	r1, r3, #5
 8001c36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c3a:	0150      	lsls	r0, r2, #5
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4641      	mov	r1, r8
 8001c42:	ebb2 0a01 	subs.w	sl, r2, r1
 8001c46:	4649      	mov	r1, r9
 8001c48:	eb63 0b01 	sbc.w	fp, r3, r1
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001c58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001c5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001c60:	ebb2 040a 	subs.w	r4, r2, sl
 8001c64:	eb63 050b 	sbc.w	r5, r3, fp
 8001c68:	f04f 0200 	mov.w	r2, #0
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	00eb      	lsls	r3, r5, #3
 8001c72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c76:	00e2      	lsls	r2, r4, #3
 8001c78:	4614      	mov	r4, r2
 8001c7a:	461d      	mov	r5, r3
 8001c7c:	4643      	mov	r3, r8
 8001c7e:	18e3      	adds	r3, r4, r3
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	464b      	mov	r3, r9
 8001c84:	eb45 0303 	adc.w	r3, r5, r3
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c96:	4629      	mov	r1, r5
 8001c98:	028b      	lsls	r3, r1, #10
 8001c9a:	4621      	mov	r1, r4
 8001c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ca0:	4621      	mov	r1, r4
 8001ca2:	028a      	lsls	r2, r1, #10
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001caa:	2200      	movs	r2, #0
 8001cac:	61bb      	str	r3, [r7, #24]
 8001cae:	61fa      	str	r2, [r7, #28]
 8001cb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cb4:	f7fe fade 	bl	8000274 <__aeabi_uldivmod>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	0c1b      	lsrs	r3, r3, #16
 8001cc6:	f003 0303 	and.w	r3, r3, #3
 8001cca:	3301      	adds	r3, #1
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001cd0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cd8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001cda:	e002      	b.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3750      	adds	r7, #80	@ 0x50
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	00f42400 	.word	0x00f42400
 8001cf8:	007a1200 	.word	0x007a1200

08001cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d00:	4b03      	ldr	r3, [pc, #12]	@ (8001d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d02:	681b      	ldr	r3, [r3, #0]
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000000 	.word	0x20000000

08001d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d18:	f7ff fff0 	bl	8001cfc <HAL_RCC_GetHCLKFreq>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	0a9b      	lsrs	r3, r3, #10
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	4903      	ldr	r1, [pc, #12]	@ (8001d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d2a:	5ccb      	ldrb	r3, [r1, r3]
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40023800 	.word	0x40023800
 8001d38:	080068f8 	.word	0x080068f8

08001d3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	220f      	movs	r2, #15
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d4c:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f003 0203 	and.w	r2, r3, #3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001d58:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_GetClockConfig+0x5c>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	08db      	lsrs	r3, r3, #3
 8001d76:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d7e:	4b07      	ldr	r3, [pc, #28]	@ (8001d9c <HAL_RCC_GetClockConfig+0x60>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0207 	and.w	r2, r3, #7
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	601a      	str	r2, [r3, #0]
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d101      	bne.n	8001db2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e041      	b.n	8001e36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d106      	bne.n	8001dcc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f839 	bl	8001e3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3304      	adds	r3, #4
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4610      	mov	r0, r2
 8001de0:	f000 f9b2 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b083      	sub	sp, #12
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
	...

08001e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d001      	beq.n	8001e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e044      	b.n	8001ef6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2202      	movs	r2, #2
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68da      	ldr	r2, [r3, #12]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1e      	ldr	r2, [pc, #120]	@ (8001f04 <HAL_TIM_Base_Start_IT+0xb0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d018      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e96:	d013      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001f08 <HAL_TIM_Base_Start_IT+0xb4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d00e      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a19      	ldr	r2, [pc, #100]	@ (8001f0c <HAL_TIM_Base_Start_IT+0xb8>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d009      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a17      	ldr	r2, [pc, #92]	@ (8001f10 <HAL_TIM_Base_Start_IT+0xbc>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d004      	beq.n	8001ec0 <HAL_TIM_Base_Start_IT+0x6c>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a16      	ldr	r2, [pc, #88]	@ (8001f14 <HAL_TIM_Base_Start_IT+0xc0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d111      	bne.n	8001ee4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d010      	beq.n	8001ef4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f042 0201 	orr.w	r2, r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	e007      	b.n	8001ef4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3714      	adds	r7, #20
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	40010000 	.word	0x40010000
 8001f08:	40000400 	.word	0x40000400
 8001f0c:	40000800 	.word	0x40000800
 8001f10:	40000c00 	.word	0x40000c00
 8001f14:	40014000 	.word	0x40014000

08001f18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	691b      	ldr	r3, [r3, #16]
 8001f2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0202 	mvn.w	r2, #2
 8001f4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f8d2 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f8d5 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0304 	and.w	r3, r3, #4
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d020      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01b      	beq.n	8001fc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0204 	mvn.w	r2, #4
 8001f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d003      	beq.n	8001fb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 f8ac 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8001fb4:	e005      	b.n	8001fc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f89e 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f000 f8af 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	f003 0308 	and.w	r3, r3, #8
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d020      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f06f 0208 	mvn.w	r2, #8
 8001fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2204      	movs	r2, #4
 8001fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f886 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 8002000:	e005      	b.n	800200e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 f878 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 f889 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f003 0310 	and.w	r3, r3, #16
 800201a:	2b00      	cmp	r3, #0
 800201c:	d020      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d01b      	beq.n	8002060 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f06f 0210 	mvn.w	r2, #16
 8002030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2208      	movs	r2, #8
 8002036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	69db      	ldr	r3, [r3, #28]
 800203e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002042:	2b00      	cmp	r3, #0
 8002044:	d003      	beq.n	800204e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f000 f860 	bl	800210c <HAL_TIM_IC_CaptureCallback>
 800204c:	e005      	b.n	800205a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 f852 	bl	80020f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f863 	bl	8002120 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2200      	movs	r2, #0
 800205e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	f003 0301 	and.w	r3, r3, #1
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00c      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f003 0301 	and.w	r3, r3, #1
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0201 	mvn.w	r2, #1
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f7fe fdb6 	bl	8000bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00c      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002094:	2b00      	cmp	r3, #0
 8002096:	d007      	beq.n	80020a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f8e6 	bl	8002274 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d00c      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80020c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f834 	bl	8002134 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	f003 0320 	and.w	r3, r3, #32
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d00c      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d007      	beq.n	80020f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0220 	mvn.w	r2, #32
 80020e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f8b8 	bl	8002260 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a3a      	ldr	r2, [pc, #232]	@ (8002244 <TIM_Base_SetConfig+0xfc>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d00f      	beq.n	8002180 <TIM_Base_SetConfig+0x38>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002166:	d00b      	beq.n	8002180 <TIM_Base_SetConfig+0x38>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a37      	ldr	r2, [pc, #220]	@ (8002248 <TIM_Base_SetConfig+0x100>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d007      	beq.n	8002180 <TIM_Base_SetConfig+0x38>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a36      	ldr	r2, [pc, #216]	@ (800224c <TIM_Base_SetConfig+0x104>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d003      	beq.n	8002180 <TIM_Base_SetConfig+0x38>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a35      	ldr	r2, [pc, #212]	@ (8002250 <TIM_Base_SetConfig+0x108>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d108      	bne.n	8002192 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	68fa      	ldr	r2, [r7, #12]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a2b      	ldr	r2, [pc, #172]	@ (8002244 <TIM_Base_SetConfig+0xfc>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d01b      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021a0:	d017      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a28      	ldr	r2, [pc, #160]	@ (8002248 <TIM_Base_SetConfig+0x100>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a27      	ldr	r2, [pc, #156]	@ (800224c <TIM_Base_SetConfig+0x104>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d00f      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a26      	ldr	r2, [pc, #152]	@ (8002250 <TIM_Base_SetConfig+0x108>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d00b      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <TIM_Base_SetConfig+0x10c>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d007      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <TIM_Base_SetConfig+0x110>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d003      	beq.n	80021d2 <TIM_Base_SetConfig+0x8a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a23      	ldr	r2, [pc, #140]	@ (800225c <TIM_Base_SetConfig+0x114>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d108      	bne.n	80021e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68fa      	ldr	r2, [r7, #12]
 80021f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	689a      	ldr	r2, [r3, #8]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	4a0e      	ldr	r2, [pc, #56]	@ (8002244 <TIM_Base_SetConfig+0xfc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d103      	bne.n	8002218 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	691a      	ldr	r2, [r3, #16]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2201      	movs	r2, #1
 800221c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	691b      	ldr	r3, [r3, #16]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b01      	cmp	r3, #1
 8002228:	d105      	bne.n	8002236 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	f023 0201 	bic.w	r2, r3, #1
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	611a      	str	r2, [r3, #16]
  }
}
 8002236:	bf00      	nop
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	40010000 	.word	0x40010000
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	40000c00 	.word	0x40000c00
 8002254:	40014000 	.word	0x40014000
 8002258:	40014400 	.word	0x40014400
 800225c:	40014800 	.word	0x40014800

08002260 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002268:	bf00      	nop
 800226a:	370c      	adds	r7, #12
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr

08002274 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f103 0208 	add.w	r2, r3, #8
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f103 0208 	add.w	r2, r3, #8
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f103 0208 	add.w	r2, r3, #8
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80022bc:	f240 1019 	movw	r0, #281	@ 0x119
 80022c0:	f003 fed4 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022c4:	bf00      	nop
 80022c6:	3708      	adds	r7, #8
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80022da:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80022de:	f003 fec5 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 80022e2:	bf00      	nop
 80022e4:	3708      	adds	r7, #8
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b084      	sub	sp, #16
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
 80022f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	68fa      	ldr	r2, [r7, #12]
 80022fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	683a      	ldr	r2, [r7, #0]
 8002314:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
 8002326:	f240 101b 	movw	r0, #283	@ 0x11b
 800232a:	f003 fe9f 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800234c:	d103      	bne.n	8002356 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	60fb      	str	r3, [r7, #12]
 8002354:	e00c      	b.n	8002370 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3308      	adds	r3, #8
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e002      	b.n	8002364 <vListInsert+0x2e>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	429a      	cmp	r2, r3
 800236e:	d2f6      	bcs.n	800235e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	683a      	ldr	r2, [r7, #0]
 800237e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	68fa      	ldr	r2, [r7, #12]
 8002384:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800239c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 80023a0:	f003 fe64 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 80023a4:	bf00      	nop
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	691b      	ldr	r3, [r3, #16]
 80023b8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6892      	ldr	r2, [r2, #8]
 80023c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	6852      	ldr	r2, [r2, #4]
 80023cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	687a      	ldr	r2, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d103      	bne.n	80023e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2200      	movs	r2, #0
 80023e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	1e5a      	subs	r2, r3, #1
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4619      	mov	r1, r3
 80023f6:	f240 101d 	movw	r0, #285	@ 0x11d
 80023fa:	f003 fe73 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3710      	adds	r7, #16
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 800240a:	b580      	push	{r7, lr}
 800240c:	b08e      	sub	sp, #56	@ 0x38
 800240e:	af04      	add	r7, sp, #16
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	60b9      	str	r1, [r7, #8]
 8002414:	607a      	str	r2, [r7, #4]
 8002416:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 8002418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800241a:	2b00      	cmp	r3, #0
 800241c:	d10b      	bne.n	8002436 <prvCreateStaticTask+0x2c>
    __asm volatile
 800241e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002422:	f383 8811 	msr	BASEPRI, r3
 8002426:	f3bf 8f6f 	isb	sy
 800242a:	f3bf 8f4f 	dsb	sy
 800242e:	623b      	str	r3, [r7, #32]
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	e7fd      	b.n	8002432 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 8002436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002438:	2b00      	cmp	r3, #0
 800243a:	d10b      	bne.n	8002454 <prvCreateStaticTask+0x4a>
    __asm volatile
 800243c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002440:	f383 8811 	msr	BASEPRI, r3
 8002444:	f3bf 8f6f 	isb	sy
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	61fb      	str	r3, [r7, #28]
}
 800244e:	bf00      	nop
 8002450:	bf00      	nop
 8002452:	e7fd      	b.n	8002450 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002454:	2358      	movs	r3, #88	@ 0x58
 8002456:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	2b58      	cmp	r3, #88	@ 0x58
 800245c:	d00b      	beq.n	8002476 <prvCreateStaticTask+0x6c>
    __asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	61bb      	str	r3, [r7, #24]
}
 8002470:	bf00      	nop
 8002472:	bf00      	nop
 8002474:	e7fd      	b.n	8002472 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002476:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800247a:	2b00      	cmp	r3, #0
 800247c:	d01f      	beq.n	80024be <prvCreateStaticTask+0xb4>
 800247e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002486:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002488:	2258      	movs	r2, #88	@ 0x58
 800248a:	2100      	movs	r1, #0
 800248c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800248e:	f004 f939 	bl	8006704 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002494:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002496:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	2202      	movs	r2, #2
 800249c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024a0:	2300      	movs	r3, #0
 80024a2:	9303      	str	r3, [sp, #12]
 80024a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a6:	9302      	str	r3, [sp, #8]
 80024a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024aa:	9301      	str	r3, [sp, #4]
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	9300      	str	r3, [sp, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68b9      	ldr	r1, [r7, #8]
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f000 f89d 	bl	80025f6 <prvInitialiseNewTask>
 80024bc:	e001      	b.n	80024c2 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 80024be:	2300      	movs	r3, #0
 80024c0:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 80024c4:	4618      	mov	r0, r3
 80024c6:	3728      	adds	r7, #40	@ 0x28
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af04      	add	r7, sp, #16
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 80024de:	f107 0310 	add.w	r3, r7, #16
 80024e2:	9303      	str	r3, [sp, #12]
 80024e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6a3b      	ldr	r3, [r7, #32]
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	68b9      	ldr	r1, [r7, #8]
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff87 	bl	800240a <prvCreateStaticTask>
 80024fc:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002504:	6978      	ldr	r0, [r7, #20]
 8002506:	f000 f907 	bl	8002718 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4618      	mov	r0, r3
 800250e:	f003 ff83 	bl	8006418 <SEGGER_SYSVIEW_ShrinkId>
 8002512:	4603      	mov	r3, r0
 8002514:	4619      	mov	r1, r3
 8002516:	20bf      	movs	r0, #191	@ 0xbf
 8002518:	f003 fde4 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 800251c:	693b      	ldr	r3, [r7, #16]
    }
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 8002526:	b580      	push	{r7, lr}
 8002528:	b08a      	sub	sp, #40	@ 0x28
 800252a:	af04      	add	r7, sp, #16
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	4618      	mov	r0, r3
 800253a:	f001 fcd1 	bl	8003ee0 <pvPortMalloc>
 800253e:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d013      	beq.n	800256e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002546:	2058      	movs	r0, #88	@ 0x58
 8002548:	f001 fcca 	bl	8003ee0 <pvPortMalloc>
 800254c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d008      	beq.n	8002566 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002554:	2258      	movs	r2, #88	@ 0x58
 8002556:	2100      	movs	r1, #0
 8002558:	6978      	ldr	r0, [r7, #20]
 800255a:	f004 f8d3 	bl	8006704 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	631a      	str	r2, [r3, #48]	@ 0x30
 8002564:	e005      	b.n	8002572 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002566:	6938      	ldr	r0, [r7, #16]
 8002568:	f001 fdec 	bl	8004144 <vPortFree>
 800256c:	e001      	b.n	8002572 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d011      	beq.n	800259c <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	2200      	movs	r2, #0
 800257c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002580:	2300      	movs	r3, #0
 8002582:	9303      	str	r3, [sp, #12]
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	9302      	str	r3, [sp, #8]
 8002588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	68f8      	ldr	r0, [r7, #12]
 8002598:	f000 f82d 	bl	80025f6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800259c:	697b      	ldr	r3, [r7, #20]
    }
 800259e:	4618      	mov	r0, r3
 80025a0:	3718      	adds	r7, #24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b088      	sub	sp, #32
 80025aa:	af02      	add	r7, sp, #8
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	60b9      	str	r1, [r7, #8]
 80025b0:	607a      	str	r2, [r7, #4]
 80025b2:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 80025b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	9300      	str	r3, [sp, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f7ff ffaf 	bl	8002526 <prvCreateTask>
 80025c8:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80025d0:	6938      	ldr	r0, [r7, #16]
 80025d2:	f000 f8a1 	bl	8002718 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80025d6:	2301      	movs	r3, #1
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e002      	b.n	80025e2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	4619      	mov	r1, r3
 80025e6:	20c2      	movs	r0, #194	@ 0xc2
 80025e8:	f003 fd7c 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80025ec:	697b      	ldr	r3, [r7, #20]
    }
 80025ee:	4618      	mov	r0, r3
 80025f0:	3718      	adds	r7, #24
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b088      	sub	sp, #32
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
 8002602:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 8002604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002606:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	461a      	mov	r2, r3
 800260e:	21a5      	movs	r1, #165	@ 0xa5
 8002610:	f004 f878 	bl	8006704 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8002614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002616:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800261e:	3b01      	subs	r3, #1
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4413      	add	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	f023 0307 	bic.w	r3, r3, #7
 800262c:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	2b00      	cmp	r3, #0
 8002636:	d00b      	beq.n	8002650 <prvInitialiseNewTask+0x5a>
    __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	617b      	str	r3, [r7, #20]
}
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d01e      	beq.n	8002694 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002656:	2300      	movs	r3, #0
 8002658:	61fb      	str	r3, [r7, #28]
 800265a:	e012      	b.n	8002682 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800265c:	68ba      	ldr	r2, [r7, #8]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	4413      	add	r3, r2
 8002662:	7819      	ldrb	r1, [r3, #0]
 8002664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	4413      	add	r3, r2
 800266a:	3334      	adds	r3, #52	@ 0x34
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	4413      	add	r3, r2
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d006      	beq.n	800268a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	3301      	adds	r3, #1
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	2b09      	cmp	r3, #9
 8002686:	d9e9      	bls.n	800265c <prvInitialiseNewTask+0x66>
 8002688:	e000      	b.n	800268c <prvInitialiseNewTask+0x96>
            {
                break;
 800268a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800268c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268e:	2200      	movs	r2, #0
 8002690:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002696:	2b04      	cmp	r3, #4
 8002698:	d90b      	bls.n	80026b2 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800269a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800269e:	f383 8811 	msr	BASEPRI, r3
 80026a2:	f3bf 8f6f 	isb	sy
 80026a6:	f3bf 8f4f 	dsb	sy
 80026aa:	613b      	str	r3, [r7, #16]
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	e7fd      	b.n	80026ae <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80026b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d901      	bls.n	80026bc <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80026b8:	2304      	movs	r3, #4
 80026ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80026bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80026c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026c6:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80026c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ca:	3304      	adds	r3, #4
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fdfd 	bl	80022cc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80026d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026d4:	3318      	adds	r3, #24
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fdf8 	bl	80022cc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80026dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026e0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80026e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e4:	f1c3 0205 	rsb	r2, r3, #5
 80026e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ea:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80026ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80026f0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	69b8      	ldr	r0, [r7, #24]
 80026f8:	f001 f8c2 	bl	8003880 <pxPortInitialiseStack>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002700:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8002702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d002      	beq.n	800270e <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800270a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800270c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800270e:	bf00      	nop
 8002710:	3720      	adds	r7, #32
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
	...

08002718 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8002718:	b5b0      	push	{r4, r5, r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8002720:	f001 fab0 	bl	8003c84 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8002724:	4b50      	ldr	r3, [pc, #320]	@ (8002868 <prvAddNewTaskToReadyList+0x150>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3301      	adds	r3, #1
 800272a:	4a4f      	ldr	r2, [pc, #316]	@ (8002868 <prvAddNewTaskToReadyList+0x150>)
 800272c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800272e:	4b4f      	ldr	r3, [pc, #316]	@ (800286c <prvAddNewTaskToReadyList+0x154>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d109      	bne.n	800274a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8002736:	4a4d      	ldr	r2, [pc, #308]	@ (800286c <prvAddNewTaskToReadyList+0x154>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800273c:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <prvAddNewTaskToReadyList+0x150>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d110      	bne.n	8002766 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002744:	f000 fd36 	bl	80031b4 <prvInitialiseTaskLists>
 8002748:	e00d      	b.n	8002766 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800274a:	4b49      	ldr	r3, [pc, #292]	@ (8002870 <prvAddNewTaskToReadyList+0x158>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d109      	bne.n	8002766 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002752:	4b46      	ldr	r3, [pc, #280]	@ (800286c <prvAddNewTaskToReadyList+0x154>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	429a      	cmp	r2, r3
 800275e:	d802      	bhi.n	8002766 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002760:	4a42      	ldr	r2, [pc, #264]	@ (800286c <prvAddNewTaskToReadyList+0x154>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002766:	4b43      	ldr	r3, [pc, #268]	@ (8002874 <prvAddNewTaskToReadyList+0x15c>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a41      	ldr	r2, [pc, #260]	@ (8002874 <prvAddNewTaskToReadyList+0x15c>)
 800276e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002770:	4b40      	ldr	r3, [pc, #256]	@ (8002874 <prvAddNewTaskToReadyList+0x15c>)
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d016      	beq.n	80027ac <prvAddNewTaskToReadyList+0x94>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fd23 	bl	80061cc <SEGGER_SYSVIEW_OnTaskCreate>
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	461d      	mov	r5, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	461c      	mov	r4, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	1ae3      	subs	r3, r4, r3
 80027a4:	9300      	str	r3, [sp, #0]
 80027a6:	462b      	mov	r3, r5
 80027a8:	f001 feca 	bl	8004540 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4618      	mov	r0, r3
 80027b0:	f003 fd90 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027b8:	2201      	movs	r2, #1
 80027ba:	409a      	lsls	r2, r3
 80027bc:	4b2e      	ldr	r3, [pc, #184]	@ (8002878 <prvAddNewTaskToReadyList+0x160>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002878 <prvAddNewTaskToReadyList+0x160>)
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027ca:	492c      	ldr	r1, [pc, #176]	@ (800287c <prvAddNewTaskToReadyList+0x164>)
 80027cc:	4613      	mov	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	4413      	add	r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	3304      	adds	r3, #4
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	60da      	str	r2, [r3, #12]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	3204      	adds	r2, #4
 80027f2:	605a      	str	r2, [r3, #4]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	1d1a      	adds	r2, r3, #4
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	609a      	str	r2, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	4a1c      	ldr	r2, [pc, #112]	@ (800287c <prvAddNewTaskToReadyList+0x164>)
 800280a:	441a      	add	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	615a      	str	r2, [r3, #20]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002814:	4919      	ldr	r1, [pc, #100]	@ (800287c <prvAddNewTaskToReadyList+0x164>)
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002826:	1c59      	adds	r1, r3, #1
 8002828:	4814      	ldr	r0, [pc, #80]	@ (800287c <prvAddNewTaskToReadyList+0x164>)
 800282a:	4613      	mov	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	4403      	add	r3, r0
 8002834:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8002836:	f001 fa57 	bl	8003ce8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800283a:	4b0d      	ldr	r3, [pc, #52]	@ (8002870 <prvAddNewTaskToReadyList+0x158>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d00e      	beq.n	8002860 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002842:	4b0a      	ldr	r3, [pc, #40]	@ (800286c <prvAddNewTaskToReadyList+0x154>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <prvAddNewTaskToReadyList+0x148>
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <prvAddNewTaskToReadyList+0x168>)
 8002852:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002860:	bf00      	nop
 8002862:	3710      	adds	r7, #16
 8002864:	46bd      	mov	sp, r7
 8002866:	bdb0      	pop	{r4, r5, r7, pc}
 8002868:	20000168 	.word	0x20000168
 800286c:	20000090 	.word	0x20000090
 8002870:	20000174 	.word	0x20000174
 8002874:	20000184 	.word	0x20000184
 8002878:	20000170 	.word	0x20000170
 800287c:	20000094 	.word	0x20000094
 8002880:	e000ed04 	.word	0xe000ed04

08002884 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;
        BaseType_t xDeleteTCBInIdleTask = pdFALSE;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
        BaseType_t xTaskIsRunningOrYielding;

        traceENTER_vTaskDelete( xTaskToDelete );

        taskENTER_CRITICAL();
 8002890:	f001 f9f8 	bl	8003c84 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d102      	bne.n	80028a0 <vTaskDelete+0x1c>
 800289a:	4b50      	ldr	r3, [pc, #320]	@ (80029dc <vTaskDelete+0x158>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e000      	b.n	80028a2 <vTaskDelete+0x1e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	613b      	str	r3, [r7, #16]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	3304      	adds	r3, #4
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fd7f 	bl	80023ac <uxListRemove>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d115      	bne.n	80028e0 <vTaskDelete+0x5c>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b8:	4949      	ldr	r1, [pc, #292]	@ (80029e0 <vTaskDelete+0x15c>)
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	440b      	add	r3, r1
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <vTaskDelete+0x5c>
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	2201      	movs	r2, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	43da      	mvns	r2, r3
 80028d6:	4b43      	ldr	r3, [pc, #268]	@ (80029e4 <vTaskDelete+0x160>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4013      	ands	r3, r2
 80028dc:	4a41      	ldr	r2, [pc, #260]	@ (80029e4 <vTaskDelete+0x160>)
 80028de:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d004      	beq.n	80028f2 <vTaskDelete+0x6e>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	3318      	adds	r3, #24
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fd5d 	bl	80023ac <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 80028f2:	4b3d      	ldr	r3, [pc, #244]	@ (80029e8 <vTaskDelete+0x164>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	4a3b      	ldr	r2, [pc, #236]	@ (80029e8 <vTaskDelete+0x164>)
 80028fa:	6013      	str	r3, [r2, #0]

            /* Use temp variable as distinct sequence points for reading volatile
             * variables prior to a logical operator to ensure compliance with
             * MISRA C 2012 Rule 13.5. */
            xTaskIsRunningOrYielding = taskTASK_IS_RUNNING_OR_SCHEDULED_TO_YIELD( pxTCB );
 80028fc:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <vTaskDelete+0x158>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	429a      	cmp	r2, r3
 8002904:	d101      	bne.n	800290a <vTaskDelete+0x86>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <vTaskDelete+0x88>
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]

            /* If the task is running (or yielding), we must add it to the
             * termination list so that an idle task can delete it when it is
             * no longer running. */
            if( ( xSchedulerRunning != pdFALSE ) && ( xTaskIsRunningOrYielding != pdFALSE ) )
 800290e:	4b37      	ldr	r3, [pc, #220]	@ (80029ec <vTaskDelete+0x168>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01d      	beq.n	8002952 <vTaskDelete+0xce>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d01a      	beq.n	8002952 <vTaskDelete+0xce>
                 * deleted. This cannot complete when the task is still running
                 * on a core, as a context switch to another task is required.
                 * Place the task in the termination list. The idle task will check
                 * the termination list and free up any memory allocated by the
                 * scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	3304      	adds	r3, #4
 8002920:	4619      	mov	r1, r3
 8002922:	4833      	ldr	r0, [pc, #204]	@ (80029f0 <vTaskDelete+0x16c>)
 8002924:	f7ff fce1 	bl	80022ea <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002928:	4b32      	ldr	r3, [pc, #200]	@ (80029f4 <vTaskDelete+0x170>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	3301      	adds	r3, #1
 800292e:	4a31      	ldr	r2, [pc, #196]	@ (80029f4 <vTaskDelete+0x170>)
 8002930:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4618      	mov	r0, r3
 8002936:	f003 fd6f 	bl	8006418 <SEGGER_SYSVIEW_ShrinkId>
 800293a:	4603      	mov	r3, r0
 800293c:	4619      	mov	r1, r3
 800293e:	20c3      	movs	r0, #195	@ 0xc3
 8002940:	f002 ffbc 	bl	80058bc <SEGGER_SYSVIEW_RecordU32>
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	4618      	mov	r0, r3
 8002948:	f001 fe62 	bl	8004610 <SYSVIEW_DeleteTask>

                /* Delete the task TCB in idle task. */
                xDeleteTCBInIdleTask = pdTRUE;
 800294c:	2301      	movs	r3, #1
 800294e:	617b      	str	r3, [r7, #20]
 8002950:	e013      	b.n	800297a <vTaskDelete+0xf6>
                }
                #endif /* #if ( configNUMBER_OF_CORES > 1 ) */
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002952:	4b29      	ldr	r3, [pc, #164]	@ (80029f8 <vTaskDelete+0x174>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3b01      	subs	r3, #1
 8002958:	4a27      	ldr	r2, [pc, #156]	@ (80029f8 <vTaskDelete+0x174>)
 800295a:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4618      	mov	r0, r3
 8002960:	f003 fd5a 	bl	8006418 <SEGGER_SYSVIEW_ShrinkId>
 8002964:	4603      	mov	r3, r0
 8002966:	4619      	mov	r1, r3
 8002968:	20c3      	movs	r0, #195	@ 0xc3
 800296a:	f002 ffa7 	bl	80058bc <SEGGER_SYSVIEW_RecordU32>
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	4618      	mov	r0, r3
 8002972:	f001 fe4d 	bl	8004610 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002976:	f000 fcbb 	bl	80032f0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800297a:	f001 f9b5 	bl	8003ce8 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( xDeleteTCBInIdleTask != pdTRUE )
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2b01      	cmp	r3, #1
 8002982:	d002      	beq.n	800298a <vTaskDelete+0x106>
        {
            prvDeleteTCB( pxTCB );
 8002984:	6938      	ldr	r0, [r7, #16]
 8002986:	f000 fc83 	bl	8003290 <prvDeleteTCB>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        #if ( configNUMBER_OF_CORES == 1 )
        {
            if( xSchedulerRunning != pdFALSE )
 800298a:	4b18      	ldr	r3, [pc, #96]	@ (80029ec <vTaskDelete+0x168>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d01c      	beq.n	80029cc <vTaskDelete+0x148>
            {
                if( pxTCB == pxCurrentTCB )
 8002992:	4b12      	ldr	r3, [pc, #72]	@ (80029dc <vTaskDelete+0x158>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	693a      	ldr	r2, [r7, #16]
 8002998:	429a      	cmp	r2, r3
 800299a:	d117      	bne.n	80029cc <vTaskDelete+0x148>
                {
                    configASSERT( uxSchedulerSuspended == 0 );
 800299c:	4b17      	ldr	r3, [pc, #92]	@ (80029fc <vTaskDelete+0x178>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d00b      	beq.n	80029bc <vTaskDelete+0x138>
    __asm volatile
 80029a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a8:	f383 8811 	msr	BASEPRI, r3
 80029ac:	f3bf 8f6f 	isb	sy
 80029b0:	f3bf 8f4f 	dsb	sy
 80029b4:	60bb      	str	r3, [r7, #8]
}
 80029b6:	bf00      	nop
 80029b8:	bf00      	nop
 80029ba:	e7fd      	b.n	80029b8 <vTaskDelete+0x134>
                    taskYIELD_WITHIN_API();
 80029bc:	4b10      	ldr	r3, [pc, #64]	@ (8002a00 <vTaskDelete+0x17c>)
 80029be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029c2:	601a      	str	r2, [r3, #0]
 80029c4:	f3bf 8f4f 	dsb	sy
 80029c8:	f3bf 8f6f 	isb	sy
                }
            }
        }
        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

        traceRETURN_vTaskDelete();
 80029cc:	20c3      	movs	r0, #195	@ 0xc3
 80029ce:	f003 fb4d 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
    }
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	20000090 	.word	0x20000090
 80029e0:	20000094 	.word	0x20000094
 80029e4:	20000170 	.word	0x20000170
 80029e8:	20000184 	.word	0x20000184
 80029ec:	20000174 	.word	0x20000174
 80029f0:	2000013c 	.word	0x2000013c
 80029f4:	20000150 	.word	0x20000150
 80029f8:	20000168 	.word	0x20000168
 80029fc:	20000190 	.word	0x20000190
 8002a00:	e000ed04 	.word	0xe000ed04

08002a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002a16:	f000 f8ed 	bl	8002bf4 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <vTaskDelay+0x68>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d00b      	beq.n	8002a3a <vTaskDelay+0x36>
    __asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a26:	f383 8811 	msr	BASEPRI, r3
 8002a2a:	f3bf 8f6f 	isb	sy
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	60bb      	str	r3, [r7, #8]
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	e7fd      	b.n	8002a36 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a3a:	2100      	movs	r1, #0
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f000 fe77 	bl	8003730 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002a42:	f000 f8e5 	bl	8002c10 <xTaskResumeAll>
 8002a46:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d107      	bne.n	8002a5e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 8002a4e:	4b08      	ldr	r3, [pc, #32]	@ (8002a70 <vTaskDelay+0x6c>)
 8002a50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	f3bf 8f4f 	dsb	sy
 8002a5a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 8002a5e:	20c5      	movs	r0, #197	@ 0xc5
 8002a60:	f003 fb04 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
    }
 8002a64:	bf00      	nop
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000190 	.word	0x20000190
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b08e      	sub	sp, #56	@ 0x38
 8002a78:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e013      	b.n	8002ab0 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8002a88:	4a2b      	ldr	r2, [pc, #172]	@ (8002b38 <prvCreateIdleTasks+0xc4>)
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7819      	ldrb	r1, [r3, #0]
 8002a90:	f107 020c 	add.w	r2, r7, #12
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	4413      	add	r3, r2
 8002a98:	460a      	mov	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8002a9c:	f107 020c 	add.w	r2, r7, #12
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d006      	beq.n	8002ab8 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	3301      	adds	r3, #1
 8002aae:	61fb      	str	r3, [r7, #28]
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	2b09      	cmp	r3, #9
 8002ab4:	dde8      	ble.n	8002a88 <prvCreateIdleTasks+0x14>
 8002ab6:	e000      	b.n	8002aba <prvCreateIdleTasks+0x46>
        {
            break;
 8002ab8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002aba:	2300      	movs	r3, #0
 8002abc:	623b      	str	r3, [r7, #32]
 8002abe:	e030      	b.n	8002b22 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8002b3c <prvCreateIdleTasks+0xc8>)
 8002ac2:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8002acc:	463a      	mov	r2, r7
 8002ace:	1d39      	adds	r1, r7, #4
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 feb9 	bl	800384c <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8002ada:	6838      	ldr	r0, [r7, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	f107 010c 	add.w	r1, r7, #12
 8002ae4:	9202      	str	r2, [sp, #8]
 8002ae6:	9301      	str	r3, [sp, #4]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	2300      	movs	r3, #0
 8002aee:	4602      	mov	r2, r0
 8002af0:	69b8      	ldr	r0, [r7, #24]
 8002af2:	f7ff fceb 	bl	80024cc <xTaskCreateStatic>
 8002af6:	4602      	mov	r2, r0
 8002af8:	4911      	ldr	r1, [pc, #68]	@ (8002b40 <prvCreateIdleTasks+0xcc>)
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002b00:	4a0f      	ldr	r2, [pc, #60]	@ (8002b40 <prvCreateIdleTasks+0xcc>)
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d002      	beq.n	8002b12 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b10:	e001      	b.n	8002b16 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d006      	beq.n	8002b2a <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8002b1c:	6a3b      	ldr	r3, [r7, #32]
 8002b1e:	3301      	adds	r3, #1
 8002b20:	623b      	str	r3, [r7, #32]
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	ddcb      	ble.n	8002ac0 <prvCreateIdleTasks+0x4c>
 8002b28:	e000      	b.n	8002b2c <prvCreateIdleTasks+0xb8>
        {
            break;
 8002b2a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 8002b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3728      	adds	r7, #40	@ 0x28
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	08006820 	.word	0x08006820
 8002b3c:	08003185 	.word	0x08003185
 8002b40:	2000018c 	.word	0x2000018c

08002b44 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 8002b4a:	f7ff ff93 	bl	8002a74 <prvCreateIdleTasks>
 8002b4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d129      	bne.n	8002baa <vTaskStartScheduler+0x66>
    __asm volatile
 8002b56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b5a:	f383 8811 	msr	BASEPRI, r3
 8002b5e:	f3bf 8f6f 	isb	sy
 8002b62:	f3bf 8f4f 	dsb	sy
 8002b66:	60bb      	str	r3, [r7, #8]
}
 8002b68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b6a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bdc <vTaskStartScheduler+0x98>)
 8002b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b72:	4b1b      	ldr	r3, [pc, #108]	@ (8002be0 <vTaskStartScheduler+0x9c>)
 8002b74:	2201      	movs	r2, #1
 8002b76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b78:	4b1a      	ldr	r3, [pc, #104]	@ (8002be4 <vTaskStartScheduler+0xa0>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <vTaskStartScheduler+0xa4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	3334      	adds	r3, #52	@ 0x34
 8002b84:	2205      	movs	r2, #5
 8002b86:	4919      	ldr	r1, [pc, #100]	@ (8002bec <vTaskStartScheduler+0xa8>)
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f003 fdab 	bl	80066e4 <memcmp>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <vTaskStartScheduler+0x5c>
 8002b94:	4b14      	ldr	r3, [pc, #80]	@ (8002be8 <vTaskStartScheduler+0xa4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f003 fb59 	bl	8006250 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002b9e:	e001      	b.n	8002ba4 <vTaskStartScheduler+0x60>
 8002ba0:	f003 faf8 	bl	8006194 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8002ba4:	f000 fefe 	bl	80039a4 <xPortStartScheduler>
 8002ba8:	e00f      	b.n	8002bca <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb0:	d10b      	bne.n	8002bca <vTaskStartScheduler+0x86>
    __asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	607b      	str	r3, [r7, #4]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bca:	4b09      	ldr	r3, [pc, #36]	@ (8002bf0 <vTaskStartScheduler+0xac>)
 8002bcc:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 8002bce:	20cd      	movs	r0, #205	@ 0xcd
 8002bd0:	f003 fa4c 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002bd4:	bf00      	nop
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	20000188 	.word	0x20000188
 8002be0:	20000174 	.word	0x20000174
 8002be4:	2000016c 	.word	0x2000016c
 8002be8:	20000090 	.word	0x20000090
 8002bec:	08006820 	.word	0x08006820
 8002bf0:	2000000c 	.word	0x2000000c

08002bf4 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002bf8:	4b04      	ldr	r3, [pc, #16]	@ (8002c0c <vTaskSuspendAll+0x18>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	4a03      	ldr	r2, [pc, #12]	@ (8002c0c <vTaskSuspendAll+0x18>)
 8002c00:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002c02:	20cf      	movs	r0, #207	@ 0xcf
 8002c04:	f003 fa32 	bl	800606c <SEGGER_SYSVIEW_RecordEndCall>
}
 8002c08:	bf00      	nop
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000190 	.word	0x20000190

08002c10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c16:	2300      	movs	r3, #0
 8002c18:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8002c1e:	f001 f831 	bl	8003c84 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002c22:	2300      	movs	r3, #0
 8002c24:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002c26:	4b7a      	ldr	r3, [pc, #488]	@ (8002e10 <xTaskResumeAll+0x200>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10b      	bne.n	8002c46 <xTaskResumeAll+0x36>
    __asm volatile
 8002c2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c32:	f383 8811 	msr	BASEPRI, r3
 8002c36:	f3bf 8f6f 	isb	sy
 8002c3a:	f3bf 8f4f 	dsb	sy
 8002c3e:	603b      	str	r3, [r7, #0]
}
 8002c40:	bf00      	nop
 8002c42:	bf00      	nop
 8002c44:	e7fd      	b.n	8002c42 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002c46:	4b72      	ldr	r3, [pc, #456]	@ (8002e10 <xTaskResumeAll+0x200>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	4a70      	ldr	r2, [pc, #448]	@ (8002e10 <xTaskResumeAll+0x200>)
 8002c4e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002c50:	4b6f      	ldr	r3, [pc, #444]	@ (8002e10 <xTaskResumeAll+0x200>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f040 80ce 	bne.w	8002df6 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8002e14 <xTaskResumeAll+0x204>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 80c9 	beq.w	8002df6 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c64:	e092      	b.n	8002d8c <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002c66:	4b6c      	ldr	r3, [pc, #432]	@ (8002e18 <xTaskResumeAll+0x208>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c72:	60fb      	str	r3, [r7, #12]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	69fa      	ldr	r2, [r7, #28]
 8002c7a:	6a12      	ldr	r2, [r2, #32]
 8002c7c:	609a      	str	r2, [r3, #8]
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	69fa      	ldr	r2, [r7, #28]
 8002c84:	69d2      	ldr	r2, [r2, #28]
 8002c86:	605a      	str	r2, [r3, #4]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	685a      	ldr	r2, [r3, #4]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	3318      	adds	r3, #24
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d103      	bne.n	8002c9c <xTaskResumeAll+0x8c>
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	605a      	str	r2, [r3, #4]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	1e5a      	subs	r2, r3, #1
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	695b      	ldr	r3, [r3, #20]
 8002cb0:	60bb      	str	r3, [r7, #8]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	68d2      	ldr	r2, [r2, #12]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	69fa      	ldr	r2, [r7, #28]
 8002cc2:	6892      	ldr	r2, [r2, #8]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d103      	bne.n	8002cda <xTaskResumeAll+0xca>
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	68da      	ldr	r2, [r3, #12]
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	605a      	str	r2, [r3, #4]
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	615a      	str	r2, [r3, #20]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	1e5a      	subs	r2, r3, #1
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	4618      	mov	r0, r3
 8002cee:	f003 faf1 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	4b48      	ldr	r3, [pc, #288]	@ (8002e1c <xTaskResumeAll+0x20c>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	4a46      	ldr	r2, [pc, #280]	@ (8002e1c <xTaskResumeAll+0x20c>)
 8002d02:	6013      	str	r3, [r2, #0]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d08:	4945      	ldr	r1, [pc, #276]	@ (8002e20 <xTaskResumeAll+0x210>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	3304      	adds	r3, #4
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	69fb      	ldr	r3, [r7, #28]
 8002d1c:	687a      	ldr	r2, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	69fa      	ldr	r2, [r7, #28]
 8002d2e:	3204      	adds	r2, #4
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	1d1a      	adds	r2, r3, #4
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d3e:	4613      	mov	r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4a36      	ldr	r2, [pc, #216]	@ (8002e20 <xTaskResumeAll+0x210>)
 8002d48:	441a      	add	r2, r3
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	615a      	str	r2, [r3, #20]
 8002d4e:	69fb      	ldr	r3, [r7, #28]
 8002d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d52:	4933      	ldr	r1, [pc, #204]	@ (8002e20 <xTaskResumeAll+0x210>)
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	69fa      	ldr	r2, [r7, #28]
 8002d62:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d64:	1c59      	adds	r1, r3, #1
 8002d66:	482e      	ldr	r0, [pc, #184]	@ (8002e20 <xTaskResumeAll+0x210>)
 8002d68:	4613      	mov	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	4413      	add	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d78:	4b2a      	ldr	r3, [pc, #168]	@ (8002e24 <xTaskResumeAll+0x214>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d904      	bls.n	8002d8c <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8002d82:	4a29      	ldr	r2, [pc, #164]	@ (8002e28 <xTaskResumeAll+0x218>)
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2101      	movs	r1, #1
 8002d88:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d8c:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <xTaskResumeAll+0x208>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f47f af68 	bne.w	8002c66 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8002d9c:	f000 faa8 	bl	80032f0 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002da0:	4b22      	ldr	r3, [pc, #136]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d012      	beq.n	8002dd2 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8002dac:	f000 f858 	bl	8002e60 <xTaskIncrementTick>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d004      	beq.n	8002dc0 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8002db6:	4a1c      	ldr	r2, [pc, #112]	@ (8002e28 <xTaskResumeAll+0x218>)
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	2101      	movs	r1, #1
 8002dbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ef      	bne.n	8002dac <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002dcc:	4b17      	ldr	r3, [pc, #92]	@ (8002e2c <xTaskResumeAll+0x21c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002dd2:	4a15      	ldr	r2, [pc, #84]	@ (8002e28 <xTaskResumeAll+0x218>)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002de2:	4b10      	ldr	r3, [pc, #64]	@ (8002e24 <xTaskResumeAll+0x214>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4b12      	ldr	r3, [pc, #72]	@ (8002e30 <xTaskResumeAll+0x220>)
 8002de8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dec:	601a      	str	r2, [r3, #0]
 8002dee:	f3bf 8f4f 	dsb	sy
 8002df2:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002df6:	f000 ff77 	bl	8003ce8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	20d0      	movs	r0, #208	@ 0xd0
 8002e00:	f003 f970 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002e04:	69bb      	ldr	r3, [r7, #24]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000190 	.word	0x20000190
 8002e14:	20000168 	.word	0x20000168
 8002e18:	20000128 	.word	0x20000128
 8002e1c:	20000170 	.word	0x20000170
 8002e20:	20000094 	.word	0x20000094
 8002e24:	20000090 	.word	0x20000090
 8002e28:	2000017c 	.word	0x2000017c
 8002e2c:	20000178 	.word	0x20000178
 8002e30:	e000ed04 	.word	0xe000ed04

08002e34 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e3a:	f001 f80f 	bl	8003e5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e42:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <xTaskGetTickCountFromISR+0x28>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002e48:	6839      	ldr	r1, [r7, #0]
 8002e4a:	20d2      	movs	r0, #210	@ 0xd2
 8002e4c:	f003 f94a 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002e50:	683b      	ldr	r3, [r7, #0]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	2000016c 	.word	0x2000016c

08002e60 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e66:	2300      	movs	r3, #0
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002e6a:	4b83      	ldr	r3, [pc, #524]	@ (8003078 <xTaskIncrementTick+0x218>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 80f3 	bne.w	800305a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e74:	4b81      	ldr	r3, [pc, #516]	@ (800307c <xTaskIncrementTick+0x21c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e7c:	4a7f      	ldr	r2, [pc, #508]	@ (800307c <xTaskIncrementTick+0x21c>)
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d121      	bne.n	8002ecc <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e88:	4b7d      	ldr	r3, [pc, #500]	@ (8003080 <xTaskIncrementTick+0x220>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d00b      	beq.n	8002eaa <xTaskIncrementTick+0x4a>
    __asm volatile
 8002e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e96:	f383 8811 	msr	BASEPRI, r3
 8002e9a:	f3bf 8f6f 	isb	sy
 8002e9e:	f3bf 8f4f 	dsb	sy
 8002ea2:	607b      	str	r3, [r7, #4]
}
 8002ea4:	bf00      	nop
 8002ea6:	bf00      	nop
 8002ea8:	e7fd      	b.n	8002ea6 <xTaskIncrementTick+0x46>
 8002eaa:	4b75      	ldr	r3, [pc, #468]	@ (8003080 <xTaskIncrementTick+0x220>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	4b74      	ldr	r3, [pc, #464]	@ (8003084 <xTaskIncrementTick+0x224>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a72      	ldr	r2, [pc, #456]	@ (8003080 <xTaskIncrementTick+0x220>)
 8002eb6:	6013      	str	r3, [r2, #0]
 8002eb8:	4a72      	ldr	r2, [pc, #456]	@ (8003084 <xTaskIncrementTick+0x224>)
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	4b72      	ldr	r3, [pc, #456]	@ (8003088 <xTaskIncrementTick+0x228>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	4a70      	ldr	r2, [pc, #448]	@ (8003088 <xTaskIncrementTick+0x228>)
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	f000 fa12 	bl	80032f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ecc:	4b6f      	ldr	r3, [pc, #444]	@ (800308c <xTaskIncrementTick+0x22c>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	6a3a      	ldr	r2, [r7, #32]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	f0c0 80ac 	bcc.w	8003030 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ed8:	4b69      	ldr	r3, [pc, #420]	@ (8003080 <xTaskIncrementTick+0x220>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d104      	bne.n	8002eec <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002ee2:	4b6a      	ldr	r3, [pc, #424]	@ (800308c <xTaskIncrementTick+0x22c>)
 8002ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ee8:	601a      	str	r2, [r3, #0]
                    break;
 8002eea:	e0a1      	b.n	8003030 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002eec:	4b64      	ldr	r3, [pc, #400]	@ (8003080 <xTaskIncrementTick+0x220>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002efc:	6a3a      	ldr	r2, [r7, #32]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d203      	bcs.n	8002f0c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f04:	4a61      	ldr	r2, [pc, #388]	@ (800308c <xTaskIncrementTick+0x22c>)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	6013      	str	r3, [r2, #0]
                        break;
 8002f0a:	e091      	b.n	8003030 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f0c:	69bb      	ldr	r3, [r7, #24]
 8002f0e:	695b      	ldr	r3, [r3, #20]
 8002f10:	613b      	str	r3, [r7, #16]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	68d2      	ldr	r2, [r2, #12]
 8002f1a:	609a      	str	r2, [r3, #8]
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	6892      	ldr	r2, [r2, #8]
 8002f24:	605a      	str	r2, [r3, #4]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	685a      	ldr	r2, [r3, #4]
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3304      	adds	r3, #4
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d103      	bne.n	8002f3a <xTaskIncrementTick+0xda>
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	605a      	str	r2, [r3, #4]
 8002f3a:	69bb      	ldr	r3, [r7, #24]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	615a      	str	r2, [r3, #20]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d01e      	beq.n	8002f90 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	69db      	ldr	r3, [r3, #28]
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	6a12      	ldr	r2, [r2, #32]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	69d2      	ldr	r2, [r2, #28]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	3318      	adds	r3, #24
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d103      	bne.n	8002f80 <xTaskIncrementTick+0x120>
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	605a      	str	r2, [r3, #4]
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	2200      	movs	r2, #0
 8002f84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	1e5a      	subs	r2, r3, #1
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f003 f99e 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	409a      	lsls	r2, r3
 8002fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8003090 <xTaskIncrementTick+0x230>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	4a3a      	ldr	r2, [pc, #232]	@ (8003090 <xTaskIncrementTick+0x230>)
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fae:	4939      	ldr	r1, [pc, #228]	@ (8003094 <xTaskIncrementTick+0x234>)
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	3304      	adds	r3, #4
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60bb      	str	r3, [r7, #8]
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	68ba      	ldr	r2, [r7, #8]
 8002fc4:	609a      	str	r2, [r3, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	60da      	str	r2, [r3, #12]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	3204      	adds	r2, #4
 8002fd6:	605a      	str	r2, [r3, #4]
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1d1a      	adds	r2, r3, #4
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <xTaskIncrementTick+0x234>)
 8002fee:	441a      	add	r2, r3
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	615a      	str	r2, [r3, #20]
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ff8:	4926      	ldr	r1, [pc, #152]	@ (8003094 <xTaskIncrementTick+0x234>)
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	440b      	add	r3, r1
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	4821      	ldr	r0, [pc, #132]	@ (8003094 <xTaskIncrementTick+0x234>)
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4403      	add	r3, r0
 8003018:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301e:	4b1e      	ldr	r3, [pc, #120]	@ (8003098 <xTaskIncrementTick+0x238>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	f67f af57 	bls.w	8002ed8 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302e:	e753      	b.n	8002ed8 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <xTaskIncrementTick+0x238>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003036:	4917      	ldr	r1, [pc, #92]	@ (8003094 <xTaskIncrementTick+0x234>)
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d901      	bls.n	800304c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 800304c:	4b13      	ldr	r3, [pc, #76]	@ (800309c <xTaskIncrementTick+0x23c>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e004      	b.n	8003064 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 800305a:	4b11      	ldr	r3, [pc, #68]	@ (80030a0 <xTaskIncrementTick+0x240>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a0f      	ldr	r2, [pc, #60]	@ (80030a0 <xTaskIncrementTick+0x240>)
 8003062:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003066:	4619      	mov	r1, r3
 8003068:	20db      	movs	r0, #219	@ 0xdb
 800306a:	f003 f83b 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 800306e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003070:	4618      	mov	r0, r3
 8003072:	3728      	adds	r7, #40	@ 0x28
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	20000190 	.word	0x20000190
 800307c:	2000016c 	.word	0x2000016c
 8003080:	20000120 	.word	0x20000120
 8003084:	20000124 	.word	0x20000124
 8003088:	20000180 	.word	0x20000180
 800308c:	20000188 	.word	0x20000188
 8003090:	20000170 	.word	0x20000170
 8003094:	20000094 	.word	0x20000094
 8003098:	20000090 	.word	0x20000090
 800309c:	2000017c 	.word	0x2000017c
 80030a0:	20000178 	.word	0x20000178

080030a4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b086      	sub	sp, #24
 80030a8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 80030aa:	4b30      	ldr	r3, [pc, #192]	@ (800316c <vTaskSwitchContext+0xc8>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 80030b2:	4b2f      	ldr	r3, [pc, #188]	@ (8003170 <vTaskSwitchContext+0xcc>)
 80030b4:	2201      	movs	r2, #1
 80030b6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 80030b8:	e054      	b.n	8003164 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 80030ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <vTaskSwitchContext+0xcc>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 80030c0:	4b2c      	ldr	r3, [pc, #176]	@ (8003174 <vTaskSwitchContext+0xd0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	fab3 f383 	clz	r3, r3
 80030cc:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 80030ce:	7afb      	ldrb	r3, [r7, #11]
 80030d0:	f1c3 031f 	rsb	r3, r3, #31
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4928      	ldr	r1, [pc, #160]	@ (8003178 <vTaskSwitchContext+0xd4>)
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <vTaskSwitchContext+0x5e>
    __asm volatile
 80030ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ee:	f383 8811 	msr	BASEPRI, r3
 80030f2:	f3bf 8f6f 	isb	sy
 80030f6:	f3bf 8f4f 	dsb	sy
 80030fa:	607b      	str	r3, [r7, #4]
}
 80030fc:	bf00      	nop
 80030fe:	bf00      	nop
 8003100:	e7fd      	b.n	80030fe <vTaskSwitchContext+0x5a>
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	4613      	mov	r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	4413      	add	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4a1a      	ldr	r2, [pc, #104]	@ (8003178 <vTaskSwitchContext+0xd4>)
 800310e:	4413      	add	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	605a      	str	r2, [r3, #4]
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	3308      	adds	r3, #8
 8003124:	429a      	cmp	r2, r3
 8003126:	d103      	bne.n	8003130 <vTaskSwitchContext+0x8c>
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	68da      	ldr	r2, [r3, #12]
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	605a      	str	r2, [r3, #4]
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	4a11      	ldr	r2, [pc, #68]	@ (800317c <vTaskSwitchContext+0xd8>)
 8003138:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 800313a:	4b10      	ldr	r3, [pc, #64]	@ (800317c <vTaskSwitchContext+0xd8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3334      	adds	r3, #52	@ 0x34
 8003140:	2205      	movs	r2, #5
 8003142:	490f      	ldr	r1, [pc, #60]	@ (8003180 <vTaskSwitchContext+0xdc>)
 8003144:	4618      	mov	r0, r3
 8003146:	f003 facd 	bl	80066e4 <memcmp>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <vTaskSwitchContext+0xb8>
 8003150:	4b0a      	ldr	r3, [pc, #40]	@ (800317c <vTaskSwitchContext+0xd8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f003 f87b 	bl	8006250 <SEGGER_SYSVIEW_OnTaskStartExec>
 800315a:	e001      	b.n	8003160 <vTaskSwitchContext+0xbc>
 800315c:	f003 f81a 	bl	8006194 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <vTaskSwitchContext+0xd8>)
 8003162:	681b      	ldr	r3, [r3, #0]
    }
 8003164:	bf00      	nop
 8003166:	3718      	adds	r7, #24
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	20000190 	.word	0x20000190
 8003170:	2000017c 	.word	0x2000017c
 8003174:	20000170 	.word	0x20000170
 8003178:	20000094 	.word	0x20000094
 800317c:	20000090 	.word	0x20000090
 8003180:	08006820 	.word	0x08006820

08003184 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800318c:	f000 f852 	bl	8003234 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8003190:	4b06      	ldr	r3, [pc, #24]	@ (80031ac <prvIdleTask+0x28>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d9f9      	bls.n	800318c <prvIdleTask+0x8>
            {
                taskYIELD();
 8003198:	4b05      	ldr	r3, [pc, #20]	@ (80031b0 <prvIdleTask+0x2c>)
 800319a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80031a8:	e7f0      	b.n	800318c <prvIdleTask+0x8>
 80031aa:	bf00      	nop
 80031ac:	20000094 	.word	0x20000094
 80031b0:	e000ed04 	.word	0xe000ed04

080031b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031ba:	2300      	movs	r3, #0
 80031bc:	607b      	str	r3, [r7, #4]
 80031be:	e00c      	b.n	80031da <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	4613      	mov	r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4413      	add	r3, r2
 80031c8:	009b      	lsls	r3, r3, #2
 80031ca:	4a12      	ldr	r2, [pc, #72]	@ (8003214 <prvInitialiseTaskLists+0x60>)
 80031cc:	4413      	add	r3, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff f85a 	bl	8002288 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3301      	adds	r3, #1
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d9ef      	bls.n	80031c0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80031e0:	480d      	ldr	r0, [pc, #52]	@ (8003218 <prvInitialiseTaskLists+0x64>)
 80031e2:	f7ff f851 	bl	8002288 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80031e6:	480d      	ldr	r0, [pc, #52]	@ (800321c <prvInitialiseTaskLists+0x68>)
 80031e8:	f7ff f84e 	bl	8002288 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80031ec:	480c      	ldr	r0, [pc, #48]	@ (8003220 <prvInitialiseTaskLists+0x6c>)
 80031ee:	f7ff f84b 	bl	8002288 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80031f2:	480c      	ldr	r0, [pc, #48]	@ (8003224 <prvInitialiseTaskLists+0x70>)
 80031f4:	f7ff f848 	bl	8002288 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80031f8:	480b      	ldr	r0, [pc, #44]	@ (8003228 <prvInitialiseTaskLists+0x74>)
 80031fa:	f7ff f845 	bl	8002288 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80031fe:	4b0b      	ldr	r3, [pc, #44]	@ (800322c <prvInitialiseTaskLists+0x78>)
 8003200:	4a05      	ldr	r2, [pc, #20]	@ (8003218 <prvInitialiseTaskLists+0x64>)
 8003202:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003204:	4b0a      	ldr	r3, [pc, #40]	@ (8003230 <prvInitialiseTaskLists+0x7c>)
 8003206:	4a05      	ldr	r2, [pc, #20]	@ (800321c <prvInitialiseTaskLists+0x68>)
 8003208:	601a      	str	r2, [r3, #0]
}
 800320a:	bf00      	nop
 800320c:	3708      	adds	r7, #8
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	20000094 	.word	0x20000094
 8003218:	200000f8 	.word	0x200000f8
 800321c:	2000010c 	.word	0x2000010c
 8003220:	20000128 	.word	0x20000128
 8003224:	2000013c 	.word	0x2000013c
 8003228:	20000154 	.word	0x20000154
 800322c:	20000120 	.word	0x20000120
 8003230:	20000124 	.word	0x20000124

08003234 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800323a:	e019      	b.n	8003270 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 800323c:	f000 fd22 	bl	8003c84 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003240:	4b10      	ldr	r3, [pc, #64]	@ (8003284 <prvCheckTasksWaitingTermination+0x50>)
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	68db      	ldr	r3, [r3, #12]
 8003246:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	3304      	adds	r3, #4
 800324c:	4618      	mov	r0, r3
 800324e:	f7ff f8ad 	bl	80023ac <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8003252:	4b0d      	ldr	r3, [pc, #52]	@ (8003288 <prvCheckTasksWaitingTermination+0x54>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3b01      	subs	r3, #1
 8003258:	4a0b      	ldr	r2, [pc, #44]	@ (8003288 <prvCheckTasksWaitingTermination+0x54>)
 800325a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <prvCheckTasksWaitingTermination+0x58>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	4a0a      	ldr	r2, [pc, #40]	@ (800328c <prvCheckTasksWaitingTermination+0x58>)
 8003264:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8003266:	f000 fd3f 	bl	8003ce8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	f000 f810 	bl	8003290 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003270:	4b06      	ldr	r3, [pc, #24]	@ (800328c <prvCheckTasksWaitingTermination+0x58>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d1e1      	bne.n	800323c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	3708      	adds	r7, #8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	2000013c 	.word	0x2000013c
 8003288:	20000168 	.word	0x20000168
 800328c:	20000150 	.word	0x20000150

08003290 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 ff4c 	bl	8004144 <vPortFree>
                vPortFree( pxTCB );
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f000 ff49 	bl	8004144 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80032b2:	e019      	b.n	80032e8 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d103      	bne.n	80032c6 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 ff40 	bl	8004144 <vPortFree>
    }
 80032c4:	e010      	b.n	80032e8 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d00b      	beq.n	80032e8 <prvDeleteTCB+0x58>
    __asm volatile
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
 80032e0:	60fb      	str	r3, [r7, #12]
}
 80032e2:	bf00      	nop
 80032e4:	bf00      	nop
 80032e6:	e7fd      	b.n	80032e4 <prvDeleteTCB+0x54>
    }
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}

080032f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80032f0:	b480      	push	{r7}
 80032f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80032f4:	4b0a      	ldr	r3, [pc, #40]	@ (8003320 <prvResetNextTaskUnblockTime+0x30>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d104      	bne.n	8003308 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80032fe:	4b09      	ldr	r3, [pc, #36]	@ (8003324 <prvResetNextTaskUnblockTime+0x34>)
 8003300:	f04f 32ff 	mov.w	r2, #4294967295
 8003304:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003306:	e005      	b.n	8003314 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003308:	4b05      	ldr	r3, [pc, #20]	@ (8003320 <prvResetNextTaskUnblockTime+0x30>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a04      	ldr	r2, [pc, #16]	@ (8003324 <prvResetNextTaskUnblockTime+0x34>)
 8003312:	6013      	str	r3, [r2, #0]
}
 8003314:	bf00      	nop
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	20000120 	.word	0x20000120
 8003324:	20000188 	.word	0x20000188

08003328 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003328:	b580      	push	{r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <xTaskGenericNotifyWait+0x30>
    __asm volatile
 8003340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003344:	f383 8811 	msr	BASEPRI, r3
 8003348:	f3bf 8f6f 	isb	sy
 800334c:	f3bf 8f4f 	dsb	sy
 8003350:	613b      	str	r3, [r7, #16]
}
 8003352:	bf00      	nop
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <xTaskGenericNotifyWait+0x2c>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8003358:	f7ff fc4c 	bl	8002bf4 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800335c:	f000 fc92 	bl	8003c84 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8003360:	4b3b      	ldr	r3, [pc, #236]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	3354      	adds	r3, #84	@ 0x54
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d018      	beq.n	80033a4 <xTaskGenericNotifyWait+0x7c>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8003372:	4b37      	ldr	r3, [pc, #220]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	3214      	adds	r2, #20
 800337a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	43d2      	mvns	r2, r2
 8003382:	4011      	ands	r1, r2
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	3214      	adds	r2, #20
 8003388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800338c:	4b30      	ldr	r3, [pc, #192]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	3354      	adds	r3, #84	@ 0x54
 8003396:	2201      	movs	r2, #1
 8003398:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800339a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <xTaskGenericNotifyWait+0x7c>
                    {
                        xShouldBlock = pdTRUE;
 80033a0:	2301      	movs	r3, #1
 80033a2:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 80033a4:	f000 fca0 	bl	8003ce8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d103      	bne.n	80033b6 <xTaskGenericNotifyWait+0x8e>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033ae:	2101      	movs	r1, #1
 80033b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033b2:	f000 f9bd 	bl	8003730 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 80033b6:	f7ff fc2b 	bl	8002c10 <xTaskResumeAll>
 80033ba:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d10a      	bne.n	80033d8 <xTaskGenericNotifyWait+0xb0>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d107      	bne.n	80033d8 <xTaskGenericNotifyWait+0xb0>
        {
            taskYIELD_WITHIN_API();
 80033c8:	4b22      	ldr	r3, [pc, #136]	@ (8003454 <xTaskGenericNotifyWait+0x12c>)
 80033ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 80033d8:	f000 fc54 	bl	8003c84 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <xTaskGenericNotifyWait+0xca>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 80033e2:	4b1b      	ldr	r3, [pc, #108]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	3214      	adds	r2, #20
 80033ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80033f2:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4413      	add	r3, r2
 80033fa:	3354      	adds	r3, #84	@ 0x54
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b02      	cmp	r3, #2
 8003402:	d002      	beq.n	800340a <xTaskGenericNotifyWait+0xe2>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e00e      	b.n	8003428 <xTaskGenericNotifyWait+0x100>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 800340a:	4b11      	ldr	r3, [pc, #68]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	3214      	adds	r2, #20
 8003412:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	43d2      	mvns	r2, r2
 800341a:	4011      	ands	r1, r2
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	3214      	adds	r2, #20
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003424:	2301      	movs	r3, #1
 8003426:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8003428:	4b09      	ldr	r3, [pc, #36]	@ (8003450 <xTaskGenericNotifyWait+0x128>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	3354      	adds	r3, #84	@ 0x54
 8003432:	2200      	movs	r2, #0
 8003434:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003436:	f000 fc57 	bl	8003ce8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	4619      	mov	r1, r3
 800343e:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8003442:	f002 fe4f 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003446:	69fb      	ldr	r3, [r7, #28]
    }
 8003448:	4618      	mov	r0, r3
 800344a:	3720      	adds	r7, #32
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}
 8003450:	20000090 	.word	0x20000090
 8003454:	e000ed04 	.word	0xe000ed04

08003458 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003458:	b580      	push	{r7, lr}
 800345a:	b092      	sub	sp, #72	@ 0x48
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003466:	2301      	movs	r3, #1
 8003468:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d10b      	bne.n	8003488 <xTaskGenericNotifyFromISR+0x30>
    __asm volatile
 8003470:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003474:	f383 8811 	msr	BASEPRI, r3
 8003478:	f3bf 8f6f 	isb	sy
 800347c:	f3bf 8f4f 	dsb	sy
 8003480:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003482:	bf00      	nop
 8003484:	bf00      	nop
 8003486:	e7fd      	b.n	8003484 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <xTaskGenericNotifyFromISR+0x4e>
    __asm volatile
 800348e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003492:	f383 8811 	msr	BASEPRI, r3
 8003496:	f3bf 8f6f 	isb	sy
 800349a:	f3bf 8f4f 	dsb	sy
 800349e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80034a0:	bf00      	nop
 80034a2:	bf00      	nop
 80034a4:	e7fd      	b.n	80034a2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034a6:	f000 fcd9 	bl	8003e5c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	643b      	str	r3, [r7, #64]	@ 0x40

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 80034ae:	f3ef 8211 	mrs	r2, BASEPRI
 80034b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034b6:	f383 8811 	msr	BASEPRI, r3
 80034ba:	f3bf 8f6f 	isb	sy
 80034be:	f3bf 8f4f 	dsb	sy
 80034c2:	623a      	str	r2, [r7, #32]
 80034c4:	61fb      	str	r3, [r7, #28]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 80034c6:	6a3b      	ldr	r3, [r7, #32]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 80034c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 80034ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d006      	beq.n	80034de <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 80034d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	3214      	adds	r2, #20
 80034d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80034dc:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80034de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4413      	add	r3, r2
 80034e4:	3354      	adds	r3, #84	@ 0x54
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80034ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	4413      	add	r3, r2
 80034f2:	3354      	adds	r3, #84	@ 0x54
 80034f4:	2202      	movs	r2, #2
 80034f6:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d83b      	bhi.n	8003576 <xTaskGenericNotifyFromISR+0x11e>
 80034fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003504 <xTaskGenericNotifyFromISR+0xac>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	08003597 	.word	0x08003597
 8003508:	08003519 	.word	0x08003519
 800350c:	08003535 	.word	0x08003535
 8003510:	0800354d 	.word	0x0800354d
 8003514:	0800355b 	.word	0x0800355b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800351a:	68ba      	ldr	r2, [r7, #8]
 800351c:	3214      	adds	r2, #20
 800351e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	ea42 0103 	orr.w	r1, r2, r3
 8003528:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	3214      	adds	r2, #20
 800352e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003532:	e033      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	3214      	adds	r2, #20
 800353a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800353e:	1c59      	adds	r1, r3, #1
 8003540:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	3214      	adds	r2, #20
 8003546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800354a:	e027      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800354c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	3214      	adds	r2, #20
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003558:	e020      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800355a:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 800355e:	2b02      	cmp	r3, #2
 8003560:	d006      	beq.n	8003570 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	3214      	adds	r2, #20
 8003568:	6879      	ldr	r1, [r7, #4]
 800356a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800356e:	e015      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003570:	2300      	movs	r3, #0
 8003572:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003574:	e012      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003576:	4b67      	ldr	r3, [pc, #412]	@ (8003714 <xTaskGenericNotifyFromISR+0x2bc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00d      	beq.n	800359a <xTaskGenericNotifyFromISR+0x142>
    __asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	61bb      	str	r3, [r7, #24]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <xTaskGenericNotifyFromISR+0x144>
                    break;
 800359a:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800359c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	f040 80a5 	bne.w	80036f0 <xTaskGenericNotifyFromISR+0x298>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80035a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00b      	beq.n	80035c6 <xTaskGenericNotifyFromISR+0x16e>
    __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	617b      	str	r3, [r7, #20]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xTaskGenericNotifyFromISR+0x16a>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80035c6:	4b54      	ldr	r3, [pc, #336]	@ (8003718 <xTaskGenericNotifyFromISR+0x2c0>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d164      	bne.n	8003698 <xTaskGenericNotifyFromISR+0x240>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80035d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035da:	68d2      	ldr	r2, [r2, #12]
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80035e4:	6892      	ldr	r2, [r2, #8]
 80035e6:	605a      	str	r2, [r3, #4]
 80035e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035ee:	3304      	adds	r3, #4
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d103      	bne.n	80035fc <xTaskGenericNotifyFromISR+0x1a4>
 80035f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035f6:	68da      	ldr	r2, [r3, #12]
 80035f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035fe:	2200      	movs	r2, #0
 8003600:	615a      	str	r2, [r3, #20]
 8003602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 800360c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800360e:	4618      	mov	r0, r3
 8003610:	f002 fe60 	bl	80062d4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003614:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003618:	2201      	movs	r2, #1
 800361a:	409a      	lsls	r2, r3
 800361c:	4b3f      	ldr	r3, [pc, #252]	@ (800371c <xTaskGenericNotifyFromISR+0x2c4>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	4a3e      	ldr	r2, [pc, #248]	@ (800371c <xTaskGenericNotifyFromISR+0x2c4>)
 8003624:	6013      	str	r3, [r2, #0]
 8003626:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800362a:	493d      	ldr	r1, [pc, #244]	@ (8003720 <xTaskGenericNotifyFromISR+0x2c8>)
 800362c:	4613      	mov	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4413      	add	r3, r2
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	3304      	adds	r3, #4
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800363c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003640:	609a      	str	r2, [r3, #8]
 8003642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003644:	689a      	ldr	r2, [r3, #8]
 8003646:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003648:	60da      	str	r2, [r3, #12]
 800364a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003650:	3204      	adds	r2, #4
 8003652:	605a      	str	r2, [r3, #4]
 8003654:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003656:	1d1a      	adds	r2, r3, #4
 8003658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800365e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003660:	4613      	mov	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4a2d      	ldr	r2, [pc, #180]	@ (8003720 <xTaskGenericNotifyFromISR+0x2c8>)
 800366a:	441a      	add	r2, r3
 800366c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800366e:	615a      	str	r2, [r3, #20]
 8003670:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003674:	492a      	ldr	r1, [pc, #168]	@ (8003720 <xTaskGenericNotifyFromISR+0x2c8>)
 8003676:	4613      	mov	r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	4413      	add	r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003684:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003686:	1c59      	adds	r1, r3, #1
 8003688:	4825      	ldr	r0, [pc, #148]	@ (8003720 <xTaskGenericNotifyFromISR+0x2c8>)
 800368a:	4613      	mov	r3, r2
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	4413      	add	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4403      	add	r3, r0
 8003694:	6019      	str	r1, [r3, #0]
 8003696:	e01b      	b.n	80036d0 <xTaskGenericNotifyFromISR+0x278>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003698:	4b22      	ldr	r3, [pc, #136]	@ (8003724 <xTaskGenericNotifyFromISR+0x2cc>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	637b      	str	r3, [r7, #52]	@ 0x34
 800369e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036a2:	61da      	str	r2, [r3, #28]
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	689a      	ldr	r2, [r3, #8]
 80036a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036aa:	621a      	str	r2, [r3, #32]
 80036ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036b2:	3218      	adds	r2, #24
 80036b4:	605a      	str	r2, [r3, #4]
 80036b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036b8:	f103 0218 	add.w	r2, r3, #24
 80036bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036be:	609a      	str	r2, [r3, #8]
 80036c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c2:	4a18      	ldr	r2, [pc, #96]	@ (8003724 <xTaskGenericNotifyFromISR+0x2cc>)
 80036c4:	629a      	str	r2, [r3, #40]	@ 0x28
 80036c6:	4b17      	ldr	r3, [pc, #92]	@ (8003724 <xTaskGenericNotifyFromISR+0x2cc>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	3301      	adds	r3, #1
 80036cc:	4a15      	ldr	r2, [pc, #84]	@ (8003724 <xTaskGenericNotifyFromISR+0x2cc>)
 80036ce:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d4:	4b14      	ldr	r3, [pc, #80]	@ (8003728 <xTaskGenericNotifyFromISR+0x2d0>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036da:	429a      	cmp	r2, r3
 80036dc:	d908      	bls.n	80036f0 <xTaskGenericNotifyFromISR+0x298>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 80036de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <xTaskGenericNotifyFromISR+0x292>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80036e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036e6:	2201      	movs	r2, #1
 80036e8:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80036ea:	4b10      	ldr	r3, [pc, #64]	@ (800372c <xTaskGenericNotifyFromISR+0x2d4>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
 80036f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80036fa:	bf00      	nop
                #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );
 80036fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036fe:	4619      	mov	r1, r3
 8003700:	f44f 7081 	mov.w	r0, #258	@ 0x102
 8003704:	f002 fcee 	bl	80060e4 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 8003708:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 800370a:	4618      	mov	r0, r3
 800370c:	3748      	adds	r7, #72	@ 0x48
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	2000016c 	.word	0x2000016c
 8003718:	20000190 	.word	0x20000190
 800371c:	20000170 	.word	0x20000170
 8003720:	20000094 	.word	0x20000094
 8003724:	20000128 	.word	0x20000128
 8003728:	20000090 	.word	0x20000090
 800372c:	2000017c 	.word	0x2000017c

08003730 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800373a:	4b3d      	ldr	r3, [pc, #244]	@ (8003830 <prvAddCurrentTaskToDelayedList+0x100>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8003740:	4b3c      	ldr	r3, [pc, #240]	@ (8003834 <prvAddCurrentTaskToDelayedList+0x104>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8003746:	4b3c      	ldr	r3, [pc, #240]	@ (8003838 <prvAddCurrentTaskToDelayedList+0x108>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800374c:	4b3b      	ldr	r3, [pc, #236]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3304      	adds	r3, #4
 8003752:	4618      	mov	r0, r3
 8003754:	f7fe fe2a 	bl	80023ac <uxListRemove>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800375e:	4b37      	ldr	r3, [pc, #220]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003764:	2201      	movs	r2, #1
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43da      	mvns	r2, r3
 800376c:	4b34      	ldr	r3, [pc, #208]	@ (8003840 <prvAddCurrentTaskToDelayedList+0x110>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4013      	ands	r3, r2
 8003772:	4a33      	ldr	r2, [pc, #204]	@ (8003840 <prvAddCurrentTaskToDelayedList+0x110>)
 8003774:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800377c:	d124      	bne.n	80037c8 <prvAddCurrentTaskToDelayedList+0x98>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d021      	beq.n	80037c8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003784:	4b2f      	ldr	r3, [pc, #188]	@ (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	4b2c      	ldr	r3, [pc, #176]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	693a      	ldr	r2, [r7, #16]
 8003790:	609a      	str	r2, [r3, #8]
 8003792:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	6892      	ldr	r2, [r2, #8]
 800379a:	60da      	str	r2, [r3, #12]
 800379c:	4b27      	ldr	r3, [pc, #156]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	3204      	adds	r2, #4
 80037a6:	605a      	str	r2, [r3, #4]
 80037a8:	4b24      	ldr	r3, [pc, #144]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	1d1a      	adds	r2, r3, #4
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	4b22      	ldr	r3, [pc, #136]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a23      	ldr	r2, [pc, #140]	@ (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 80037b8:	615a      	str	r2, [r3, #20]
 80037ba:	4b22      	ldr	r3, [pc, #136]	@ (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3301      	adds	r3, #1
 80037c0:	4a20      	ldr	r2, [pc, #128]	@ (8003844 <prvAddCurrentTaskToDelayedList+0x114>)
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80037c6:	e02e      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80037c8:	69fa      	ldr	r2, [r7, #28]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4413      	add	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037d0:	4b1a      	ldr	r3, [pc, #104]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d20d      	bcs.n	80037fc <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80037e0:	4b16      	ldr	r3, [pc, #88]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	2104      	movs	r1, #4
 80037e6:	4618      	mov	r0, r3
 80037e8:	f002 fdb6 	bl	8006358 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 80037ec:	4b13      	ldr	r3, [pc, #76]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	3304      	adds	r3, #4
 80037f2:	4619      	mov	r1, r3
 80037f4:	6978      	ldr	r0, [r7, #20]
 80037f6:	f7fe fd9e 	bl	8002336 <vListInsert>
}
 80037fa:	e014      	b.n	8003826 <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2104      	movs	r1, #4
 8003802:	4618      	mov	r0, r3
 8003804:	f002 fda8 	bl	8006358 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003808:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <prvAddCurrentTaskToDelayedList+0x10c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3304      	adds	r3, #4
 800380e:	4619      	mov	r1, r3
 8003810:	69b8      	ldr	r0, [r7, #24]
 8003812:	f7fe fd90 	bl	8002336 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003816:	4b0c      	ldr	r3, [pc, #48]	@ (8003848 <prvAddCurrentTaskToDelayedList+0x118>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	429a      	cmp	r2, r3
 800381e:	d202      	bcs.n	8003826 <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003820:	4a09      	ldr	r2, [pc, #36]	@ (8003848 <prvAddCurrentTaskToDelayedList+0x118>)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6013      	str	r3, [r2, #0]
}
 8003826:	bf00      	nop
 8003828:	3720      	adds	r7, #32
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	2000016c 	.word	0x2000016c
 8003834:	20000120 	.word	0x20000120
 8003838:	20000124 	.word	0x20000124
 800383c:	20000090 	.word	0x20000090
 8003840:	20000170 	.word	0x20000170
 8003844:	20000154 	.word	0x20000154
 8003848:	20000188 	.word	0x20000188

0800384c <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 800384c:	b480      	push	{r7}
 800384e:	b085      	sub	sp, #20
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	4a07      	ldr	r2, [pc, #28]	@ (8003878 <vApplicationGetIdleTaskMemory+0x2c>)
 800385c:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	4a06      	ldr	r2, [pc, #24]	@ (800387c <vApplicationGetIdleTaskMemory+0x30>)
 8003862:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2282      	movs	r2, #130	@ 0x82
 8003868:	601a      	str	r2, [r3, #0]
    }
 800386a:	bf00      	nop
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000194 	.word	0x20000194
 800387c:	200001ec 	.word	0x200001ec

08003880 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	3b04      	subs	r3, #4
 8003890:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003898:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	3b04      	subs	r3, #4
 800389e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f023 0201 	bic.w	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80038b0:	4a0c      	ldr	r2, [pc, #48]	@ (80038e4 <pxPortInitialiseStack+0x64>)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	3b14      	subs	r3, #20
 80038ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	3b04      	subs	r3, #4
 80038c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f06f 0202 	mvn.w	r2, #2
 80038ce:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	3b20      	subs	r3, #32
 80038d4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3714      	adds	r7, #20
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	080038e9 	.word	0x080038e9

080038e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80038f2:	4b13      	ldr	r3, [pc, #76]	@ (8003940 <prvTaskExitError+0x58>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d00b      	beq.n	8003914 <prvTaskExitError+0x2c>
    __asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <prvTaskExitError+0x28>
    __asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	60bb      	str	r3, [r7, #8]
}
 8003926:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003928:	bf00      	nop
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0fc      	beq.n	800392a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	20000010 	.word	0x20000010
	...

08003950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003950:	4b07      	ldr	r3, [pc, #28]	@ (8003970 <pxCurrentTCBConst2>)
 8003952:	6819      	ldr	r1, [r3, #0]
 8003954:	6808      	ldr	r0, [r1, #0]
 8003956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395a:	f380 8809 	msr	PSP, r0
 800395e:	f3bf 8f6f 	isb	sy
 8003962:	f04f 0000 	mov.w	r0, #0
 8003966:	f380 8811 	msr	BASEPRI, r0
 800396a:	4770      	bx	lr
 800396c:	f3af 8000 	nop.w

08003970 <pxCurrentTCBConst2>:
 8003970:	20000090 	.word	0x20000090
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop

08003978 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003978:	4808      	ldr	r0, [pc, #32]	@ (800399c <prvPortStartFirstTask+0x24>)
 800397a:	6800      	ldr	r0, [r0, #0]
 800397c:	6800      	ldr	r0, [r0, #0]
 800397e:	f380 8808 	msr	MSP, r0
 8003982:	f04f 0000 	mov.w	r0, #0
 8003986:	f380 8814 	msr	CONTROL, r0
 800398a:	b662      	cpsie	i
 800398c:	b661      	cpsie	f
 800398e:	f3bf 8f4f 	dsb	sy
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	df00      	svc	0
 8003998:	bf00      	nop
 800399a:	0000      	.short	0x0000
 800399c:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop

080039a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08c      	sub	sp, #48	@ 0x30
 80039a8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80039aa:	4b69      	ldr	r3, [pc, #420]	@ (8003b50 <xPortStartScheduler+0x1ac>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a69      	ldr	r2, [pc, #420]	@ (8003b54 <xPortStartScheduler+0x1b0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d10b      	bne.n	80039cc <xPortStartScheduler+0x28>
    __asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80039c6:	bf00      	nop
 80039c8:	bf00      	nop
 80039ca:	e7fd      	b.n	80039c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80039cc:	4b60      	ldr	r3, [pc, #384]	@ (8003b50 <xPortStartScheduler+0x1ac>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a61      	ldr	r2, [pc, #388]	@ (8003b58 <xPortStartScheduler+0x1b4>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d10b      	bne.n	80039ee <xPortStartScheduler+0x4a>
    __asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	623b      	str	r3, [r7, #32]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80039ee:	4b5b      	ldr	r3, [pc, #364]	@ (8003b5c <xPortStartScheduler+0x1b8>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80039f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039f6:	332c      	adds	r3, #44	@ 0x2c
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a59      	ldr	r2, [pc, #356]	@ (8003b60 <xPortStartScheduler+0x1bc>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d00b      	beq.n	8003a18 <xPortStartScheduler+0x74>
    __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
}
 8003a12:	bf00      	nop
 8003a14:	bf00      	nop
 8003a16:	e7fd      	b.n	8003a14 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003a18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a1a:	3338      	adds	r3, #56	@ 0x38
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a51      	ldr	r2, [pc, #324]	@ (8003b64 <xPortStartScheduler+0x1c0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <xPortStartScheduler+0x98>
    __asm volatile
 8003a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a28:	f383 8811 	msr	BASEPRI, r3
 8003a2c:	f3bf 8f6f 	isb	sy
 8003a30:	f3bf 8f4f 	dsb	sy
 8003a34:	61bb      	str	r3, [r7, #24]
}
 8003a36:	bf00      	nop
 8003a38:	bf00      	nop
 8003a3a:	e7fd      	b.n	8003a38 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003a40:	4b49      	ldr	r3, [pc, #292]	@ (8003b68 <xPortStartScheduler+0x1c4>)
 8003a42:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a4e:	22ff      	movs	r2, #255	@ 0xff
 8003a50:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	b2db      	uxtb	r3, r3
 8003a58:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003a5a:	79fb      	ldrb	r3, [r7, #7]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a62:	b2da      	uxtb	r2, r3
 8003a64:	4b41      	ldr	r3, [pc, #260]	@ (8003b6c <xPortStartScheduler+0x1c8>)
 8003a66:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003a68:	4b40      	ldr	r3, [pc, #256]	@ (8003b6c <xPortStartScheduler+0x1c8>)
 8003a6a:	781b      	ldrb	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d10b      	bne.n	8003a88 <xPortStartScheduler+0xe4>
    __asm volatile
 8003a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a74:	f383 8811 	msr	BASEPRI, r3
 8003a78:	f3bf 8f6f 	isb	sy
 8003a7c:	f3bf 8f4f 	dsb	sy
 8003a80:	617b      	str	r3, [r7, #20]
}
 8003a82:	bf00      	nop
 8003a84:	bf00      	nop
 8003a86:	e7fd      	b.n	8003a84 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 8003a88:	79fb      	ldrb	r3, [r7, #7]
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d013      	beq.n	8003abe <xPortStartScheduler+0x11a>
    __asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	613b      	str	r3, [r7, #16]
}
 8003aa8:	bf00      	nop
 8003aaa:	bf00      	nop
 8003aac:	e7fd      	b.n	8003aaa <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ab4:	79fb      	ldrb	r3, [r7, #7]
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003abe:	79fb      	ldrb	r3, [r7, #7]
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ac6:	2b80      	cmp	r3, #128	@ 0x80
 8003ac8:	d0f1      	beq.n	8003aae <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d103      	bne.n	8003ad8 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003ad0:	4b27      	ldr	r3, [pc, #156]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	e004      	b.n	8003ae2 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f1c3 0307 	rsb	r3, r3, #7
 8003ade:	4a24      	ldr	r2, [pc, #144]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003ae0:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ae2:	4b23      	ldr	r3, [pc, #140]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	4a21      	ldr	r2, [pc, #132]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003aea:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003aec:	4b20      	ldr	r3, [pc, #128]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003af4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b70 <xPortStartScheduler+0x1cc>)
 8003af6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	b2da      	uxtb	r2, r3
 8003afc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003afe:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003b00:	4b1c      	ldr	r3, [pc, #112]	@ (8003b74 <xPortStartScheduler+0x1d0>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1b      	ldr	r2, [pc, #108]	@ (8003b74 <xPortStartScheduler+0x1d0>)
 8003b06:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8003b0a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	@ (8003b74 <xPortStartScheduler+0x1d0>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a18      	ldr	r2, [pc, #96]	@ (8003b74 <xPortStartScheduler+0x1d0>)
 8003b12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003b16:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003b18:	4b17      	ldr	r3, [pc, #92]	@ (8003b78 <xPortStartScheduler+0x1d4>)
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003b1e:	f000 f96d 	bl	8003dfc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003b22:	4b16      	ldr	r3, [pc, #88]	@ (8003b7c <xPortStartScheduler+0x1d8>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003b28:	f000 f98c 	bl	8003e44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003b2c:	4b14      	ldr	r3, [pc, #80]	@ (8003b80 <xPortStartScheduler+0x1dc>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a13      	ldr	r2, [pc, #76]	@ (8003b80 <xPortStartScheduler+0x1dc>)
 8003b32:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003b36:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003b38:	f7ff ff1e 	bl	8003978 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003b3c:	f7ff fab2 	bl	80030a4 <vTaskSwitchContext>
    prvTaskExitError();
 8003b40:	f7ff fed2 	bl	80038e8 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3730      	adds	r7, #48	@ 0x30
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	410fc271 	.word	0x410fc271
 8003b58:	410fc270 	.word	0x410fc270
 8003b5c:	e000ed08 	.word	0xe000ed08
 8003b60:	08003951 	.word	0x08003951
 8003b64:	08003d41 	.word	0x08003d41
 8003b68:	e000e400 	.word	0xe000e400
 8003b6c:	200003f4 	.word	0x200003f4
 8003b70:	200003f8 	.word	0x200003f8
 8003b74:	e000ed20 	.word	0xe000ed20
 8003b78:	e000ed1c 	.word	0xe000ed1c
 8003b7c:	20000010 	.word	0x20000010
 8003b80:	e000ef34 	.word	0xe000ef34

08003b84 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003b8a:	4b38      	ldr	r3, [pc, #224]	@ (8003c6c <vInitPrioGroupValue+0xe8>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a38      	ldr	r2, [pc, #224]	@ (8003c70 <vInitPrioGroupValue+0xec>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10b      	bne.n	8003bac <vInitPrioGroupValue+0x28>
    __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	613b      	str	r3, [r7, #16]
}
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003bac:	4b2f      	ldr	r3, [pc, #188]	@ (8003c6c <vInitPrioGroupValue+0xe8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a30      	ldr	r2, [pc, #192]	@ (8003c74 <vInitPrioGroupValue+0xf0>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10b      	bne.n	8003bce <vInitPrioGroupValue+0x4a>
    __asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	60fb      	str	r3, [r7, #12]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003bce:	4b2a      	ldr	r3, [pc, #168]	@ (8003c78 <vInitPrioGroupValue+0xf4>)
 8003bd0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	22ff      	movs	r2, #255	@ 0xff
 8003bde:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	b2db      	uxtb	r3, r3
 8003bec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4b22      	ldr	r3, [pc, #136]	@ (8003c7c <vInitPrioGroupValue+0xf8>)
 8003bf4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003bf6:	4b22      	ldr	r3, [pc, #136]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003bf8:	2207      	movs	r2, #7
 8003bfa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003bfc:	e009      	b.n	8003c12 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003bfe:	4b20      	ldr	r3, [pc, #128]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3b01      	subs	r3, #1
 8003c04:	4a1e      	ldr	r2, [pc, #120]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c06:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003c08:	78fb      	ldrb	r3, [r7, #3]
 8003c0a:	b2db      	uxtb	r3, r3
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003c12:	78fb      	ldrb	r3, [r7, #3]
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b80      	cmp	r3, #128	@ 0x80
 8003c1c:	d0ef      	beq.n	8003bfe <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003c1e:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f1c3 0307 	rsb	r3, r3, #7
 8003c26:	2b04      	cmp	r3, #4
 8003c28:	d00b      	beq.n	8003c42 <vInitPrioGroupValue+0xbe>
    __asm volatile
 8003c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c2e:	f383 8811 	msr	BASEPRI, r3
 8003c32:	f3bf 8f6f 	isb	sy
 8003c36:	f3bf 8f4f 	dsb	sy
 8003c3a:	60bb      	str	r3, [r7, #8]
}
 8003c3c:	bf00      	nop
 8003c3e:	bf00      	nop
 8003c40:	e7fd      	b.n	8003c3e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003c42:	4b0f      	ldr	r3, [pc, #60]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	021b      	lsls	r3, r3, #8
 8003c48:	4a0d      	ldr	r2, [pc, #52]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c4a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c54:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <vInitPrioGroupValue+0xfc>)
 8003c56:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	e000ed00 	.word	0xe000ed00
 8003c70:	410fc271 	.word	0x410fc271
 8003c74:	410fc270 	.word	0x410fc270
 8003c78:	e000e400 	.word	0xe000e400
 8003c7c:	200003f4 	.word	0x200003f4
 8003c80:	200003f8 	.word	0x200003f8

08003c84 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
    __asm volatile
 8003c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c8e:	f383 8811 	msr	BASEPRI, r3
 8003c92:	f3bf 8f6f 	isb	sy
 8003c96:	f3bf 8f4f 	dsb	sy
 8003c9a:	607b      	str	r3, [r7, #4]
}
 8003c9c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003c9e:	4b10      	ldr	r3, [pc, #64]	@ (8003ce0 <vPortEnterCritical+0x5c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8003ce0 <vPortEnterCritical+0x5c>)
 8003ca6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ce0 <vPortEnterCritical+0x5c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d110      	bne.n	8003cd2 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	@ (8003ce4 <vPortEnterCritical+0x60>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d00b      	beq.n	8003cd2 <vPortEnterCritical+0x4e>
    __asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	603b      	str	r3, [r7, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	bf00      	nop
 8003cd0:	e7fd      	b.n	8003cce <vPortEnterCritical+0x4a>
    }
}
 8003cd2:	bf00      	nop
 8003cd4:	370c      	adds	r7, #12
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	20000010 	.word	0x20000010
 8003ce4:	e000ed04 	.word	0xe000ed04

08003ce8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003cee:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <vPortExitCritical+0x50>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10b      	bne.n	8003d0e <vPortExitCritical+0x26>
    __asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	e7fd      	b.n	8003d0a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d38 <vPortExitCritical+0x50>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	4a08      	ldr	r2, [pc, #32]	@ (8003d38 <vPortExitCritical+0x50>)
 8003d16:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003d18:	4b07      	ldr	r3, [pc, #28]	@ (8003d38 <vPortExitCritical+0x50>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <vPortExitCritical+0x44>
 8003d20:	2300      	movs	r3, #0
 8003d22:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	f383 8811 	msr	BASEPRI, r3
}
 8003d2a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20000010 	.word	0x20000010
 8003d3c:	00000000 	.word	0x00000000

08003d40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003d40:	f3ef 8009 	mrs	r0, PSP
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	4b15      	ldr	r3, [pc, #84]	@ (8003da0 <pxCurrentTCBConst>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	f01e 0f10 	tst.w	lr, #16
 8003d50:	bf08      	it	eq
 8003d52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003d56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	6010      	str	r0, [r2, #0]
 8003d5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003d60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003d64:	f380 8811 	msr	BASEPRI, r0
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f7ff f998 	bl	80030a4 <vTaskSwitchContext>
 8003d74:	f04f 0000 	mov.w	r0, #0
 8003d78:	f380 8811 	msr	BASEPRI, r0
 8003d7c:	bc09      	pop	{r0, r3}
 8003d7e:	6819      	ldr	r1, [r3, #0]
 8003d80:	6808      	ldr	r0, [r1, #0]
 8003d82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d86:	f01e 0f10 	tst.w	lr, #16
 8003d8a:	bf08      	it	eq
 8003d8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003d90:	f380 8809 	msr	PSP, r0
 8003d94:	f3bf 8f6f 	isb	sy
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	f3af 8000 	nop.w

08003da0 <pxCurrentTCBConst>:
 8003da0:	20000090 	.word	0x20000090
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop

08003da8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
    __asm volatile
 8003dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db2:	f383 8811 	msr	BASEPRI, r3
 8003db6:	f3bf 8f6f 	isb	sy
 8003dba:	f3bf 8f4f 	dsb	sy
 8003dbe:	607b      	str	r3, [r7, #4]
}
 8003dc0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 8003dc2:	f002 f8d9 	bl	8005f78 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003dc6:	f7ff f84b 	bl	8002e60 <xTaskIncrementTick>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d006      	beq.n	8003dde <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003dd0:	f002 f930 	bl	8006034 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003dd4:	4b08      	ldr	r3, [pc, #32]	@ (8003df8 <SysTick_Handler+0x50>)
 8003dd6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	e001      	b.n	8003de2 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 8003dde:	f002 f90d 	bl	8005ffc <SEGGER_SYSVIEW_RecordExitISR>
 8003de2:	2300      	movs	r3, #0
 8003de4:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	f383 8811 	msr	BASEPRI, r3
}
 8003dec:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003e00:	4b0b      	ldr	r3, [pc, #44]	@ (8003e30 <vPortSetupTimerInterrupt+0x34>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003e06:	4b0b      	ldr	r3, [pc, #44]	@ (8003e34 <vPortSetupTimerInterrupt+0x38>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e38 <vPortSetupTimerInterrupt+0x3c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0a      	ldr	r2, [pc, #40]	@ (8003e3c <vPortSetupTimerInterrupt+0x40>)
 8003e12:	fba2 2303 	umull	r2, r3, r2, r3
 8003e16:	099b      	lsrs	r3, r3, #6
 8003e18:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <vPortSetupTimerInterrupt+0x44>)
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003e1e:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <vPortSetupTimerInterrupt+0x34>)
 8003e20:	2207      	movs	r2, #7
 8003e22:	601a      	str	r2, [r3, #0]
}
 8003e24:	bf00      	nop
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
 8003e2e:	bf00      	nop
 8003e30:	e000e010 	.word	0xe000e010
 8003e34:	e000e018 	.word	0xe000e018
 8003e38:	20000000 	.word	0x20000000
 8003e3c:	10624dd3 	.word	0x10624dd3
 8003e40:	e000e014 	.word	0xe000e014

08003e44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003e44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003e54 <vPortEnableVFP+0x10>
 8003e48:	6801      	ldr	r1, [r0, #0]
 8003e4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8003e4e:	6001      	str	r1, [r0, #0]
 8003e50:	4770      	bx	lr
 8003e52:	0000      	.short	0x0000
 8003e54:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop

08003e5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003e62:	f3ef 8305 	mrs	r3, IPSR
 8003e66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	2b0f      	cmp	r3, #15
 8003e6c:	d915      	bls.n	8003e9a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003e6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ed0 <vPortValidateInterruptPriority+0x74>)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	4413      	add	r3, r2
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003e78:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <vPortValidateInterruptPriority+0x78>)
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	7afa      	ldrb	r2, [r7, #11]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	d20b      	bcs.n	8003e9a <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 8003e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e86:	f383 8811 	msr	BASEPRI, r3
 8003e8a:	f3bf 8f6f 	isb	sy
 8003e8e:	f3bf 8f4f 	dsb	sy
 8003e92:	607b      	str	r3, [r7, #4]
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	e7fd      	b.n	8003e96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <vPortValidateInterruptPriority+0x7c>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8003edc <vPortValidateInterruptPriority+0x80>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d90b      	bls.n	8003ec2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 8003eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eae:	f383 8811 	msr	BASEPRI, r3
 8003eb2:	f3bf 8f6f 	isb	sy
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	603b      	str	r3, [r7, #0]
}
 8003ebc:	bf00      	nop
 8003ebe:	bf00      	nop
 8003ec0:	e7fd      	b.n	8003ebe <vPortValidateInterruptPriority+0x62>
    }
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	e000e3f0 	.word	0xe000e3f0
 8003ed4:	200003f4 	.word	0x200003f4
 8003ed8:	e000ed0c 	.word	0xe000ed0c
 8003edc:	200003f8 	.word	0x200003f8

08003ee0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b08e      	sub	sp, #56	@ 0x38
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003ee8:	2300      	movs	r3, #0
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d022      	beq.n	8003f38 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003ef2:	2308      	movs	r3, #8
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d81b      	bhi.n	8003f34 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 8003efc:	2208      	movs	r2, #8
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4413      	add	r3, r2
 8003f02:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d014      	beq.n	8003f38 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	f1c3 0308 	rsb	r3, r3, #8
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8003f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	687a      	ldr	r2, [r7, #4]
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d804      	bhi.n	8003f2e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f28:	4413      	add	r3, r2
 8003f2a:	607b      	str	r3, [r7, #4]
 8003f2c:	e004      	b.n	8003f38 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
 8003f32:	e001      	b.n	8003f38 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003f34:	2300      	movs	r3, #0
 8003f36:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003f38:	f7fe fe5c 	bl	8002bf4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8003f3c:	4b7a      	ldr	r3, [pc, #488]	@ (8004128 <pvPortMalloc+0x248>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003f44:	f000 f978 	bl	8004238 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f2c0 80d3 	blt.w	80040f6 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 80cf 	beq.w	80040f6 <pvPortMalloc+0x216>
 8003f58:	4b74      	ldr	r3, [pc, #464]	@ (800412c <pvPortMalloc+0x24c>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	f200 80c9 	bhi.w	80040f6 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003f64:	4b72      	ldr	r3, [pc, #456]	@ (8004130 <pvPortMalloc+0x250>)
 8003f66:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003f68:	4b71      	ldr	r3, [pc, #452]	@ (8004130 <pvPortMalloc+0x250>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f70:	4a70      	ldr	r2, [pc, #448]	@ (8004134 <pvPortMalloc+0x254>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d305      	bcc.n	8003f82 <pvPortMalloc+0xa2>
 8003f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f78:	4a6f      	ldr	r2, [pc, #444]	@ (8004138 <pvPortMalloc+0x258>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d801      	bhi.n	8003f82 <pvPortMalloc+0xa2>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e000      	b.n	8003f84 <pvPortMalloc+0xa4>
 8003f82:	2300      	movs	r3, #0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d129      	bne.n	8003fdc <pvPortMalloc+0xfc>
    __asm volatile
 8003f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	623b      	str	r3, [r7, #32]
}
 8003f9a:	bf00      	nop
 8003f9c:	bf00      	nop
 8003f9e:	e7fd      	b.n	8003f9c <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 8003fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 8003faa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fac:	4a61      	ldr	r2, [pc, #388]	@ (8004134 <pvPortMalloc+0x254>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d305      	bcc.n	8003fbe <pvPortMalloc+0xde>
 8003fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fb4:	4a60      	ldr	r2, [pc, #384]	@ (8004138 <pvPortMalloc+0x258>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d801      	bhi.n	8003fbe <pvPortMalloc+0xde>
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e000      	b.n	8003fc0 <pvPortMalloc+0xe0>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10b      	bne.n	8003fdc <pvPortMalloc+0xfc>
    __asm volatile
 8003fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc8:	f383 8811 	msr	BASEPRI, r3
 8003fcc:	f3bf 8f6f 	isb	sy
 8003fd0:	f3bf 8f4f 	dsb	sy
 8003fd4:	61fb      	str	r3, [r7, #28]
}
 8003fd6:	bf00      	nop
 8003fd8:	bf00      	nop
 8003fda:	e7fd      	b.n	8003fd8 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d903      	bls.n	8003fee <pvPortMalloc+0x10e>
 8003fe6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1d8      	bne.n	8003fa0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003fee:	4b4e      	ldr	r3, [pc, #312]	@ (8004128 <pvPortMalloc+0x248>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d07e      	beq.n	80040f6 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	4413      	add	r3, r2
 8004000:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8004002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004004:	4a4b      	ldr	r2, [pc, #300]	@ (8004134 <pvPortMalloc+0x254>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d305      	bcc.n	8004016 <pvPortMalloc+0x136>
 800400a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800400c:	4a4a      	ldr	r2, [pc, #296]	@ (8004138 <pvPortMalloc+0x258>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d801      	bhi.n	8004016 <pvPortMalloc+0x136>
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <pvPortMalloc+0x138>
 8004016:	2300      	movs	r3, #0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d10b      	bne.n	8004034 <pvPortMalloc+0x154>
    __asm volatile
 800401c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004020:	f383 8811 	msr	BASEPRI, r3
 8004024:	f3bf 8f6f 	isb	sy
 8004028:	f3bf 8f4f 	dsb	sy
 800402c:	61bb      	str	r3, [r7, #24]
}
 800402e:	bf00      	nop
 8004030:	bf00      	nop
 8004032:	e7fd      	b.n	8004030 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800403c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	429a      	cmp	r2, r3
 8004044:	d90b      	bls.n	800405e <pvPortMalloc+0x17e>
    __asm volatile
 8004046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404a:	f383 8811 	msr	BASEPRI, r3
 800404e:	f3bf 8f6f 	isb	sy
 8004052:	f3bf 8f4f 	dsb	sy
 8004056:	617b      	str	r3, [r7, #20]
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	e7fd      	b.n	800405a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	1ad2      	subs	r2, r2, r3
 8004066:	2308      	movs	r3, #8
 8004068:	005b      	lsls	r3, r3, #1
 800406a:	429a      	cmp	r2, r3
 800406c:	d924      	bls.n	80040b8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800406e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4413      	add	r3, r2
 8004074:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	f003 0307 	and.w	r3, r3, #7
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00b      	beq.n	8004098 <pvPortMalloc+0x1b8>
    __asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	613b      	str	r3, [r7, #16]
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004098:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800409a:	685a      	ldr	r2, [r3, #4]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1ad2      	subs	r2, r2, r3
 80040a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80040aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80040b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80040b6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040b8:	4b1c      	ldr	r3, [pc, #112]	@ (800412c <pvPortMalloc+0x24c>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	4a1a      	ldr	r2, [pc, #104]	@ (800412c <pvPortMalloc+0x24c>)
 80040c4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040c6:	4b19      	ldr	r3, [pc, #100]	@ (800412c <pvPortMalloc+0x24c>)
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	4b1c      	ldr	r3, [pc, #112]	@ (800413c <pvPortMalloc+0x25c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	d203      	bcs.n	80040da <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80040d2:	4b16      	ldr	r3, [pc, #88]	@ (800412c <pvPortMalloc+0x24c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <pvPortMalloc+0x25c>)
 80040d8:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80040da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80040e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e4:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80040e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80040ec:	4b14      	ldr	r3, [pc, #80]	@ (8004140 <pvPortMalloc+0x260>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	3301      	adds	r3, #1
 80040f2:	4a13      	ldr	r2, [pc, #76]	@ (8004140 <pvPortMalloc+0x260>)
 80040f4:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80040f6:	f7fe fd8b 	bl	8002c10 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80040fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80040fc:	f003 0307 	and.w	r3, r3, #7
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <pvPortMalloc+0x23c>
    __asm volatile
 8004104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	60fb      	str	r3, [r7, #12]
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	e7fd      	b.n	8004118 <pvPortMalloc+0x238>
    return pvReturn;
 800411c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800411e:	4618      	mov	r0, r3
 8004120:	3738      	adds	r7, #56	@ 0x38
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20019404 	.word	0x20019404
 800412c:	20019408 	.word	0x20019408
 8004130:	200193fc 	.word	0x200193fc
 8004134:	200003fc 	.word	0x200003fc
 8004138:	200193fb 	.word	0x200193fb
 800413c:	2001940c 	.word	0x2001940c
 8004140:	20019410 	.word	0x20019410

08004144 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b088      	sub	sp, #32
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d064      	beq.n	8004220 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004156:	2308      	movs	r3, #8
 8004158:	425b      	negs	r3, r3
 800415a:	69fa      	ldr	r2, [r7, #28]
 800415c:	4413      	add	r3, r2
 800415e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	4a30      	ldr	r2, [pc, #192]	@ (8004228 <vPortFree+0xe4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d305      	bcc.n	8004178 <vPortFree+0x34>
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	4a2f      	ldr	r2, [pc, #188]	@ (800422c <vPortFree+0xe8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d801      	bhi.n	8004178 <vPortFree+0x34>
 8004174:	2301      	movs	r3, #1
 8004176:	e000      	b.n	800417a <vPortFree+0x36>
 8004178:	2300      	movs	r3, #0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10b      	bne.n	8004196 <vPortFree+0x52>
    __asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	617b      	str	r3, [r7, #20]
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	e7fd      	b.n	8004192 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004196:	69bb      	ldr	r3, [r7, #24]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	2b00      	cmp	r3, #0
 800419c:	db0b      	blt.n	80041b6 <vPortFree+0x72>
    __asm volatile
 800419e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a2:	f383 8811 	msr	BASEPRI, r3
 80041a6:	f3bf 8f6f 	isb	sy
 80041aa:	f3bf 8f4f 	dsb	sy
 80041ae:	613b      	str	r3, [r7, #16]
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	e7fd      	b.n	80041b2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00b      	beq.n	80041d6 <vPortFree+0x92>
    __asm volatile
 80041be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c2:	f383 8811 	msr	BASEPRI, r3
 80041c6:	f3bf 8f6f 	isb	sy
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	60fb      	str	r3, [r7, #12]
}
 80041d0:	bf00      	nop
 80041d2:	bf00      	nop
 80041d4:	e7fd      	b.n	80041d2 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	0fdb      	lsrs	r3, r3, #31
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d01c      	beq.n	8004220 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80041e6:	69bb      	ldr	r3, [r7, #24]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d118      	bne.n	8004220 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 80041fa:	f7fe fcfb 	bl	8002bf4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	4b0b      	ldr	r3, [pc, #44]	@ (8004230 <vPortFree+0xec>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4413      	add	r3, r2
 8004208:	4a09      	ldr	r2, [pc, #36]	@ (8004230 <vPortFree+0xec>)
 800420a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800420c:	69b8      	ldr	r0, [r7, #24]
 800420e:	f000 f86d 	bl	80042ec <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004212:	4b08      	ldr	r3, [pc, #32]	@ (8004234 <vPortFree+0xf0>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	4a06      	ldr	r2, [pc, #24]	@ (8004234 <vPortFree+0xf0>)
 800421a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800421c:	f7fe fcf8 	bl	8002c10 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004220:	bf00      	nop
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	200003fc 	.word	0x200003fc
 800422c:	200193fb 	.word	0x200193fb
 8004230:	20019408 	.word	0x20019408
 8004234:	20019414 	.word	0x20019414

08004238 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800423e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8004242:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004244:	4b24      	ldr	r3, [pc, #144]	@ (80042d8 <prvHeapInit+0xa0>)
 8004246:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00c      	beq.n	800426c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	3307      	adds	r3, #7
 8004256:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0307 	bic.w	r3, r3, #7
 800425e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	4a1c      	ldr	r2, [pc, #112]	@ (80042d8 <prvHeapInit+0xa0>)
 8004268:	4413      	add	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <prvHeapInit+0xa4>)
 8004270:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004272:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <prvHeapInit+0xa4>)
 8004274:	2200      	movs	r2, #0
 8004276:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4413      	add	r3, r2
 800427e:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8004280:	2208      	movs	r2, #8
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f023 0307 	bic.w	r3, r3, #7
 800428e:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a13      	ldr	r2, [pc, #76]	@ (80042e0 <prvHeapInit+0xa8>)
 8004294:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004296:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <prvHeapInit+0xa8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2200      	movs	r2, #0
 800429c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 800429e:	4b10      	ldr	r3, [pc, #64]	@ (80042e0 <prvHeapInit+0xa8>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80042b4:	4b0a      	ldr	r3, [pc, #40]	@ (80042e0 <prvHeapInit+0xa8>)
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	4a08      	ldr	r2, [pc, #32]	@ (80042e4 <prvHeapInit+0xac>)
 80042c2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	4a07      	ldr	r2, [pc, #28]	@ (80042e8 <prvHeapInit+0xb0>)
 80042ca:	6013      	str	r3, [r2, #0]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	200003fc 	.word	0x200003fc
 80042dc:	200193fc 	.word	0x200193fc
 80042e0:	20019404 	.word	0x20019404
 80042e4:	2001940c 	.word	0x2001940c
 80042e8:	20019408 	.word	0x20019408

080042ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80042f4:	4b36      	ldr	r3, [pc, #216]	@ (80043d0 <prvInsertBlockIntoFreeList+0xe4>)
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	e002      	b.n	8004300 <prvInsertBlockIntoFreeList+0x14>
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	429a      	cmp	r2, r3
 8004308:	d8f7      	bhi.n	80042fa <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	4a30      	ldr	r2, [pc, #192]	@ (80043d0 <prvInsertBlockIntoFreeList+0xe4>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d018      	beq.n	8004344 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	4a2f      	ldr	r2, [pc, #188]	@ (80043d4 <prvInsertBlockIntoFreeList+0xe8>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d305      	bcc.n	8004326 <prvInsertBlockIntoFreeList+0x3a>
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	4a2e      	ldr	r2, [pc, #184]	@ (80043d8 <prvInsertBlockIntoFreeList+0xec>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d801      	bhi.n	8004326 <prvInsertBlockIntoFreeList+0x3a>
 8004322:	2301      	movs	r3, #1
 8004324:	e000      	b.n	8004328 <prvInsertBlockIntoFreeList+0x3c>
 8004326:	2300      	movs	r3, #0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d10b      	bne.n	8004344 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	d108      	bne.n	8004368 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	441a      	add	r2, r3
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	441a      	add	r2, r3
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	429a      	cmp	r2, r3
 800437a:	d118      	bne.n	80043ae <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	4b16      	ldr	r3, [pc, #88]	@ (80043dc <prvInsertBlockIntoFreeList+0xf0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d00d      	beq.n	80043a4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	685a      	ldr	r2, [r3, #4]
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	441a      	add	r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	e008      	b.n	80043b6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80043a4:	4b0d      	ldr	r3, [pc, #52]	@ (80043dc <prvInsertBlockIntoFreeList+0xf0>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	e003      	b.n	80043b6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d002      	beq.n	80043c4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043c4:	bf00      	nop
 80043c6:	371c      	adds	r7, #28
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	200193fc 	.word	0x200193fc
 80043d4:	200003fc 	.word	0x200003fc
 80043d8:	200193fb 	.word	0x200193fb
 80043dc:	20019404 	.word	0x20019404

080043e0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80043e4:	4803      	ldr	r0, [pc, #12]	@ (80043f4 <_cbSendSystemDesc+0x14>)
 80043e6:	f001 fd71 	bl	8005ecc <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80043ea:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <_cbSendSystemDesc+0x18>)
 80043ec:	f001 fd6e 	bl	8005ecc <SEGGER_SYSVIEW_SendSysDesc>
}
 80043f0:	bf00      	nop
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	08006828 	.word	0x08006828
 80043f8:	08006864 	.word	0x08006864

080043fc <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004400:	4b06      	ldr	r3, [pc, #24]	@ (800441c <SEGGER_SYSVIEW_Conf+0x20>)
 8004402:	6818      	ldr	r0, [r3, #0]
 8004404:	4b05      	ldr	r3, [pc, #20]	@ (800441c <SEGGER_SYSVIEW_Conf+0x20>)
 8004406:	6819      	ldr	r1, [r3, #0]
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <SEGGER_SYSVIEW_Conf+0x24>)
 800440a:	4a06      	ldr	r2, [pc, #24]	@ (8004424 <SEGGER_SYSVIEW_Conf+0x28>)
 800440c:	f001 f9e4 	bl	80057d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004410:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004414:	f001 fa24 	bl	8005860 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004418:	bf00      	nop
 800441a:	bd80      	pop	{r7, pc}
 800441c:	20000000 	.word	0x20000000
 8004420:	080043e1 	.word	0x080043e1
 8004424:	08006900 	.word	0x08006900

08004428 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800442a:	b085      	sub	sp, #20
 800442c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800442e:	2300      	movs	r3, #0
 8004430:	607b      	str	r3, [r7, #4]
 8004432:	e033      	b.n	800449c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004434:	491e      	ldr	r1, [pc, #120]	@ (80044b0 <_cbSendTaskList+0x88>)
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	6818      	ldr	r0, [r3, #0]
 8004444:	491a      	ldr	r1, [pc, #104]	@ (80044b0 <_cbSendTaskList+0x88>)
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3304      	adds	r3, #4
 8004454:	6819      	ldr	r1, [r3, #0]
 8004456:	4c16      	ldr	r4, [pc, #88]	@ (80044b0 <_cbSendTaskList+0x88>)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4613      	mov	r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	4423      	add	r3, r4
 8004464:	3308      	adds	r3, #8
 8004466:	681c      	ldr	r4, [r3, #0]
 8004468:	4d11      	ldr	r5, [pc, #68]	@ (80044b0 <_cbSendTaskList+0x88>)
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	4613      	mov	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	442b      	add	r3, r5
 8004476:	330c      	adds	r3, #12
 8004478:	681d      	ldr	r5, [r3, #0]
 800447a:	4e0d      	ldr	r6, [pc, #52]	@ (80044b0 <_cbSendTaskList+0x88>)
 800447c:	687a      	ldr	r2, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	4433      	add	r3, r6
 8004488:	3310      	adds	r3, #16
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	462b      	mov	r3, r5
 8004490:	4622      	mov	r2, r4
 8004492:	f000 f979 	bl	8004788 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3301      	adds	r3, #1
 800449a:	607b      	str	r3, [r7, #4]
 800449c:	4b05      	ldr	r3, [pc, #20]	@ (80044b4 <_cbSendTaskList+0x8c>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d3c6      	bcc.n	8004434 <_cbSendTaskList+0xc>
  }
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044b0:	20019418 	.word	0x20019418
 80044b4:	200194b8 	.word	0x200194b8

080044b8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80044b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044bc:	b082      	sub	sp, #8
 80044be:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80044c0:	f7fe fcb8 	bl	8002e34 <xTaskGetTickCountFromISR>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2200      	movs	r2, #0
 80044c8:	469a      	mov	sl, r3
 80044ca:	4693      	mov	fp, r2
 80044cc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80044d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	f04f 0a00 	mov.w	sl, #0
 80044dc:	f04f 0b00 	mov.w	fp, #0
 80044e0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80044e4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80044e8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80044ec:	4652      	mov	r2, sl
 80044ee:	465b      	mov	r3, fp
 80044f0:	1a14      	subs	r4, r2, r0
 80044f2:	eb63 0501 	sbc.w	r5, r3, r1
 80044f6:	f04f 0200 	mov.w	r2, #0
 80044fa:	f04f 0300 	mov.w	r3, #0
 80044fe:	00ab      	lsls	r3, r5, #2
 8004500:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004504:	00a2      	lsls	r2, r4, #2
 8004506:	4614      	mov	r4, r2
 8004508:	461d      	mov	r5, r3
 800450a:	eb14 0800 	adds.w	r8, r4, r0
 800450e:	eb45 0901 	adc.w	r9, r5, r1
 8004512:	f04f 0200 	mov.w	r2, #0
 8004516:	f04f 0300 	mov.w	r3, #0
 800451a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800451e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004522:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004526:	4690      	mov	r8, r2
 8004528:	4699      	mov	r9, r3
 800452a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800452e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004532:	4610      	mov	r0, r2
 8004534:	4619      	mov	r1, r3
 8004536:	3708      	adds	r7, #8
 8004538:	46bd      	mov	sp, r7
 800453a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004540 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af02      	add	r7, sp, #8
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
 800454c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800454e:	2205      	movs	r2, #5
 8004550:	492b      	ldr	r1, [pc, #172]	@ (8004600 <SYSVIEW_AddTask+0xc0>)
 8004552:	68b8      	ldr	r0, [r7, #8]
 8004554:	f002 f8c6 	bl	80066e4 <memcmp>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d04b      	beq.n	80045f6 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800455e:	4b29      	ldr	r3, [pc, #164]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	2b07      	cmp	r3, #7
 8004564:	d903      	bls.n	800456e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004566:	4828      	ldr	r0, [pc, #160]	@ (8004608 <SYSVIEW_AddTask+0xc8>)
 8004568:	f002 f860 	bl	800662c <SEGGER_SYSVIEW_Warn>
    return;
 800456c:	e044      	b.n	80045f8 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800456e:	4b25      	ldr	r3, [pc, #148]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4926      	ldr	r1, [pc, #152]	@ (800460c <SYSVIEW_AddTask+0xcc>)
 8004574:	4613      	mov	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	4413      	add	r3, r2
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004582:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	4921      	ldr	r1, [pc, #132]	@ (800460c <SYSVIEW_AddTask+0xcc>)
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	3304      	adds	r3, #4
 8004594:	68ba      	ldr	r2, [r7, #8]
 8004596:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004598:	4b1a      	ldr	r3, [pc, #104]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	491b      	ldr	r1, [pc, #108]	@ (800460c <SYSVIEW_AddTask+0xcc>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	3308      	adds	r3, #8
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045ae:	4b15      	ldr	r3, [pc, #84]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4916      	ldr	r1, [pc, #88]	@ (800460c <SYSVIEW_AddTask+0xcc>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	330c      	adds	r3, #12
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	4910      	ldr	r1, [pc, #64]	@ (800460c <SYSVIEW_AddTask+0xcc>)
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3310      	adds	r3, #16
 80045d6:	69ba      	ldr	r2, [r7, #24]
 80045d8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80045da:	4b0a      	ldr	r3, [pc, #40]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	4a08      	ldr	r2, [pc, #32]	@ (8004604 <SYSVIEW_AddTask+0xc4>)
 80045e2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f8ca 	bl	8004788 <SYSVIEW_SendTaskInfo>
 80045f4:	e000      	b.n	80045f8 <SYSVIEW_AddTask+0xb8>
    return;
 80045f6:	bf00      	nop

}
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	08006874 	.word	0x08006874
 8004604:	200194b8 	.word	0x200194b8
 8004608:	0800687c 	.word	0x0800687c
 800460c:	20019418 	.word	0x20019418

08004610 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004618:	4b59      	ldr	r3, [pc, #356]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 80ab 	beq.w	8004778 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	e00d      	b.n	8004644 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004628:	4956      	ldr	r1, [pc, #344]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 800462a:	68fa      	ldr	r2, [r7, #12]
 800462c:	4613      	mov	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	687a      	ldr	r2, [r7, #4]
 800463a:	429a      	cmp	r2, r3
 800463c:	d008      	beq.n	8004650 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	4b4e      	ldr	r3, [pc, #312]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68fa      	ldr	r2, [r7, #12]
 800464a:	429a      	cmp	r2, r3
 800464c:	d3ec      	bcc.n	8004628 <SYSVIEW_DeleteTask+0x18>
 800464e:	e000      	b.n	8004652 <SYSVIEW_DeleteTask+0x42>
      break;
 8004650:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004652:	4b4b      	ldr	r3, [pc, #300]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	3b01      	subs	r3, #1
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	429a      	cmp	r2, r3
 800465c:	d111      	bne.n	8004682 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a46      	ldr	r2, [pc, #280]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 800466a:	4413      	add	r3, r2
 800466c:	2214      	movs	r2, #20
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f002 f847 	bl	8006704 <memset>
    _NumTasks--;
 8004676:	4b42      	ldr	r3, [pc, #264]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a40      	ldr	r2, [pc, #256]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 800467e:	6013      	str	r3, [r2, #0]
 8004680:	e07b      	b.n	800477a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004682:	4b3f      	ldr	r3, [pc, #252]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	429a      	cmp	r2, r3
 800468a:	d276      	bcs.n	800477a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800468c:	4b3c      	ldr	r3, [pc, #240]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	1e5a      	subs	r2, r3, #1
 8004692:	493c      	ldr	r1, [pc, #240]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004694:	4613      	mov	r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	6819      	ldr	r1, [r3, #0]
 80046a0:	4838      	ldr	r0, [pc, #224]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	4613      	mov	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	4413      	add	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4403      	add	r3, r0
 80046ae:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80046b0:	4b33      	ldr	r3, [pc, #204]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	1e5a      	subs	r2, r3, #1
 80046b6:	4933      	ldr	r1, [pc, #204]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	3304      	adds	r3, #4
 80046c4:	6819      	ldr	r1, [r3, #0]
 80046c6:	482f      	ldr	r0, [pc, #188]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	4403      	add	r3, r0
 80046d4:	3304      	adds	r3, #4
 80046d6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80046d8:	4b29      	ldr	r3, [pc, #164]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	1e5a      	subs	r2, r3, #1
 80046de:	4929      	ldr	r1, [pc, #164]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 80046e0:	4613      	mov	r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	3308      	adds	r3, #8
 80046ec:	6819      	ldr	r1, [r3, #0]
 80046ee:	4825      	ldr	r0, [pc, #148]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4403      	add	r3, r0
 80046fc:	3308      	adds	r3, #8
 80046fe:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004700:	4b1f      	ldr	r3, [pc, #124]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	1e5a      	subs	r2, r3, #1
 8004706:	491f      	ldr	r1, [pc, #124]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004708:	4613      	mov	r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	4413      	add	r3, r2
 800470e:	009b      	lsls	r3, r3, #2
 8004710:	440b      	add	r3, r1
 8004712:	330c      	adds	r3, #12
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	481b      	ldr	r0, [pc, #108]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4403      	add	r3, r0
 8004724:	330c      	adds	r3, #12
 8004726:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004728:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	1e5a      	subs	r2, r3, #1
 800472e:	4915      	ldr	r1, [pc, #84]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004730:	4613      	mov	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	3310      	adds	r3, #16
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	4811      	ldr	r0, [pc, #68]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	4613      	mov	r3, r2
 8004744:	009b      	lsls	r3, r3, #2
 8004746:	4413      	add	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4403      	add	r3, r0
 800474c:	3310      	adds	r3, #16
 800474e:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004750:	4b0b      	ldr	r3, [pc, #44]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	1e5a      	subs	r2, r3, #1
 8004756:	4613      	mov	r3, r2
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <SYSVIEW_DeleteTask+0x174>)
 8004760:	4413      	add	r3, r2
 8004762:	2214      	movs	r2, #20
 8004764:	2100      	movs	r1, #0
 8004766:	4618      	mov	r0, r3
 8004768:	f001 ffcc 	bl	8006704 <memset>
    _NumTasks--;
 800476c:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	4a03      	ldr	r2, [pc, #12]	@ (8004780 <SYSVIEW_DeleteTask+0x170>)
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	e000      	b.n	800477a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004778:	bf00      	nop
  }
}
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200194b8 	.word	0x200194b8
 8004784:	20019418 	.word	0x20019418

08004788 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af00      	add	r7, sp, #0
 800478e:	60f8      	str	r0, [r7, #12]
 8004790:	60b9      	str	r1, [r7, #8]
 8004792:	607a      	str	r2, [r7, #4]
 8004794:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004796:	f107 0310 	add.w	r3, r7, #16
 800479a:	2218      	movs	r2, #24
 800479c:	2100      	movs	r1, #0
 800479e:	4618      	mov	r0, r3
 80047a0:	f001 ffb0 	bl	8006704 <memset>
  TaskInfo.TaskID     = TaskID;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 80047b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047b6:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80047b8:	f107 0310 	add.w	r3, r7, #16
 80047bc:	4618      	mov	r0, r3
 80047be:	f001 fa8d 	bl	8005cdc <SEGGER_SYSVIEW_SendTaskInfo>
}
 80047c2:	bf00      	nop
 80047c4:	3728      	adds	r7, #40	@ 0x28
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
	...

080047cc <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80047d2:	4b26      	ldr	r3, [pc, #152]	@ (800486c <_DoInit+0xa0>)
 80047d4:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80047d6:	22a8      	movs	r2, #168	@ 0xa8
 80047d8:	2100      	movs	r1, #0
 80047da:	6838      	ldr	r0, [r7, #0]
 80047dc:	f001 ff92 	bl	8006704 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2203      	movs	r2, #3
 80047e4:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2203      	movs	r2, #3
 80047ea:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4a20      	ldr	r2, [pc, #128]	@ (8004870 <_DoInit+0xa4>)
 80047f0:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	4a1f      	ldr	r2, [pc, #124]	@ (8004874 <_DoInit+0xa8>)
 80047f6:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80047fe:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2200      	movs	r2, #0
 8004804:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2200      	movs	r2, #0
 800480a:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	2200      	movs	r2, #0
 8004810:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	4a16      	ldr	r2, [pc, #88]	@ (8004870 <_DoInit+0xa4>)
 8004816:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	4a17      	ldr	r2, [pc, #92]	@ (8004878 <_DoInit+0xac>)
 800481c:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2210      	movs	r2, #16
 8004822:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	2200      	movs	r2, #0
 8004828:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2200      	movs	r2, #0
 800482e:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2200      	movs	r2, #0
 8004834:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004836:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800483a:	2300      	movs	r3, #0
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	e00c      	b.n	800485a <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f1c3 030f 	rsb	r3, r3, #15
 8004846:	4a0d      	ldr	r2, [pc, #52]	@ (800487c <_DoInit+0xb0>)
 8004848:	5cd1      	ldrb	r1, [r2, r3]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4413      	add	r3, r2
 8004850:	460a      	mov	r2, r1
 8004852:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3301      	adds	r3, #1
 8004858:	607b      	str	r3, [r7, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2b0f      	cmp	r3, #15
 800485e:	d9ef      	bls.n	8004840 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8004860:	f3bf 8f5f 	dmb	sy
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	200194bc 	.word	0x200194bc
 8004870:	080068cc 	.word	0x080068cc
 8004874:	20019564 	.word	0x20019564
 8004878:	2001b564 	.word	0x2001b564
 800487c:	08006908 	.word	0x08006908

08004880 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004880:	b580      	push	{r7, lr}
 8004882:	b08c      	sub	sp, #48	@ 0x30
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800488c:	4b3e      	ldr	r3, [pc, #248]	@ (8004988 <SEGGER_RTT_ReadNoLock+0x108>)
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b53      	cmp	r3, #83	@ 0x53
 8004898:	d001      	beq.n	800489e <SEGGER_RTT_ReadNoLock+0x1e>
 800489a:	f7ff ff97 	bl	80047cc <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800489e:	68fa      	ldr	r2, [r7, #12]
 80048a0:	4613      	mov	r3, r2
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4413      	add	r3, r2
 80048a6:	00db      	lsls	r3, r3, #3
 80048a8:	3360      	adds	r3, #96	@ 0x60
 80048aa:	4a37      	ldr	r2, [pc, #220]	@ (8004988 <SEGGER_RTT_ReadNoLock+0x108>)
 80048ac:	4413      	add	r3, r2
 80048ae:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80048c0:	2300      	movs	r3, #0
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80048c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	429a      	cmp	r2, r3
 80048ca:	d92b      	bls.n	8004924 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	689a      	ldr	r2, [r3, #8]
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4293      	cmp	r3, r2
 80048dc:	bf28      	it	cs
 80048de:	4613      	movcs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e8:	4413      	add	r3, r2
 80048ea:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	6939      	ldr	r1, [r7, #16]
 80048f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048f2:	f001 ff33 	bl	800675c <memcpy>
    NumBytesRead += NumBytesRem;
 80048f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	4413      	add	r3, r2
 80048fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80048fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	4413      	add	r3, r2
 8004904:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800490e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	4413      	add	r3, r2
 8004914:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800491c:	429a      	cmp	r2, r3
 800491e:	d101      	bne.n	8004924 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004920:	2300      	movs	r3, #0
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4293      	cmp	r3, r2
 8004932:	bf28      	it	cs
 8004934:	4613      	movcs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d019      	beq.n	8004972 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	4413      	add	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004948:	697a      	ldr	r2, [r7, #20]
 800494a:	6939      	ldr	r1, [r7, #16]
 800494c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800494e:	f001 ff05 	bl	800675c <memcpy>
    NumBytesRead += NumBytesRem;
 8004952:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	4413      	add	r3, r2
 8004958:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800495a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	4413      	add	r3, r2
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800496a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	4413      	add	r3, r2
 8004970:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800497c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800497e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004980:	4618      	mov	r0, r3
 8004982:	3730      	adds	r7, #48	@ 0x30
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	200194bc 	.word	0x200194bc

0800498c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800499a:	4b3d      	ldr	r3, [pc, #244]	@ (8004a90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800499c:	61bb      	str	r3, [r7, #24]
 800499e:	69bb      	ldr	r3, [r7, #24]
 80049a0:	781b      	ldrb	r3, [r3, #0]
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b53      	cmp	r3, #83	@ 0x53
 80049a6:	d001      	beq.n	80049ac <SEGGER_RTT_AllocUpBuffer+0x20>
 80049a8:	f7ff ff10 	bl	80047cc <_DoInit>
  SEGGER_RTT_LOCK();
 80049ac:	f3ef 8311 	mrs	r3, BASEPRI
 80049b0:	f04f 0120 	mov.w	r1, #32
 80049b4:	f381 8811 	msr	BASEPRI, r1
 80049b8:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80049ba:	4b35      	ldr	r3, [pc, #212]	@ (8004a90 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80049bc:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80049c2:	6939      	ldr	r1, [r7, #16]
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	4613      	mov	r3, r2
 80049ca:	005b      	lsls	r3, r3, #1
 80049cc:	4413      	add	r3, r2
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	440b      	add	r3, r1
 80049d2:	3304      	adds	r3, #4
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d008      	beq.n	80049ec <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	69fa      	ldr	r2, [r7, #28]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	dbeb      	blt.n	80049c2 <SEGGER_RTT_AllocUpBuffer+0x36>
 80049ea:	e000      	b.n	80049ee <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80049ec:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	69fa      	ldr	r2, [r7, #28]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	da3f      	bge.n	8004a78 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80049f8:	6939      	ldr	r1, [r7, #16]
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	1c5a      	adds	r2, r3, #1
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	440b      	add	r3, r1
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004a0c:	6939      	ldr	r1, [r7, #16]
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	1c5a      	adds	r2, r3, #1
 8004a12:	4613      	mov	r3, r2
 8004a14:	005b      	lsls	r3, r3, #1
 8004a16:	4413      	add	r3, r2
 8004a18:	00db      	lsls	r3, r3, #3
 8004a1a:	440b      	add	r3, r1
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004a22:	6939      	ldr	r1, [r7, #16]
 8004a24:	69fa      	ldr	r2, [r7, #28]
 8004a26:	4613      	mov	r3, r2
 8004a28:	005b      	lsls	r3, r3, #1
 8004a2a:	4413      	add	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	440b      	add	r3, r1
 8004a30:	3320      	adds	r3, #32
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004a36:	6939      	ldr	r1, [r7, #16]
 8004a38:	69fa      	ldr	r2, [r7, #28]
 8004a3a:	4613      	mov	r3, r2
 8004a3c:	005b      	lsls	r3, r3, #1
 8004a3e:	4413      	add	r3, r2
 8004a40:	00db      	lsls	r3, r3, #3
 8004a42:	440b      	add	r3, r1
 8004a44:	3328      	adds	r3, #40	@ 0x28
 8004a46:	2200      	movs	r2, #0
 8004a48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004a4a:	6939      	ldr	r1, [r7, #16]
 8004a4c:	69fa      	ldr	r2, [r7, #28]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	4413      	add	r3, r2
 8004a54:	00db      	lsls	r3, r3, #3
 8004a56:	440b      	add	r3, r1
 8004a58:	3324      	adds	r3, #36	@ 0x24
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004a5e:	6939      	ldr	r1, [r7, #16]
 8004a60:	69fa      	ldr	r2, [r7, #28]
 8004a62:	4613      	mov	r3, r2
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	4413      	add	r3, r2
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	440b      	add	r3, r1
 8004a6c:	332c      	adds	r3, #44	@ 0x2c
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004a72:	f3bf 8f5f 	dmb	sy
 8004a76:	e002      	b.n	8004a7e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004a78:	f04f 33ff 	mov.w	r3, #4294967295
 8004a7c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004a7e:	697b      	ldr	r3, [r7, #20]
 8004a80:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004a84:	69fb      	ldr	r3, [r7, #28]
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3720      	adds	r7, #32
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	200194bc 	.word	0x200194bc

08004a94 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b08a      	sub	sp, #40	@ 0x28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8004aa2:	4b21      	ldr	r3, [pc, #132]	@ (8004b28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b2db      	uxtb	r3, r3
 8004aac:	2b53      	cmp	r3, #83	@ 0x53
 8004aae:	d001      	beq.n	8004ab4 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004ab0:	f7ff fe8c 	bl	80047cc <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b28 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8004ab6:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d82c      	bhi.n	8004b18 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004abe:	f3ef 8311 	mrs	r3, BASEPRI
 8004ac2:	f04f 0120 	mov.w	r1, #32
 8004ac6:	f381 8811 	msr	BASEPRI, r1
 8004aca:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	005b      	lsls	r3, r3, #1
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	3360      	adds	r3, #96	@ 0x60
 8004ad8:	69fa      	ldr	r2, [r7, #28]
 8004ada:	4413      	add	r3, r2
 8004adc:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00e      	beq.n	8004b02 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	683a      	ldr	r2, [r7, #0]
 8004af4:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2200      	movs	r2, #0
 8004afa:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	2200      	movs	r2, #0
 8004b00:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b06:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b08:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004b0c:	69bb      	ldr	r3, [r7, #24]
 8004b0e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b16:	e002      	b.n	8004b1e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8004b18:	f04f 33ff 	mov.w	r3, #4294967295
 8004b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8004b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3728      	adds	r7, #40	@ 0x28
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	200194bc 	.word	0x200194bc

08004b2c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d105      	bne.n	8004b4a <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	60fa      	str	r2, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e022      	b.n	8004b90 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	60fa      	str	r2, [r7, #12]
 8004b54:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b80      	cmp	r3, #128	@ 0x80
 8004b5a:	d90a      	bls.n	8004b72 <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004b5c:	2380      	movs	r3, #128	@ 0x80
 8004b5e:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004b60:	e007      	b.n	8004b72 <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	1c53      	adds	r3, r2, #1
 8004b66:	60bb      	str	r3, [r7, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	1c59      	adds	r1, r3, #1
 8004b6c:	60f9      	str	r1, [r7, #12]
 8004b6e:	7812      	ldrb	r2, [r2, #0]
 8004b70:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1e5a      	subs	r2, r3, #1
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d003      	beq.n	8004b84 <_EncodeStr+0x58>
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d1ee      	bne.n	8004b62 <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 8004b84:	68ba      	ldr	r2, [r7, #8]
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	1ad3      	subs	r3, r2, r3
 8004b8a:	b2da      	uxtb	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	3307      	adds	r3, #7
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	370c      	adds	r7, #12
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004bbe:	4b34      	ldr	r3, [pc, #208]	@ (8004c90 <_HandleIncomingPacket+0xd8>)
 8004bc0:	7e1b      	ldrb	r3, [r3, #24]
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	1cfb      	adds	r3, r7, #3
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	4619      	mov	r1, r3
 8004bca:	f7ff fe59 	bl	8004880 <SEGGER_RTT_ReadNoLock>
 8004bce:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d057      	beq.n	8004c86 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	2b80      	cmp	r3, #128	@ 0x80
 8004bda:	d031      	beq.n	8004c40 <_HandleIncomingPacket+0x88>
 8004bdc:	2b80      	cmp	r3, #128	@ 0x80
 8004bde:	dc40      	bgt.n	8004c62 <_HandleIncomingPacket+0xaa>
 8004be0:	2b07      	cmp	r3, #7
 8004be2:	dc15      	bgt.n	8004c10 <_HandleIncomingPacket+0x58>
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	dd3c      	ble.n	8004c62 <_HandleIncomingPacket+0xaa>
 8004be8:	3b01      	subs	r3, #1
 8004bea:	2b06      	cmp	r3, #6
 8004bec:	d839      	bhi.n	8004c62 <_HandleIncomingPacket+0xaa>
 8004bee:	a201      	add	r2, pc, #4	@ (adr r2, 8004bf4 <_HandleIncomingPacket+0x3c>)
 8004bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf4:	08004c17 	.word	0x08004c17
 8004bf8:	08004c1d 	.word	0x08004c1d
 8004bfc:	08004c23 	.word	0x08004c23
 8004c00:	08004c29 	.word	0x08004c29
 8004c04:	08004c2f 	.word	0x08004c2f
 8004c08:	08004c35 	.word	0x08004c35
 8004c0c:	08004c3b 	.word	0x08004c3b
 8004c10:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c12:	d033      	beq.n	8004c7c <_HandleIncomingPacket+0xc4>
 8004c14:	e025      	b.n	8004c62 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004c16:	f000 fee7 	bl	80059e8 <SEGGER_SYSVIEW_Start>
      break;
 8004c1a:	e034      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004c1c:	f000 ff9e 	bl	8005b5c <SEGGER_SYSVIEW_Stop>
      break;
 8004c20:	e031      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004c22:	f001 f977 	bl	8005f14 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004c26:	e02e      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004c28:	f001 f93c 	bl	8005ea4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004c2c:	e02b      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004c2e:	f000 ffbb 	bl	8005ba8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004c32:	e028      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004c34:	f001 fca8 	bl	8006588 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004c38:	e025      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004c3a:	f001 fc87 	bl	800654c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004c3e:	e022      	b.n	8004c86 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c40:	4b13      	ldr	r3, [pc, #76]	@ (8004c90 <_HandleIncomingPacket+0xd8>)
 8004c42:	7e1b      	ldrb	r3, [r3, #24]
 8004c44:	4618      	mov	r0, r3
 8004c46:	1cfb      	adds	r3, r7, #3
 8004c48:	2201      	movs	r2, #1
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	f7ff fe18 	bl	8004880 <SEGGER_RTT_ReadNoLock>
 8004c50:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d013      	beq.n	8004c80 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004c58:	78fb      	ldrb	r3, [r7, #3]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f001 fbec 	bl	8006438 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004c60:	e00e      	b.n	8004c80 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004c62:	78fb      	ldrb	r3, [r7, #3]
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	da0c      	bge.n	8004c84 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004c6a:	4b09      	ldr	r3, [pc, #36]	@ (8004c90 <_HandleIncomingPacket+0xd8>)
 8004c6c:	7e1b      	ldrb	r3, [r3, #24]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	1cfb      	adds	r3, r7, #3
 8004c72:	2201      	movs	r2, #1
 8004c74:	4619      	mov	r1, r3
 8004c76:	f7ff fe03 	bl	8004880 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004c7a:	e003      	b.n	8004c84 <_HandleIncomingPacket+0xcc>
      break;
 8004c7c:	bf00      	nop
 8004c7e:	e002      	b.n	8004c86 <_HandleIncomingPacket+0xce>
      break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <_HandleIncomingPacket+0xce>
      break;
 8004c84:	bf00      	nop
    }
  }
}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	2001c57c 	.word	0x2001c57c

08004c94 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	@ 0x30
 8004c98:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004c9e:	1d3b      	adds	r3, r7, #4
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ca8:	4b31      	ldr	r3, [pc, #196]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004caa:	695b      	ldr	r3, [r3, #20]
 8004cac:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cae:	e00b      	b.n	8004cc8 <_TrySendOverflowPacket+0x34>
 8004cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb2:	b2da      	uxtb	r2, r3
 8004cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cb6:	1c59      	adds	r1, r3, #1
 8004cb8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004cba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	701a      	strb	r2, [r3, #0]
 8004cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc4:	09db      	lsrs	r3, r3, #7
 8004cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cca:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ccc:	d8f0      	bhi.n	8004cb0 <_TrySendOverflowPacket+0x1c>
 8004cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cdc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004cde:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <_TrySendOverflowPacket+0xe0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 8004ce4:	4b22      	ldr	r3, [pc, #136]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	69ba      	ldr	r2, [r7, #24]
 8004cea:	1ad3      	subs	r3, r2, r3
 8004cec:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	e00b      	b.n	8004d10 <_TrySendOverflowPacket+0x7c>
 8004cf8:	6a3b      	ldr	r3, [r7, #32]
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	1c59      	adds	r1, r3, #1
 8004d00:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d02:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d06:	b2d2      	uxtb	r2, r2
 8004d08:	701a      	strb	r2, [r3, #0]
 8004d0a:	6a3b      	ldr	r3, [r7, #32]
 8004d0c:	09db      	lsrs	r3, r3, #7
 8004d0e:	623b      	str	r3, [r7, #32]
 8004d10:	6a3b      	ldr	r3, [r7, #32]
 8004d12:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d14:	d8f0      	bhi.n	8004cf8 <_TrySendOverflowPacket+0x64>
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	1c5a      	adds	r2, r3, #1
 8004d1a:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d1c:	6a3a      	ldr	r2, [r7, #32]
 8004d1e:	b2d2      	uxtb	r2, r2
 8004d20:	701a      	strb	r2, [r3, #0]
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8004d26:	4b12      	ldr	r3, [pc, #72]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d28:	785b      	ldrb	r3, [r3, #1]
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	1d3b      	adds	r3, r7, #4
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	1ad3      	subs	r3, r2, r3
 8004d32:	461a      	mov	r2, r3
 8004d34:	1d3b      	adds	r3, r7, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	f7fb fa52 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004d46:	4a0a      	ldr	r2, [pc, #40]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d48:	69bb      	ldr	r3, [r7, #24]
 8004d4a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	4b06      	ldr	r3, [pc, #24]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d56:	701a      	strb	r2, [r3, #0]
 8004d58:	e004      	b.n	8004d64 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004d5a:	4b05      	ldr	r3, [pc, #20]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	4a03      	ldr	r2, [pc, #12]	@ (8004d70 <_TrySendOverflowPacket+0xdc>)
 8004d62:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004d64:	693b      	ldr	r3, [r7, #16]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3730      	adds	r7, #48	@ 0x30
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	2001c57c 	.word	0x2001c57c
 8004d74:	e0001004 	.word	0xe0001004

08004d78 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	@ 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004d84:	4b98      	ldr	r3, [pc, #608]	@ (8004fe8 <_SendPacket+0x270>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d010      	beq.n	8004dae <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004d8c:	4b96      	ldr	r3, [pc, #600]	@ (8004fe8 <_SendPacket+0x270>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 812d 	beq.w	8004ff0 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004d96:	4b94      	ldr	r3, [pc, #592]	@ (8004fe8 <_SendPacket+0x270>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d109      	bne.n	8004db2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004d9e:	f7ff ff79 	bl	8004c94 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004da2:	4b91      	ldr	r3, [pc, #580]	@ (8004fe8 <_SendPacket+0x270>)
 8004da4:	781b      	ldrb	r3, [r3, #0]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	f040 8124 	bne.w	8004ff4 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004dac:	e001      	b.n	8004db2 <_SendPacket+0x3a>
    goto Send;
 8004dae:	bf00      	nop
 8004db0:	e000      	b.n	8004db4 <_SendPacket+0x3c>
Send:
 8004db2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2b1f      	cmp	r3, #31
 8004db8:	d809      	bhi.n	8004dce <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004dba:	4b8b      	ldr	r3, [pc, #556]	@ (8004fe8 <_SendPacket+0x270>)
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc4:	f003 0301 	and.w	r3, r3, #1
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	f040 8115 	bne.w	8004ff8 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b17      	cmp	r3, #23
 8004dd2:	d807      	bhi.n	8004de4 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e0c4      	b.n	8004f6e <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8004df0:	d912      	bls.n	8004e18 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	09da      	lsrs	r2, r3, #7
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	3b01      	subs	r3, #1
 8004dfa:	60fb      	str	r3, [r7, #12]
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	b2db      	uxtb	r3, r3
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	3a01      	subs	r2, #1
 8004e0a:	60fa      	str	r2, [r7, #12]
 8004e0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e10:	b2da      	uxtb	r2, r3
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e006      	b.n	8004e26 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	60fb      	str	r3, [r7, #12]
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2b7e      	cmp	r3, #126	@ 0x7e
 8004e2a:	d807      	bhi.n	8004e3c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	3b01      	subs	r3, #1
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	b2da      	uxtb	r2, r3
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e098      	b.n	8004f6e <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004e42:	d212      	bcs.n	8004e6a <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	09da      	lsrs	r2, r3, #7
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	b2d2      	uxtb	r2, r2
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	3a01      	subs	r2, #1
 8004e5c:	60fa      	str	r2, [r7, #12]
 8004e5e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e62:	b2da      	uxtb	r2, r3
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	701a      	strb	r2, [r3, #0]
 8004e68:	e081      	b.n	8004f6e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004e70:	d21d      	bcs.n	8004eae <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	0b9a      	lsrs	r2, r3, #14
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	60fb      	str	r3, [r7, #12]
 8004e7c:	b2d2      	uxtb	r2, r2
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	09db      	lsrs	r3, r3, #7
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	3a01      	subs	r2, #1
 8004e8c:	60fa      	str	r2, [r7, #12]
 8004e8e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004e92:	b2da      	uxtb	r2, r3
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	60fa      	str	r2, [r7, #12]
 8004ea2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ea6:	b2da      	uxtb	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	701a      	strb	r2, [r3, #0]
 8004eac:	e05f      	b.n	8004f6e <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004eb4:	d228      	bcs.n	8004f08 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	0d5a      	lsrs	r2, r3, #21
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	b2d2      	uxtb	r2, r2
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	0b9b      	lsrs	r3, r3, #14
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	68fa      	ldr	r2, [r7, #12]
 8004ece:	3a01      	subs	r2, #1
 8004ed0:	60fa      	str	r2, [r7, #12]
 8004ed2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	09db      	lsrs	r3, r3, #7
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	3a01      	subs	r2, #1
 8004ee6:	60fa      	str	r2, [r7, #12]
 8004ee8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	68fa      	ldr	r2, [r7, #12]
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	60fa      	str	r2, [r7, #12]
 8004efc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f00:	b2da      	uxtb	r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	701a      	strb	r2, [r3, #0]
 8004f06:	e032      	b.n	8004f6e <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	0f1a      	lsrs	r2, r3, #28
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	b2d2      	uxtb	r2, r2
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	0d5b      	lsrs	r3, r3, #21
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	3a01      	subs	r2, #1
 8004f22:	60fa      	str	r2, [r7, #12]
 8004f24:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	0b9b      	lsrs	r3, r3, #14
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	3a01      	subs	r2, #1
 8004f38:	60fa      	str	r2, [r7, #12]
 8004f3a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f3e:	b2da      	uxtb	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	09db      	lsrs	r3, r3, #7
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	3a01      	subs	r2, #1
 8004f4e:	60fa      	str	r2, [r7, #12]
 8004f50:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	3a01      	subs	r2, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004f6e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fec <_SendPacket+0x274>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004f74:	4b1c      	ldr	r3, [pc, #112]	@ (8004fe8 <_SendPacket+0x270>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	623b      	str	r3, [r7, #32]
 8004f86:	e00b      	b.n	8004fa0 <_SendPacket+0x228>
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	b2da      	uxtb	r2, r3
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8e:	1c59      	adds	r1, r3, #1
 8004f90:	6279      	str	r1, [r7, #36]	@ 0x24
 8004f92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f96:	b2d2      	uxtb	r2, r2
 8004f98:	701a      	strb	r2, [r3, #0]
 8004f9a:	6a3b      	ldr	r3, [r7, #32]
 8004f9c:	09db      	lsrs	r3, r3, #7
 8004f9e:	623b      	str	r3, [r7, #32]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fa4:	d8f0      	bhi.n	8004f88 <_SendPacket+0x210>
 8004fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa8:	1c5a      	adds	r2, r3, #1
 8004faa:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fac:	6a3a      	ldr	r2, [r7, #32]
 8004fae:	b2d2      	uxtb	r2, r2
 8004fb0:	701a      	strb	r2, [r3, #0]
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8004fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <_SendPacket+0x270>)
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	4618      	mov	r0, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	68f9      	ldr	r1, [r7, #12]
 8004fc6:	f7fb f90b 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004fca:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004fd2:	4a05      	ldr	r2, [pc, #20]	@ (8004fe8 <_SendPacket+0x270>)
 8004fd4:	69bb      	ldr	r3, [r7, #24]
 8004fd6:	60d3      	str	r3, [r2, #12]
 8004fd8:	e00f      	b.n	8004ffa <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004fda:	4b03      	ldr	r3, [pc, #12]	@ (8004fe8 <_SendPacket+0x270>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	3301      	adds	r3, #1
 8004fe0:	b2da      	uxtb	r2, r3
 8004fe2:	4b01      	ldr	r3, [pc, #4]	@ (8004fe8 <_SendPacket+0x270>)
 8004fe4:	701a      	strb	r2, [r3, #0]
 8004fe6:	e008      	b.n	8004ffa <_SendPacket+0x282>
 8004fe8:	2001c57c 	.word	0x2001c57c
 8004fec:	e0001004 	.word	0xe0001004
    goto SendDone;
 8004ff0:	bf00      	nop
 8004ff2:	e002      	b.n	8004ffa <_SendPacket+0x282>
      goto SendDone;
 8004ff4:	bf00      	nop
 8004ff6:	e000      	b.n	8004ffa <_SendPacket+0x282>
      goto SendDone;
 8004ff8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004ffa:	4b14      	ldr	r3, [pc, #80]	@ (800504c <_SendPacket+0x2d4>)
 8004ffc:	7e1b      	ldrb	r3, [r3, #24]
 8004ffe:	4619      	mov	r1, r3
 8005000:	4a13      	ldr	r2, [pc, #76]	@ (8005050 <_SendPacket+0x2d8>)
 8005002:	460b      	mov	r3, r1
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	440b      	add	r3, r1
 8005008:	00db      	lsls	r3, r3, #3
 800500a:	4413      	add	r3, r2
 800500c:	336c      	adds	r3, #108	@ 0x6c
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b0e      	ldr	r3, [pc, #56]	@ (800504c <_SendPacket+0x2d4>)
 8005012:	7e1b      	ldrb	r3, [r3, #24]
 8005014:	4618      	mov	r0, r3
 8005016:	490e      	ldr	r1, [pc, #56]	@ (8005050 <_SendPacket+0x2d8>)
 8005018:	4603      	mov	r3, r0
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	4403      	add	r3, r0
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	440b      	add	r3, r1
 8005022:	3370      	adds	r3, #112	@ 0x70
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	429a      	cmp	r2, r3
 8005028:	d00b      	beq.n	8005042 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800502a:	4b08      	ldr	r3, [pc, #32]	@ (800504c <_SendPacket+0x2d4>)
 800502c:	789b      	ldrb	r3, [r3, #2]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d107      	bne.n	8005042 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005032:	4b06      	ldr	r3, [pc, #24]	@ (800504c <_SendPacket+0x2d4>)
 8005034:	2201      	movs	r2, #1
 8005036:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005038:	f7ff fdbe 	bl	8004bb8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800503c:	4b03      	ldr	r3, [pc, #12]	@ (800504c <_SendPacket+0x2d4>)
 800503e:	2200      	movs	r2, #0
 8005040:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005042:	bf00      	nop
 8005044:	3728      	adds	r7, #40	@ 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	2001c57c 	.word	0x2001c57c
 8005050:	200194bc 	.word	0x200194bc

08005054 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005054:	b580      	push	{r7, lr}
 8005056:	b08a      	sub	sp, #40	@ 0x28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	3301      	adds	r3, #1
 800506a:	2b80      	cmp	r3, #128	@ 0x80
 800506c:	d80a      	bhi.n	8005084 <_StoreChar+0x30>
    *(p->pPayload++) = (U8)c;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	6051      	str	r1, [r2, #4]
 8005078:	78fa      	ldrb	r2, [r7, #3]
 800507a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	2b80      	cmp	r3, #128	@ 0x80
 800508a:	d15a      	bne.n	8005142 <_StoreChar+0xee>
    *(p->pPayloadStart) = (U8)p->Cnt;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	b2d2      	uxtb	r2, r2
 8005096:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	623b      	str	r3, [r7, #32]
 80050ac:	e00b      	b.n	80050c6 <_StoreChar+0x72>
 80050ae:	6a3b      	ldr	r3, [r7, #32]
 80050b0:	b2da      	uxtb	r2, r3
 80050b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b4:	1c59      	adds	r1, r3, #1
 80050b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80050b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	09db      	lsrs	r3, r3, #7
 80050c4:	623b      	str	r3, [r7, #32]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80050ca:	d8f0      	bhi.n	80050ae <_StoreChar+0x5a>
 80050cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ce:	1c5a      	adds	r2, r3, #1
 80050d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80050d2:	6a3a      	ldr	r2, [r7, #32]
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	61fb      	str	r3, [r7, #28]
 80050e0:	2300      	movs	r3, #0
 80050e2:	61bb      	str	r3, [r7, #24]
 80050e4:	e00b      	b.n	80050fe <_StoreChar+0xaa>
 80050e6:	69bb      	ldr	r3, [r7, #24]
 80050e8:	b2da      	uxtb	r2, r3
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	1c59      	adds	r1, r3, #1
 80050ee:	61f9      	str	r1, [r7, #28]
 80050f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	09db      	lsrs	r3, r3, #7
 80050fc:	61bb      	str	r3, [r7, #24]
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	2b7f      	cmp	r3, #127	@ 0x7f
 8005102:	d8f0      	bhi.n	80050e6 <_StoreChar+0x92>
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	1c5a      	adds	r2, r3, #1
 8005108:	61fa      	str	r2, [r7, #28]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	221a      	movs	r2, #26
 800511a:	6939      	ldr	r1, [r7, #16]
 800511c:	4618      	mov	r0, r3
 800511e:	f7ff fe2b 	bl	8004d78 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4618      	mov	r0, r3
 8005128:	f7ff fd39 	bl	8004b9e <_PreparePacket>
 800512c:	4602      	mov	r2, r0
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	611a      	str	r2, [r3, #16]
  }
}
 8005142:	bf00      	nop
 8005144:	3728      	adds	r7, #40	@ 0x28
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800514c:	b580      	push	{r7, lr}
 800514e:	b08a      	sub	sp, #40	@ 0x28
 8005150:	af00      	add	r7, sp, #0
 8005152:	60f8      	str	r0, [r7, #12]
 8005154:	60b9      	str	r1, [r7, #8]
 8005156:	607a      	str	r2, [r7, #4]
 8005158:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800515e:	2301      	movs	r3, #1
 8005160:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005162:	2301      	movs	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005166:	e007      	b.n	8005178 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005168:	6a3a      	ldr	r2, [r7, #32]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	623b      	str	r3, [r7, #32]
    Width++;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	3301      	adds	r3, #1
 8005176:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005178:	6a3a      	ldr	r2, [r7, #32]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d2f3      	bcs.n	8005168 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	429a      	cmp	r2, r3
 8005186:	d901      	bls.n	800518c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800518c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d000      	beq.n	8005198 <_PrintUnsigned+0x4c>
 8005196:	e01f      	b.n	80051d8 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800519a:	2b00      	cmp	r3, #0
 800519c:	d01c      	beq.n	80051d8 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800519e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <_PrintUnsigned+0x68>
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d102      	bne.n	80051b4 <_PrintUnsigned+0x68>
        c = '0';
 80051ae:	2330      	movs	r3, #48	@ 0x30
 80051b0:	76fb      	strb	r3, [r7, #27]
 80051b2:	e001      	b.n	80051b8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80051b4:	2320      	movs	r3, #32
 80051b6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051b8:	e007      	b.n	80051ca <_PrintUnsigned+0x7e>
        FieldWidth--;
 80051ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051bc:	3b01      	subs	r3, #1
 80051be:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80051c0:	7efb      	ldrb	r3, [r7, #27]
 80051c2:	4619      	mov	r1, r3
 80051c4:	68f8      	ldr	r0, [r7, #12]
 80051c6:	f7ff ff45 	bl	8005054 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80051ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d003      	beq.n	80051d8 <_PrintUnsigned+0x8c>
 80051d0:	69fa      	ldr	r2, [r7, #28]
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d3f0      	bcc.n	80051ba <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d903      	bls.n	80051e6 <_PrintUnsigned+0x9a>
      NumDigits--;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	603b      	str	r3, [r7, #0]
 80051e4:	e009      	b.n	80051fa <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ee:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d200      	bcs.n	80051fa <_PrintUnsigned+0xae>
        break;
 80051f8:	e005      	b.n	8005206 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80051fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	fb02 f303 	mul.w	r3, r2, r3
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005204:	e7e8      	b.n	80051d8 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005206:	68ba      	ldr	r2, [r7, #8]
 8005208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800520a:	fbb2 f3f3 	udiv	r3, r2, r3
 800520e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800521e:	4a15      	ldr	r2, [pc, #84]	@ (8005274 <_PrintUnsigned+0x128>)
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4413      	add	r3, r2
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	68f8      	ldr	r0, [r7, #12]
 800522a:	f7ff ff13 	bl	8005054 <_StoreChar>
    Digit /= Base;
 800522e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e3      	bne.n	8005206 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800523e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005240:	f003 0301 	and.w	r3, r3, #1
 8005244:	2b00      	cmp	r3, #0
 8005246:	d011      	beq.n	800526c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2b00      	cmp	r3, #0
 800524c:	d00e      	beq.n	800526c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800524e:	e006      	b.n	800525e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005252:	3b01      	subs	r3, #1
 8005254:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005256:	2120      	movs	r1, #32
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	f7ff fefb 	bl	8005054 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800525e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <_PrintUnsigned+0x120>
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005268:	429a      	cmp	r2, r3
 800526a:	d3f1      	bcc.n	8005250 <_PrintUnsigned+0x104>
      }
    }
  }
}
 800526c:	bf00      	nop
 800526e:	3728      	adds	r7, #40	@ 0x28
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	08006928 	.word	0x08006928

08005278 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af02      	add	r7, sp, #8
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2b00      	cmp	r3, #0
 800528a:	bfb8      	it	lt
 800528c:	425b      	neglt	r3, r3
 800528e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005294:	e007      	b.n	80052a6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	fb92 f3f3 	sdiv	r3, r2, r3
 800529e:	613b      	str	r3, [r7, #16]
    Width++;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	3301      	adds	r3, #1
 80052a4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	daf3      	bge.n	8005296 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d901      	bls.n	80052ba <_PrintInt+0x42>
    Width = NumDigits;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00a      	beq.n	80052d6 <_PrintInt+0x5e>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	db04      	blt.n	80052d0 <_PrintInt+0x58>
 80052c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d002      	beq.n	80052d6 <_PrintInt+0x5e>
    FieldWidth--;
 80052d0:	6a3b      	ldr	r3, [r7, #32]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80052d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <_PrintInt+0x6e>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d016      	beq.n	8005314 <_PrintInt+0x9c>
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d111      	bne.n	8005314 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80052f0:	6a3b      	ldr	r3, [r7, #32]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00e      	beq.n	8005314 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052f6:	e006      	b.n	8005306 <_PrintInt+0x8e>
        FieldWidth--;
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	3b01      	subs	r3, #1
 80052fc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80052fe:	2120      	movs	r1, #32
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f7ff fea7 	bl	8005054 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <_PrintInt+0x9c>
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d3f1      	bcc.n	80052f8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	da07      	bge.n	800532a <_PrintInt+0xb2>
    v = -v;
 800531a:	68bb      	ldr	r3, [r7, #8]
 800531c:	425b      	negs	r3, r3
 800531e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005320:	212d      	movs	r1, #45	@ 0x2d
 8005322:	68f8      	ldr	r0, [r7, #12]
 8005324:	f7ff fe96 	bl	8005054 <_StoreChar>
 8005328:	e008      	b.n	800533c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800532a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d003      	beq.n	800533c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005334:	212b      	movs	r1, #43	@ 0x2b
 8005336:	68f8      	ldr	r0, [r7, #12]
 8005338:	f7ff fe8c 	bl	8005054 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d019      	beq.n	800537a <_PrintInt+0x102>
 8005346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d114      	bne.n	800537a <_PrintInt+0x102>
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d111      	bne.n	800537a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00e      	beq.n	800537a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800535c:	e006      	b.n	800536c <_PrintInt+0xf4>
        FieldWidth--;
 800535e:	6a3b      	ldr	r3, [r7, #32]
 8005360:	3b01      	subs	r3, #1
 8005362:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005364:	2130      	movs	r1, #48	@ 0x30
 8005366:	68f8      	ldr	r0, [r7, #12]
 8005368:	f7ff fe74 	bl	8005054 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800536c:	6a3b      	ldr	r3, [r7, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <_PrintInt+0x102>
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	6a3b      	ldr	r3, [r7, #32]
 8005376:	429a      	cmp	r2, r3
 8005378:	d3f1      	bcc.n	800535e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800537a:	68b9      	ldr	r1, [r7, #8]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	6a3b      	ldr	r3, [r7, #32]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f7ff fedf 	bl	800514c <_PrintUnsigned>
}
 800538e:	bf00      	nop
 8005390:	3718      	adds	r7, #24
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
	...

08005398 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b098      	sub	sp, #96	@ 0x60
 800539c:	af02      	add	r7, sp, #8
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
  const char*   s;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053a4:	f3ef 8311 	mrs	r3, BASEPRI
 80053a8:	f04f 0120 	mov.w	r1, #32
 80053ac:	f381 8811 	msr	BASEPRI, r1
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053b2:	48b7      	ldr	r0, [pc, #732]	@ (8005690 <_VPrintTarget+0x2f8>)
 80053b4:	f7ff fbf3 	bl	8004b9e <_PreparePacket>
 80053b8:	62b8      	str	r0, [r7, #40]	@ 0x28
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80053ba:	4bb5      	ldr	r3, [pc, #724]	@ (8005690 <_VPrintTarget+0x2f8>)
 80053bc:	613b      	str	r3, [r7, #16]
#endif
  BufferDesc.Cnt            = 0u;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
  BufferDesc.pPayloadStart  = pPayloadStart;
 80053c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053c4:	61bb      	str	r3, [r7, #24]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3301      	adds	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
  BufferDesc.Options        =  Options;
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	61fb      	str	r3, [r7, #28]

  do {
    c = *sFormat;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80053de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	f000 81a8 	beq.w	8005738 <_VPrintTarget+0x3a0>
      break;
    }
    if (c == '%') {
 80053e8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80053ec:	2b25      	cmp	r3, #37	@ 0x25
 80053ee:	f040 8195 	bne.w	800571c <_VPrintTarget+0x384>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80053f2:	2300      	movs	r3, #0
 80053f4:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 80053f6:	2301      	movs	r3, #1
 80053f8:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005402:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005406:	3b23      	subs	r3, #35	@ 0x23
 8005408:	2b0d      	cmp	r3, #13
 800540a:	d83f      	bhi.n	800548c <_VPrintTarget+0xf4>
 800540c:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <_VPrintTarget+0x7c>)
 800540e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005412:	bf00      	nop
 8005414:	0800547d 	.word	0x0800547d
 8005418:	0800548d 	.word	0x0800548d
 800541c:	0800548d 	.word	0x0800548d
 8005420:	0800548d 	.word	0x0800548d
 8005424:	0800548d 	.word	0x0800548d
 8005428:	0800548d 	.word	0x0800548d
 800542c:	0800548d 	.word	0x0800548d
 8005430:	0800548d 	.word	0x0800548d
 8005434:	0800546d 	.word	0x0800546d
 8005438:	0800548d 	.word	0x0800548d
 800543c:	0800544d 	.word	0x0800544d
 8005440:	0800548d 	.word	0x0800548d
 8005444:	0800548d 	.word	0x0800548d
 8005448:	0800545d 	.word	0x0800545d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800544c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800544e:	f043 0301 	orr.w	r3, r3, #1
 8005452:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e01a      	b.n	8005492 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 800545c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800545e:	f043 0302 	orr.w	r3, r3, #2
 8005462:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	60fb      	str	r3, [r7, #12]
 800546a:	e012      	b.n	8005492 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 800546c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800546e:	f043 0304 	orr.w	r3, r3, #4
 8005472:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]
 800547a:	e00a      	b.n	8005492 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 800547c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800547e:	f043 0308 	orr.w	r3, r3, #8
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	3301      	adds	r3, #1
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	e002      	b.n	8005492 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 800548c:	2300      	movs	r3, #0
 800548e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005490:	bf00      	nop
        }
      } while (v);
 8005492:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1b0      	bne.n	80053fa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005498:	2300      	movs	r3, #0
 800549a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80054a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80054aa:	d912      	bls.n	80054d2 <_VPrintTarget+0x13a>
 80054ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054b0:	2b39      	cmp	r3, #57	@ 0x39
 80054b2:	d80e      	bhi.n	80054d2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80054ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	005b      	lsls	r3, r3, #1
 80054c4:	461a      	mov	r2, r3
 80054c6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054ca:	4413      	add	r3, r2
 80054cc:	3b30      	subs	r3, #48	@ 0x30
 80054ce:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 80054d0:	e7e4      	b.n	800549c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80054d2:	2300      	movs	r3, #0
 80054d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 80054de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054e2:	2b2e      	cmp	r3, #46	@ 0x2e
 80054e4:	d11d      	bne.n	8005522 <_VPrintTarget+0x18a>
        sFormat++;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	3301      	adds	r3, #1
 80054ea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 80054f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80054fa:	d912      	bls.n	8005522 <_VPrintTarget+0x18a>
 80054fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005500:	2b39      	cmp	r3, #57	@ 0x39
 8005502:	d80e      	bhi.n	8005522 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	3301      	adds	r3, #1
 8005508:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800550a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800550c:	4613      	mov	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	005b      	lsls	r3, r3, #1
 8005514:	461a      	mov	r2, r3
 8005516:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800551a:	4413      	add	r3, r2
 800551c:	3b30      	subs	r3, #48	@ 0x30
 800551e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005520:	e7e4      	b.n	80054ec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800552a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800552e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005530:	d003      	beq.n	800553a <_VPrintTarget+0x1a2>
 8005532:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005536:	2b68      	cmp	r3, #104	@ 0x68
 8005538:	d107      	bne.n	800554a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005548:	e7ef      	b.n	800552a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800554a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800554e:	2b25      	cmp	r3, #37	@ 0x25
 8005550:	f000 80d8 	beq.w	8005704 <_VPrintTarget+0x36c>
 8005554:	2b25      	cmp	r3, #37	@ 0x25
 8005556:	f2c0 80dc 	blt.w	8005712 <_VPrintTarget+0x37a>
 800555a:	2b78      	cmp	r3, #120	@ 0x78
 800555c:	f300 80d9 	bgt.w	8005712 <_VPrintTarget+0x37a>
 8005560:	2b58      	cmp	r3, #88	@ 0x58
 8005562:	f2c0 80d6 	blt.w	8005712 <_VPrintTarget+0x37a>
 8005566:	3b58      	subs	r3, #88	@ 0x58
 8005568:	2b20      	cmp	r3, #32
 800556a:	f200 80d2 	bhi.w	8005712 <_VPrintTarget+0x37a>
 800556e:	a201      	add	r2, pc, #4	@ (adr r2, 8005574 <_VPrintTarget+0x1dc>)
 8005570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005574:	0800566b 	.word	0x0800566b
 8005578:	08005713 	.word	0x08005713
 800557c:	08005713 	.word	0x08005713
 8005580:	08005713 	.word	0x08005713
 8005584:	08005713 	.word	0x08005713
 8005588:	08005713 	.word	0x08005713
 800558c:	08005713 	.word	0x08005713
 8005590:	08005713 	.word	0x08005713
 8005594:	08005713 	.word	0x08005713
 8005598:	08005713 	.word	0x08005713
 800559c:	08005713 	.word	0x08005713
 80055a0:	080055f9 	.word	0x080055f9
 80055a4:	0800561f 	.word	0x0800561f
 80055a8:	08005713 	.word	0x08005713
 80055ac:	08005713 	.word	0x08005713
 80055b0:	08005713 	.word	0x08005713
 80055b4:	08005713 	.word	0x08005713
 80055b8:	08005713 	.word	0x08005713
 80055bc:	08005713 	.word	0x08005713
 80055c0:	08005713 	.word	0x08005713
 80055c4:	08005713 	.word	0x08005713
 80055c8:	08005713 	.word	0x08005713
 80055cc:	08005713 	.word	0x08005713
 80055d0:	08005713 	.word	0x08005713
 80055d4:	080056df 	.word	0x080056df
 80055d8:	08005713 	.word	0x08005713
 80055dc:	08005713 	.word	0x08005713
 80055e0:	08005695 	.word	0x08005695
 80055e4:	08005713 	.word	0x08005713
 80055e8:	08005645 	.word	0x08005645
 80055ec:	08005713 	.word	0x08005713
 80055f0:	08005713 	.word	0x08005713
 80055f4:	0800566b 	.word	0x0800566b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	1d19      	adds	r1, r3, #4
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        _StoreChar(&BufferDesc, c0);
 800560c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005610:	f107 0310 	add.w	r3, r7, #16
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f7ff fd1c 	bl	8005054 <_StoreChar>
        break;
 800561c:	e07a      	b.n	8005714 <_VPrintTarget+0x37c>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1d19      	adds	r1, r3, #4
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6011      	str	r1, [r2, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800562c:	f107 0010 	add.w	r0, r7, #16
 8005630:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005632:	9301      	str	r3, [sp, #4]
 8005634:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800563a:	220a      	movs	r2, #10
 800563c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800563e:	f7ff fe1b 	bl	8005278 <_PrintInt>
        break;
 8005642:	e067      	b.n	8005714 <_VPrintTarget+0x37c>
      case 'u':
        v = va_arg(*pParamList, int);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	1d19      	adds	r1, r3, #4
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	6011      	str	r1, [r2, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005652:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005654:	f107 0010 	add.w	r0, r7, #16
 8005658:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005662:	220a      	movs	r2, #10
 8005664:	f7ff fd72 	bl	800514c <_PrintUnsigned>
        break;
 8005668:	e054      	b.n	8005714 <_VPrintTarget+0x37c>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	1d19      	adds	r1, r3, #4
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	6011      	str	r1, [r2, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005678:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800567a:	f107 0010 	add.w	r0, r7, #16
 800567e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005688:	2210      	movs	r2, #16
 800568a:	f7ff fd5f 	bl	800514c <_PrintUnsigned>
        break;
 800568e:	e041      	b.n	8005714 <_VPrintTarget+0x37c>
 8005690:	2001c5ac 	.word	0x2001c5ac
      case 's':
        s = va_arg(*pParamList, const char*);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	1d19      	adds	r1, r3, #4
 800569a:	687a      	ldr	r2, [r7, #4]
 800569c:	6011      	str	r1, [r2, #0]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	643b      	str	r3, [r7, #64]	@ 0x40
        if (s == NULL) {
 80056a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <_VPrintTarget+0x314>
          s = "(null)";
 80056a8:	4b4a      	ldr	r3, [pc, #296]	@ (80057d4 <_VPrintTarget+0x43c>)
 80056aa:	643b      	str	r3, [r7, #64]	@ 0x40
        }
        do {
          c = *s;
 80056ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          s++;
 80056b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056b6:	3301      	adds	r3, #1
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
          if (c == '\0') {
 80056ba:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00b      	beq.n	80056da <_VPrintTarget+0x342>
            break;
          }
         _StoreChar(&BufferDesc, c);
 80056c2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	4611      	mov	r1, r2
 80056cc:	4618      	mov	r0, r3
 80056ce:	f7ff fcc1 	bl	8005054 <_StoreChar>
        } while (BufferDesc.Cnt < SEGGER_SYSVIEW_MAX_STRING_LEN);
 80056d2:	6a3b      	ldr	r3, [r7, #32]
 80056d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80056d6:	d9e9      	bls.n	80056ac <_VPrintTarget+0x314>
        break;
 80056d8:	e01c      	b.n	8005714 <_VPrintTarget+0x37c>
            break;
 80056da:	bf00      	nop
        break;
 80056dc:	e01a      	b.n	8005714 <_VPrintTarget+0x37c>
      case 'p':
        v = va_arg(*pParamList, int);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	1d19      	adds	r1, r3, #4
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6011      	str	r1, [r2, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80056ec:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056ee:	f107 0010 	add.w	r0, r7, #16
 80056f2:	2300      	movs	r3, #0
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	2308      	movs	r3, #8
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	2308      	movs	r3, #8
 80056fc:	2210      	movs	r2, #16
 80056fe:	f7ff fd25 	bl	800514c <_PrintUnsigned>
        break;
 8005702:	e007      	b.n	8005714 <_VPrintTarget+0x37c>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	2125      	movs	r1, #37	@ 0x25
 800570a:	4618      	mov	r0, r3
 800570c:	f7ff fca2 	bl	8005054 <_StoreChar>
        break;
 8005710:	e000      	b.n	8005714 <_VPrintTarget+0x37c>
      default:
        break;
 8005712:	bf00      	nop
      }
      sFormat++;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	60fb      	str	r3, [r7, #12]
 800571a:	e007      	b.n	800572c <_VPrintTarget+0x394>
    } else {
      _StoreChar(&BufferDesc, c);
 800571c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005720:	f107 0310 	add.w	r3, r7, #16
 8005724:	4611      	mov	r1, r2
 8005726:	4618      	mov	r0, r3
 8005728:	f7ff fc94 	bl	8005054 <_StoreChar>
    }
  } while (*sFormat);
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b00      	cmp	r3, #0
 8005732:	f47f ae4d 	bne.w	80053d0 <_VPrintTarget+0x38>
 8005736:	e000      	b.n	800573a <_VPrintTarget+0x3a2>
      break;
 8005738:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d041      	beq.n	80057c4 <_VPrintTarget+0x42c>
    *(BufferDesc.pPayloadStart) = (U8)BufferDesc.Cnt;
 8005740:	6a3a      	ldr	r2, [r7, #32]
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005750:	e00b      	b.n	800576a <_VPrintTarget+0x3d2>
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	b2da      	uxtb	r2, r3
 8005756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005758:	1c59      	adds	r1, r3, #1
 800575a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800575c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	09db      	lsrs	r3, r3, #7
 8005768:	63bb      	str	r3, [r7, #56]	@ 0x38
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	2b7f      	cmp	r3, #127	@ 0x7f
 800576e:	d8f0      	bhi.n	8005752 <_VPrintTarget+0x3ba>
 8005770:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005772:	1c5a      	adds	r2, r3, #1
 8005774:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005776:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800577e:	617b      	str	r3, [r7, #20]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	637b      	str	r3, [r7, #52]	@ 0x34
 8005784:	2300      	movs	r3, #0
 8005786:	633b      	str	r3, [r7, #48]	@ 0x30
 8005788:	e00b      	b.n	80057a2 <_VPrintTarget+0x40a>
 800578a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800578c:	b2da      	uxtb	r2, r3
 800578e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005790:	1c59      	adds	r1, r3, #1
 8005792:	6379      	str	r1, [r7, #52]	@ 0x34
 8005794:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005798:	b2d2      	uxtb	r2, r2
 800579a:	701a      	strb	r2, [r3, #0]
 800579c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800579e:	09db      	lsrs	r3, r3, #7
 80057a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80057a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80057a6:	d8f0      	bhi.n	800578a <_VPrintTarget+0x3f2>
 80057a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	637a      	str	r2, [r7, #52]	@ 0x34
 80057ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b0:	b2d2      	uxtb	r2, r2
 80057b2:	701a      	strb	r2, [r3, #0]
 80057b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057b6:	617b      	str	r3, [r7, #20]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	221a      	movs	r2, #26
 80057be:	4618      	mov	r0, r3
 80057c0:	f7ff fada 	bl	8004d78 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80057c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057c6:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80057ca:	bf00      	nop
 80057cc:	3758      	adds	r7, #88	@ 0x58
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
 80057d2:	bf00      	nop
 80057d4:	080068d8 	.word	0x080068d8

080057d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af02      	add	r7, sp, #8
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057e6:	2300      	movs	r3, #0
 80057e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80057ec:	4917      	ldr	r1, [pc, #92]	@ (800584c <SEGGER_SYSVIEW_Init+0x74>)
 80057ee:	4818      	ldr	r0, [pc, #96]	@ (8005850 <SEGGER_SYSVIEW_Init+0x78>)
 80057f0:	f7ff f8cc 	bl	800498c <SEGGER_RTT_AllocUpBuffer>
 80057f4:	4603      	mov	r3, r0
 80057f6:	b2da      	uxtb	r2, r3
 80057f8:	4b16      	ldr	r3, [pc, #88]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 80057fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057fc:	4b15      	ldr	r3, [pc, #84]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 80057fe:	785a      	ldrb	r2, [r3, #1]
 8005800:	4b14      	ldr	r3, [pc, #80]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005802:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005804:	4b13      	ldr	r3, [pc, #76]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005806:	7e1b      	ldrb	r3, [r3, #24]
 8005808:	4618      	mov	r0, r3
 800580a:	2300      	movs	r3, #0
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2308      	movs	r3, #8
 8005810:	4a11      	ldr	r2, [pc, #68]	@ (8005858 <SEGGER_SYSVIEW_Init+0x80>)
 8005812:	490f      	ldr	r1, [pc, #60]	@ (8005850 <SEGGER_SYSVIEW_Init+0x78>)
 8005814:	f7ff f93e 	bl	8004a94 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005818:	4b0e      	ldr	r3, [pc, #56]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 800581a:	2200      	movs	r2, #0
 800581c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800581e:	4b0f      	ldr	r3, [pc, #60]	@ (800585c <SEGGER_SYSVIEW_Init+0x84>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a0c      	ldr	r2, [pc, #48]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005824:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005826:	4a0b      	ldr	r2, [pc, #44]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800582c:	4a09      	ldr	r2, [pc, #36]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005832:	4a08      	ldr	r2, [pc, #32]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005838:	4a06      	ldr	r2, [pc, #24]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800583e:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <SEGGER_SYSVIEW_Init+0x7c>)
 8005840:	2200      	movs	r2, #0
 8005842:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005844:	bf00      	nop
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}
 800584c:	2001b574 	.word	0x2001b574
 8005850:	080068e0 	.word	0x080068e0
 8005854:	2001c57c 	.word	0x2001c57c
 8005858:	2001c574 	.word	0x2001c574
 800585c:	e0001004 	.word	0xe0001004

08005860 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005868:	4a04      	ldr	r2, [pc, #16]	@ (800587c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6113      	str	r3, [r2, #16]
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2001c57c 	.word	0x2001c57c

08005880 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005888:	f3ef 8311 	mrs	r3, BASEPRI
 800588c:	f04f 0120 	mov.w	r1, #32
 8005890:	f381 8811 	msr	BASEPRI, r1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	4808      	ldr	r0, [pc, #32]	@ (80058b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005898:	f7ff f981 	bl	8004b9e <_PreparePacket>
 800589c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	68b9      	ldr	r1, [r7, #8]
 80058a2:	68b8      	ldr	r0, [r7, #8]
 80058a4:	f7ff fa68 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f383 8811 	msr	BASEPRI, r3
}
 80058ae:	bf00      	nop
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	2001c5ac 	.word	0x2001c5ac

080058bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058c6:	f3ef 8311 	mrs	r3, BASEPRI
 80058ca:	f04f 0120 	mov.w	r1, #32
 80058ce:	f381 8811 	msr	BASEPRI, r1
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	4816      	ldr	r0, [pc, #88]	@ (8005930 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058d6:	f7ff f962 	bl	8004b9e <_PreparePacket>
 80058da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	61fb      	str	r3, [r7, #28]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	61bb      	str	r3, [r7, #24]
 80058e8:	e00b      	b.n	8005902 <SEGGER_SYSVIEW_RecordU32+0x46>
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	1c59      	adds	r1, r3, #1
 80058f2:	61f9      	str	r1, [r7, #28]
 80058f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058f8:	b2d2      	uxtb	r2, r2
 80058fa:	701a      	strb	r2, [r3, #0]
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	61bb      	str	r3, [r7, #24]
 8005902:	69bb      	ldr	r3, [r7, #24]
 8005904:	2b7f      	cmp	r3, #127	@ 0x7f
 8005906:	d8f0      	bhi.n	80058ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	1c5a      	adds	r2, r3, #1
 800590c:	61fa      	str	r2, [r7, #28]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	701a      	strb	r2, [r3, #0]
 8005914:	69fb      	ldr	r3, [r7, #28]
 8005916:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005918:	687a      	ldr	r2, [r7, #4]
 800591a:	68f9      	ldr	r1, [r7, #12]
 800591c:	6938      	ldr	r0, [r7, #16]
 800591e:	f7ff fa2b 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f383 8811 	msr	BASEPRI, r3
}
 8005928:	bf00      	nop
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}
 8005930:	2001c5ac 	.word	0x2001c5ac

08005934 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	@ 0x30
 8005938:	af00      	add	r7, sp, #0
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	60b9      	str	r1, [r7, #8]
 800593e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005940:	f3ef 8311 	mrs	r3, BASEPRI
 8005944:	f04f 0120 	mov.w	r1, #32
 8005948:	f381 8811 	msr	BASEPRI, r1
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	4825      	ldr	r0, [pc, #148]	@ (80059e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005950:	f7ff f925 	bl	8004b9e <_PreparePacket>
 8005954:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005962:	e00b      	b.n	800597c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596a:	1c59      	adds	r1, r3, #1
 800596c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800596e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005978:	09db      	lsrs	r3, r3, #7
 800597a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800597c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005980:	d8f0      	bhi.n	8005964 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	1c5a      	adds	r2, r3, #1
 8005986:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005988:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598a:	b2d2      	uxtb	r2, r2
 800598c:	701a      	strb	r2, [r3, #0]
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	623b      	str	r3, [r7, #32]
 800599a:	e00b      	b.n	80059b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a2:	1c59      	adds	r1, r3, #1
 80059a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80059a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059aa:	b2d2      	uxtb	r2, r2
 80059ac:	701a      	strb	r2, [r3, #0]
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	09db      	lsrs	r3, r3, #7
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80059b8:	d8f0      	bhi.n	800599c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059bc:	1c5a      	adds	r2, r3, #1
 80059be:	627a      	str	r2, [r7, #36]	@ 0x24
 80059c0:	6a3a      	ldr	r2, [r7, #32]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	69b8      	ldr	r0, [r7, #24]
 80059d0:	f7ff f9d2 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	f383 8811 	msr	BASEPRI, r3
}
 80059da:	bf00      	nop
 80059dc:	3730      	adds	r7, #48	@ 0x30
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2001c5ac 	.word	0x2001c5ac

080059e8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b08c      	sub	sp, #48	@ 0x30
 80059ec:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80059ee:	4b58      	ldr	r3, [pc, #352]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80059f4:	f3ef 8311 	mrs	r3, BASEPRI
 80059f8:	f04f 0120 	mov.w	r1, #32
 80059fc:	f381 8811 	msr	BASEPRI, r1
 8005a00:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005a02:	4b53      	ldr	r3, [pc, #332]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005a04:	785b      	ldrb	r3, [r3, #1]
 8005a06:	220a      	movs	r2, #10
 8005a08:	4952      	ldr	r1, [pc, #328]	@ (8005b54 <SEGGER_SYSVIEW_Start+0x16c>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fa fbe8 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005a16:	200a      	movs	r0, #10
 8005a18:	f7ff ff32 	bl	8005880 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005a1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a20:	f04f 0120 	mov.w	r1, #32
 8005a24:	f381 8811 	msr	BASEPRI, r1
 8005a28:	60bb      	str	r3, [r7, #8]
 8005a2a:	484b      	ldr	r0, [pc, #300]	@ (8005b58 <SEGGER_SYSVIEW_Start+0x170>)
 8005a2c:	f7ff f8b7 	bl	8004b9e <_PreparePacket>
 8005a30:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a3a:	4b45      	ldr	r3, [pc, #276]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a40:	e00b      	b.n	8005a5a <SEGGER_SYSVIEW_Start+0x72>
 8005a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a44:	b2da      	uxtb	r2, r3
 8005a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a48:	1c59      	adds	r1, r3, #1
 8005a4a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a50:	b2d2      	uxtb	r2, r2
 8005a52:	701a      	strb	r2, [r3, #0]
 8005a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a56:	09db      	lsrs	r3, r3, #7
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a5e:	d8f0      	bhi.n	8005a42 <SEGGER_SYSVIEW_Start+0x5a>
 8005a60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a74:	4b36      	ldr	r3, [pc, #216]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	623b      	str	r3, [r7, #32]
 8005a7a:	e00b      	b.n	8005a94 <SEGGER_SYSVIEW_Start+0xac>
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	1c59      	adds	r1, r3, #1
 8005a84:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a8a:	b2d2      	uxtb	r2, r2
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	6a3b      	ldr	r3, [r7, #32]
 8005a90:	09db      	lsrs	r3, r3, #7
 8005a92:	623b      	str	r3, [r7, #32]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a98:	d8f0      	bhi.n	8005a7c <SEGGER_SYSVIEW_Start+0x94>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aa0:	6a3a      	ldr	r2, [r7, #32]
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	701a      	strb	r2, [r3, #0]
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	61fb      	str	r3, [r7, #28]
 8005aae:	4b28      	ldr	r3, [pc, #160]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	61bb      	str	r3, [r7, #24]
 8005ab4:	e00b      	b.n	8005ace <SEGGER_SYSVIEW_Start+0xe6>
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	1c59      	adds	r1, r3, #1
 8005abe:	61f9      	str	r1, [r7, #28]
 8005ac0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ac4:	b2d2      	uxtb	r2, r2
 8005ac6:	701a      	strb	r2, [r3, #0]
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	09db      	lsrs	r3, r3, #7
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	69bb      	ldr	r3, [r7, #24]
 8005ad0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ad2:	d8f0      	bhi.n	8005ab6 <SEGGER_SYSVIEW_Start+0xce>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	1c5a      	adds	r2, r3, #1
 8005ad8:	61fa      	str	r2, [r7, #28]
 8005ada:	69ba      	ldr	r2, [r7, #24]
 8005adc:	b2d2      	uxtb	r2, r2
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	617b      	str	r3, [r7, #20]
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
 8005aec:	e00b      	b.n	8005b06 <SEGGER_SYSVIEW_Start+0x11e>
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	b2da      	uxtb	r2, r3
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	1c59      	adds	r1, r3, #1
 8005af6:	6179      	str	r1, [r7, #20]
 8005af8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005afc:	b2d2      	uxtb	r2, r2
 8005afe:	701a      	strb	r2, [r3, #0]
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	09db      	lsrs	r3, r3, #7
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b0a:	d8f0      	bhi.n	8005aee <SEGGER_SYSVIEW_Start+0x106>
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	1c5a      	adds	r2, r3, #1
 8005b10:	617a      	str	r2, [r7, #20]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	b2d2      	uxtb	r2, r2
 8005b16:	701a      	strb	r2, [r3, #0]
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005b1c:	2218      	movs	r2, #24
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	f7ff f929 	bl	8004d78 <_SendPacket>
      RECORD_END();
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005b2c:	4b08      	ldr	r3, [pc, #32]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d002      	beq.n	8005b3a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005b34:	4b06      	ldr	r3, [pc, #24]	@ (8005b50 <SEGGER_SYSVIEW_Start+0x168>)
 8005b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b38:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005b3a:	f000 f9eb 	bl	8005f14 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005b3e:	f000 f9b1 	bl	8005ea4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005b42:	f000 fd21 	bl	8006588 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005b46:	bf00      	nop
 8005b48:	3730      	adds	r7, #48	@ 0x30
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	2001c57c 	.word	0x2001c57c
 8005b54:	0800691c 	.word	0x0800691c
 8005b58:	2001c5ac 	.word	0x2001c5ac

08005b5c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005b62:	f3ef 8311 	mrs	r3, BASEPRI
 8005b66:	f04f 0120 	mov.w	r1, #32
 8005b6a:	f381 8811 	msr	BASEPRI, r1
 8005b6e:	607b      	str	r3, [r7, #4]
 8005b70:	480b      	ldr	r0, [pc, #44]	@ (8005ba0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005b72:	f7ff f814 	bl	8004b9e <_PreparePacket>
 8005b76:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005b78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ba4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005b80:	220b      	movs	r2, #11
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6838      	ldr	r0, [r7, #0]
 8005b86:	f7ff f8f7 	bl	8004d78 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005b8a:	4b06      	ldr	r3, [pc, #24]	@ (8005ba4 <SEGGER_SYSVIEW_Stop+0x48>)
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f383 8811 	msr	BASEPRI, r3
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	2001c5ac 	.word	0x2001c5ac
 8005ba4:	2001c57c 	.word	0x2001c57c

08005ba8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	@ 0x30
 8005bac:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005bae:	f3ef 8311 	mrs	r3, BASEPRI
 8005bb2:	f04f 0120 	mov.w	r1, #32
 8005bb6:	f381 8811 	msr	BASEPRI, r1
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	4845      	ldr	r0, [pc, #276]	@ (8005cd4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005bbe:	f7fe ffee 	bl	8004b9e <_PreparePacket>
 8005bc2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bcc:	4b42      	ldr	r3, [pc, #264]	@ (8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005bce:	685b      	ldr	r3, [r3, #4]
 8005bd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bd2:	e00b      	b.n	8005bec <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005bd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005bde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bee:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005bf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c00:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c06:	4b34      	ldr	r3, [pc, #208]	@ (8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	623b      	str	r3, [r7, #32]
 8005c0c:	e00b      	b.n	8005c26 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	b2da      	uxtb	r2, r3
 8005c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c14:	1c59      	adds	r1, r3, #1
 8005c16:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	09db      	lsrs	r3, r3, #7
 8005c24:	623b      	str	r3, [r7, #32]
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c2a:	d8f0      	bhi.n	8005c0e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2e:	1c5a      	adds	r2, r3, #1
 8005c30:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c32:	6a3a      	ldr	r2, [r7, #32]
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	61fb      	str	r3, [r7, #28]
 8005c40:	4b25      	ldr	r3, [pc, #148]	@ (8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	61bb      	str	r3, [r7, #24]
 8005c46:	e00b      	b.n	8005c60 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	69fb      	ldr	r3, [r7, #28]
 8005c4e:	1c59      	adds	r1, r3, #1
 8005c50:	61f9      	str	r1, [r7, #28]
 8005c52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c56:	b2d2      	uxtb	r2, r2
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	09db      	lsrs	r3, r3, #7
 8005c5e:	61bb      	str	r3, [r7, #24]
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c64:	d8f0      	bhi.n	8005c48 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	1c5a      	adds	r2, r3, #1
 8005c6a:	61fa      	str	r2, [r7, #28]
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	b2d2      	uxtb	r2, r2
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	617b      	str	r3, [r7, #20]
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	613b      	str	r3, [r7, #16]
 8005c7e:	e00b      	b.n	8005c98 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005c80:	693b      	ldr	r3, [r7, #16]
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	1c59      	adds	r1, r3, #1
 8005c88:	6179      	str	r1, [r7, #20]
 8005c8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c8e:	b2d2      	uxtb	r2, r2
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	693b      	ldr	r3, [r7, #16]
 8005c94:	09db      	lsrs	r3, r3, #7
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c9c:	d8f0      	bhi.n	8005c80 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	1c5a      	adds	r2, r3, #1
 8005ca2:	617a      	str	r2, [r7, #20]
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	b2d2      	uxtb	r2, r2
 8005ca8:	701a      	strb	r2, [r3, #0]
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005cae:	2218      	movs	r2, #24
 8005cb0:	6879      	ldr	r1, [r7, #4]
 8005cb2:	68b8      	ldr	r0, [r7, #8]
 8005cb4:	f7ff f860 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005cbe:	4b06      	ldr	r3, [pc, #24]	@ (8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d002      	beq.n	8005ccc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005cc6:	4b04      	ldr	r3, [pc, #16]	@ (8005cd8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	4798      	blx	r3
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3730      	adds	r7, #48	@ 0x30
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	2001c5ac 	.word	0x2001c5ac
 8005cd8:	2001c57c 	.word	0x2001c57c

08005cdc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b092      	sub	sp, #72	@ 0x48
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005ce4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ce8:	f04f 0120 	mov.w	r1, #32
 8005cec:	f381 8811 	msr	BASEPRI, r1
 8005cf0:	617b      	str	r3, [r7, #20]
 8005cf2:	486a      	ldr	r0, [pc, #424]	@ (8005e9c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005cf4:	f7fe ff53 	bl	8004b9e <_PreparePacket>
 8005cf8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	4b66      	ldr	r3, [pc, #408]	@ (8005ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0e:	e00b      	b.n	8005d28 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005d10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d16:	1c59      	adds	r1, r3, #1
 8005d18:	6479      	str	r1, [r7, #68]	@ 0x44
 8005d1a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d1e:	b2d2      	uxtb	r2, r2
 8005d20:	701a      	strb	r2, [r3, #0]
 8005d22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d24:	09db      	lsrs	r3, r3, #7
 8005d26:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d2c:	d8f0      	bhi.n	8005d10 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005d2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d48:	e00b      	b.n	8005d62 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d50:	1c59      	adds	r1, r3, #1
 8005d52:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005d54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d58:	b2d2      	uxtb	r2, r2
 8005d5a:	701a      	strb	r2, [r3, #0]
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	09db      	lsrs	r3, r3, #7
 8005d60:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d66:	d8f0      	bhi.n	8005d4a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d6a:	1c5a      	adds	r2, r3, #1
 8005d6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005d6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]
 8005d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d76:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	2220      	movs	r2, #32
 8005d7e:	4619      	mov	r1, r3
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f7fe fed3 	bl	8004b2c <_EncodeStr>
 8005d86:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005d88:	2209      	movs	r2, #9
 8005d8a:	68f9      	ldr	r1, [r7, #12]
 8005d8c:	6938      	ldr	r0, [r7, #16]
 8005d8e:	f7fe fff3 	bl	8004d78 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	4b40      	ldr	r3, [pc, #256]	@ (8005ea0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	633b      	str	r3, [r7, #48]	@ 0x30
 8005da6:	e00b      	b.n	8005dc0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005daa:	b2da      	uxtb	r2, r3
 8005dac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dae:	1c59      	adds	r1, r3, #1
 8005db0:	6379      	str	r1, [r7, #52]	@ 0x34
 8005db2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dbc:	09db      	lsrs	r3, r3, #7
 8005dbe:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dc4:	d8f0      	bhi.n	8005da8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005dc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dc8:	1c5a      	adds	r2, r3, #1
 8005dca:	637a      	str	r2, [r7, #52]	@ 0x34
 8005dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dce:	b2d2      	uxtb	r2, r2
 8005dd0:	701a      	strb	r2, [r3, #0]
 8005dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005dd4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005de0:	e00b      	b.n	8005dfa <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	b2da      	uxtb	r2, r3
 8005de6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de8:	1c59      	adds	r1, r3, #1
 8005dea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005dec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005df0:	b2d2      	uxtb	r2, r2
 8005df2:	701a      	strb	r2, [r3, #0]
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	09db      	lsrs	r3, r3, #7
 8005df8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dfc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dfe:	d8f0      	bhi.n	8005de2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e0e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	623b      	str	r3, [r7, #32]
 8005e1a:	e00b      	b.n	8005e34 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	b2da      	uxtb	r2, r3
 8005e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e22:	1c59      	adds	r1, r3, #1
 8005e24:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e26:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e2a:	b2d2      	uxtb	r2, r2
 8005e2c:	701a      	strb	r2, [r3, #0]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	09db      	lsrs	r3, r3, #7
 8005e32:	623b      	str	r3, [r7, #32]
 8005e34:	6a3b      	ldr	r3, [r7, #32]
 8005e36:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e38:	d8f0      	bhi.n	8005e1c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e40:	6a3a      	ldr	r2, [r7, #32]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e48:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	61fb      	str	r3, [r7, #28]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	61bb      	str	r3, [r7, #24]
 8005e54:	e00b      	b.n	8005e6e <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	b2da      	uxtb	r2, r3
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	1c59      	adds	r1, r3, #1
 8005e5e:	61f9      	str	r1, [r7, #28]
 8005e60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	09db      	lsrs	r3, r3, #7
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e72:	d8f0      	bhi.n	8005e56 <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8005e74:	69fb      	ldr	r3, [r7, #28]
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	61fa      	str	r2, [r7, #28]
 8005e7a:	69ba      	ldr	r2, [r7, #24]
 8005e7c:	b2d2      	uxtb	r2, r2
 8005e7e:	701a      	strb	r2, [r3, #0]
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005e84:	2215      	movs	r2, #21
 8005e86:	68f9      	ldr	r1, [r7, #12]
 8005e88:	6938      	ldr	r0, [r7, #16]
 8005e8a:	f7fe ff75 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f383 8811 	msr	BASEPRI, r3
}
 8005e94:	bf00      	nop
 8005e96:	3748      	adds	r7, #72	@ 0x48
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	2001c5ac 	.word	0x2001c5ac
 8005ea0:	2001c57c 	.word	0x2001c57c

08005ea4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8005ea8:	4b07      	ldr	r3, [pc, #28]	@ (8005ec8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d008      	beq.n	8005ec2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8005eb0:	4b05      	ldr	r3, [pc, #20]	@ (8005ec8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8005eba:	4b03      	ldr	r3, [pc, #12]	@ (8005ec8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	4798      	blx	r3
  }
}
 8005ec2:	bf00      	nop
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	bf00      	nop
 8005ec8:	2001c57c 	.word	0x2001c57c

08005ecc <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005ed4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ed8:	f04f 0120 	mov.w	r1, #32
 8005edc:	f381 8811 	msr	BASEPRI, r1
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	480b      	ldr	r0, [pc, #44]	@ (8005f10 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8005ee4:	f7fe fe5b 	bl	8004b9e <_PreparePacket>
 8005ee8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005eea:	2280      	movs	r2, #128	@ 0x80
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	6938      	ldr	r0, [r7, #16]
 8005ef0:	f7fe fe1c 	bl	8004b2c <_EncodeStr>
 8005ef4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8005ef6:	220e      	movs	r2, #14
 8005ef8:	68f9      	ldr	r1, [r7, #12]
 8005efa:	6938      	ldr	r0, [r7, #16]
 8005efc:	f7fe ff3c 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	f383 8811 	msr	BASEPRI, r3
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
 8005f0e:	bf00      	nop
 8005f10:	2001c5ac 	.word	0x2001c5ac

08005f14 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8005f14:	b590      	push	{r4, r7, lr}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8005f1a:	4b15      	ldr	r3, [pc, #84]	@ (8005f70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f1c:	6a1b      	ldr	r3, [r3, #32]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01a      	beq.n	8005f58 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8005f22:	4b13      	ldr	r3, [pc, #76]	@ (8005f70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d015      	beq.n	8005f58 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8005f2c:	4b10      	ldr	r3, [pc, #64]	@ (8005f70 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8005f2e:	6a1b      	ldr	r3, [r3, #32]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	4798      	blx	r3
 8005f34:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f38:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005f3a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005f3e:	f04f 0200 	mov.w	r2, #0
 8005f42:	f04f 0300 	mov.w	r3, #0
 8005f46:	000a      	movs	r2, r1
 8005f48:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4621      	mov	r1, r4
 8005f50:	200d      	movs	r0, #13
 8005f52:	f7ff fcef 	bl	8005934 <SEGGER_SYSVIEW_RecordU32x2>
 8005f56:	e006      	b.n	8005f66 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005f58:	4b06      	ldr	r3, [pc, #24]	@ (8005f74 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	200c      	movs	r0, #12
 8005f60:	f7ff fcac 	bl	80058bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8005f64:	bf00      	nop
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}
 8005f6e:	bf00      	nop
 8005f70:	2001c57c 	.word	0x2001c57c
 8005f74:	e0001004 	.word	0xe0001004

08005f78 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005f7e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f82:	f04f 0120 	mov.w	r1, #32
 8005f86:	f381 8811 	msr	BASEPRI, r1
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	4819      	ldr	r0, [pc, #100]	@ (8005ff4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005f8e:	f7fe fe06 	bl	8004b9e <_PreparePacket>
 8005f92:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005f98:	4b17      	ldr	r3, [pc, #92]	@ (8005ff8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	617b      	str	r3, [r7, #20]
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
 8005faa:	e00b      	b.n	8005fc4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	b2da      	uxtb	r2, r3
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1c59      	adds	r1, r3, #1
 8005fb4:	6179      	str	r1, [r7, #20]
 8005fb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fba:	b2d2      	uxtb	r2, r2
 8005fbc:	701a      	strb	r2, [r3, #0]
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	09db      	lsrs	r3, r3, #7
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fc8:	d8f0      	bhi.n	8005fac <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	617a      	str	r2, [r7, #20]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	b2d2      	uxtb	r2, r2
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8005fda:	2202      	movs	r2, #2
 8005fdc:	6879      	ldr	r1, [r7, #4]
 8005fde:	68b8      	ldr	r0, [r7, #8]
 8005fe0:	f7fe feca 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f383 8811 	msr	BASEPRI, r3
}
 8005fea:	bf00      	nop
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	2001c5ac 	.word	0x2001c5ac
 8005ff8:	e000ed04 	.word	0xe000ed04

08005ffc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006002:	f3ef 8311 	mrs	r3, BASEPRI
 8006006:	f04f 0120 	mov.w	r1, #32
 800600a:	f381 8811 	msr	BASEPRI, r1
 800600e:	607b      	str	r3, [r7, #4]
 8006010:	4807      	ldr	r0, [pc, #28]	@ (8006030 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006012:	f7fe fdc4 	bl	8004b9e <_PreparePacket>
 8006016:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006018:	2203      	movs	r2, #3
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6838      	ldr	r0, [r7, #0]
 800601e:	f7fe feab 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f383 8811 	msr	BASEPRI, r3
}
 8006028:	bf00      	nop
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}
 8006030:	2001c5ac 	.word	0x2001c5ac

08006034 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800603a:	f3ef 8311 	mrs	r3, BASEPRI
 800603e:	f04f 0120 	mov.w	r1, #32
 8006042:	f381 8811 	msr	BASEPRI, r1
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	4807      	ldr	r0, [pc, #28]	@ (8006068 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800604a:	f7fe fda8 	bl	8004b9e <_PreparePacket>
 800604e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006050:	2212      	movs	r2, #18
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6838      	ldr	r0, [r7, #0]
 8006056:	f7fe fe8f 	bl	8004d78 <_SendPacket>
  RECORD_END();
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f383 8811 	msr	BASEPRI, r3
}
 8006060:	bf00      	nop
 8006062:	3708      	adds	r7, #8
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	2001c5ac 	.word	0x2001c5ac

0800606c <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006074:	f3ef 8311 	mrs	r3, BASEPRI
 8006078:	f04f 0120 	mov.w	r1, #32
 800607c:	f381 8811 	msr	BASEPRI, r1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	4817      	ldr	r0, [pc, #92]	@ (80060e0 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8006084:	f7fe fd8b 	bl	8004b9e <_PreparePacket>
 8006088:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	e00b      	b.n	80060b0 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	b2da      	uxtb	r2, r3
 800609c:	69fb      	ldr	r3, [r7, #28]
 800609e:	1c59      	adds	r1, r3, #1
 80060a0:	61f9      	str	r1, [r7, #28]
 80060a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	09db      	lsrs	r3, r3, #7
 80060ae:	61bb      	str	r3, [r7, #24]
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060b4:	d8f0      	bhi.n	8006098 <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	61fa      	str	r2, [r7, #28]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	b2d2      	uxtb	r2, r2
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80060c6:	221c      	movs	r2, #28
 80060c8:	68f9      	ldr	r1, [r7, #12]
 80060ca:	6938      	ldr	r0, [r7, #16]
 80060cc:	f7fe fe54 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	f383 8811 	msr	BASEPRI, r3
}
 80060d6:	bf00      	nop
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	2001c5ac 	.word	0x2001c5ac

080060e4 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b08a      	sub	sp, #40	@ 0x28
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060ee:	f3ef 8311 	mrs	r3, BASEPRI
 80060f2:	f04f 0120 	mov.w	r1, #32
 80060f6:	f381 8811 	msr	BASEPRI, r1
 80060fa:	617b      	str	r3, [r7, #20]
 80060fc:	4824      	ldr	r0, [pc, #144]	@ (8006190 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 80060fe:	f7fe fd4e 	bl	8004b9e <_PreparePacket>
 8006102:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	627b      	str	r3, [r7, #36]	@ 0x24
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	623b      	str	r3, [r7, #32]
 8006110:	e00b      	b.n	800612a <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	b2da      	uxtb	r2, r3
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	1c59      	adds	r1, r3, #1
 800611a:	6279      	str	r1, [r7, #36]	@ 0x24
 800611c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	09db      	lsrs	r3, r3, #7
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	2b7f      	cmp	r3, #127	@ 0x7f
 800612e:	d8f0      	bhi.n	8006112 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	627a      	str	r2, [r7, #36]	@ 0x24
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	b2d2      	uxtb	r2, r2
 800613a:	701a      	strb	r2, [r3, #0]
 800613c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	61fb      	str	r3, [r7, #28]
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	61bb      	str	r3, [r7, #24]
 8006148:	e00b      	b.n	8006162 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800614a:	69bb      	ldr	r3, [r7, #24]
 800614c:	b2da      	uxtb	r2, r3
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	1c59      	adds	r1, r3, #1
 8006152:	61f9      	str	r1, [r7, #28]
 8006154:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006158:	b2d2      	uxtb	r2, r2
 800615a:	701a      	strb	r2, [r3, #0]
 800615c:	69bb      	ldr	r3, [r7, #24]
 800615e:	09db      	lsrs	r3, r3, #7
 8006160:	61bb      	str	r3, [r7, #24]
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b7f      	cmp	r3, #127	@ 0x7f
 8006166:	d8f0      	bhi.n	800614a <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	61fa      	str	r2, [r7, #28]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	b2d2      	uxtb	r2, r2
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8006178:	221c      	movs	r2, #28
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	6938      	ldr	r0, [r7, #16]
 800617e:	f7fe fdfb 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	f383 8811 	msr	BASEPRI, r3
}
 8006188:	bf00      	nop
 800618a:	3728      	adds	r7, #40	@ 0x28
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	2001c5ac 	.word	0x2001c5ac

08006194 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800619a:	f3ef 8311 	mrs	r3, BASEPRI
 800619e:	f04f 0120 	mov.w	r1, #32
 80061a2:	f381 8811 	msr	BASEPRI, r1
 80061a6:	607b      	str	r3, [r7, #4]
 80061a8:	4807      	ldr	r0, [pc, #28]	@ (80061c8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80061aa:	f7fe fcf8 	bl	8004b9e <_PreparePacket>
 80061ae:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80061b0:	2211      	movs	r2, #17
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6838      	ldr	r0, [r7, #0]
 80061b6:	f7fe fddf 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f383 8811 	msr	BASEPRI, r3
}
 80061c0:	bf00      	nop
 80061c2:	3708      	adds	r7, #8
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}
 80061c8:	2001c5ac 	.word	0x2001c5ac

080061cc <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b088      	sub	sp, #32
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80061d4:	f3ef 8311 	mrs	r3, BASEPRI
 80061d8:	f04f 0120 	mov.w	r1, #32
 80061dc:	f381 8811 	msr	BASEPRI, r1
 80061e0:	617b      	str	r3, [r7, #20]
 80061e2:	4819      	ldr	r0, [pc, #100]	@ (8006248 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80061e4:	f7fe fcdb 	bl	8004b9e <_PreparePacket>
 80061e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80061ee:	4b17      	ldr	r3, [pc, #92]	@ (800624c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80061f0:	691b      	ldr	r3, [r3, #16]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	1ad3      	subs	r3, r2, r3
 80061f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	61fb      	str	r3, [r7, #28]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	e00b      	b.n	800621a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	b2da      	uxtb	r2, r3
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	1c59      	adds	r1, r3, #1
 800620a:	61f9      	str	r1, [r7, #28]
 800620c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	69bb      	ldr	r3, [r7, #24]
 8006216:	09db      	lsrs	r3, r3, #7
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2b7f      	cmp	r3, #127	@ 0x7f
 800621e:	d8f0      	bhi.n	8006202 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	61fa      	str	r2, [r7, #28]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006230:	2208      	movs	r2, #8
 8006232:	68f9      	ldr	r1, [r7, #12]
 8006234:	6938      	ldr	r0, [r7, #16]
 8006236:	f7fe fd9f 	bl	8004d78 <_SendPacket>
  RECORD_END();
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f383 8811 	msr	BASEPRI, r3
}
 8006240:	bf00      	nop
 8006242:	3720      	adds	r7, #32
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	2001c5ac 	.word	0x2001c5ac
 800624c:	2001c57c 	.word	0x2001c57c

08006250 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006250:	b580      	push	{r7, lr}
 8006252:	b088      	sub	sp, #32
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006258:	f3ef 8311 	mrs	r3, BASEPRI
 800625c:	f04f 0120 	mov.w	r1, #32
 8006260:	f381 8811 	msr	BASEPRI, r1
 8006264:	617b      	str	r3, [r7, #20]
 8006266:	4819      	ldr	r0, [pc, #100]	@ (80062cc <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006268:	f7fe fc99 	bl	8004b9e <_PreparePacket>
 800626c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006272:	4b17      	ldr	r3, [pc, #92]	@ (80062d0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	61bb      	str	r3, [r7, #24]
 8006284:	e00b      	b.n	800629e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	b2da      	uxtb	r2, r3
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	1c59      	adds	r1, r3, #1
 800628e:	61f9      	str	r1, [r7, #28]
 8006290:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
 8006298:	69bb      	ldr	r3, [r7, #24]
 800629a:	09db      	lsrs	r3, r3, #7
 800629c:	61bb      	str	r3, [r7, #24]
 800629e:	69bb      	ldr	r3, [r7, #24]
 80062a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a2:	d8f0      	bhi.n	8006286 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	61fa      	str	r2, [r7, #28]
 80062aa:	69ba      	ldr	r2, [r7, #24]
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80062b4:	2204      	movs	r2, #4
 80062b6:	68f9      	ldr	r1, [r7, #12]
 80062b8:	6938      	ldr	r0, [r7, #16]
 80062ba:	f7fe fd5d 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	f383 8811 	msr	BASEPRI, r3
}
 80062c4:	bf00      	nop
 80062c6:	3720      	adds	r7, #32
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	2001c5ac 	.word	0x2001c5ac
 80062d0:	2001c57c 	.word	0x2001c57c

080062d4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062dc:	f3ef 8311 	mrs	r3, BASEPRI
 80062e0:	f04f 0120 	mov.w	r1, #32
 80062e4:	f381 8811 	msr	BASEPRI, r1
 80062e8:	617b      	str	r3, [r7, #20]
 80062ea:	4819      	ldr	r0, [pc, #100]	@ (8006350 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80062ec:	f7fe fc57 	bl	8004b9e <_PreparePacket>
 80062f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062f6:	4b17      	ldr	r3, [pc, #92]	@ (8006354 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	687a      	ldr	r2, [r7, #4]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	61fb      	str	r3, [r7, #28]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	61bb      	str	r3, [r7, #24]
 8006308:	e00b      	b.n	8006322 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	b2da      	uxtb	r2, r3
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	1c59      	adds	r1, r3, #1
 8006312:	61f9      	str	r1, [r7, #28]
 8006314:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006318:	b2d2      	uxtb	r2, r2
 800631a:	701a      	strb	r2, [r3, #0]
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	09db      	lsrs	r3, r3, #7
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	2b7f      	cmp	r3, #127	@ 0x7f
 8006326:	d8f0      	bhi.n	800630a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006328:	69fb      	ldr	r3, [r7, #28]
 800632a:	1c5a      	adds	r2, r3, #1
 800632c:	61fa      	str	r2, [r7, #28]
 800632e:	69ba      	ldr	r2, [r7, #24]
 8006330:	b2d2      	uxtb	r2, r2
 8006332:	701a      	strb	r2, [r3, #0]
 8006334:	69fb      	ldr	r3, [r7, #28]
 8006336:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006338:	2206      	movs	r2, #6
 800633a:	68f9      	ldr	r1, [r7, #12]
 800633c:	6938      	ldr	r0, [r7, #16]
 800633e:	f7fe fd1b 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f383 8811 	msr	BASEPRI, r3
}
 8006348:	bf00      	nop
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}
 8006350:	2001c5ac 	.word	0x2001c5ac
 8006354:	2001c57c 	.word	0x2001c57c

08006358 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006358:	b580      	push	{r7, lr}
 800635a:	b08a      	sub	sp, #40	@ 0x28
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006362:	f3ef 8311 	mrs	r3, BASEPRI
 8006366:	f04f 0120 	mov.w	r1, #32
 800636a:	f381 8811 	msr	BASEPRI, r1
 800636e:	617b      	str	r3, [r7, #20]
 8006370:	4827      	ldr	r0, [pc, #156]	@ (8006410 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006372:	f7fe fc14 	bl	8004b9e <_PreparePacket>
 8006376:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800637c:	4b25      	ldr	r3, [pc, #148]	@ (8006414 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800637e:	691b      	ldr	r3, [r3, #16]
 8006380:	687a      	ldr	r2, [r7, #4]
 8006382:	1ad3      	subs	r3, r2, r3
 8006384:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	627b      	str	r3, [r7, #36]	@ 0x24
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	e00b      	b.n	80063a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	b2da      	uxtb	r2, r3
 8006394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006396:	1c59      	adds	r1, r3, #1
 8006398:	6279      	str	r1, [r7, #36]	@ 0x24
 800639a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]
 80063a2:	6a3b      	ldr	r3, [r7, #32]
 80063a4:	09db      	lsrs	r3, r3, #7
 80063a6:	623b      	str	r3, [r7, #32]
 80063a8:	6a3b      	ldr	r3, [r7, #32]
 80063aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80063ac:	d8f0      	bhi.n	8006390 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	1c5a      	adds	r2, r3, #1
 80063b2:	627a      	str	r2, [r7, #36]	@ 0x24
 80063b4:	6a3a      	ldr	r2, [r7, #32]
 80063b6:	b2d2      	uxtb	r2, r2
 80063b8:	701a      	strb	r2, [r3, #0]
 80063ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	61fb      	str	r3, [r7, #28]
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	61bb      	str	r3, [r7, #24]
 80063c6:	e00b      	b.n	80063e0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	b2da      	uxtb	r2, r3
 80063cc:	69fb      	ldr	r3, [r7, #28]
 80063ce:	1c59      	adds	r1, r3, #1
 80063d0:	61f9      	str	r1, [r7, #28]
 80063d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	09db      	lsrs	r3, r3, #7
 80063de:	61bb      	str	r3, [r7, #24]
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80063e4:	d8f0      	bhi.n	80063c8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	1c5a      	adds	r2, r3, #1
 80063ea:	61fa      	str	r2, [r7, #28]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	b2d2      	uxtb	r2, r2
 80063f0:	701a      	strb	r2, [r3, #0]
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80063f6:	2207      	movs	r2, #7
 80063f8:	68f9      	ldr	r1, [r7, #12]
 80063fa:	6938      	ldr	r0, [r7, #16]
 80063fc:	f7fe fcbc 	bl	8004d78 <_SendPacket>
  RECORD_END();
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	f383 8811 	msr	BASEPRI, r3
}
 8006406:	bf00      	nop
 8006408:	3728      	adds	r7, #40	@ 0x28
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	bf00      	nop
 8006410:	2001c5ac 	.word	0x2001c5ac
 8006414:	2001c57c 	.word	0x2001c57c

08006418 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006420:	4b04      	ldr	r3, [pc, #16]	@ (8006434 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006422:	691b      	ldr	r3, [r3, #16]
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	1ad3      	subs	r3, r2, r3
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr
 8006434:	2001c57c 	.word	0x2001c57c

08006438 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006438:	b580      	push	{r7, lr}
 800643a:	b08c      	sub	sp, #48	@ 0x30
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006442:	4b40      	ldr	r3, [pc, #256]	@ (8006544 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d077      	beq.n	800653a <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800644a:	4b3e      	ldr	r3, [pc, #248]	@ (8006544 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006450:	2300      	movs	r3, #0
 8006452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006454:	e008      	b.n	8006468 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006456:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006458:	691b      	ldr	r3, [r3, #16]
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800645e:	2b00      	cmp	r3, #0
 8006460:	d007      	beq.n	8006472 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	3301      	adds	r3, #1
 8006466:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006468:	79fb      	ldrb	r3, [r7, #7]
 800646a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800646c:	429a      	cmp	r2, r3
 800646e:	d3f2      	bcc.n	8006456 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006470:	e000      	b.n	8006474 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006472:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006476:	2b00      	cmp	r3, #0
 8006478:	d055      	beq.n	8006526 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800647a:	f3ef 8311 	mrs	r3, BASEPRI
 800647e:	f04f 0120 	mov.w	r1, #32
 8006482:	f381 8811 	msr	BASEPRI, r1
 8006486:	617b      	str	r3, [r7, #20]
 8006488:	482f      	ldr	r0, [pc, #188]	@ (8006548 <SEGGER_SYSVIEW_SendModule+0x110>)
 800648a:	f7fe fb88 	bl	8004b9e <_PreparePacket>
 800648e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	623b      	str	r3, [r7, #32]
 800649c:	e00b      	b.n	80064b6 <SEGGER_SYSVIEW_SendModule+0x7e>
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	b2da      	uxtb	r2, r3
 80064a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a4:	1c59      	adds	r1, r3, #1
 80064a6:	6279      	str	r1, [r7, #36]	@ 0x24
 80064a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064ac:	b2d2      	uxtb	r2, r2
 80064ae:	701a      	strb	r2, [r3, #0]
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	09db      	lsrs	r3, r3, #7
 80064b4:	623b      	str	r3, [r7, #32]
 80064b6:	6a3b      	ldr	r3, [r7, #32]
 80064b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064ba:	d8f0      	bhi.n	800649e <SEGGER_SYSVIEW_SendModule+0x66>
 80064bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064be:	1c5a      	adds	r2, r3, #1
 80064c0:	627a      	str	r2, [r7, #36]	@ 0x24
 80064c2:	6a3a      	ldr	r2, [r7, #32]
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	61fb      	str	r3, [r7, #28]
 80064d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064d2:	689b      	ldr	r3, [r3, #8]
 80064d4:	61bb      	str	r3, [r7, #24]
 80064d6:	e00b      	b.n	80064f0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	b2da      	uxtb	r2, r3
 80064dc:	69fb      	ldr	r3, [r7, #28]
 80064de:	1c59      	adds	r1, r3, #1
 80064e0:	61f9      	str	r1, [r7, #28]
 80064e2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]
 80064ea:	69bb      	ldr	r3, [r7, #24]
 80064ec:	09db      	lsrs	r3, r3, #7
 80064ee:	61bb      	str	r3, [r7, #24]
 80064f0:	69bb      	ldr	r3, [r7, #24]
 80064f2:	2b7f      	cmp	r3, #127	@ 0x7f
 80064f4:	d8f0      	bhi.n	80064d8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	1c5a      	adds	r2, r3, #1
 80064fa:	61fa      	str	r2, [r7, #28]
 80064fc:	69ba      	ldr	r2, [r7, #24]
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2280      	movs	r2, #128	@ 0x80
 800650c:	4619      	mov	r1, r3
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f7fe fb0c 	bl	8004b2c <_EncodeStr>
 8006514:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006516:	2216      	movs	r2, #22
 8006518:	68f9      	ldr	r1, [r7, #12]
 800651a:	6938      	ldr	r0, [r7, #16]
 800651c:	f7fe fc2c 	bl	8004d78 <_SendPacket>
      RECORD_END();
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d006      	beq.n	800653a <SEGGER_SYSVIEW_SendModule+0x102>
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d002      	beq.n	800653a <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	4798      	blx	r3
    }
  }
}
 800653a:	bf00      	nop
 800653c:	3730      	adds	r7, #48	@ 0x30
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}
 8006542:	bf00      	nop
 8006544:	2001c5a4 	.word	0x2001c5a4
 8006548:	2001c5ac 	.word	0x2001c5ac

0800654c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006552:	4b0c      	ldr	r3, [pc, #48]	@ (8006584 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00f      	beq.n	800657a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800655a:	4b0a      	ldr	r3, [pc, #40]	@ (8006584 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	68db      	ldr	r3, [r3, #12]
 800656c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d1f2      	bne.n	8006560 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	2001c5a4 	.word	0x2001c5a4

08006588 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800658e:	f3ef 8311 	mrs	r3, BASEPRI
 8006592:	f04f 0120 	mov.w	r1, #32
 8006596:	f381 8811 	msr	BASEPRI, r1
 800659a:	60fb      	str	r3, [r7, #12]
 800659c:	4817      	ldr	r0, [pc, #92]	@ (80065fc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800659e:	f7fe fafe 	bl	8004b9e <_PreparePacket>
 80065a2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	4b14      	ldr	r3, [pc, #80]	@ (8006600 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	6179      	str	r1, [r7, #20]
 80065be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	617a      	str	r2, [r7, #20]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80065e2:	221b      	movs	r2, #27
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f7fe fbc6 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f383 8811 	msr	BASEPRI, r3
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	2001c5ac 	.word	0x2001c5ac
 8006600:	2001c5a8 	.word	0x2001c5a8

08006604 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006604:	b40f      	push	{r0, r1, r2, r3}
 8006606:	b580      	push	{r7, lr}
 8006608:	b082      	sub	sp, #8
 800660a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006612:	1d3b      	adds	r3, r7, #4
 8006614:	461a      	mov	r2, r3
 8006616:	2100      	movs	r1, #0
 8006618:	6938      	ldr	r0, [r7, #16]
 800661a:	f7fe febd 	bl	8005398 <_VPrintTarget>
  va_end(ParamList);
}
 800661e:	bf00      	nop
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006628:	b004      	add	sp, #16
 800662a:	4770      	bx	lr

0800662c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800662c:	b580      	push	{r7, lr}
 800662e:	b08a      	sub	sp, #40	@ 0x28
 8006630:	af00      	add	r7, sp, #0
 8006632:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006634:	f3ef 8311 	mrs	r3, BASEPRI
 8006638:	f04f 0120 	mov.w	r1, #32
 800663c:	f381 8811 	msr	BASEPRI, r1
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	4827      	ldr	r0, [pc, #156]	@ (80066e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006644:	f7fe faab 	bl	8004b9e <_PreparePacket>
 8006648:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800664a:	2280      	movs	r2, #128	@ 0x80
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	6938      	ldr	r0, [r7, #16]
 8006650:	f7fe fa6c 	bl	8004b2c <_EncodeStr>
 8006654:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	627b      	str	r3, [r7, #36]	@ 0x24
 800665a:	2301      	movs	r3, #1
 800665c:	623b      	str	r3, [r7, #32]
 800665e:	e00b      	b.n	8006678 <SEGGER_SYSVIEW_Warn+0x4c>
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	b2da      	uxtb	r2, r3
 8006664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006666:	1c59      	adds	r1, r3, #1
 8006668:	6279      	str	r1, [r7, #36]	@ 0x24
 800666a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
 8006672:	6a3b      	ldr	r3, [r7, #32]
 8006674:	09db      	lsrs	r3, r3, #7
 8006676:	623b      	str	r3, [r7, #32]
 8006678:	6a3b      	ldr	r3, [r7, #32]
 800667a:	2b7f      	cmp	r3, #127	@ 0x7f
 800667c:	d8f0      	bhi.n	8006660 <SEGGER_SYSVIEW_Warn+0x34>
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	627a      	str	r2, [r7, #36]	@ 0x24
 8006684:	6a3a      	ldr	r2, [r7, #32]
 8006686:	b2d2      	uxtb	r2, r2
 8006688:	701a      	strb	r2, [r3, #0]
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	2300      	movs	r3, #0
 8006694:	61bb      	str	r3, [r7, #24]
 8006696:	e00b      	b.n	80066b0 <SEGGER_SYSVIEW_Warn+0x84>
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	b2da      	uxtb	r2, r3
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	1c59      	adds	r1, r3, #1
 80066a0:	61f9      	str	r1, [r7, #28]
 80066a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066a6:	b2d2      	uxtb	r2, r2
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	09db      	lsrs	r3, r3, #7
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	69bb      	ldr	r3, [r7, #24]
 80066b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b4:	d8f0      	bhi.n	8006698 <SEGGER_SYSVIEW_Warn+0x6c>
 80066b6:	69fb      	ldr	r3, [r7, #28]
 80066b8:	1c5a      	adds	r2, r3, #1
 80066ba:	61fa      	str	r2, [r7, #28]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	b2d2      	uxtb	r2, r2
 80066c0:	701a      	strb	r2, [r3, #0]
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066c6:	221a      	movs	r2, #26
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	6938      	ldr	r0, [r7, #16]
 80066cc:	f7fe fb54 	bl	8004d78 <_SendPacket>
  RECORD_END();
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	f383 8811 	msr	BASEPRI, r3
}
 80066d6:	bf00      	nop
 80066d8:	3728      	adds	r7, #40	@ 0x28
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop
 80066e0:	2001c5ac 	.word	0x2001c5ac

080066e4 <memcmp>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	3901      	subs	r1, #1
 80066e8:	4402      	add	r2, r0
 80066ea:	4290      	cmp	r0, r2
 80066ec:	d101      	bne.n	80066f2 <memcmp+0xe>
 80066ee:	2000      	movs	r0, #0
 80066f0:	e005      	b.n	80066fe <memcmp+0x1a>
 80066f2:	7803      	ldrb	r3, [r0, #0]
 80066f4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80066f8:	42a3      	cmp	r3, r4
 80066fa:	d001      	beq.n	8006700 <memcmp+0x1c>
 80066fc:	1b18      	subs	r0, r3, r4
 80066fe:	bd10      	pop	{r4, pc}
 8006700:	3001      	adds	r0, #1
 8006702:	e7f2      	b.n	80066ea <memcmp+0x6>

08006704 <memset>:
 8006704:	4402      	add	r2, r0
 8006706:	4603      	mov	r3, r0
 8006708:	4293      	cmp	r3, r2
 800670a:	d100      	bne.n	800670e <memset+0xa>
 800670c:	4770      	bx	lr
 800670e:	f803 1b01 	strb.w	r1, [r3], #1
 8006712:	e7f9      	b.n	8006708 <memset+0x4>

08006714 <__libc_init_array>:
 8006714:	b570      	push	{r4, r5, r6, lr}
 8006716:	4d0d      	ldr	r5, [pc, #52]	@ (800674c <__libc_init_array+0x38>)
 8006718:	4c0d      	ldr	r4, [pc, #52]	@ (8006750 <__libc_init_array+0x3c>)
 800671a:	1b64      	subs	r4, r4, r5
 800671c:	10a4      	asrs	r4, r4, #2
 800671e:	2600      	movs	r6, #0
 8006720:	42a6      	cmp	r6, r4
 8006722:	d109      	bne.n	8006738 <__libc_init_array+0x24>
 8006724:	4d0b      	ldr	r5, [pc, #44]	@ (8006754 <__libc_init_array+0x40>)
 8006726:	4c0c      	ldr	r4, [pc, #48]	@ (8006758 <__libc_init_array+0x44>)
 8006728:	f000 f826 	bl	8006778 <_init>
 800672c:	1b64      	subs	r4, r4, r5
 800672e:	10a4      	asrs	r4, r4, #2
 8006730:	2600      	movs	r6, #0
 8006732:	42a6      	cmp	r6, r4
 8006734:	d105      	bne.n	8006742 <__libc_init_array+0x2e>
 8006736:	bd70      	pop	{r4, r5, r6, pc}
 8006738:	f855 3b04 	ldr.w	r3, [r5], #4
 800673c:	4798      	blx	r3
 800673e:	3601      	adds	r6, #1
 8006740:	e7ee      	b.n	8006720 <__libc_init_array+0xc>
 8006742:	f855 3b04 	ldr.w	r3, [r5], #4
 8006746:	4798      	blx	r3
 8006748:	3601      	adds	r6, #1
 800674a:	e7f2      	b.n	8006732 <__libc_init_array+0x1e>
 800674c:	08006940 	.word	0x08006940
 8006750:	08006940 	.word	0x08006940
 8006754:	08006940 	.word	0x08006940
 8006758:	08006944 	.word	0x08006944

0800675c <memcpy>:
 800675c:	440a      	add	r2, r1
 800675e:	4291      	cmp	r1, r2
 8006760:	f100 33ff 	add.w	r3, r0, #4294967295
 8006764:	d100      	bne.n	8006768 <memcpy+0xc>
 8006766:	4770      	bx	lr
 8006768:	b510      	push	{r4, lr}
 800676a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800676e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006772:	4291      	cmp	r1, r2
 8006774:	d1f9      	bne.n	800676a <memcpy+0xe>
 8006776:	bd10      	pop	{r4, pc}

08006778 <_init>:
 8006778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800677a:	bf00      	nop
 800677c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800677e:	bc08      	pop	{r3}
 8006780:	469e      	mov	lr, r3
 8006782:	4770      	bx	lr

08006784 <_fini>:
 8006784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006786:	bf00      	nop
 8006788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800678a:	bc08      	pop	{r3}
 800678c:	469e      	mov	lr, r3
 800678e:	4770      	bx	lr
