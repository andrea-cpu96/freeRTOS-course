
003LED_Block_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800569c  0800569c  0000669c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057d4  080057d4  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  080057d4  080057d4  000067d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057dc  080057dc  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057dc  080057dc  000067dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057e0  080057e0  000067e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080057e4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001c668  20000014  080057f8  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001c67c  080057f8  0000767c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012768  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  000197ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  0001c108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da9  00000000  00000000  0001d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191a8  00000000  00000000  0001e069  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000141ab  00000000  00000000  00037211  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000aaacc  00000000  00000000  0004b3bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5e88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049f8  00000000  00000000  000f5ecc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000f7  00000000  00000000  000fa8c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000014 	.word	0x20000014
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005684 	.word	0x08005684

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000018 	.word	0x20000018
 80001dc:	08005684 	.word	0x08005684

080001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001e2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001e6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000270 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001ea:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001ee:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001f2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001f4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001f6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001f8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001fa:	d332      	bcc.n	8000262 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001fc:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001fe:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000200:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000202:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000204:	d314      	bcc.n	8000230 <_CheckCase2>

08000206 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000206:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000208:	19d0      	adds	r0, r2, r7
 800020a:	bf00      	nop

0800020c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800020c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000210:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000214:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000216:	d005      	beq.n	8000224 <_CSDone>
        LDRB     R3,[R1], #+1
 8000218:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800021c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000220:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000222:	d1f3      	bne.n	800020c <_LoopCopyStraight>

08000224 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000224:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000228:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800022a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800022c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800022e:	4770      	bx	lr

08000230 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000230:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000232:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000234:	d319      	bcc.n	800026a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000236:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000238:	1b12      	subs	r2, r2, r4

0800023a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800023e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000242:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000246:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000248:	d005      	beq.n	8000256 <_No2ChunkNeeded>

0800024a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800024a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000252:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000254:	d1f9      	bne.n	800024a <_LoopCopyAfterWrapAround>

08000256 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000256:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800025a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800025c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000260:	4770      	bx	lr

08000262 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000262:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000264:	3801      	subs	r0, #1
        CMP      R0,R2
 8000266:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000268:	d2cd      	bcs.n	8000206 <_Case4>

0800026a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800026a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800026e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000270:	200194a8 	.word	0x200194a8

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b96a 	b.w	8000560 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a8:	9d08      	ldr	r5, [sp, #32]
 80002aa:	460c      	mov	r4, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14e      	bne.n	800034e <__udivmoddi4+0xaa>
 80002b0:	4694      	mov	ip, r2
 80002b2:	458c      	cmp	ip, r1
 80002b4:	4686      	mov	lr, r0
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	d962      	bls.n	8000382 <__udivmoddi4+0xde>
 80002bc:	b14a      	cbz	r2, 80002d2 <__udivmoddi4+0x2e>
 80002be:	f1c2 0320 	rsb	r3, r2, #32
 80002c2:	4091      	lsls	r1, r2
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80002cc:	4319      	orrs	r1, r3
 80002ce:	fa00 fe02 	lsl.w	lr, r0, r2
 80002d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d6:	fa1f f68c 	uxth.w	r6, ip
 80002da:	fbb1 f4f7 	udiv	r4, r1, r7
 80002de:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002e2:	fb07 1114 	mls	r1, r7, r4, r1
 80002e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002ea:	fb04 f106 	mul.w	r1, r4, r6
 80002ee:	4299      	cmp	r1, r3
 80002f0:	d90a      	bls.n	8000308 <__udivmoddi4+0x64>
 80002f2:	eb1c 0303 	adds.w	r3, ip, r3
 80002f6:	f104 30ff 	add.w	r0, r4, #4294967295
 80002fa:	f080 8112 	bcs.w	8000522 <__udivmoddi4+0x27e>
 80002fe:	4299      	cmp	r1, r3
 8000300:	f240 810f 	bls.w	8000522 <__udivmoddi4+0x27e>
 8000304:	3c02      	subs	r4, #2
 8000306:	4463      	add	r3, ip
 8000308:	1a59      	subs	r1, r3, r1
 800030a:	fa1f f38e 	uxth.w	r3, lr
 800030e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000312:	fb07 1110 	mls	r1, r7, r0, r1
 8000316:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800031a:	fb00 f606 	mul.w	r6, r0, r6
 800031e:	429e      	cmp	r6, r3
 8000320:	d90a      	bls.n	8000338 <__udivmoddi4+0x94>
 8000322:	eb1c 0303 	adds.w	r3, ip, r3
 8000326:	f100 31ff 	add.w	r1, r0, #4294967295
 800032a:	f080 80fc 	bcs.w	8000526 <__udivmoddi4+0x282>
 800032e:	429e      	cmp	r6, r3
 8000330:	f240 80f9 	bls.w	8000526 <__udivmoddi4+0x282>
 8000334:	4463      	add	r3, ip
 8000336:	3802      	subs	r0, #2
 8000338:	1b9b      	subs	r3, r3, r6
 800033a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033e:	2100      	movs	r1, #0
 8000340:	b11d      	cbz	r5, 800034a <__udivmoddi4+0xa6>
 8000342:	40d3      	lsrs	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	e9c5 3200 	strd	r3, r2, [r5]
 800034a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034e:	428b      	cmp	r3, r1
 8000350:	d905      	bls.n	800035e <__udivmoddi4+0xba>
 8000352:	b10d      	cbz	r5, 8000358 <__udivmoddi4+0xb4>
 8000354:	e9c5 0100 	strd	r0, r1, [r5]
 8000358:	2100      	movs	r1, #0
 800035a:	4608      	mov	r0, r1
 800035c:	e7f5      	b.n	800034a <__udivmoddi4+0xa6>
 800035e:	fab3 f183 	clz	r1, r3
 8000362:	2900      	cmp	r1, #0
 8000364:	d146      	bne.n	80003f4 <__udivmoddi4+0x150>
 8000366:	42a3      	cmp	r3, r4
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xcc>
 800036a:	4290      	cmp	r0, r2
 800036c:	f0c0 80f0 	bcc.w	8000550 <__udivmoddi4+0x2ac>
 8000370:	1a86      	subs	r6, r0, r2
 8000372:	eb64 0303 	sbc.w	r3, r4, r3
 8000376:	2001      	movs	r0, #1
 8000378:	2d00      	cmp	r5, #0
 800037a:	d0e6      	beq.n	800034a <__udivmoddi4+0xa6>
 800037c:	e9c5 6300 	strd	r6, r3, [r5]
 8000380:	e7e3      	b.n	800034a <__udivmoddi4+0xa6>
 8000382:	2a00      	cmp	r2, #0
 8000384:	f040 8090 	bne.w	80004a8 <__udivmoddi4+0x204>
 8000388:	eba1 040c 	sub.w	r4, r1, ip
 800038c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000390:	fa1f f78c 	uxth.w	r7, ip
 8000394:	2101      	movs	r1, #1
 8000396:	fbb4 f6f8 	udiv	r6, r4, r8
 800039a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039e:	fb08 4416 	mls	r4, r8, r6, r4
 80003a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a6:	fb07 f006 	mul.w	r0, r7, r6
 80003aa:	4298      	cmp	r0, r3
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x11c>
 80003ae:	eb1c 0303 	adds.w	r3, ip, r3
 80003b2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x11a>
 80003b8:	4298      	cmp	r0, r3
 80003ba:	f200 80cd 	bhi.w	8000558 <__udivmoddi4+0x2b4>
 80003be:	4626      	mov	r6, r4
 80003c0:	1a1c      	subs	r4, r3, r0
 80003c2:	fa1f f38e 	uxth.w	r3, lr
 80003c6:	fbb4 f0f8 	udiv	r0, r4, r8
 80003ca:	fb08 4410 	mls	r4, r8, r0, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb00 f707 	mul.w	r7, r0, r7
 80003d6:	429f      	cmp	r7, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x148>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x146>
 80003e4:	429f      	cmp	r7, r3
 80003e6:	f200 80b0 	bhi.w	800054a <__udivmoddi4+0x2a6>
 80003ea:	4620      	mov	r0, r4
 80003ec:	1bdb      	subs	r3, r3, r7
 80003ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0x9c>
 80003f4:	f1c1 0620 	rsb	r6, r1, #32
 80003f8:	408b      	lsls	r3, r1
 80003fa:	fa22 f706 	lsr.w	r7, r2, r6
 80003fe:	431f      	orrs	r7, r3
 8000400:	fa20 fc06 	lsr.w	ip, r0, r6
 8000404:	fa04 f301 	lsl.w	r3, r4, r1
 8000408:	ea43 030c 	orr.w	r3, r3, ip
 800040c:	40f4      	lsrs	r4, r6
 800040e:	fa00 f801 	lsl.w	r8, r0, r1
 8000412:	0c38      	lsrs	r0, r7, #16
 8000414:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000418:	fbb4 fef0 	udiv	lr, r4, r0
 800041c:	fa1f fc87 	uxth.w	ip, r7
 8000420:	fb00 441e 	mls	r4, r0, lr, r4
 8000424:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000428:	fb0e f90c 	mul.w	r9, lr, ip
 800042c:	45a1      	cmp	r9, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	d90a      	bls.n	800044a <__udivmoddi4+0x1a6>
 8000434:	193c      	adds	r4, r7, r4
 8000436:	f10e 3aff 	add.w	sl, lr, #4294967295
 800043a:	f080 8084 	bcs.w	8000546 <__udivmoddi4+0x2a2>
 800043e:	45a1      	cmp	r9, r4
 8000440:	f240 8081 	bls.w	8000546 <__udivmoddi4+0x2a2>
 8000444:	f1ae 0e02 	sub.w	lr, lr, #2
 8000448:	443c      	add	r4, r7
 800044a:	eba4 0409 	sub.w	r4, r4, r9
 800044e:	fa1f f983 	uxth.w	r9, r3
 8000452:	fbb4 f3f0 	udiv	r3, r4, r0
 8000456:	fb00 4413 	mls	r4, r0, r3, r4
 800045a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000462:	45a4      	cmp	ip, r4
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x1d2>
 8000466:	193c      	adds	r4, r7, r4
 8000468:	f103 30ff 	add.w	r0, r3, #4294967295
 800046c:	d267      	bcs.n	800053e <__udivmoddi4+0x29a>
 800046e:	45a4      	cmp	ip, r4
 8000470:	d965      	bls.n	800053e <__udivmoddi4+0x29a>
 8000472:	3b02      	subs	r3, #2
 8000474:	443c      	add	r4, r7
 8000476:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800047a:	fba0 9302 	umull	r9, r3, r0, r2
 800047e:	eba4 040c 	sub.w	r4, r4, ip
 8000482:	429c      	cmp	r4, r3
 8000484:	46ce      	mov	lr, r9
 8000486:	469c      	mov	ip, r3
 8000488:	d351      	bcc.n	800052e <__udivmoddi4+0x28a>
 800048a:	d04e      	beq.n	800052a <__udivmoddi4+0x286>
 800048c:	b155      	cbz	r5, 80004a4 <__udivmoddi4+0x200>
 800048e:	ebb8 030e 	subs.w	r3, r8, lr
 8000492:	eb64 040c 	sbc.w	r4, r4, ip
 8000496:	fa04 f606 	lsl.w	r6, r4, r6
 800049a:	40cb      	lsrs	r3, r1
 800049c:	431e      	orrs	r6, r3
 800049e:	40cc      	lsrs	r4, r1
 80004a0:	e9c5 6400 	strd	r6, r4, [r5]
 80004a4:	2100      	movs	r1, #0
 80004a6:	e750      	b.n	800034a <__udivmoddi4+0xa6>
 80004a8:	f1c2 0320 	rsb	r3, r2, #32
 80004ac:	fa20 f103 	lsr.w	r1, r0, r3
 80004b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b4:	fa24 f303 	lsr.w	r3, r4, r3
 80004b8:	4094      	lsls	r4, r2
 80004ba:	430c      	orrs	r4, r1
 80004bc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c4:	fa1f f78c 	uxth.w	r7, ip
 80004c8:	fbb3 f0f8 	udiv	r0, r3, r8
 80004cc:	fb08 3110 	mls	r1, r8, r0, r3
 80004d0:	0c23      	lsrs	r3, r4, #16
 80004d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d6:	fb00 f107 	mul.w	r1, r0, r7
 80004da:	4299      	cmp	r1, r3
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x24c>
 80004de:	eb1c 0303 	adds.w	r3, ip, r3
 80004e2:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e6:	d22c      	bcs.n	8000542 <__udivmoddi4+0x29e>
 80004e8:	4299      	cmp	r1, r3
 80004ea:	d92a      	bls.n	8000542 <__udivmoddi4+0x29e>
 80004ec:	3802      	subs	r0, #2
 80004ee:	4463      	add	r3, ip
 80004f0:	1a5b      	subs	r3, r3, r1
 80004f2:	b2a4      	uxth	r4, r4
 80004f4:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f8:	fb08 3311 	mls	r3, r8, r1, r3
 80004fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000500:	fb01 f307 	mul.w	r3, r1, r7
 8000504:	42a3      	cmp	r3, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x276>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000510:	d213      	bcs.n	800053a <__udivmoddi4+0x296>
 8000512:	42a3      	cmp	r3, r4
 8000514:	d911      	bls.n	800053a <__udivmoddi4+0x296>
 8000516:	3902      	subs	r1, #2
 8000518:	4464      	add	r4, ip
 800051a:	1ae4      	subs	r4, r4, r3
 800051c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000520:	e739      	b.n	8000396 <__udivmoddi4+0xf2>
 8000522:	4604      	mov	r4, r0
 8000524:	e6f0      	b.n	8000308 <__udivmoddi4+0x64>
 8000526:	4608      	mov	r0, r1
 8000528:	e706      	b.n	8000338 <__udivmoddi4+0x94>
 800052a:	45c8      	cmp	r8, r9
 800052c:	d2ae      	bcs.n	800048c <__udivmoddi4+0x1e8>
 800052e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000532:	eb63 0c07 	sbc.w	ip, r3, r7
 8000536:	3801      	subs	r0, #1
 8000538:	e7a8      	b.n	800048c <__udivmoddi4+0x1e8>
 800053a:	4631      	mov	r1, r6
 800053c:	e7ed      	b.n	800051a <__udivmoddi4+0x276>
 800053e:	4603      	mov	r3, r0
 8000540:	e799      	b.n	8000476 <__udivmoddi4+0x1d2>
 8000542:	4630      	mov	r0, r6
 8000544:	e7d4      	b.n	80004f0 <__udivmoddi4+0x24c>
 8000546:	46d6      	mov	lr, sl
 8000548:	e77f      	b.n	800044a <__udivmoddi4+0x1a6>
 800054a:	4463      	add	r3, ip
 800054c:	3802      	subs	r0, #2
 800054e:	e74d      	b.n	80003ec <__udivmoddi4+0x148>
 8000550:	4606      	mov	r6, r0
 8000552:	4623      	mov	r3, r4
 8000554:	4608      	mov	r0, r1
 8000556:	e70f      	b.n	8000378 <__udivmoddi4+0xd4>
 8000558:	3e02      	subs	r6, #2
 800055a:	4463      	add	r3, ip
 800055c:	e730      	b.n	80003c0 <__udivmoddi4+0x11c>
 800055e:	bf00      	nop

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800056a:	f000 fb8d 	bl	8000c88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056e:	f000 f86f 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000572:	f000 f8d7 	bl	8000724 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* SEGGER LOGS Configurations */
  DWT_CTRL |= ( 1 << 0 );	// Enable the CyCCNT counter
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <main+0xd0>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a2e      	ldr	r2, [pc, #184]	@ (8000634 <main+0xd0>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	6013      	str	r3, [r2, #0]
  SEGGER_SYSVIEW_Conf();
 8000582:	f003 fb53 	bl	8003c2c <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();	// Single-shot viewer
 8000586:	f004 f9c9 	bl	800491c <SEGGER_SYSVIEW_Start>
  /* End of EGGER LOGS Configurations */

  /* Tasks Creation */
  status = xTaskCreate(task1_handler, "LED-Green-Task", 200, NULL, 2, &task1_h);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	9301      	str	r3, [sp, #4]
 8000590:	2302      	movs	r3, #2
 8000592:	9300      	str	r3, [sp, #0]
 8000594:	2300      	movs	r3, #0
 8000596:	22c8      	movs	r2, #200	@ 0xc8
 8000598:	4927      	ldr	r1, [pc, #156]	@ (8000638 <main+0xd4>)
 800059a:	4828      	ldr	r0, [pc, #160]	@ (800063c <main+0xd8>)
 800059c:	f001 fee3 	bl	8002366 <xTaskCreate>
 80005a0:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005a2:	69fb      	ldr	r3, [r7, #28]
 80005a4:	2b01      	cmp	r3, #1
 80005a6:	d00b      	beq.n	80005c0 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80005a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005ac:	f383 8811 	msr	BASEPRI, r3
 80005b0:	f3bf 8f6f 	isb	sy
 80005b4:	f3bf 8f4f 	dsb	sy
 80005b8:	61bb      	str	r3, [r7, #24]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	e7fd      	b.n	80005bc <main+0x58>
  status = xTaskCreate(task2_handler, "LED-Red-Task", 200, NULL, 2, &task2_h);
 80005c0:	f107 0308 	add.w	r3, r7, #8
 80005c4:	9301      	str	r3, [sp, #4]
 80005c6:	2302      	movs	r3, #2
 80005c8:	9300      	str	r3, [sp, #0]
 80005ca:	2300      	movs	r3, #0
 80005cc:	22c8      	movs	r2, #200	@ 0xc8
 80005ce:	491c      	ldr	r1, [pc, #112]	@ (8000640 <main+0xdc>)
 80005d0:	481c      	ldr	r0, [pc, #112]	@ (8000644 <main+0xe0>)
 80005d2:	f001 fec8 	bl	8002366 <xTaskCreate>
 80005d6:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 80005d8:	69fb      	ldr	r3, [r7, #28]
 80005da:	2b01      	cmp	r3, #1
 80005dc:	d00b      	beq.n	80005f6 <main+0x92>
    __asm volatile
 80005de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e2:	f383 8811 	msr	BASEPRI, r3
 80005e6:	f3bf 8f6f 	isb	sy
 80005ea:	f3bf 8f4f 	dsb	sy
 80005ee:	617b      	str	r3, [r7, #20]
}
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	e7fd      	b.n	80005f2 <main+0x8e>
  status = xTaskCreate(task3_handler, "LED-Orange-Task", 200, NULL, 2, &task3_h);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	9301      	str	r3, [sp, #4]
 80005fa:	2302      	movs	r3, #2
 80005fc:	9300      	str	r3, [sp, #0]
 80005fe:	2300      	movs	r3, #0
 8000600:	22c8      	movs	r2, #200	@ 0xc8
 8000602:	4911      	ldr	r1, [pc, #68]	@ (8000648 <main+0xe4>)
 8000604:	4811      	ldr	r0, [pc, #68]	@ (800064c <main+0xe8>)
 8000606:	f001 feae 	bl	8002366 <xTaskCreate>
 800060a:	61f8      	str	r0, [r7, #28]
  configASSERT(status == pdPASS);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	2b01      	cmp	r3, #1
 8000610:	d00b      	beq.n	800062a <main+0xc6>
    __asm volatile
 8000612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000616:	f383 8811 	msr	BASEPRI, r3
 800061a:	f3bf 8f6f 	isb	sy
 800061e:	f3bf 8f4f 	dsb	sy
 8000622:	613b      	str	r3, [r7, #16]
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	e7fd      	b.n	8000626 <main+0xc2>
  /* End of Tasks Creation */

  /* Start Scheduler */
  vTaskStartScheduler();
 800062a:	f002 f8ab 	bl	8002784 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062e:	bf00      	nop
 8000630:	e7fd      	b.n	800062e <main+0xca>
 8000632:	bf00      	nop
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0800569c 	.word	0x0800569c
 800063c:	080009e1 	.word	0x080009e1
 8000640:	080056ac 	.word	0x080056ac
 8000644:	08000a05 	.word	0x08000a05
 8000648:	080056bc 	.word	0x080056bc
 800064c:	08000a29 	.word	0x08000a29

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b094      	sub	sp, #80	@ 0x50
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0320 	add.w	r3, r7, #32
 800065a:	2230      	movs	r2, #48	@ 0x30
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f004 ffd6 	bl	8005610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 030c 	add.w	r3, r7, #12
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
 8000678:	4b28      	ldr	r3, [pc, #160]	@ (800071c <SystemClock_Config+0xcc>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	4a27      	ldr	r2, [pc, #156]	@ (800071c <SystemClock_Config+0xcc>)
 800067e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000682:	6413      	str	r3, [r2, #64]	@ 0x40
 8000684:	4b25      	ldr	r3, [pc, #148]	@ (800071c <SystemClock_Config+0xcc>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000688:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000690:	2300      	movs	r3, #0
 8000692:	607b      	str	r3, [r7, #4]
 8000694:	4b22      	ldr	r3, [pc, #136]	@ (8000720 <SystemClock_Config+0xd0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a21      	ldr	r2, [pc, #132]	@ (8000720 <SystemClock_Config+0xd0>)
 800069a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000720 <SystemClock_Config+0xd0>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 80006c4:	23c0      	movs	r3, #192	@ 0xc0
 80006c6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006c8:	2304      	movs	r3, #4
 80006ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80006cc:	2308      	movs	r3, #8
 80006ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d0:	f107 0320 	add.w	r3, r7, #32
 80006d4:	4618      	mov	r0, r3
 80006d6:	f000 fdb3 	bl	8001240 <HAL_RCC_OscConfig>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006e0:	f000 f9c6 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
 80006e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e8:	2302      	movs	r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006f0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2103      	movs	r1, #3
 8000702:	4618      	mov	r0, r3
 8000704:	f001 f814 	bl	8001730 <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800070e:	f000 f9af 	bl	8000a70 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08c      	sub	sp, #48	@ 0x30
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	4ba2      	ldr	r3, [pc, #648]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4aa1      	ldr	r2, [pc, #644]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000744:	f043 0310 	orr.w	r3, r3, #16
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b9f      	ldr	r3, [pc, #636]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0310 	and.w	r3, r3, #16
 8000752:	61bb      	str	r3, [r7, #24]
 8000754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]
 800075a:	4b9b      	ldr	r3, [pc, #620]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a9a      	ldr	r2, [pc, #616]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000760:	f043 0304 	orr.w	r3, r3, #4
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b98      	ldr	r3, [pc, #608]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0304 	and.w	r3, r3, #4
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b94      	ldr	r3, [pc, #592]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a93      	ldr	r2, [pc, #588]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 800077c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b91      	ldr	r3, [pc, #580]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b8d      	ldr	r3, [pc, #564]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a8c      	ldr	r2, [pc, #560]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b8a      	ldr	r3, [pc, #552]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007aa:	2300      	movs	r3, #0
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	4b86      	ldr	r3, [pc, #536]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a85      	ldr	r2, [pc, #532]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ba:	4b83      	ldr	r3, [pc, #524]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	60bb      	str	r3, [r7, #8]
 80007c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	4b7f      	ldr	r3, [pc, #508]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	4a7e      	ldr	r2, [pc, #504]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d0:	f043 0308 	orr.w	r3, r3, #8
 80007d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d6:	4b7c      	ldr	r3, [pc, #496]	@ (80009c8 <MX_GPIO_Init+0x2a4>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	f003 0308 	and.w	r3, r3, #8
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80007e2:	2200      	movs	r2, #0
 80007e4:	2108      	movs	r1, #8
 80007e6:	4879      	ldr	r0, [pc, #484]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 80007e8:	f000 fcf6 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80007ec:	2201      	movs	r2, #1
 80007ee:	2101      	movs	r1, #1
 80007f0:	4877      	ldr	r0, [pc, #476]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 80007f2:	f000 fcf1 	bl	80011d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80007f6:	2200      	movs	r2, #0
 80007f8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80007fc:	4875      	ldr	r0, [pc, #468]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 80007fe:	f000 fceb 	bl	80011d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000802:	2304      	movs	r3, #4
 8000804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000806:	2300      	movs	r3, #0
 8000808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080a:	2300      	movs	r3, #0
 800080c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800080e:	f107 031c 	add.w	r3, r7, #28
 8000812:	4619      	mov	r1, r3
 8000814:	486d      	ldr	r0, [pc, #436]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 8000816:	f000 fb5b 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800081a:	2308      	movs	r3, #8
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800081e:	2301      	movs	r3, #1
 8000820:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000822:	2300      	movs	r3, #0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000826:	2300      	movs	r3, #0
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	4619      	mov	r1, r3
 8000830:	4866      	ldr	r0, [pc, #408]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 8000832:	f000 fb4d 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4 PE5 MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|MEMS_INT2_Pin;
 8000836:	2332      	movs	r3, #50	@ 0x32
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800083a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800083e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000840:	2300      	movs	r3, #0
 8000842:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	4619      	mov	r1, r3
 800084a:	4860      	ldr	r0, [pc, #384]	@ (80009cc <MX_GPIO_Init+0x2a8>)
 800084c:	f000 fb40 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000850:	2301      	movs	r3, #1
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000854:	2301      	movs	r3, #1
 8000856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000858:	2300      	movs	r3, #0
 800085a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000860:	f107 031c 	add.w	r3, r7, #28
 8000864:	4619      	mov	r1, r3
 8000866:	485a      	ldr	r0, [pc, #360]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000868:	f000 fb32 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800086c:	2308      	movs	r3, #8
 800086e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000878:	2300      	movs	r3, #0
 800087a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800087c:	2305      	movs	r3, #5
 800087e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000880:	f107 031c 	add.w	r3, r7, #28
 8000884:	4619      	mov	r1, r3
 8000886:	4852      	ldr	r0, [pc, #328]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000888:	f000 fb22 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800088c:	2301      	movs	r3, #1
 800088e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000890:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000896:	2300      	movs	r3, #0
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f107 031c 	add.w	r3, r7, #28
 800089e:	4619      	mov	r1, r3
 80008a0:	484d      	ldr	r0, [pc, #308]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008a2:	f000 fb15 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80008a6:	2310      	movs	r3, #16
 80008a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80008b6:	2306      	movs	r3, #6
 80008b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80008ba:	f107 031c 	add.w	r3, r7, #28
 80008be:	4619      	mov	r1, r3
 80008c0:	4845      	ldr	r0, [pc, #276]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008c2:	f000 fb05 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80008c6:	23e0      	movs	r3, #224	@ 0xe0
 80008c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80008d6:	2305      	movs	r3, #5
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	483d      	ldr	r0, [pc, #244]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 80008e2:	f000 faf5 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLK_IN_Pin PB12 */
  GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80008e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008f8:	2305      	movs	r3, #5
 80008fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4836      	ldr	r0, [pc, #216]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 8000904:	f000 fae4 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000908:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800090c:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800091a:	f107 031c 	add.w	r3, r7, #28
 800091e:	4619      	mov	r1, r3
 8000920:	482c      	ldr	r0, [pc, #176]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 8000922:	f000 fad5 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000926:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800092c:	2302      	movs	r3, #2
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000938:	2306      	movs	r3, #6
 800093a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	4619      	mov	r1, r3
 8000942:	4823      	ldr	r0, [pc, #140]	@ (80009d0 <MX_GPIO_Init+0x2ac>)
 8000944:	f000 fac4 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8000948:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000952:	2300      	movs	r3, #0
 8000954:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	481e      	ldr	r0, [pc, #120]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 800095e:	f000 fab7 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8000962:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000968:	2302      	movs	r3, #2
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000970:	2303      	movs	r3, #3
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000974:	230a      	movs	r3, #10
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000978:	f107 031c 	add.w	r3, r7, #28
 800097c:	4619      	mov	r1, r3
 800097e:	4816      	ldr	r0, [pc, #88]	@ (80009d8 <MX_GPIO_Init+0x2b4>)
 8000980:	f000 faa6 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000984:	2320      	movs	r3, #32
 8000986:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 031c 	add.w	r3, r7, #28
 8000994:	4619      	mov	r1, r3
 8000996:	480f      	ldr	r0, [pc, #60]	@ (80009d4 <MX_GPIO_Init+0x2b0>)
 8000998:	f000 fa9a 	bl	8000ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800099c:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80009a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009a2:	2312      	movs	r3, #18
 80009a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80009ae:	2304      	movs	r3, #4
 80009b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	f107 031c 	add.w	r3, r7, #28
 80009b6:	4619      	mov	r1, r3
 80009b8:	4808      	ldr	r0, [pc, #32]	@ (80009dc <MX_GPIO_Init+0x2b8>)
 80009ba:	f000 fa89 	bl	8000ed0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009be:	bf00      	nop
 80009c0:	3730      	adds	r7, #48	@ 0x30
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000
 80009dc:	40020400 	.word	0x40020400

080009e0 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void *parameters)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009e8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009ec:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <task1_handler+0x20>)
 80009ee:	f000 fc0c 	bl	800120a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80009f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009f6:	f001 fe25 	bl	8002644 <vTaskDelay>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80009fa:	bf00      	nop
 80009fc:	e7f4      	b.n	80009e8 <task1_handler+0x8>
 80009fe:	bf00      	nop
 8000a00:	40020c00 	.word	0x40020c00

08000a04 <task2_handler>:
	}

}

static void task2_handler(void *parameters)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a0c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a10:	4804      	ldr	r0, [pc, #16]	@ (8000a24 <task2_handler+0x20>)
 8000a12:	f000 fbfa 	bl	800120a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(800));
 8000a16:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000a1a:	f001 fe13 	bl	8002644 <vTaskDelay>
		HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000a1e:	bf00      	nop
 8000a20:	e7f4      	b.n	8000a0c <task2_handler+0x8>
 8000a22:	bf00      	nop
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <task3_handler>:
	}

}

static void task3_handler(void *parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]

	while(1)
	{

		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000a30:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <task3_handler+0x20>)
 8000a36:	f000 fbe8 	bl	800120a <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(400));
 8000a3a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a3e:	f001 fe01 	bl	8002644 <vTaskDelay>
		HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 8000a42:	bf00      	nop
 8000a44:	e7f4      	b.n	8000a30 <task3_handler+0x8>
 8000a46:	bf00      	nop
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f935 	bl	8000ccc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40000c00 	.word	0x40000c00

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aba:	f002 fc7b 	bl	80033b4 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08e      	sub	sp, #56	@ 0x38
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	4b33      	ldr	r3, [pc, #204]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae4:	4a32      	ldr	r2, [pc, #200]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000ae6:	f043 0308 	orr.w	r3, r3, #8
 8000aea:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aec:	4b30      	ldr	r3, [pc, #192]	@ (8000bb0 <HAL_InitTick+0xe4>)
 8000aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af0:	f003 0308 	and.w	r3, r3, #8
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000af8:	f107 0210 	add.w	r2, r7, #16
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 f820 	bl	8001b48 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b08:	6a3b      	ldr	r3, [r7, #32]
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d103      	bne.n	8000b1a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b12:	f001 f805 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8000b16:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b18:	e004      	b.n	8000b24 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b1a:	f001 f801 	bl	8001b20 <HAL_RCC_GetPCLK1Freq>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	005b      	lsls	r3, r3, #1
 8000b22:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b26:	4a23      	ldr	r2, [pc, #140]	@ (8000bb4 <HAL_InitTick+0xe8>)
 8000b28:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2c:	0c9b      	lsrs	r3, r3, #18
 8000b2e:	3b01      	subs	r3, #1
 8000b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8000b32:	4b21      	ldr	r3, [pc, #132]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b34:	4a21      	ldr	r2, [pc, #132]	@ (8000bbc <HAL_InitTick+0xf0>)
 8000b36:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8000b38:	4b1f      	ldr	r3, [pc, #124]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b3e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8000b40:	4a1d      	ldr	r2, [pc, #116]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b44:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8000b46:	4b1c      	ldr	r3, [pc, #112]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b19      	ldr	r3, [pc, #100]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8000b58:	4817      	ldr	r0, [pc, #92]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b5a:	f001 f827 	bl	8001bac <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d11b      	bne.n	8000ba4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8000b6c:	4812      	ldr	r0, [pc, #72]	@ (8000bb8 <HAL_InitTick+0xec>)
 8000b6e:	f001 f877 	bl	8001c60 <HAL_TIM_Base_Start_IT>
 8000b72:	4603      	mov	r3, r0
 8000b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b78:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d111      	bne.n	8000ba4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8000b80:	2032      	movs	r0, #50	@ 0x32
 8000b82:	f000 f997 	bl	8000eb4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b0f      	cmp	r3, #15
 8000b8a:	d808      	bhi.n	8000b9e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	6879      	ldr	r1, [r7, #4]
 8000b90:	2032      	movs	r0, #50	@ 0x32
 8000b92:	f000 f973 	bl	8000e7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_InitTick+0xf4>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6013      	str	r3, [r2, #0]
 8000b9c:	e002      	b.n	8000ba4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ba4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3738      	adds	r7, #56	@ 0x38
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	431bde83 	.word	0x431bde83
 8000bb8:	20000030 	.word	0x20000030
 8000bbc:	40000c00 	.word	0x40000c00
 8000bc0:	20000004 	.word	0x20000004

08000bc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bc8:	bf00      	nop
 8000bca:	e7fd      	b.n	8000bc8 <NMI_Handler+0x4>

08000bcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd0:	bf00      	nop
 8000bd2:	e7fd      	b.n	8000bd0 <HardFault_Handler+0x4>

08000bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd8:	bf00      	nop
 8000bda:	e7fd      	b.n	8000bd8 <MemManage_Handler+0x4>

08000bdc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be0:	bf00      	nop
 8000be2:	e7fd      	b.n	8000be0 <BusFault_Handler+0x4>

08000be4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000be8:	bf00      	nop
 8000bea:	e7fd      	b.n	8000be8 <UsageFault_Handler+0x4>

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8000c00:	4802      	ldr	r0, [pc, #8]	@ (8000c0c <TIM5_IRQHandler+0x10>)
 8000c02:	f001 f88f 	bl	8001d24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	20000030 	.word	0x20000030

08000c10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c14:	4b06      	ldr	r3, [pc, #24]	@ (8000c30 <SystemInit+0x20>)
 8000c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c1a:	4a05      	ldr	r2, [pc, #20]	@ (8000c30 <SystemInit+0x20>)
 8000c1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c34:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c6c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c38:	f7ff ffea 	bl	8000c10 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c3c:	480c      	ldr	r0, [pc, #48]	@ (8000c70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c3e:	490d      	ldr	r1, [pc, #52]	@ (8000c74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c40:	4a0d      	ldr	r2, [pc, #52]	@ (8000c78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c44:	e002      	b.n	8000c4c <LoopCopyDataInit>

08000c46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c4a:	3304      	adds	r3, #4

08000c4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c50:	d3f9      	bcc.n	8000c46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c52:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c54:	4c0a      	ldr	r4, [pc, #40]	@ (8000c80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c58:	e001      	b.n	8000c5e <LoopFillZerobss>

08000c5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c5c:	3204      	adds	r2, #4

08000c5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c60:	d3fb      	bcc.n	8000c5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c62:	f004 fcdd 	bl	8005620 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c66:	f7ff fc7d 	bl	8000564 <main>
  bx  lr    
 8000c6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000c6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c74:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000c78:	080057e4 	.word	0x080057e4
  ldr r2, =_sbss
 8000c7c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000c80:	2001c67c 	.word	0x2001c67c

08000c84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c84:	e7fe      	b.n	8000c84 <ADC_IRQHandler>
	...

08000c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000cc8 <HAL_Init+0x40>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a0d      	ldr	r2, [pc, #52]	@ (8000cc8 <HAL_Init+0x40>)
 8000c92:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c98:	4b0b      	ldr	r3, [pc, #44]	@ (8000cc8 <HAL_Init+0x40>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8000cc8 <HAL_Init+0x40>)
 8000c9e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ca2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <HAL_Init+0x40>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a07      	ldr	r2, [pc, #28]	@ (8000cc8 <HAL_Init+0x40>)
 8000caa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cb0:	2003      	movs	r0, #3
 8000cb2:	f000 f8d8 	bl	8000e66 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f7ff ff08 	bl	8000acc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cbc:	f7ff fede 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023c00 	.word	0x40023c00

08000ccc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <HAL_IncTick+0x20>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b06      	ldr	r3, [pc, #24]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a04      	ldr	r2, [pc, #16]	@ (8000cf0 <HAL_IncTick+0x24>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	20000078 	.word	0x20000078

08000cf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b03      	ldr	r3, [pc, #12]	@ (8000d08 <HAL_GetTick+0x14>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	20000078 	.word	0x20000078

08000d0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	68db      	ldr	r3, [r3, #12]
 8000d20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d22:	68ba      	ldr	r2, [r7, #8]
 8000d24:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d34:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d3e:	4a04      	ldr	r2, [pc, #16]	@ (8000d50 <__NVIC_SetPriorityGrouping+0x44>)
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	60d3      	str	r3, [r2, #12]
}
 8000d44:	bf00      	nop
 8000d46:	3714      	adds	r7, #20
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000ed00 	.word	0xe000ed00

08000d54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d58:	4b04      	ldr	r3, [pc, #16]	@ (8000d6c <__NVIC_GetPriorityGrouping+0x18>)
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	0a1b      	lsrs	r3, r3, #8
 8000d5e:	f003 0307 	and.w	r3, r3, #7
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	db0b      	blt.n	8000d9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d82:	79fb      	ldrb	r3, [r7, #7]
 8000d84:	f003 021f 	and.w	r2, r3, #31
 8000d88:	4907      	ldr	r1, [pc, #28]	@ (8000da8 <__NVIC_EnableIRQ+0x38>)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	095b      	lsrs	r3, r3, #5
 8000d90:	2001      	movs	r0, #1
 8000d92:	fa00 f202 	lsl.w	r2, r0, r2
 8000d96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	370c      	adds	r7, #12
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000e100 	.word	0xe000e100

08000dac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	6039      	str	r1, [r7, #0]
 8000db6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	db0a      	blt.n	8000dd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	b2da      	uxtb	r2, r3
 8000dc4:	490c      	ldr	r1, [pc, #48]	@ (8000df8 <__NVIC_SetPriority+0x4c>)
 8000dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd4:	e00a      	b.n	8000dec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	b2da      	uxtb	r2, r3
 8000dda:	4908      	ldr	r1, [pc, #32]	@ (8000dfc <__NVIC_SetPriority+0x50>)
 8000ddc:	79fb      	ldrb	r3, [r7, #7]
 8000dde:	f003 030f 	and.w	r3, r3, #15
 8000de2:	3b04      	subs	r3, #4
 8000de4:	0112      	lsls	r2, r2, #4
 8000de6:	b2d2      	uxtb	r2, r2
 8000de8:	440b      	add	r3, r1
 8000dea:	761a      	strb	r2, [r3, #24]
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000e100 	.word	0xe000e100
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b089      	sub	sp, #36	@ 0x24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	f1c3 0307 	rsb	r3, r3, #7
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	bf28      	it	cs
 8000e1e:	2304      	movcs	r3, #4
 8000e20:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	3304      	adds	r3, #4
 8000e26:	2b06      	cmp	r3, #6
 8000e28:	d902      	bls.n	8000e30 <NVIC_EncodePriority+0x30>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	3b03      	subs	r3, #3
 8000e2e:	e000      	b.n	8000e32 <NVIC_EncodePriority+0x32>
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e34:	f04f 32ff 	mov.w	r2, #4294967295
 8000e38:	69bb      	ldr	r3, [r7, #24]
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43da      	mvns	r2, r3
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	401a      	ands	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e48:	f04f 31ff 	mov.w	r1, #4294967295
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e52:	43d9      	mvns	r1, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e58:	4313      	orrs	r3, r2
         );
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3724      	adds	r7, #36	@ 0x24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr

08000e66 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e66:	b580      	push	{r7, lr}
 8000e68:	b082      	sub	sp, #8
 8000e6a:	af00      	add	r7, sp, #0
 8000e6c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f7ff ff4c 	bl	8000d0c <__NVIC_SetPriorityGrouping>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	4603      	mov	r3, r0
 8000e84:	60b9      	str	r1, [r7, #8]
 8000e86:	607a      	str	r2, [r7, #4]
 8000e88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e8e:	f7ff ff61 	bl	8000d54 <__NVIC_GetPriorityGrouping>
 8000e92:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e94:	687a      	ldr	r2, [r7, #4]
 8000e96:	68b9      	ldr	r1, [r7, #8]
 8000e98:	6978      	ldr	r0, [r7, #20]
 8000e9a:	f7ff ffb1 	bl	8000e00 <NVIC_EncodePriority>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ea4:	4611      	mov	r1, r2
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff80 	bl	8000dac <__NVIC_SetPriority>
}
 8000eac:	bf00      	nop
 8000eae:	3718      	adds	r7, #24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	4603      	mov	r3, r0
 8000ebc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff54 	bl	8000d70 <__NVIC_EnableIRQ>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b089      	sub	sp, #36	@ 0x24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000eda:	2300      	movs	r3, #0
 8000edc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61fb      	str	r3, [r7, #28]
 8000eea:	e159      	b.n	80011a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000eec:	2201      	movs	r2, #1
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	697a      	ldr	r2, [r7, #20]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	f040 8148 	bne.w	800119a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 0303 	and.w	r3, r3, #3
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d005      	beq.n	8000f22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d130      	bne.n	8000f84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	689b      	ldr	r3, [r3, #8]
 8000f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	005b      	lsls	r3, r3, #1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	69ba      	ldr	r2, [r7, #24]
 8000f36:	4013      	ands	r3, r2
 8000f38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68da      	ldr	r2, [r3, #12]
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	685b      	ldr	r3, [r3, #4]
 8000f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4013      	ands	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	091b      	lsrs	r3, r3, #4
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	69ba      	ldr	r2, [r7, #24]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	69b9      	ldr	r1, [r7, #24]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800101a:	69fb      	ldr	r3, [r7, #28]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80a2 	beq.w	800119a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	4b57      	ldr	r3, [pc, #348]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105e:	4a56      	ldr	r2, [pc, #344]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001060:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001064:	6453      	str	r3, [r2, #68]	@ 0x44
 8001066:	4b54      	ldr	r3, [pc, #336]	@ (80011b8 <HAL_GPIO_Init+0x2e8>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001072:	4a52      	ldr	r2, [pc, #328]	@ (80011bc <HAL_GPIO_Init+0x2ec>)
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a49      	ldr	r2, [pc, #292]	@ (80011c0 <HAL_GPIO_Init+0x2f0>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d019      	beq.n	80010d2 <HAL_GPIO_Init+0x202>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a48      	ldr	r2, [pc, #288]	@ (80011c4 <HAL_GPIO_Init+0x2f4>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d013      	beq.n	80010ce <HAL_GPIO_Init+0x1fe>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a47      	ldr	r2, [pc, #284]	@ (80011c8 <HAL_GPIO_Init+0x2f8>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d00d      	beq.n	80010ca <HAL_GPIO_Init+0x1fa>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a46      	ldr	r2, [pc, #280]	@ (80011cc <HAL_GPIO_Init+0x2fc>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d007      	beq.n	80010c6 <HAL_GPIO_Init+0x1f6>
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a45      	ldr	r2, [pc, #276]	@ (80011d0 <HAL_GPIO_Init+0x300>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d101      	bne.n	80010c2 <HAL_GPIO_Init+0x1f2>
 80010be:	2304      	movs	r3, #4
 80010c0:	e008      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c2:	2307      	movs	r3, #7
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010c6:	2303      	movs	r3, #3
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x204>
 80010d2:	2300      	movs	r3, #0
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	f002 0203 	and.w	r2, r2, #3
 80010da:	0092      	lsls	r2, r2, #2
 80010dc:	4093      	lsls	r3, r2
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010e4:	4935      	ldr	r1, [pc, #212]	@ (80011bc <HAL_GPIO_Init+0x2ec>)
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3302      	adds	r3, #2
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010f2:	4b38      	ldr	r3, [pc, #224]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	4313      	orrs	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001116:	4a2f      	ldr	r2, [pc, #188]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800111c:	4b2d      	ldr	r3, [pc, #180]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 800111e:	68db      	ldr	r3, [r3, #12]
 8001120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	43db      	mvns	r3, r3
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	4013      	ands	r3, r2
 800112a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001140:	4a24      	ldr	r2, [pc, #144]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001142:	69bb      	ldr	r3, [r7, #24]
 8001144:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001146:	4b23      	ldr	r3, [pc, #140]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	43db      	mvns	r3, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4013      	ands	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800116a:	4a1a      	ldr	r2, [pc, #104]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 800116c:	69bb      	ldr	r3, [r7, #24]
 800116e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001170:	4b18      	ldr	r3, [pc, #96]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001194:	4a0f      	ldr	r2, [pc, #60]	@ (80011d4 <HAL_GPIO_Init+0x304>)
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3301      	adds	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	f67f aea2 	bls.w	8000eec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	@ 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40013800 	.word	0x40013800
 80011c0:	40020000 	.word	0x40020000
 80011c4:	40020400 	.word	0x40020400
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00
 80011d0:	40021000 	.word	0x40021000
 80011d4:	40013c00 	.word	0x40013c00

080011d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	807b      	strh	r3, [r7, #2]
 80011e4:	4613      	mov	r3, r2
 80011e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	787b      	ldrb	r3, [r7, #1]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011f4:	e003      	b.n	80011fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011f6:	887b      	ldrh	r3, [r7, #2]
 80011f8:	041a      	lsls	r2, r3, #16
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	619a      	str	r2, [r3, #24]
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	460b      	mov	r3, r1
 8001214:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	695b      	ldr	r3, [r3, #20]
 800121a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800121c:	887a      	ldrh	r2, [r7, #2]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	041a      	lsls	r2, r3, #16
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	43d9      	mvns	r1, r3
 8001228:	887b      	ldrh	r3, [r7, #2]
 800122a:	400b      	ands	r3, r1
 800122c:	431a      	orrs	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	619a      	str	r2, [r3, #24]
}
 8001232:	bf00      	nop
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d101      	bne.n	8001252 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e267      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d075      	beq.n	800134a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800125e:	4b88      	ldr	r3, [pc, #544]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 030c 	and.w	r3, r3, #12
 8001266:	2b04      	cmp	r3, #4
 8001268:	d00c      	beq.n	8001284 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126a:	4b85      	ldr	r3, [pc, #532]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001272:	2b08      	cmp	r3, #8
 8001274:	d112      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001276:	4b82      	ldr	r3, [pc, #520]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800127e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001282:	d10b      	bne.n	800129c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001284:	4b7e      	ldr	r3, [pc, #504]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d05b      	beq.n	8001348 <HAL_RCC_OscConfig+0x108>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d157      	bne.n	8001348 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e242      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a4:	d106      	bne.n	80012b4 <HAL_RCC_OscConfig+0x74>
 80012a6:	4b76      	ldr	r3, [pc, #472]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a75      	ldr	r2, [pc, #468]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012b0:	6013      	str	r3, [r2, #0]
 80012b2:	e01d      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80012bc:	d10c      	bne.n	80012d8 <HAL_RCC_OscConfig+0x98>
 80012be:	4b70      	ldr	r3, [pc, #448]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6f      	ldr	r2, [pc, #444]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012c8:	6013      	str	r3, [r2, #0]
 80012ca:	4b6d      	ldr	r3, [pc, #436]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a6c      	ldr	r2, [pc, #432]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d4:	6013      	str	r3, [r2, #0]
 80012d6:	e00b      	b.n	80012f0 <HAL_RCC_OscConfig+0xb0>
 80012d8:	4b69      	ldr	r3, [pc, #420]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a68      	ldr	r2, [pc, #416]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e2:	6013      	str	r3, [r2, #0]
 80012e4:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a65      	ldr	r2, [pc, #404]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80012ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d013      	beq.n	8001320 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f8:	f7ff fcfc 	bl	8000cf4 <HAL_GetTick>
 80012fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012fe:	e008      	b.n	8001312 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001300:	f7ff fcf8 	bl	8000cf4 <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	2b64      	cmp	r3, #100	@ 0x64
 800130c:	d901      	bls.n	8001312 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800130e:	2303      	movs	r3, #3
 8001310:	e207      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001312:	4b5b      	ldr	r3, [pc, #364]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f0      	beq.n	8001300 <HAL_RCC_OscConfig+0xc0>
 800131e:	e014      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7ff fce8 	bl	8000cf4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001328:	f7ff fce4 	bl	8000cf4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b64      	cmp	r3, #100	@ 0x64
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e1f3      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133a:	4b51      	ldr	r3, [pc, #324]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f0      	bne.n	8001328 <HAL_RCC_OscConfig+0xe8>
 8001346:	e000      	b.n	800134a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001348:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d063      	beq.n	800141e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b00      	cmp	r3, #0
 8001360:	d00b      	beq.n	800137a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800136a:	2b08      	cmp	r3, #8
 800136c:	d11c      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800136e:	4b44      	ldr	r3, [pc, #272]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d116      	bne.n	80013a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	4b41      	ldr	r3, [pc, #260]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68db      	ldr	r3, [r3, #12]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e1c7      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001392:	4b3b      	ldr	r3, [pc, #236]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	4937      	ldr	r1, [pc, #220]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013a6:	e03a      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d020      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b0:	4b34      	ldr	r3, [pc, #208]	@ (8001484 <HAL_RCC_OscConfig+0x244>)
 80013b2:	2201      	movs	r2, #1
 80013b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b6:	f7ff fc9d 	bl	8000cf4 <HAL_GetTick>
 80013ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013be:	f7ff fc99 	bl	8000cf4 <HAL_GetTick>
 80013c2:	4602      	mov	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e1a8      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013dc:	4b28      	ldr	r3, [pc, #160]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4925      	ldr	r1, [pc, #148]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 80013ec:	4313      	orrs	r3, r2
 80013ee:	600b      	str	r3, [r1, #0]
 80013f0:	e015      	b.n	800141e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f2:	4b24      	ldr	r3, [pc, #144]	@ (8001484 <HAL_RCC_OscConfig+0x244>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc7c 	bl	8000cf4 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001400:	f7ff fc78 	bl	8000cf4 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e187      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001412:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0308 	and.w	r3, r3, #8
 8001426:	2b00      	cmp	r3, #0
 8001428:	d036      	beq.n	8001498 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d016      	beq.n	8001460 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001432:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_RCC_OscConfig+0x248>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001438:	f7ff fc5c 	bl	8000cf4 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001440:	f7ff fc58 	bl	8000cf4 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e167      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001452:	4b0b      	ldr	r3, [pc, #44]	@ (8001480 <HAL_RCC_OscConfig+0x240>)
 8001454:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x200>
 800145e:	e01b      	b.n	8001498 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001460:	4b09      	ldr	r3, [pc, #36]	@ (8001488 <HAL_RCC_OscConfig+0x248>)
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001466:	f7ff fc45 	bl	8000cf4 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00e      	b.n	800148c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fc41 	bl	8000cf4 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	2b02      	cmp	r3, #2
 800147a:	d907      	bls.n	800148c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e150      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 8001480:	40023800 	.word	0x40023800
 8001484:	42470000 	.word	0x42470000
 8001488:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800148c:	4b88      	ldr	r3, [pc, #544]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800148e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1ea      	bne.n	800146e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8097 	beq.w	80015d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014aa:	4b81      	ldr	r3, [pc, #516]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10f      	bne.n	80014d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	4b7d      	ldr	r3, [pc, #500]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014be:	4a7c      	ldr	r2, [pc, #496]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014c6:	4b7a      	ldr	r3, [pc, #488]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ce:	60bb      	str	r3, [r7, #8]
 80014d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d2:	2301      	movs	r3, #1
 80014d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014d6:	4b77      	ldr	r3, [pc, #476]	@ (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d118      	bne.n	8001514 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e2:	4b74      	ldr	r3, [pc, #464]	@ (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a73      	ldr	r2, [pc, #460]	@ (80016b4 <HAL_RCC_OscConfig+0x474>)
 80014e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fc01 	bl	8000cf4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f4:	e008      	b.n	8001508 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014f6:	f7ff fbfd 	bl	8000cf4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d901      	bls.n	8001508 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e10c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	4b6a      	ldr	r3, [pc, #424]	@ (80016b4 <HAL_RCC_OscConfig+0x474>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0f0      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	2b01      	cmp	r3, #1
 800151a:	d106      	bne.n	800152a <HAL_RCC_OscConfig+0x2ea>
 800151c:	4b64      	ldr	r3, [pc, #400]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001520:	4a63      	ldr	r2, [pc, #396]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	@ 0x70
 8001528:	e01c      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b05      	cmp	r3, #5
 8001530:	d10c      	bne.n	800154c <HAL_RCC_OscConfig+0x30c>
 8001532:	4b5f      	ldr	r3, [pc, #380]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001536:	4a5e      	ldr	r2, [pc, #376]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001538:	f043 0304 	orr.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	@ 0x70
 800153e:	4b5c      	ldr	r3, [pc, #368]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001542:	4a5b      	ldr	r2, [pc, #364]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6713      	str	r3, [r2, #112]	@ 0x70
 800154a:	e00b      	b.n	8001564 <HAL_RCC_OscConfig+0x324>
 800154c:	4b58      	ldr	r3, [pc, #352]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800154e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001550:	4a57      	ldr	r2, [pc, #348]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001552:	f023 0301 	bic.w	r3, r3, #1
 8001556:	6713      	str	r3, [r2, #112]	@ 0x70
 8001558:	4b55      	ldr	r3, [pc, #340]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800155c:	4a54      	ldr	r2, [pc, #336]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800155e:	f023 0304 	bic.w	r3, r3, #4
 8001562:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d015      	beq.n	8001598 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800156c:	f7ff fbc2 	bl	8000cf4 <HAL_GetTick>
 8001570:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001572:	e00a      	b.n	800158a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001574:	f7ff fbbe 	bl	8000cf4 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001582:	4293      	cmp	r3, r2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e0cb      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158a:	4b49      	ldr	r3, [pc, #292]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800158c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0ee      	beq.n	8001574 <HAL_RCC_OscConfig+0x334>
 8001596:	e014      	b.n	80015c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001598:	f7ff fbac 	bl	8000cf4 <HAL_GetTick>
 800159c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800159e:	e00a      	b.n	80015b6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015a0:	f7ff fba8 	bl	8000cf4 <HAL_GetTick>
 80015a4:	4602      	mov	r2, r0
 80015a6:	693b      	ldr	r3, [r7, #16]
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e0b5      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015b6:	4b3e      	ldr	r3, [pc, #248]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d1ee      	bne.n	80015a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015c2:	7dfb      	ldrb	r3, [r7, #23]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d105      	bne.n	80015d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015c8:	4b39      	ldr	r3, [pc, #228]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	4a38      	ldr	r2, [pc, #224]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	699b      	ldr	r3, [r3, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	f000 80a1 	beq.w	8001720 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015de:	4b34      	ldr	r3, [pc, #208]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f003 030c 	and.w	r3, r3, #12
 80015e6:	2b08      	cmp	r3, #8
 80015e8:	d05c      	beq.n	80016a4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	699b      	ldr	r3, [r3, #24]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d141      	bne.n	8001676 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f2:	4b31      	ldr	r3, [pc, #196]	@ (80016b8 <HAL_RCC_OscConfig+0x478>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fb7c 	bl	8000cf4 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001600:	f7ff fb78 	bl	8000cf4 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e087      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	4b27      	ldr	r3, [pc, #156]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	69da      	ldr	r2, [r3, #28]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a1b      	ldr	r3, [r3, #32]
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162c:	019b      	lsls	r3, r3, #6
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001634:	085b      	lsrs	r3, r3, #1
 8001636:	3b01      	subs	r3, #1
 8001638:	041b      	lsls	r3, r3, #16
 800163a:	431a      	orrs	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001640:	061b      	lsls	r3, r3, #24
 8001642:	491b      	ldr	r1, [pc, #108]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b1b      	ldr	r3, [pc, #108]	@ (80016b8 <HAL_RCC_OscConfig+0x478>)
 800164a:	2201      	movs	r2, #1
 800164c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fb51 	bl	8000cf4 <HAL_GetTick>
 8001652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001654:	e008      	b.n	8001668 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001656:	f7ff fb4d 	bl	8000cf4 <HAL_GetTick>
 800165a:	4602      	mov	r2, r0
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d901      	bls.n	8001668 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001664:	2303      	movs	r3, #3
 8001666:	e05c      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001668:	4b11      	ldr	r3, [pc, #68]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x416>
 8001674:	e054      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001676:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <HAL_RCC_OscConfig+0x478>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167c:	f7ff fb3a 	bl	8000cf4 <HAL_GetTick>
 8001680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001684:	f7ff fb36 	bl	8000cf4 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b02      	cmp	r3, #2
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e045      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <HAL_RCC_OscConfig+0x470>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x444>
 80016a2:	e03d      	b.n	8001720 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	699b      	ldr	r3, [r3, #24]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e038      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000
 80016b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x4ec>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d028      	beq.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d121      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d11a      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80016ec:	4013      	ands	r3, r2
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	085b      	lsrs	r3, r3, #1
 8001704:	3b01      	subs	r3, #1
 8001706:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001716:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001718:	429a      	cmp	r2, r3
 800171a:	d001      	beq.n	8001720 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e000      	b.n	8001722 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3718      	adds	r7, #24
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023800 	.word	0x40023800

08001730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0cc      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b68      	ldr	r3, [pc, #416]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0307 	and.w	r3, r3, #7
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d90c      	bls.n	800176c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b65      	ldr	r3, [pc, #404]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175a:	4b63      	ldr	r3, [pc, #396]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d001      	beq.n	800176c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e0b8      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0302 	and.w	r3, r3, #2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d020      	beq.n	80017ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d005      	beq.n	8001790 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001784:	4b59      	ldr	r3, [pc, #356]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	4a58      	ldr	r2, [pc, #352]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800178e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d005      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800179c:	4b53      	ldr	r3, [pc, #332]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	4a52      	ldr	r2, [pc, #328]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80017a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a8:	4b50      	ldr	r3, [pc, #320]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	494d      	ldr	r1, [pc, #308]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0301 	and.w	r3, r3, #1
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d044      	beq.n	8001850 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d107      	bne.n	80017de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ce:	4b47      	ldr	r3, [pc, #284]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d119      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e07f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d003      	beq.n	80017ee <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ea:	2b03      	cmp	r3, #3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b3f      	ldr	r3, [pc, #252]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e06f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3b      	ldr	r3, [pc, #236]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e067      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b37      	ldr	r3, [pc, #220]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4934      	ldr	r1, [pc, #208]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001820:	f7ff fa68 	bl	8000cf4 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff fa64 	bl	8000cf4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e04f      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2b      	ldr	r3, [pc, #172]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b25      	ldr	r3, [pc, #148]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d20c      	bcs.n	8001878 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b22      	ldr	r3, [pc, #136]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001866:	4b20      	ldr	r3, [pc, #128]	@ (80018e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	683a      	ldr	r2, [r7, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d001      	beq.n	8001878 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e032      	b.n	80018de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d008      	beq.n	8001896 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001884:	4b19      	ldr	r3, [pc, #100]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	4916      	ldr	r1, [pc, #88]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 8001892:	4313      	orrs	r3, r2
 8001894:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 0308 	and.w	r3, r3, #8
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a2:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	490e      	ldr	r1, [pc, #56]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018b6:	f000 f821 	bl	80018fc <HAL_RCC_GetSysClockFreq>
 80018ba:	4602      	mov	r2, r0
 80018bc:	4b0b      	ldr	r3, [pc, #44]	@ (80018ec <HAL_RCC_ClockConfig+0x1bc>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	091b      	lsrs	r3, r3, #4
 80018c2:	f003 030f 	and.w	r3, r3, #15
 80018c6:	490a      	ldr	r1, [pc, #40]	@ (80018f0 <HAL_RCC_ClockConfig+0x1c0>)
 80018c8:	5ccb      	ldrb	r3, [r1, r3]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	4a09      	ldr	r2, [pc, #36]	@ (80018f4 <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80018d2:	4b09      	ldr	r3, [pc, #36]	@ (80018f8 <HAL_RCC_ClockConfig+0x1c8>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff f8f8 	bl	8000acc <HAL_InitTick>

  return HAL_OK;
 80018dc:	2300      	movs	r3, #0
}
 80018de:	4618      	mov	r0, r3
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40023c00 	.word	0x40023c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08005794 	.word	0x08005794
 80018f4:	20000000 	.word	0x20000000
 80018f8:	20000004 	.word	0x20000004

080018fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001900:	b094      	sub	sp, #80	@ 0x50
 8001902:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001904:	2300      	movs	r3, #0
 8001906:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800190c:	2300      	movs	r3, #0
 800190e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001914:	4b79      	ldr	r3, [pc, #484]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
 800191c:	2b08      	cmp	r3, #8
 800191e:	d00d      	beq.n	800193c <HAL_RCC_GetSysClockFreq+0x40>
 8001920:	2b08      	cmp	r3, #8
 8001922:	f200 80e1 	bhi.w	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001926:	2b00      	cmp	r3, #0
 8001928:	d002      	beq.n	8001930 <HAL_RCC_GetSysClockFreq+0x34>
 800192a:	2b04      	cmp	r3, #4
 800192c:	d003      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x3a>
 800192e:	e0db      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001930:	4b73      	ldr	r3, [pc, #460]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001932:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001934:	e0db      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001936:	4b73      	ldr	r3, [pc, #460]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x208>)
 8001938:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800193a:	e0d8      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800193c:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001944:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001946:	4b6d      	ldr	r3, [pc, #436]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d063      	beq.n	8001a1a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001952:	4b6a      	ldr	r3, [pc, #424]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	099b      	lsrs	r3, r3, #6
 8001958:	2200      	movs	r2, #0
 800195a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800195c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800195e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001964:	633b      	str	r3, [r7, #48]	@ 0x30
 8001966:	2300      	movs	r3, #0
 8001968:	637b      	str	r3, [r7, #52]	@ 0x34
 800196a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800196e:	4622      	mov	r2, r4
 8001970:	462b      	mov	r3, r5
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0159      	lsls	r1, r3, #5
 800197c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001980:	0150      	lsls	r0, r2, #5
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4621      	mov	r1, r4
 8001988:	1a51      	subs	r1, r2, r1
 800198a:	6139      	str	r1, [r7, #16]
 800198c:	4629      	mov	r1, r5
 800198e:	eb63 0301 	sbc.w	r3, r3, r1
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	f04f 0200 	mov.w	r2, #0
 8001998:	f04f 0300 	mov.w	r3, #0
 800199c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a0:	4659      	mov	r1, fp
 80019a2:	018b      	lsls	r3, r1, #6
 80019a4:	4651      	mov	r1, sl
 80019a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019aa:	4651      	mov	r1, sl
 80019ac:	018a      	lsls	r2, r1, #6
 80019ae:	4651      	mov	r1, sl
 80019b0:	ebb2 0801 	subs.w	r8, r2, r1
 80019b4:	4659      	mov	r1, fp
 80019b6:	eb63 0901 	sbc.w	r9, r3, r1
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	f04f 0300 	mov.w	r3, #0
 80019c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019ce:	4690      	mov	r8, r2
 80019d0:	4699      	mov	r9, r3
 80019d2:	4623      	mov	r3, r4
 80019d4:	eb18 0303 	adds.w	r3, r8, r3
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	462b      	mov	r3, r5
 80019dc:	eb49 0303 	adc.w	r3, r9, r3
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019ee:	4629      	mov	r1, r5
 80019f0:	024b      	lsls	r3, r1, #9
 80019f2:	4621      	mov	r1, r4
 80019f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019f8:	4621      	mov	r1, r4
 80019fa:	024a      	lsls	r2, r1, #9
 80019fc:	4610      	mov	r0, r2
 80019fe:	4619      	mov	r1, r3
 8001a00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a02:	2200      	movs	r2, #0
 8001a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a08:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001a0c:	f7fe fc32 	bl	8000274 <__aeabi_uldivmod>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4613      	mov	r3, r2
 8001a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001a18:	e058      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1a:	4b38      	ldr	r3, [pc, #224]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	099b      	lsrs	r3, r3, #6
 8001a20:	2200      	movs	r2, #0
 8001a22:	4618      	mov	r0, r3
 8001a24:	4611      	mov	r1, r2
 8001a26:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2a:	623b      	str	r3, [r7, #32]
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a30:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a34:	4642      	mov	r2, r8
 8001a36:	464b      	mov	r3, r9
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	0159      	lsls	r1, r3, #5
 8001a42:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a46:	0150      	lsls	r0, r2, #5
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a52:	4649      	mov	r1, r9
 8001a54:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a64:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a68:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a6c:	ebb2 040a 	subs.w	r4, r2, sl
 8001a70:	eb63 050b 	sbc.w	r5, r3, fp
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	00eb      	lsls	r3, r5, #3
 8001a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a82:	00e2      	lsls	r2, r4, #3
 8001a84:	4614      	mov	r4, r2
 8001a86:	461d      	mov	r5, r3
 8001a88:	4643      	mov	r3, r8
 8001a8a:	18e3      	adds	r3, r4, r3
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	464b      	mov	r3, r9
 8001a90:	eb45 0303 	adc.w	r3, r5, r3
 8001a94:	607b      	str	r3, [r7, #4]
 8001a96:	f04f 0200 	mov.w	r2, #0
 8001a9a:	f04f 0300 	mov.w	r3, #0
 8001a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	028b      	lsls	r3, r1, #10
 8001aa6:	4621      	mov	r1, r4
 8001aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aac:	4621      	mov	r1, r4
 8001aae:	028a      	lsls	r2, r1, #10
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
 8001aba:	61fa      	str	r2, [r7, #28]
 8001abc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac0:	f7fe fbd8 	bl	8000274 <__aeabi_uldivmod>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4613      	mov	r3, r2
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001acc:	4b0b      	ldr	r3, [pc, #44]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	0c1b      	lsrs	r3, r3, #16
 8001ad2:	f003 0303 	and.w	r3, r3, #3
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001adc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ae6:	e002      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae8:	4b05      	ldr	r3, [pc, #20]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3750      	adds	r7, #80	@ 0x50
 8001af4:	46bd      	mov	sp, r7
 8001af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afa:	bf00      	nop
 8001afc:	40023800 	.word	0x40023800
 8001b00:	00f42400 	.word	0x00f42400
 8001b04:	007a1200 	.word	0x007a1200

08001b08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	20000000 	.word	0x20000000

08001b20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b24:	f7ff fff0 	bl	8001b08 <HAL_RCC_GetHCLKFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b05      	ldr	r3, [pc, #20]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	0a9b      	lsrs	r3, r3, #10
 8001b30:	f003 0307 	and.w	r3, r3, #7
 8001b34:	4903      	ldr	r1, [pc, #12]	@ (8001b44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40023800 	.word	0x40023800
 8001b44:	080057a4 	.word	0x080057a4

08001b48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	220f      	movs	r2, #15
 8001b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f003 0203 	and.w	r2, r3, #3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b64:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b7c:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	08db      	lsrs	r3, r3, #3
 8001b82:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ba8 <HAL_RCC_GetClockConfig+0x60>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0207 	and.w	r2, r3, #7
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	601a      	str	r2, [r3, #0]
}
 8001b96:	bf00      	nop
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40023c00 	.word	0x40023c00

08001bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e041      	b.n	8001c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d106      	bne.n	8001bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f839 	bl	8001c4a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2202      	movs	r2, #2
 8001bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f000 f9b2 	bl	8001f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2201      	movs	r2, #1
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2201      	movs	r2, #1
 8001c34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}

08001c4a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
	...

08001c60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d001      	beq.n	8001c78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e044      	b.n	8001d02 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f042 0201 	orr.w	r2, r2, #1
 8001c8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a1e      	ldr	r2, [pc, #120]	@ (8001d10 <HAL_TIM_Base_Start_IT+0xb0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d018      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x6c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ca2:	d013      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x6c>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1a      	ldr	r2, [pc, #104]	@ (8001d14 <HAL_TIM_Base_Start_IT+0xb4>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d00e      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x6c>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a19      	ldr	r2, [pc, #100]	@ (8001d18 <HAL_TIM_Base_Start_IT+0xb8>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d009      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x6c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a17      	ldr	r2, [pc, #92]	@ (8001d1c <HAL_TIM_Base_Start_IT+0xbc>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d004      	beq.n	8001ccc <HAL_TIM_Base_Start_IT+0x6c>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a16      	ldr	r2, [pc, #88]	@ (8001d20 <HAL_TIM_Base_Start_IT+0xc0>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d111      	bne.n	8001cf0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2b06      	cmp	r3, #6
 8001cdc:	d010      	beq.n	8001d00 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f042 0201 	orr.w	r2, r2, #1
 8001cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cee:	e007      	b.n	8001d00 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f042 0201 	orr.w	r2, r2, #1
 8001cfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40010000 	.word	0x40010000
 8001d14:	40000400 	.word	0x40000400
 8001d18:	40000800 	.word	0x40000800
 8001d1c:	40000c00 	.word	0x40000c00
 8001d20:	40014000 	.word	0x40014000

08001d24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b084      	sub	sp, #16
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	691b      	ldr	r3, [r3, #16]
 8001d3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d020      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d01b      	beq.n	8001d88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f06f 0202 	mvn.w	r2, #2
 8001d58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	f003 0303 	and.w	r3, r3, #3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 f8d2 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001d74:	e005      	b.n	8001d82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 f8c4 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 f8d5 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	f003 0304 	and.w	r3, r3, #4
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d020      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0204 	mvn.w	r2, #4
 8001da4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2202      	movs	r2, #2
 8001daa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8ac 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001dc0:	e005      	b.n	8001dce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 f89e 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc8:	6878      	ldr	r0, [r7, #4]
 8001dca:	f000 f8af 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d020      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d01b      	beq.n	8001e20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f886 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f878 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f889 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0310 	and.w	r3, r3, #16
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d020      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f06f 0210 	mvn.w	r2, #16
 8001e3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2208      	movs	r2, #8
 8001e42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f000 f860 	bl	8001f18 <HAL_TIM_IC_CaptureCallback>
 8001e58:	e005      	b.n	8001e66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f852 	bl	8001f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f000 f863 	bl	8001f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00c      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d007      	beq.n	8001e90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f06f 0201 	mvn.w	r2, #1
 8001e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7fe fdde 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00c      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d007      	beq.n	8001eb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f000 f8e6 	bl	8002080 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00c      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f834 	bl	8001f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	f003 0320 	and.w	r3, r3, #32
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00c      	beq.n	8001efc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f003 0320 	and.w	r3, r3, #32
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d007      	beq.n	8001efc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f06f 0220 	mvn.w	r2, #32
 8001ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 f8b8 	bl	800206c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f20:	bf00      	nop
 8001f22:	370c      	adds	r7, #12
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a3a      	ldr	r2, [pc, #232]	@ (8002050 <TIM_Base_SetConfig+0xfc>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d00f      	beq.n	8001f8c <TIM_Base_SetConfig+0x38>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f72:	d00b      	beq.n	8001f8c <TIM_Base_SetConfig+0x38>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a37      	ldr	r2, [pc, #220]	@ (8002054 <TIM_Base_SetConfig+0x100>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d007      	beq.n	8001f8c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a36      	ldr	r2, [pc, #216]	@ (8002058 <TIM_Base_SetConfig+0x104>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d003      	beq.n	8001f8c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a35      	ldr	r2, [pc, #212]	@ (800205c <TIM_Base_SetConfig+0x108>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d108      	bne.n	8001f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	68fa      	ldr	r2, [r7, #12]
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	@ (8002050 <TIM_Base_SetConfig+0xfc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d01b      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fac:	d017      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a28      	ldr	r2, [pc, #160]	@ (8002054 <TIM_Base_SetConfig+0x100>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d013      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a27      	ldr	r2, [pc, #156]	@ (8002058 <TIM_Base_SetConfig+0x104>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d00f      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a26      	ldr	r2, [pc, #152]	@ (800205c <TIM_Base_SetConfig+0x108>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d00b      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a25      	ldr	r2, [pc, #148]	@ (8002060 <TIM_Base_SetConfig+0x10c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d007      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a24      	ldr	r2, [pc, #144]	@ (8002064 <TIM_Base_SetConfig+0x110>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d003      	beq.n	8001fde <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a23      	ldr	r2, [pc, #140]	@ (8002068 <TIM_Base_SetConfig+0x114>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d108      	bne.n	8001ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68fa      	ldr	r2, [r7, #12]
 8002002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a0e      	ldr	r2, [pc, #56]	@ (8002050 <TIM_Base_SetConfig+0xfc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d103      	bne.n	8002024 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	691a      	ldr	r2, [r3, #16]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d105      	bne.n	8002042 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	691b      	ldr	r3, [r3, #16]
 800203a:	f023 0201 	bic.w	r2, r3, #1
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	611a      	str	r2, [r3, #16]
  }
}
 8002042:	bf00      	nop
 8002044:	3714      	adds	r7, #20
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40010000 	.word	0x40010000
 8002054:	40000400 	.word	0x40000400
 8002058:	40000800 	.word	0x40000800
 800205c:	40000c00 	.word	0x40000c00
 8002060:	40014000 	.word	0x40014000
 8002064:	40014400 	.word	0x40014400
 8002068:	40014800 	.word	0x40014800

0800206c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f103 0208 	add.w	r2, r3, #8
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f103 0208 	add.w	r2, r3, #8
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f103 0208 	add.w	r2, r3, #8
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]
    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
 80020c8:	f240 1019 	movw	r0, #281	@ 0x119
 80020cc:	f002 ff68 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020d0:	bf00      	nop
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}

080020d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
 80020e6:	f44f 708d 	mov.w	r0, #282	@ 0x11a
 80020ea:	f002 ff59 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d103      	bne.n	8002116 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00c      	b.n	8002130 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e002      	b.n	8002124 <vListInsert+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f6      	bcs.n	800211e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
 800215c:	f44f 708e 	mov.w	r0, #284	@ 0x11c
 8002160:	f002 ff1e 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	687a      	ldr	r2, [r7, #4]
 8002180:	6892      	ldr	r2, [r2, #8]
 8002182:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6852      	ldr	r2, [r2, #4]
 800218c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	687a      	ldr	r2, [r7, #4]
 8002194:	429a      	cmp	r2, r3
 8002196:	d103      	bne.n	80021a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	1e5a      	subs	r2, r3, #1
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4619      	mov	r1, r3
 80021b6:	f240 101d 	movw	r0, #285	@ 0x11d
 80021ba:	f002 ff2d 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return pxList->uxNumberOfItems;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b08e      	sub	sp, #56	@ 0x38
 80021ce:	af04      	add	r7, sp, #16
 80021d0:	60f8      	str	r0, [r7, #12]
 80021d2:	60b9      	str	r1, [r7, #8]
 80021d4:	607a      	str	r2, [r7, #4]
 80021d6:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80021d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <prvCreateStaticTask+0x2c>
    __asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	623b      	str	r3, [r7, #32]
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80021f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10b      	bne.n	8002214 <prvCreateStaticTask+0x4a>
    __asm volatile
 80021fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002200:	f383 8811 	msr	BASEPRI, r3
 8002204:	f3bf 8f6f 	isb	sy
 8002208:	f3bf 8f4f 	dsb	sy
 800220c:	61fb      	str	r3, [r7, #28]
}
 800220e:	bf00      	nop
 8002210:	bf00      	nop
 8002212:	e7fd      	b.n	8002210 <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 8002214:	2358      	movs	r3, #88	@ 0x58
 8002216:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2b58      	cmp	r3, #88	@ 0x58
 800221c:	d00b      	beq.n	8002236 <prvCreateStaticTask+0x6c>
    __asm volatile
 800221e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002222:	f383 8811 	msr	BASEPRI, r3
 8002226:	f3bf 8f6f 	isb	sy
 800222a:	f3bf 8f4f 	dsb	sy
 800222e:	61bb      	str	r3, [r7, #24]
}
 8002230:	bf00      	nop
 8002232:	bf00      	nop
 8002234:	e7fd      	b.n	8002232 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8002236:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <prvCreateStaticTask+0xb4>
 800223e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002240:	2b00      	cmp	r3, #0
 8002242:	d01c      	beq.n	800227e <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8002244:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002248:	2258      	movs	r2, #88	@ 0x58
 800224a:	2100      	movs	r1, #0
 800224c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800224e:	f003 f9df 	bl	8005610 <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002254:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002256:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225a:	2202      	movs	r2, #2
 800225c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002260:	2300      	movs	r3, #0
 8002262:	9303      	str	r3, [sp, #12]
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	9302      	str	r3, [sp, #8]
 8002268:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	68b9      	ldr	r1, [r7, #8]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f89d 	bl	80023b6 <prvInitialiseNewTask>
 800227c:	e001      	b.n	8002282 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 800227e:	2300      	movs	r3, #0
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8002282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8002284:	4618      	mov	r0, r3
 8002286:	3728      	adds	r7, #40	@ 0x28
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	@ 0x28
 8002290:	af04      	add	r7, sp, #16
 8002292:	60f8      	str	r0, [r7, #12]
 8002294:	60b9      	str	r1, [r7, #8]
 8002296:	607a      	str	r2, [r7, #4]
 8002298:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	9303      	str	r3, [sp, #12]
 80022a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a6:	9302      	str	r3, [sp, #8]
 80022a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022aa:	9301      	str	r3, [sp, #4]
 80022ac:	6a3b      	ldr	r3, [r7, #32]
 80022ae:	9300      	str	r3, [sp, #0]
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f7ff ff87 	bl	80021ca <prvCreateStaticTask>
 80022bc:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d002      	beq.n	80022ca <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 80022c4:	6978      	ldr	r0, [r7, #20]
 80022c6:	f000 f907 	bl	80024d8 <prvAddNewTaskToReadyList>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 f83d 	bl	800534c <SEGGER_SYSVIEW_ShrinkId>
 80022d2:	4603      	mov	r3, r0
 80022d4:	4619      	mov	r1, r3
 80022d6:	20bf      	movs	r0, #191	@ 0xbf
 80022d8:	f002 fe9e 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80022dc:	693b      	ldr	r3, [r7, #16]
    }
 80022de:	4618      	mov	r0, r3
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b08a      	sub	sp, #40	@ 0x28
 80022ea:	af04      	add	r7, sp, #16
 80022ec:	60f8      	str	r0, [r7, #12]
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	4618      	mov	r0, r3
 80022fa:	f001 fa09 	bl	8003710 <pvPortMalloc>
 80022fe:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d013      	beq.n	800232e <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 8002306:	2058      	movs	r0, #88	@ 0x58
 8002308:	f001 fa02 	bl	8003710 <pvPortMalloc>
 800230c:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d008      	beq.n	8002326 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002314:	2258      	movs	r2, #88	@ 0x58
 8002316:	2100      	movs	r1, #0
 8002318:	6978      	ldr	r0, [r7, #20]
 800231a:	f003 f979 	bl	8005610 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	631a      	str	r2, [r3, #48]	@ 0x30
 8002324:	e005      	b.n	8002332 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f001 fb24 	bl	8003974 <vPortFree>
 800232c:	e001      	b.n	8002332 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d011      	beq.n	800235c <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002340:	2300      	movs	r3, #0
 8002342:	9303      	str	r3, [sp, #12]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	9302      	str	r3, [sp, #8]
 8002348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800234a:	9301      	str	r3, [sp, #4]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	68b9      	ldr	r1, [r7, #8]
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 f82d 	bl	80023b6 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800235c:	697b      	ldr	r3, [r7, #20]
    }
 800235e:	4618      	mov	r0, r3
 8002360:	3718      	adds	r7, #24
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}

08002366 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002366:	b580      	push	{r7, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af02      	add	r7, sp, #8
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	687a      	ldr	r2, [r7, #4]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f7ff ffaf 	bl	80022e6 <prvCreateTask>
 8002388:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d005      	beq.n	800239c <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8002390:	6938      	ldr	r0, [r7, #16]
 8002392:	f000 f8a1 	bl	80024d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002396:	2301      	movs	r3, #1
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e002      	b.n	80023a2 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800239c:	f04f 33ff 	mov.w	r3, #4294967295
 80023a0:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4619      	mov	r1, r3
 80023a6:	20c2      	movs	r0, #194	@ 0xc2
 80023a8:	f002 fe36 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

        return xReturn;
 80023ac:	697b      	ldr	r3, [r7, #20]
    }
 80023ae:	4618      	mov	r0, r3
 80023b0:	3718      	adds	r7, #24
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b088      	sub	sp, #32
 80023ba:	af00      	add	r7, sp, #0
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	607a      	str	r2, [r7, #4]
 80023c2:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80023c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	21a5      	movs	r1, #165	@ 0xa5
 80023d0:	f003 f91e 	bl	8005610 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80023d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80023d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023de:	3b01      	subs	r3, #1
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4413      	add	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f023 0307 	bic.w	r3, r3, #7
 80023ec:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80023ee:	69bb      	ldr	r3, [r7, #24]
 80023f0:	f003 0307 	and.w	r3, r3, #7
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d00b      	beq.n	8002410 <prvInitialiseNewTask+0x5a>
    __asm volatile
 80023f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023fc:	f383 8811 	msr	BASEPRI, r3
 8002400:	f3bf 8f6f 	isb	sy
 8002404:	f3bf 8f4f 	dsb	sy
 8002408:	617b      	str	r3, [r7, #20]
}
 800240a:	bf00      	nop
 800240c:	bf00      	nop
 800240e:	e7fd      	b.n	800240c <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d01e      	beq.n	8002454 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e012      	b.n	8002442 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	4413      	add	r3, r2
 8002422:	7819      	ldrb	r1, [r3, #0]
 8002424:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	4413      	add	r3, r2
 800242a:	3334      	adds	r3, #52	@ 0x34
 800242c:	460a      	mov	r2, r1
 800242e:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002430:	68ba      	ldr	r2, [r7, #8]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	4413      	add	r3, r2
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800243c:	69fb      	ldr	r3, [r7, #28]
 800243e:	3301      	adds	r3, #1
 8002440:	61fb      	str	r3, [r7, #28]
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	2b09      	cmp	r3, #9
 8002446:	d9e9      	bls.n	800241c <prvInitialiseNewTask+0x66>
 8002448:	e000      	b.n	800244c <prvInitialiseNewTask+0x96>
            {
                break;
 800244a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 800244c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800244e:	2200      	movs	r2, #0
 8002450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	2b04      	cmp	r3, #4
 8002458:	d90b      	bls.n	8002472 <prvInitialiseNewTask+0xbc>
    __asm volatile
 800245a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800245e:	f383 8811 	msr	BASEPRI, r3
 8002462:	f3bf 8f6f 	isb	sy
 8002466:	f3bf 8f4f 	dsb	sy
 800246a:	613b      	str	r3, [r7, #16]
}
 800246c:	bf00      	nop
 800246e:	bf00      	nop
 8002470:	e7fd      	b.n	800246e <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002474:	2b04      	cmp	r3, #4
 8002476:	d901      	bls.n	800247c <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002478:	2304      	movs	r3, #4
 800247a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002480:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002484:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002486:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800248a:	3304      	adds	r3, #4
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff fe23 	bl	80020d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	3318      	adds	r3, #24
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fe1e 	bl	80020d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800249c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800249e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024a0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 80024a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a4:	f1c3 0205 	rsb	r2, r3, #5
 80024a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024aa:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b0:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80024b2:	683a      	ldr	r2, [r7, #0]
 80024b4:	68f9      	ldr	r1, [r7, #12]
 80024b6:	69b8      	ldr	r0, [r7, #24]
 80024b8:	f000 fdfe 	bl	80030b8 <pxPortInitialiseStack>
 80024bc:	4602      	mov	r2, r0
 80024be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024c0:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 80024c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d002      	beq.n	80024ce <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80024c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024cc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80024ce:	bf00      	nop
 80024d0:	3720      	adds	r7, #32
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
	...

080024d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af02      	add	r7, sp, #8
 80024de:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80024e0:	f000 ffe8 	bl	80034b4 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80024e4:	4b50      	ldr	r3, [pc, #320]	@ (8002628 <prvAddNewTaskToReadyList+0x150>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a4f      	ldr	r2, [pc, #316]	@ (8002628 <prvAddNewTaskToReadyList+0x150>)
 80024ec:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80024ee:	4b4f      	ldr	r3, [pc, #316]	@ (800262c <prvAddNewTaskToReadyList+0x154>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80024f6:	4a4d      	ldr	r2, [pc, #308]	@ (800262c <prvAddNewTaskToReadyList+0x154>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002628 <prvAddNewTaskToReadyList+0x150>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d110      	bne.n	8002526 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 8002504:	f000 fc76 	bl	8002df4 <prvInitialiseTaskLists>
 8002508:	e00d      	b.n	8002526 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 800250a:	4b49      	ldr	r3, [pc, #292]	@ (8002630 <prvAddNewTaskToReadyList+0x158>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002512:	4b46      	ldr	r3, [pc, #280]	@ (800262c <prvAddNewTaskToReadyList+0x154>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251c:	429a      	cmp	r2, r3
 800251e:	d802      	bhi.n	8002526 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 8002520:	4a42      	ldr	r2, [pc, #264]	@ (800262c <prvAddNewTaskToReadyList+0x154>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8002526:	4b43      	ldr	r3, [pc, #268]	@ (8002634 <prvAddNewTaskToReadyList+0x15c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	3301      	adds	r3, #1
 800252c:	4a41      	ldr	r2, [pc, #260]	@ (8002634 <prvAddNewTaskToReadyList+0x15c>)
 800252e:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002530:	4b40      	ldr	r3, [pc, #256]	@ (8002634 <prvAddNewTaskToReadyList+0x15c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	641a      	str	r2, [r3, #64]	@ 0x40
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d016      	beq.n	800256c <prvAddNewTaskToReadyList+0x94>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4618      	mov	r0, r3
 8002542:	f002 fddd 	bl	8005100 <SEGGER_SYSVIEW_OnTaskCreate>
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002556:	461d      	mov	r5, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461c      	mov	r4, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002562:	1ae3      	subs	r3, r4, r3
 8002564:	9300      	str	r3, [sp, #0]
 8002566:	462b      	mov	r3, r5
 8002568:	f001 fc02 	bl	8003d70 <SYSVIEW_AddTask>

            prvAddTaskToReadyList( pxNewTCB );
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	4618      	mov	r0, r3
 8002570:	f002 fe4a 	bl	8005208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002578:	2201      	movs	r2, #1
 800257a:	409a      	lsls	r2, r3
 800257c:	4b2e      	ldr	r3, [pc, #184]	@ (8002638 <prvAddNewTaskToReadyList+0x160>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4313      	orrs	r3, r2
 8002582:	4a2d      	ldr	r2, [pc, #180]	@ (8002638 <prvAddNewTaskToReadyList+0x160>)
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800258a:	492c      	ldr	r1, [pc, #176]	@ (800263c <prvAddNewTaskToReadyList+0x164>)
 800258c:	4613      	mov	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4413      	add	r3, r2
 8002592:	009b      	lsls	r3, r3, #2
 8002594:	440b      	add	r3, r1
 8002596:	3304      	adds	r3, #4
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	609a      	str	r2, [r3, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	3204      	adds	r2, #4
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	1d1a      	adds	r2, r3, #4
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	609a      	str	r2, [r3, #8]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025c0:	4613      	mov	r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	4a1c      	ldr	r2, [pc, #112]	@ (800263c <prvAddNewTaskToReadyList+0x164>)
 80025ca:	441a      	add	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	615a      	str	r2, [r3, #20]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025d4:	4919      	ldr	r1, [pc, #100]	@ (800263c <prvAddNewTaskToReadyList+0x164>)
 80025d6:	4613      	mov	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	440b      	add	r3, r1
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025e6:	1c59      	adds	r1, r3, #1
 80025e8:	4814      	ldr	r0, [pc, #80]	@ (800263c <prvAddNewTaskToReadyList+0x164>)
 80025ea:	4613      	mov	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4403      	add	r3, r0
 80025f4:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 80025f6:	f000 ff8f 	bl	8003518 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 80025fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002630 <prvAddNewTaskToReadyList+0x158>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00e      	beq.n	8002620 <prvAddNewTaskToReadyList+0x148>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 8002602:	4b0a      	ldr	r3, [pc, #40]	@ (800262c <prvAddNewTaskToReadyList+0x154>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260c:	429a      	cmp	r2, r3
 800260e:	d207      	bcs.n	8002620 <prvAddNewTaskToReadyList+0x148>
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <prvAddNewTaskToReadyList+0x168>)
 8002612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002616:	601a      	str	r2, [r3, #0]
 8002618:	f3bf 8f4f 	dsb	sy
 800261c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bdb0      	pop	{r4, r5, r7, pc}
 8002628:	20000154 	.word	0x20000154
 800262c:	2000007c 	.word	0x2000007c
 8002630:	20000160 	.word	0x20000160
 8002634:	20000170 	.word	0x20000170
 8002638:	2000015c 	.word	0x2000015c
 800263c:	20000080 	.word	0x20000080
 8002640:	e000ed04 	.word	0xe000ed04

08002644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800264c:	2300      	movs	r3, #0
 800264e:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d018      	beq.n	8002688 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 8002656:	f000 f8ed 	bl	8002834 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 800265a:	4b14      	ldr	r3, [pc, #80]	@ (80026ac <vTaskDelay+0x68>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d00b      	beq.n	800267a <vTaskDelay+0x36>
    __asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	60bb      	str	r3, [r7, #8]
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	e7fd      	b.n	8002676 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800267a:	2100      	movs	r1, #0
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 fc73 	bl	8002f68 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002682:	f000 f8e5 	bl	8002850 <xTaskResumeAll>
 8002686:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d107      	bne.n	800269e <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 800268e:	4b08      	ldr	r3, [pc, #32]	@ (80026b0 <vTaskDelay+0x6c>)
 8002690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	f3bf 8f4f 	dsb	sy
 800269a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
 800269e:	20c5      	movs	r0, #197	@ 0xc5
 80026a0:	f002 fc7e 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
    }
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	2000017c 	.word	0x2000017c
 80026b0:	e000ed04 	.word	0xe000ed04

080026b4 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b08e      	sub	sp, #56	@ 0x38
 80026b8:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 80026ba:	2301      	movs	r3, #1
 80026bc:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e013      	b.n	80026f0 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 80026c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002778 <prvCreateIdleTasks+0xc4>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	4413      	add	r3, r2
 80026ce:	7819      	ldrb	r1, [r3, #0]
 80026d0:	f107 020c 	add.w	r2, r7, #12
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	460a      	mov	r2, r1
 80026da:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 80026dc:	f107 020c 	add.w	r2, r7, #12
 80026e0:	69fb      	ldr	r3, [r7, #28]
 80026e2:	4413      	add	r3, r2
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d006      	beq.n	80026f8 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61fb      	str	r3, [r7, #28]
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	2b09      	cmp	r3, #9
 80026f4:	dde8      	ble.n	80026c8 <prvCreateIdleTasks+0x14>
 80026f6:	e000      	b.n	80026fa <prvCreateIdleTasks+0x46>
        {
            break;
 80026f8:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80026fa:	2300      	movs	r3, #0
 80026fc:	623b      	str	r3, [r7, #32]
 80026fe:	e030      	b.n	8002762 <prvCreateIdleTasks+0xae>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8002700:	4b1e      	ldr	r3, [pc, #120]	@ (800277c <prvCreateIdleTasks+0xc8>)
 8002702:	61bb      	str	r3, [r7, #24]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 8002704:	2300      	movs	r3, #0
 8002706:	60bb      	str	r3, [r7, #8]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 800270c:	463a      	mov	r2, r7
 800270e:	1d39      	adds	r1, r7, #4
 8002710:	f107 0308 	add.w	r3, r7, #8
 8002714:	4618      	mov	r0, r3
 8002716:	f000 fcb5 	bl	8003084 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 800271a:	6838      	ldr	r0, [r7, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68ba      	ldr	r2, [r7, #8]
 8002720:	f107 010c 	add.w	r1, r7, #12
 8002724:	9202      	str	r2, [sp, #8]
 8002726:	9301      	str	r3, [sp, #4]
 8002728:	2300      	movs	r3, #0
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	2300      	movs	r3, #0
 800272e:	4602      	mov	r2, r0
 8002730:	69b8      	ldr	r0, [r7, #24]
 8002732:	f7ff fdab 	bl	800228c <xTaskCreateStatic>
 8002736:	4602      	mov	r2, r0
 8002738:	4911      	ldr	r1, [pc, #68]	@ (8002780 <prvCreateIdleTasks+0xcc>)
 800273a:	6a3b      	ldr	r3, [r7, #32]
 800273c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 8002740:	4a0f      	ldr	r2, [pc, #60]	@ (8002780 <prvCreateIdleTasks+0xcc>)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d002      	beq.n	8002752 <prvCreateIdleTasks+0x9e>
            {
                xReturn = pdPASS;
 800274c:	2301      	movs	r3, #1
 800274e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002750:	e001      	b.n	8002756 <prvCreateIdleTasks+0xa2>
            }
            else
            {
                xReturn = pdFAIL;
 8002752:	2300      	movs	r3, #0
 8002754:	627b      	str	r3, [r7, #36]	@ 0x24
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	2b00      	cmp	r3, #0
 800275a:	d006      	beq.n	800276a <prvCreateIdleTasks+0xb6>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	3301      	adds	r3, #1
 8002760:	623b      	str	r3, [r7, #32]
 8002762:	6a3b      	ldr	r3, [r7, #32]
 8002764:	2b00      	cmp	r3, #0
 8002766:	ddcb      	ble.n	8002700 <prvCreateIdleTasks+0x4c>
 8002768:	e000      	b.n	800276c <prvCreateIdleTasks+0xb8>
        {
            break;
 800276a:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800276e:	4618      	mov	r0, r3
 8002770:	3728      	adds	r7, #40	@ 0x28
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	080056cc 	.word	0x080056cc
 800277c:	08002dc5 	.word	0x08002dc5
 8002780:	20000178 	.word	0x20000178

08002784 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 800278a:	f7ff ff93 	bl	80026b4 <prvCreateIdleTasks>
 800278e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d129      	bne.n	80027ea <vTaskStartScheduler+0x66>
    __asm volatile
 8002796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279a:	f383 8811 	msr	BASEPRI, r3
 800279e:	f3bf 8f6f 	isb	sy
 80027a2:	f3bf 8f4f 	dsb	sy
 80027a6:	60bb      	str	r3, [r7, #8]
}
 80027a8:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80027aa:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <vTaskStartScheduler+0x98>)
 80027ac:	f04f 32ff 	mov.w	r2, #4294967295
 80027b0:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80027b2:	4b1b      	ldr	r3, [pc, #108]	@ (8002820 <vTaskStartScheduler+0x9c>)
 80027b4:	2201      	movs	r2, #1
 80027b6:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <vTaskStartScheduler+0xa0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80027be:	4b1a      	ldr	r3, [pc, #104]	@ (8002828 <vTaskStartScheduler+0xa4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3334      	adds	r3, #52	@ 0x34
 80027c4:	2205      	movs	r2, #5
 80027c6:	4919      	ldr	r1, [pc, #100]	@ (800282c <vTaskStartScheduler+0xa8>)
 80027c8:	4618      	mov	r0, r3
 80027ca:	f002 ff11 	bl	80055f0 <memcmp>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d005      	beq.n	80027e0 <vTaskStartScheduler+0x5c>
 80027d4:	4b14      	ldr	r3, [pc, #80]	@ (8002828 <vTaskStartScheduler+0xa4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f002 fcd3 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartExec>
 80027de:	e001      	b.n	80027e4 <vTaskStartScheduler+0x60>
 80027e0:	f002 fc72 	bl	80050c8 <SEGGER_SYSVIEW_OnIdle>
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 80027e4:	f000 fcf6 	bl	80031d4 <xPortStartScheduler>
 80027e8:	e00f      	b.n	800280a <vTaskStartScheduler+0x86>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f0:	d10b      	bne.n	800280a <vTaskStartScheduler+0x86>
    __asm volatile
 80027f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f6:	f383 8811 	msr	BASEPRI, r3
 80027fa:	f3bf 8f6f 	isb	sy
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	607b      	str	r3, [r7, #4]
}
 8002804:	bf00      	nop
 8002806:	bf00      	nop
 8002808:	e7fd      	b.n	8002806 <vTaskStartScheduler+0x82>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800280a:	4b09      	ldr	r3, [pc, #36]	@ (8002830 <vTaskStartScheduler+0xac>)
 800280c:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
 800280e:	20cd      	movs	r0, #205	@ 0xcd
 8002810:	f002 fbc6 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002814:	bf00      	nop
 8002816:	3710      	adds	r7, #16
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}
 800281c:	20000174 	.word	0x20000174
 8002820:	20000160 	.word	0x20000160
 8002824:	20000158 	.word	0x20000158
 8002828:	2000007c 	.word	0x2000007c
 800282c:	080056cc 	.word	0x080056cc
 8002830:	2000000c 	.word	0x2000000c

08002834 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8002838:	4b04      	ldr	r3, [pc, #16]	@ (800284c <vTaskSuspendAll+0x18>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	4a03      	ldr	r2, [pc, #12]	@ (800284c <vTaskSuspendAll+0x18>)
 8002840:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
 8002842:	20cf      	movs	r0, #207	@ 0xcf
 8002844:	f002 fbac 	bl	8004fa0 <SEGGER_SYSVIEW_RecordEndCall>
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	2000017c 	.word	0x2000017c

08002850 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b088      	sub	sp, #32
 8002854:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800285a:	2300      	movs	r3, #0
 800285c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800285e:	f000 fe29 	bl	80034b4 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8002862:	2300      	movs	r3, #0
 8002864:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8002866:	4b7a      	ldr	r3, [pc, #488]	@ (8002a50 <xTaskResumeAll+0x200>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d10b      	bne.n	8002886 <xTaskResumeAll+0x36>
    __asm volatile
 800286e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002872:	f383 8811 	msr	BASEPRI, r3
 8002876:	f3bf 8f6f 	isb	sy
 800287a:	f3bf 8f4f 	dsb	sy
 800287e:	603b      	str	r3, [r7, #0]
}
 8002880:	bf00      	nop
 8002882:	bf00      	nop
 8002884:	e7fd      	b.n	8002882 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8002886:	4b72      	ldr	r3, [pc, #456]	@ (8002a50 <xTaskResumeAll+0x200>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a70      	ldr	r2, [pc, #448]	@ (8002a50 <xTaskResumeAll+0x200>)
 800288e:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002890:	4b6f      	ldr	r3, [pc, #444]	@ (8002a50 <xTaskResumeAll+0x200>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	f040 80ce 	bne.w	8002a36 <xTaskResumeAll+0x1e6>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800289a:	4b6e      	ldr	r3, [pc, #440]	@ (8002a54 <xTaskResumeAll+0x204>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 80c9 	beq.w	8002a36 <xTaskResumeAll+0x1e6>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80028a4:	e092      	b.n	80029cc <xTaskResumeAll+0x17c>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80028a6:	4b6c      	ldr	r3, [pc, #432]	@ (8002a58 <xTaskResumeAll+0x208>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b2:	60fb      	str	r3, [r7, #12]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	6a12      	ldr	r2, [r2, #32]
 80028bc:	609a      	str	r2, [r3, #8]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	69d2      	ldr	r2, [r2, #28]
 80028c6:	605a      	str	r2, [r3, #4]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	3318      	adds	r3, #24
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d103      	bne.n	80028dc <xTaskResumeAll+0x8c>
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	6a1a      	ldr	r2, [r3, #32]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	2200      	movs	r2, #0
 80028e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	1e5a      	subs	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	695b      	ldr	r3, [r3, #20]
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	69fa      	ldr	r2, [r7, #28]
 8002902:	6892      	ldr	r2, [r2, #8]
 8002904:	605a      	str	r2, [r3, #4]
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	685a      	ldr	r2, [r3, #4]
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	3304      	adds	r3, #4
 800290e:	429a      	cmp	r2, r3
 8002910:	d103      	bne.n	800291a <xTaskResumeAll+0xca>
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	1e5a      	subs	r2, r3, #1
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	4618      	mov	r0, r3
 800292e:	f002 fc6b 	bl	8005208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002936:	2201      	movs	r2, #1
 8002938:	409a      	lsls	r2, r3
 800293a:	4b48      	ldr	r3, [pc, #288]	@ (8002a5c <xTaskResumeAll+0x20c>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4313      	orrs	r3, r2
 8002940:	4a46      	ldr	r2, [pc, #280]	@ (8002a5c <xTaskResumeAll+0x20c>)
 8002942:	6013      	str	r3, [r2, #0]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002948:	4945      	ldr	r1, [pc, #276]	@ (8002a60 <xTaskResumeAll+0x210>)
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3304      	adds	r3, #4
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	609a      	str	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689a      	ldr	r2, [r3, #8]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	60da      	str	r2, [r3, #12]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	3204      	adds	r2, #4
 8002970:	605a      	str	r2, [r3, #4]
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	1d1a      	adds	r2, r3, #4
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	609a      	str	r2, [r3, #8]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800297e:	4613      	mov	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4a36      	ldr	r2, [pc, #216]	@ (8002a60 <xTaskResumeAll+0x210>)
 8002988:	441a      	add	r2, r3
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	615a      	str	r2, [r3, #20]
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002992:	4933      	ldr	r1, [pc, #204]	@ (8002a60 <xTaskResumeAll+0x210>)
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	69fa      	ldr	r2, [r7, #28]
 80029a2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029a4:	1c59      	adds	r1, r3, #1
 80029a6:	482e      	ldr	r0, [pc, #184]	@ (8002a60 <xTaskResumeAll+0x210>)
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4403      	add	r3, r0
 80029b2:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029b8:	4b2a      	ldr	r3, [pc, #168]	@ (8002a64 <xTaskResumeAll+0x214>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029be:	429a      	cmp	r2, r3
 80029c0:	d904      	bls.n	80029cc <xTaskResumeAll+0x17c>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80029c2:	4a29      	ldr	r2, [pc, #164]	@ (8002a68 <xTaskResumeAll+0x218>)
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	2101      	movs	r1, #1
 80029c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029cc:	4b22      	ldr	r3, [pc, #136]	@ (8002a58 <xTaskResumeAll+0x208>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f47f af68 	bne.w	80028a6 <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <xTaskResumeAll+0x190>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80029dc:	f000 faa8 	bl	8002f30 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80029e0:	4b22      	ldr	r3, [pc, #136]	@ (8002a6c <xTaskResumeAll+0x21c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <xTaskResumeAll+0x1c2>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80029ec:	f000 f858 	bl	8002aa0 <xTaskIncrementTick>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <xTaskResumeAll+0x1b0>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80029f6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a68 <xTaskResumeAll+0x218>)
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2101      	movs	r1, #1
 80029fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ef      	bne.n	80029ec <xTaskResumeAll+0x19c>

                            xPendedTicks = 0;
 8002a0c:	4b17      	ldr	r3, [pc, #92]	@ (8002a6c <xTaskResumeAll+0x21c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8002a12:	4a15      	ldr	r2, [pc, #84]	@ (8002a68 <xTaskResumeAll+0x218>)
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00b      	beq.n	8002a36 <xTaskResumeAll+0x1e6>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8002a22:	4b10      	ldr	r3, [pc, #64]	@ (8002a64 <xTaskResumeAll+0x214>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4b12      	ldr	r3, [pc, #72]	@ (8002a70 <xTaskResumeAll+0x220>)
 8002a28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f3bf 8f4f 	dsb	sy
 8002a32:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8002a36:	f000 fd6f 	bl	8003518 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	4619      	mov	r1, r3
 8002a3e:	20d0      	movs	r0, #208	@ 0xd0
 8002a40:	f002 faea 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xAlreadyYielded;
 8002a44:	69bb      	ldr	r3, [r7, #24]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3720      	adds	r7, #32
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	2000017c 	.word	0x2000017c
 8002a54:	20000154 	.word	0x20000154
 8002a58:	20000114 	.word	0x20000114
 8002a5c:	2000015c 	.word	0x2000015c
 8002a60:	20000080 	.word	0x20000080
 8002a64:	2000007c 	.word	0x2000007c
 8002a68:	20000168 	.word	0x20000168
 8002a6c:	20000164 	.word	0x20000164
 8002a70:	e000ed04 	.word	0xe000ed04

08002a74 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a7a:	f000 fe07 	bl	800368c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <xTaskGetTickCountFromISR+0x28>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    traceRETURN_xTaskGetTickCountFromISR( xReturn );
 8002a88:	6839      	ldr	r1, [r7, #0]
 8002a8a:	20d2      	movs	r0, #210	@ 0xd2
 8002a8c:	f002 fac4 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xReturn;
 8002a90:	683b      	ldr	r3, [r7, #0]
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000158 	.word	0x20000158

08002aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	@ 0x28
 8002aa4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8002aaa:	4b83      	ldr	r3, [pc, #524]	@ (8002cb8 <xTaskIncrementTick+0x218>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 80f3 	bne.w	8002c9a <xTaskIncrementTick+0x1fa>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002ab4:	4b81      	ldr	r3, [pc, #516]	@ (8002cbc <xTaskIncrementTick+0x21c>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002abc:	4a7f      	ldr	r2, [pc, #508]	@ (8002cbc <xTaskIncrementTick+0x21c>)
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d121      	bne.n	8002b0c <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002ac8:	4b7d      	ldr	r3, [pc, #500]	@ (8002cc0 <xTaskIncrementTick+0x220>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d00b      	beq.n	8002aea <xTaskIncrementTick+0x4a>
    __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	607b      	str	r3, [r7, #4]
}
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <xTaskIncrementTick+0x46>
 8002aea:	4b75      	ldr	r3, [pc, #468]	@ (8002cc0 <xTaskIncrementTick+0x220>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	61fb      	str	r3, [r7, #28]
 8002af0:	4b74      	ldr	r3, [pc, #464]	@ (8002cc4 <xTaskIncrementTick+0x224>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a72      	ldr	r2, [pc, #456]	@ (8002cc0 <xTaskIncrementTick+0x220>)
 8002af6:	6013      	str	r3, [r2, #0]
 8002af8:	4a72      	ldr	r2, [pc, #456]	@ (8002cc4 <xTaskIncrementTick+0x224>)
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	4b72      	ldr	r3, [pc, #456]	@ (8002cc8 <xTaskIncrementTick+0x228>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	3301      	adds	r3, #1
 8002b04:	4a70      	ldr	r2, [pc, #448]	@ (8002cc8 <xTaskIncrementTick+0x228>)
 8002b06:	6013      	str	r3, [r2, #0]
 8002b08:	f000 fa12 	bl	8002f30 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002b0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ccc <xTaskIncrementTick+0x22c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	f0c0 80ac 	bcc.w	8002c70 <xTaskIncrementTick+0x1d0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002b18:	4b69      	ldr	r3, [pc, #420]	@ (8002cc0 <xTaskIncrementTick+0x220>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d104      	bne.n	8002b2c <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <xTaskIncrementTick+0x22c>)
 8002b24:	f04f 32ff 	mov.w	r2, #4294967295
 8002b28:	601a      	str	r2, [r3, #0]
                    break;
 8002b2a:	e0a1      	b.n	8002c70 <xTaskIncrementTick+0x1d0>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002b2c:	4b64      	ldr	r3, [pc, #400]	@ (8002cc0 <xTaskIncrementTick+0x220>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d203      	bcs.n	8002b4c <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002b44:	4a61      	ldr	r2, [pc, #388]	@ (8002ccc <xTaskIncrementTick+0x22c>)
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	6013      	str	r3, [r2, #0]
                        break;
 8002b4a:	e091      	b.n	8002c70 <xTaskIncrementTick+0x1d0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b4c:	69bb      	ldr	r3, [r7, #24]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	6892      	ldr	r2, [r2, #8]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d103      	bne.n	8002b7a <xTaskIncrementTick+0xda>
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	615a      	str	r2, [r3, #20]
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d01e      	beq.n	8002bd0 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	69db      	ldr	r3, [r3, #28]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	6a12      	ldr	r2, [r2, #32]
 8002ba0:	609a      	str	r2, [r3, #8]
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	69ba      	ldr	r2, [r7, #24]
 8002ba8:	69d2      	ldr	r2, [r2, #28]
 8002baa:	605a      	str	r2, [r3, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685a      	ldr	r2, [r3, #4]
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	3318      	adds	r3, #24
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d103      	bne.n	8002bc0 <xTaskIncrementTick+0x120>
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	6a1a      	ldr	r2, [r3, #32]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	605a      	str	r2, [r3, #4]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1e5a      	subs	r2, r3, #1
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f002 fb18 	bl	8005208 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	2201      	movs	r2, #1
 8002bde:	409a      	lsls	r2, r3
 8002be0:	4b3b      	ldr	r3, [pc, #236]	@ (8002cd0 <xTaskIncrementTick+0x230>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	4a3a      	ldr	r2, [pc, #232]	@ (8002cd0 <xTaskIncrementTick+0x230>)
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bee:	4939      	ldr	r1, [pc, #228]	@ (8002cd4 <xTaskIncrementTick+0x234>)
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	60bb      	str	r3, [r7, #8]
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	68ba      	ldr	r2, [r7, #8]
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	3204      	adds	r2, #4
 8002c16:	605a      	str	r2, [r3, #4]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	1d1a      	adds	r2, r3, #4
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	4a29      	ldr	r2, [pc, #164]	@ (8002cd4 <xTaskIncrementTick+0x234>)
 8002c2e:	441a      	add	r2, r3
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	615a      	str	r2, [r3, #20]
 8002c34:	69bb      	ldr	r3, [r7, #24]
 8002c36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c38:	4926      	ldr	r1, [pc, #152]	@ (8002cd4 <xTaskIncrementTick+0x234>)
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	4413      	add	r3, r2
 8002c40:	009b      	lsls	r3, r3, #2
 8002c42:	440b      	add	r3, r1
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c4a:	1c59      	adds	r1, r3, #1
 8002c4c:	4821      	ldr	r0, [pc, #132]	@ (8002cd4 <xTaskIncrementTick+0x234>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4403      	add	r3, r0
 8002c58:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8002cd8 <xTaskIncrementTick+0x238>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f67f af57 	bls.w	8002b18 <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002c6e:	e753      	b.n	8002b18 <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8002c70:	4b19      	ldr	r3, [pc, #100]	@ (8002cd8 <xTaskIncrementTick+0x238>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	4917      	ldr	r1, [pc, #92]	@ (8002cd4 <xTaskIncrementTick+0x234>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d901      	bls.n	8002c8c <xTaskIncrementTick+0x1ec>
                {
                    xSwitchRequired = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8002c8c:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <xTaskIncrementTick+0x23c>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d007      	beq.n	8002ca4 <xTaskIncrementTick+0x204>
                {
                    xSwitchRequired = pdTRUE;
 8002c94:	2301      	movs	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c98:	e004      	b.n	8002ca4 <xTaskIncrementTick+0x204>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8002c9a:	4b11      	ldr	r3, [pc, #68]	@ (8002ce0 <xTaskIncrementTick+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	4a0f      	ldr	r2, [pc, #60]	@ (8002ce0 <xTaskIncrementTick+0x240>)
 8002ca2:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	20db      	movs	r0, #219	@ 0xdb
 8002caa:	f002 f9b5 	bl	8005018 <SEGGER_SYSVIEW_RecordEndCallU32>

    return xSwitchRequired;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	2000017c 	.word	0x2000017c
 8002cbc:	20000158 	.word	0x20000158
 8002cc0:	2000010c 	.word	0x2000010c
 8002cc4:	20000110 	.word	0x20000110
 8002cc8:	2000016c 	.word	0x2000016c
 8002ccc:	20000174 	.word	0x20000174
 8002cd0:	2000015c 	.word	0x2000015c
 8002cd4:	20000080 	.word	0x20000080
 8002cd8:	2000007c 	.word	0x2000007c
 8002cdc:	20000168 	.word	0x20000168
 8002ce0:	20000164 	.word	0x20000164

08002ce4 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8002cea:	4b30      	ldr	r3, [pc, #192]	@ (8002dac <vTaskSwitchContext+0xc8>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d003      	beq.n	8002cfa <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	@ (8002db0 <vTaskSwitchContext+0xcc>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8002cf8:	e054      	b.n	8002da4 <vTaskSwitchContext+0xc0>
            xYieldPendings[ 0 ] = pdFALSE;
 8002cfa:	4b2d      	ldr	r3, [pc, #180]	@ (8002db0 <vTaskSwitchContext+0xcc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8002d00:	4b2c      	ldr	r3, [pc, #176]	@ (8002db4 <vTaskSwitchContext+0xd0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	fab3 f383 	clz	r3, r3
 8002d0c:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8002d0e:	7afb      	ldrb	r3, [r7, #11]
 8002d10:	f1c3 031f 	rsb	r3, r3, #31
 8002d14:	617b      	str	r3, [r7, #20]
 8002d16:	4928      	ldr	r1, [pc, #160]	@ (8002db8 <vTaskSwitchContext+0xd4>)
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	440b      	add	r3, r1
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10b      	bne.n	8002d42 <vTaskSwitchContext+0x5e>
    __asm volatile
 8002d2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2e:	f383 8811 	msr	BASEPRI, r3
 8002d32:	f3bf 8f6f 	isb	sy
 8002d36:	f3bf 8f4f 	dsb	sy
 8002d3a:	607b      	str	r3, [r7, #4]
}
 8002d3c:	bf00      	nop
 8002d3e:	bf00      	nop
 8002d40:	e7fd      	b.n	8002d3e <vTaskSwitchContext+0x5a>
 8002d42:	697a      	ldr	r2, [r7, #20]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4a1a      	ldr	r2, [pc, #104]	@ (8002db8 <vTaskSwitchContext+0xd4>)
 8002d4e:	4413      	add	r3, r2
 8002d50:	613b      	str	r3, [r7, #16]
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	605a      	str	r2, [r3, #4]
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	3308      	adds	r3, #8
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d103      	bne.n	8002d70 <vTaskSwitchContext+0x8c>
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	605a      	str	r2, [r3, #4]
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	4a11      	ldr	r2, [pc, #68]	@ (8002dbc <vTaskSwitchContext+0xd8>)
 8002d78:	6013      	str	r3, [r2, #0]
            traceTASK_SWITCHED_IN();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	@ (8002dbc <vTaskSwitchContext+0xd8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3334      	adds	r3, #52	@ 0x34
 8002d80:	2205      	movs	r2, #5
 8002d82:	490f      	ldr	r1, [pc, #60]	@ (8002dc0 <vTaskSwitchContext+0xdc>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 fc33 	bl	80055f0 <memcmp>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <vTaskSwitchContext+0xb8>
 8002d90:	4b0a      	ldr	r3, [pc, #40]	@ (8002dbc <vTaskSwitchContext+0xd8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f002 f9f5 	bl	8005184 <SEGGER_SYSVIEW_OnTaskStartExec>
 8002d9a:	e001      	b.n	8002da0 <vTaskSwitchContext+0xbc>
 8002d9c:	f002 f994 	bl	80050c8 <SEGGER_SYSVIEW_OnIdle>
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8002da0:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <vTaskSwitchContext+0xd8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
    }
 8002da4:	bf00      	nop
 8002da6:	3718      	adds	r7, #24
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	2000017c 	.word	0x2000017c
 8002db0:	20000168 	.word	0x20000168
 8002db4:	2000015c 	.word	0x2000015c
 8002db8:	20000080 	.word	0x20000080
 8002dbc:	2000007c 	.word	0x2000007c
 8002dc0:	080056cc 	.word	0x080056cc

08002dc4 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002dcc:	f000 f852 	bl	8002e74 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8002dd0:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <prvIdleTask+0x28>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d9f9      	bls.n	8002dcc <prvIdleTask+0x8>
            {
                taskYIELD();
 8002dd8:	4b05      	ldr	r3, [pc, #20]	@ (8002df0 <prvIdleTask+0x2c>)
 8002dda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dde:	601a      	str	r2, [r3, #0]
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002de8:	e7f0      	b.n	8002dcc <prvIdleTask+0x8>
 8002dea:	bf00      	nop
 8002dec:	20000080 	.word	0x20000080
 8002df0:	e000ed04 	.word	0xe000ed04

08002df4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	e00c      	b.n	8002e1a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a12      	ldr	r2, [pc, #72]	@ (8002e54 <prvInitialiseTaskLists+0x60>)
 8002e0c:	4413      	add	r3, r2
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff f940 	bl	8002094 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3301      	adds	r3, #1
 8002e18:	607b      	str	r3, [r7, #4]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d9ef      	bls.n	8002e00 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002e20:	480d      	ldr	r0, [pc, #52]	@ (8002e58 <prvInitialiseTaskLists+0x64>)
 8002e22:	f7ff f937 	bl	8002094 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002e26:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <prvInitialiseTaskLists+0x68>)
 8002e28:	f7ff f934 	bl	8002094 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002e2c:	480c      	ldr	r0, [pc, #48]	@ (8002e60 <prvInitialiseTaskLists+0x6c>)
 8002e2e:	f7ff f931 	bl	8002094 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002e32:	480c      	ldr	r0, [pc, #48]	@ (8002e64 <prvInitialiseTaskLists+0x70>)
 8002e34:	f7ff f92e 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8002e38:	480b      	ldr	r0, [pc, #44]	@ (8002e68 <prvInitialiseTaskLists+0x74>)
 8002e3a:	f7ff f92b 	bl	8002094 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002e6c <prvInitialiseTaskLists+0x78>)
 8002e40:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <prvInitialiseTaskLists+0x64>)
 8002e42:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002e44:	4b0a      	ldr	r3, [pc, #40]	@ (8002e70 <prvInitialiseTaskLists+0x7c>)
 8002e46:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <prvInitialiseTaskLists+0x68>)
 8002e48:	601a      	str	r2, [r3, #0]
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	20000080 	.word	0x20000080
 8002e58:	200000e4 	.word	0x200000e4
 8002e5c:	200000f8 	.word	0x200000f8
 8002e60:	20000114 	.word	0x20000114
 8002e64:	20000128 	.word	0x20000128
 8002e68:	20000140 	.word	0x20000140
 8002e6c:	2000010c 	.word	0x2000010c
 8002e70:	20000110 	.word	0x20000110

08002e74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002e7a:	e019      	b.n	8002eb0 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8002e7c:	f000 fb1a 	bl	80034b4 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002e80:	4b10      	ldr	r3, [pc, #64]	@ (8002ec4 <prvCheckTasksWaitingTermination+0x50>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	3304      	adds	r3, #4
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff f96d 	bl	800216c <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8002e92:	4b0d      	ldr	r3, [pc, #52]	@ (8002ec8 <prvCheckTasksWaitingTermination+0x54>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	4a0b      	ldr	r2, [pc, #44]	@ (8002ec8 <prvCheckTasksWaitingTermination+0x54>)
 8002e9a:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <prvCheckTasksWaitingTermination+0x58>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	4a0a      	ldr	r2, [pc, #40]	@ (8002ecc <prvCheckTasksWaitingTermination+0x58>)
 8002ea4:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8002ea6:	f000 fb37 	bl	8003518 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f810 	bl	8002ed0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002eb0:	4b06      	ldr	r3, [pc, #24]	@ (8002ecc <prvCheckTasksWaitingTermination+0x58>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d1e1      	bne.n	8002e7c <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	20000128 	.word	0x20000128
 8002ec8:	20000154 	.word	0x20000154
 8002ecc:	2000013c 	.word	0x2000013c

08002ed0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d108      	bne.n	8002ef4 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f000 fd44 	bl	8003974 <vPortFree>
                vPortFree( pxTCB );
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f000 fd41 	bl	8003974 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002ef2:	e019      	b.n	8002f28 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d103      	bne.n	8002f06 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 fd38 	bl	8003974 <vPortFree>
    }
 8002f04:	e010      	b.n	8002f28 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d00b      	beq.n	8002f28 <prvDeleteTCB+0x58>
    __asm volatile
 8002f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f14:	f383 8811 	msr	BASEPRI, r3
 8002f18:	f3bf 8f6f 	isb	sy
 8002f1c:	f3bf 8f4f 	dsb	sy
 8002f20:	60fb      	str	r3, [r7, #12]
}
 8002f22:	bf00      	nop
 8002f24:	bf00      	nop
 8002f26:	e7fd      	b.n	8002f24 <prvDeleteTCB+0x54>
    }
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002f30:	b480      	push	{r7}
 8002f32:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f34:	4b0a      	ldr	r3, [pc, #40]	@ (8002f60 <prvResetNextTaskUnblockTime+0x30>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d104      	bne.n	8002f48 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002f3e:	4b09      	ldr	r3, [pc, #36]	@ (8002f64 <prvResetNextTaskUnblockTime+0x34>)
 8002f40:	f04f 32ff 	mov.w	r2, #4294967295
 8002f44:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002f46:	e005      	b.n	8002f54 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002f48:	4b05      	ldr	r3, [pc, #20]	@ (8002f60 <prvResetNextTaskUnblockTime+0x30>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a04      	ldr	r2, [pc, #16]	@ (8002f64 <prvResetNextTaskUnblockTime+0x34>)
 8002f52:	6013      	str	r3, [r2, #0]
}
 8002f54:	bf00      	nop
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	2000010c 	.word	0x2000010c
 8002f64:	20000174 	.word	0x20000174

08002f68 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8002f72:	4b3d      	ldr	r3, [pc, #244]	@ (8003068 <prvAddCurrentTaskToDelayedList+0x100>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8002f78:	4b3c      	ldr	r3, [pc, #240]	@ (800306c <prvAddCurrentTaskToDelayedList+0x104>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8002f7e:	4b3c      	ldr	r3, [pc, #240]	@ (8003070 <prvAddCurrentTaskToDelayedList+0x108>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f84:	4b3b      	ldr	r3, [pc, #236]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	3304      	adds	r3, #4
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff f8ee 	bl	800216c <uxListRemove>
 8002f90:	4603      	mov	r3, r0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002f96:	4b37      	ldr	r3, [pc, #220]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	4b34      	ldr	r3, [pc, #208]	@ (8003078 <prvAddCurrentTaskToDelayedList+0x110>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	4a33      	ldr	r2, [pc, #204]	@ (8003078 <prvAddCurrentTaskToDelayedList+0x110>)
 8002fac:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d124      	bne.n	8003000 <prvAddCurrentTaskToDelayedList+0x98>
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d021      	beq.n	8003000 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002fbc:	4b2f      	ldr	r3, [pc, #188]	@ (800307c <prvAddCurrentTaskToDelayedList+0x114>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	4b2a      	ldr	r3, [pc, #168]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	6892      	ldr	r2, [r2, #8]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	4b27      	ldr	r3, [pc, #156]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	3204      	adds	r2, #4
 8002fde:	605a      	str	r2, [r3, #4]
 8002fe0:	4b24      	ldr	r3, [pc, #144]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	1d1a      	adds	r2, r3, #4
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	4b22      	ldr	r3, [pc, #136]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a23      	ldr	r2, [pc, #140]	@ (800307c <prvAddCurrentTaskToDelayedList+0x114>)
 8002ff0:	615a      	str	r2, [r3, #20]
 8002ff2:	4b22      	ldr	r3, [pc, #136]	@ (800307c <prvAddCurrentTaskToDelayedList+0x114>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a20      	ldr	r2, [pc, #128]	@ (800307c <prvAddCurrentTaskToDelayedList+0x114>)
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002ffe:	e02e      	b.n	800305e <prvAddCurrentTaskToDelayedList+0xf6>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4413      	add	r3, r2
 8003006:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003008:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	429a      	cmp	r2, r3
 8003016:	d20d      	bcs.n	8003034 <prvAddCurrentTaskToDelayedList+0xcc>
                traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003018:	4b16      	ldr	r3, [pc, #88]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2104      	movs	r1, #4
 800301e:	4618      	mov	r0, r3
 8003020:	f002 f934 	bl	800528c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003024:	4b13      	ldr	r3, [pc, #76]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	3304      	adds	r3, #4
 800302a:	4619      	mov	r1, r3
 800302c:	6978      	ldr	r0, [r7, #20]
 800302e:	f7ff f862 	bl	80020f6 <vListInsert>
}
 8003032:	e014      	b.n	800305e <prvAddCurrentTaskToDelayedList+0xf6>
                traceMOVED_TASK_TO_DELAYED_LIST();
 8003034:	4b0f      	ldr	r3, [pc, #60]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2104      	movs	r1, #4
 800303a:	4618      	mov	r0, r3
 800303c:	f002 f926 	bl	800528c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8003040:	4b0c      	ldr	r3, [pc, #48]	@ (8003074 <prvAddCurrentTaskToDelayedList+0x10c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	3304      	adds	r3, #4
 8003046:	4619      	mov	r1, r3
 8003048:	69b8      	ldr	r0, [r7, #24]
 800304a:	f7ff f854 	bl	80020f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 800304e:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <prvAddCurrentTaskToDelayedList+0x118>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68fa      	ldr	r2, [r7, #12]
 8003054:	429a      	cmp	r2, r3
 8003056:	d202      	bcs.n	800305e <prvAddCurrentTaskToDelayedList+0xf6>
                    xNextTaskUnblockTime = xTimeToWake;
 8003058:	4a09      	ldr	r2, [pc, #36]	@ (8003080 <prvAddCurrentTaskToDelayedList+0x118>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6013      	str	r3, [r2, #0]
}
 800305e:	bf00      	nop
 8003060:	3720      	adds	r7, #32
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	20000158 	.word	0x20000158
 800306c:	2000010c 	.word	0x2000010c
 8003070:	20000110 	.word	0x20000110
 8003074:	2000007c 	.word	0x2000007c
 8003078:	2000015c 	.word	0x2000015c
 800307c:	20000140 	.word	0x20000140
 8003080:	20000174 	.word	0x20000174

08003084 <vApplicationGetIdleTaskMemory>:
 * configKERNEL_PROVIDED_STATIC_MEMORY to 0 or leaving it undefined.
 */
    void vApplicationGetIdleTaskMemory( StaticTask_t ** ppxIdleTaskTCBBuffer,
                                        StackType_t ** ppxIdleTaskStackBuffer,
                                        configSTACK_DEPTH_TYPE * puxIdleTaskStackSize )
    {
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
        static StaticTask_t xIdleTaskTCB;
        static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

        *ppxIdleTaskTCBBuffer = &( xIdleTaskTCB );
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4a07      	ldr	r2, [pc, #28]	@ (80030b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8003094:	601a      	str	r2, [r3, #0]
        *ppxIdleTaskStackBuffer = &( uxIdleTaskStack[ 0 ] );
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	4a06      	ldr	r2, [pc, #24]	@ (80030b4 <vApplicationGetIdleTaskMemory+0x30>)
 800309a:	601a      	str	r2, [r3, #0]
        *puxIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2282      	movs	r2, #130	@ 0x82
 80030a0:	601a      	str	r2, [r3, #0]
    }
 80030a2:	bf00      	nop
 80030a4:	3714      	adds	r7, #20
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	20000180 	.word	0x20000180
 80030b4:	200001d8 	.word	0x200001d8

080030b8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	60f8      	str	r0, [r7, #12]
 80030c0:	60b9      	str	r1, [r7, #8]
 80030c2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	3b04      	subs	r3, #4
 80030c8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80030d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	3b04      	subs	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f023 0201 	bic.w	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	3b04      	subs	r3, #4
 80030e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80030e8:	4a0c      	ldr	r2, [pc, #48]	@ (800311c <pxPortInitialiseStack+0x64>)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	3b14      	subs	r3, #20
 80030f2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	3b04      	subs	r3, #4
 80030fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f06f 0202 	mvn.w	r2, #2
 8003106:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b20      	subs	r3, #32
 800310c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800310e:	68fb      	ldr	r3, [r7, #12]
}
 8003110:	4618      	mov	r0, r3
 8003112:	3714      	adds	r7, #20
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	08003121 	.word	0x08003121

08003120 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003120:	b480      	push	{r7}
 8003122:	b085      	sub	sp, #20
 8003124:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800312a:	4b13      	ldr	r3, [pc, #76]	@ (8003178 <prvTaskExitError+0x58>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003132:	d00b      	beq.n	800314c <prvTaskExitError+0x2c>
    __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	60fb      	str	r3, [r7, #12]
}
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <prvTaskExitError+0x28>
    __asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	60bb      	str	r3, [r7, #8]
}
 800315e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003160:	bf00      	nop
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d0fc      	beq.n	8003162 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003168:	bf00      	nop
 800316a:	bf00      	nop
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	20000010 	.word	0x20000010
 800317c:	00000000 	.word	0x00000000

08003180 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003180:	4b07      	ldr	r3, [pc, #28]	@ (80031a0 <pxCurrentTCBConst2>)
 8003182:	6819      	ldr	r1, [r3, #0]
 8003184:	6808      	ldr	r0, [r1, #0]
 8003186:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800318a:	f380 8809 	msr	PSP, r0
 800318e:	f3bf 8f6f 	isb	sy
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f380 8811 	msr	BASEPRI, r0
 800319a:	4770      	bx	lr
 800319c:	f3af 8000 	nop.w

080031a0 <pxCurrentTCBConst2>:
 80031a0:	2000007c 	.word	0x2000007c
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80031a4:	bf00      	nop
 80031a6:	bf00      	nop

080031a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80031a8:	4808      	ldr	r0, [pc, #32]	@ (80031cc <prvPortStartFirstTask+0x24>)
 80031aa:	6800      	ldr	r0, [r0, #0]
 80031ac:	6800      	ldr	r0, [r0, #0]
 80031ae:	f380 8808 	msr	MSP, r0
 80031b2:	f04f 0000 	mov.w	r0, #0
 80031b6:	f380 8814 	msr	CONTROL, r0
 80031ba:	b662      	cpsie	i
 80031bc:	b661      	cpsie	f
 80031be:	f3bf 8f4f 	dsb	sy
 80031c2:	f3bf 8f6f 	isb	sy
 80031c6:	df00      	svc	0
 80031c8:	bf00      	nop
 80031ca:	0000      	.short	0x0000
 80031cc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80031d0:	bf00      	nop
 80031d2:	bf00      	nop

080031d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	@ 0x30
 80031d8:	af00      	add	r7, sp, #0
    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80031da:	4b69      	ldr	r3, [pc, #420]	@ (8003380 <xPortStartScheduler+0x1ac>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a69      	ldr	r2, [pc, #420]	@ (8003384 <xPortStartScheduler+0x1b0>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d10b      	bne.n	80031fc <xPortStartScheduler+0x28>
    __asm volatile
 80031e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e8:	f383 8811 	msr	BASEPRI, r3
 80031ec:	f3bf 8f6f 	isb	sy
 80031f0:	f3bf 8f4f 	dsb	sy
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80031f6:	bf00      	nop
 80031f8:	bf00      	nop
 80031fa:	e7fd      	b.n	80031f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80031fc:	4b60      	ldr	r3, [pc, #384]	@ (8003380 <xPortStartScheduler+0x1ac>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a61      	ldr	r2, [pc, #388]	@ (8003388 <xPortStartScheduler+0x1b4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d10b      	bne.n	800321e <xPortStartScheduler+0x4a>
    __asm volatile
 8003206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	623b      	str	r3, [r7, #32]
}
 8003218:	bf00      	nop
 800321a:	bf00      	nop
 800321c:	e7fd      	b.n	800321a <xPortStartScheduler+0x46>
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 800321e:	4b5b      	ldr	r3, [pc, #364]	@ (800338c <xPortStartScheduler+0x1b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003226:	332c      	adds	r3, #44	@ 0x2c
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a59      	ldr	r2, [pc, #356]	@ (8003390 <xPortStartScheduler+0x1bc>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d00b      	beq.n	8003248 <xPortStartScheduler+0x74>
    __asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	61fb      	str	r3, [r7, #28]
}
 8003242:	bf00      	nop
 8003244:	bf00      	nop
 8003246:	e7fd      	b.n	8003244 <xPortStartScheduler+0x70>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8003248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324a:	3338      	adds	r3, #56	@ 0x38
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a51      	ldr	r2, [pc, #324]	@ (8003394 <xPortStartScheduler+0x1c0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00b      	beq.n	800326c <xPortStartScheduler+0x98>
    __asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003258:	f383 8811 	msr	BASEPRI, r3
 800325c:	f3bf 8f6f 	isb	sy
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	61bb      	str	r3, [r7, #24]
}
 8003266:	bf00      	nop
 8003268:	bf00      	nop
 800326a:	e7fd      	b.n	8003268 <xPortStartScheduler+0x94>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800326c:	2300      	movs	r3, #0
 800326e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003270:	4b49      	ldr	r3, [pc, #292]	@ (8003398 <xPortStartScheduler+0x1c4>)
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800327c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327e:	22ff      	movs	r2, #255	@ 0xff
 8003280:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800328a:	79fb      	ldrb	r3, [r7, #7]
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003292:	b2da      	uxtb	r2, r3
 8003294:	4b41      	ldr	r3, [pc, #260]	@ (800339c <xPortStartScheduler+0x1c8>)
 8003296:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8003298:	4b40      	ldr	r3, [pc, #256]	@ (800339c <xPortStartScheduler+0x1c8>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10b      	bne.n	80032b8 <xPortStartScheduler+0xe4>
    __asm volatile
 80032a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a4:	f383 8811 	msr	BASEPRI, r3
 80032a8:	f3bf 8f6f 	isb	sy
 80032ac:	f3bf 8f4f 	dsb	sy
 80032b0:	617b      	str	r3, [r7, #20]
}
 80032b2:	bf00      	nop
 80032b4:	bf00      	nop
 80032b6:	e7fd      	b.n	80032b4 <xPortStartScheduler+0xe0>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80032b8:	79fb      	ldrb	r3, [r7, #7]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d013      	beq.n	80032ee <xPortStartScheduler+0x11a>
    __asm volatile
 80032c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032ca:	f383 8811 	msr	BASEPRI, r3
 80032ce:	f3bf 8f6f 	isb	sy
 80032d2:	f3bf 8f4f 	dsb	sy
 80032d6:	613b      	str	r3, [r7, #16]
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	e7fd      	b.n	80032da <xPortStartScheduler+0x106>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	3301      	adds	r3, #1
 80032e2:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80032ee:	79fb      	ldrb	r3, [r7, #7]
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f6:	2b80      	cmp	r3, #128	@ 0x80
 80032f8:	d0f1      	beq.n	80032de <xPortStartScheduler+0x10a>
        }

        if( ulImplementedPrioBits == 8 )
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d103      	bne.n	8003308 <xPortStartScheduler+0x134>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8003300:	4b27      	ldr	r3, [pc, #156]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	e004      	b.n	8003312 <xPortStartScheduler+0x13e>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	f1c3 0307 	rsb	r3, r3, #7
 800330e:	4a24      	ldr	r2, [pc, #144]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 8003310:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003312:	4b23      	ldr	r3, [pc, #140]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	021b      	lsls	r3, r3, #8
 8003318:	4a21      	ldr	r2, [pc, #132]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 800331a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800331c:	4b20      	ldr	r3, [pc, #128]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003324:	4a1e      	ldr	r2, [pc, #120]	@ (80033a0 <xPortStartScheduler+0x1cc>)
 8003326:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	b2da      	uxtb	r2, r3
 800332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800332e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003330:	4b1c      	ldr	r3, [pc, #112]	@ (80033a4 <xPortStartScheduler+0x1d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	@ (80033a4 <xPortStartScheduler+0x1d0>)
 8003336:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800333a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800333c:	4b19      	ldr	r3, [pc, #100]	@ (80033a4 <xPortStartScheduler+0x1d0>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a18      	ldr	r2, [pc, #96]	@ (80033a4 <xPortStartScheduler+0x1d0>)
 8003342:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8003346:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 8003348:	4b17      	ldr	r3, [pc, #92]	@ (80033a8 <xPortStartScheduler+0x1d4>)
 800334a:	2200      	movs	r2, #0
 800334c:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 800334e:	f000 f96d 	bl	800362c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003352:	4b16      	ldr	r3, [pc, #88]	@ (80033ac <xPortStartScheduler+0x1d8>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003358:	f000 f98c 	bl	8003674 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <xPortStartScheduler+0x1dc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a13      	ldr	r2, [pc, #76]	@ (80033b0 <xPortStartScheduler+0x1dc>)
 8003362:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003366:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003368:	f7ff ff1e 	bl	80031a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 800336c:	f7ff fcba 	bl	8002ce4 <vTaskSwitchContext>
    prvTaskExitError();
 8003370:	f7ff fed6 	bl	8003120 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3730      	adds	r7, #48	@ 0x30
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	e000ed00 	.word	0xe000ed00
 8003384:	410fc271 	.word	0x410fc271
 8003388:	410fc270 	.word	0x410fc270
 800338c:	e000ed08 	.word	0xe000ed08
 8003390:	08003181 	.word	0x08003181
 8003394:	08003571 	.word	0x08003571
 8003398:	e000e400 	.word	0xe000e400
 800339c:	200003e0 	.word	0x200003e0
 80033a0:	200003e4 	.word	0x200003e4
 80033a4:	e000ed20 	.word	0xe000ed20
 80033a8:	e000ed1c 	.word	0xe000ed1c
 80033ac:	20000010 	.word	0x20000010
 80033b0:	e000ef34 	.word	0xe000ef34

080033b4 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/

void vInitPrioGroupValue(void)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b087      	sub	sp, #28
 80033b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80033ba:	4b38      	ldr	r3, [pc, #224]	@ (800349c <vInitPrioGroupValue+0xe8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a38      	ldr	r2, [pc, #224]	@ (80034a0 <vInitPrioGroupValue+0xec>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d10b      	bne.n	80033dc <vInitPrioGroupValue+0x28>
    __asm volatile
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
 80033d4:	613b      	str	r3, [r7, #16]
}
 80033d6:	bf00      	nop
 80033d8:	bf00      	nop
 80033da:	e7fd      	b.n	80033d8 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80033dc:	4b2f      	ldr	r3, [pc, #188]	@ (800349c <vInitPrioGroupValue+0xe8>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a30      	ldr	r2, [pc, #192]	@ (80034a4 <vInitPrioGroupValue+0xf0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d10b      	bne.n	80033fe <vInitPrioGroupValue+0x4a>
    __asm volatile
 80033e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ea:	f383 8811 	msr	BASEPRI, r3
 80033ee:	f3bf 8f6f 	isb	sy
 80033f2:	f3bf 8f4f 	dsb	sy
 80033f6:	60fb      	str	r3, [r7, #12]
}
 80033f8:	bf00      	nop
 80033fa:	bf00      	nop
 80033fc:	e7fd      	b.n	80033fa <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80033fe:	4b2a      	ldr	r3, [pc, #168]	@ (80034a8 <vInitPrioGroupValue+0xf4>)
 8003400:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b2db      	uxtb	r3, r3
 8003408:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	22ff      	movs	r2, #255	@ 0xff
 800340e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	b2db      	uxtb	r3, r3
 8003416:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003418:	78fb      	ldrb	r3, [r7, #3]
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003420:	b2da      	uxtb	r2, r3
 8003422:	4b22      	ldr	r3, [pc, #136]	@ (80034ac <vInitPrioGroupValue+0xf8>)
 8003424:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003426:	4b22      	ldr	r3, [pc, #136]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003428:	2207      	movs	r2, #7
 800342a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800342c:	e009      	b.n	8003442 <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800342e:	4b20      	ldr	r3, [pc, #128]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3b01      	subs	r3, #1
 8003434:	4a1e      	ldr	r2, [pc, #120]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003436:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003438:	78fb      	ldrb	r3, [r7, #3]
 800343a:	b2db      	uxtb	r3, r3
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	b2db      	uxtb	r3, r3
 8003440:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800344a:	2b80      	cmp	r3, #128	@ 0x80
 800344c:	d0ef      	beq.n	800342e <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800344e:	4b18      	ldr	r3, [pc, #96]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1c3 0307 	rsb	r3, r3, #7
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00b      	beq.n	8003472 <vInitPrioGroupValue+0xbe>
    __asm volatile
 800345a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800345e:	f383 8811 	msr	BASEPRI, r3
 8003462:	f3bf 8f6f 	isb	sy
 8003466:	f3bf 8f4f 	dsb	sy
 800346a:	60bb      	str	r3, [r7, #8]
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	e7fd      	b.n	800346e <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003472:	4b0f      	ldr	r3, [pc, #60]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	021b      	lsls	r3, r3, #8
 8003478:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 800347a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800347c:	4b0c      	ldr	r3, [pc, #48]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003484:	4a0a      	ldr	r2, [pc, #40]	@ (80034b0 <vInitPrioGroupValue+0xfc>)
 8003486:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003490:	bf00      	nop
 8003492:	371c      	adds	r7, #28
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	e000ed00 	.word	0xe000ed00
 80034a0:	410fc271 	.word	0x410fc271
 80034a4:	410fc270 	.word	0x410fc270
 80034a8:	e000e400 	.word	0xe000e400
 80034ac:	200003e0 	.word	0x200003e0
 80034b0:	200003e4 	.word	0x200003e4

080034b4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
    __asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	607b      	str	r3, [r7, #4]
}
 80034cc:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <vPortEnterCritical+0x5c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	4a0e      	ldr	r2, [pc, #56]	@ (8003510 <vPortEnterCritical+0x5c>)
 80034d6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80034d8:	4b0d      	ldr	r3, [pc, #52]	@ (8003510 <vPortEnterCritical+0x5c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d110      	bne.n	8003502 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <vPortEnterCritical+0x60>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <vPortEnterCritical+0x4e>
    __asm volatile
 80034ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034ee:	f383 8811 	msr	BASEPRI, r3
 80034f2:	f3bf 8f6f 	isb	sy
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	603b      	str	r3, [r7, #0]
}
 80034fc:	bf00      	nop
 80034fe:	bf00      	nop
 8003500:	e7fd      	b.n	80034fe <vPortEnterCritical+0x4a>
    }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	20000010 	.word	0x20000010
 8003514:	e000ed04 	.word	0xe000ed04

08003518 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800351e:	4b12      	ldr	r3, [pc, #72]	@ (8003568 <vPortExitCritical+0x50>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d10b      	bne.n	800353e <vPortExitCritical+0x26>
    __asm volatile
 8003526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800352a:	f383 8811 	msr	BASEPRI, r3
 800352e:	f3bf 8f6f 	isb	sy
 8003532:	f3bf 8f4f 	dsb	sy
 8003536:	607b      	str	r3, [r7, #4]
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	e7fd      	b.n	800353a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800353e:	4b0a      	ldr	r3, [pc, #40]	@ (8003568 <vPortExitCritical+0x50>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	3b01      	subs	r3, #1
 8003544:	4a08      	ldr	r2, [pc, #32]	@ (8003568 <vPortExitCritical+0x50>)
 8003546:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003548:	4b07      	ldr	r3, [pc, #28]	@ (8003568 <vPortExitCritical+0x50>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d105      	bne.n	800355c <vPortExitCritical+0x44>
 8003550:	2300      	movs	r3, #0
 8003552:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800355a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	20000010 	.word	0x20000010
 800356c:	00000000 	.word	0x00000000

08003570 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003570:	f3ef 8009 	mrs	r0, PSP
 8003574:	f3bf 8f6f 	isb	sy
 8003578:	4b15      	ldr	r3, [pc, #84]	@ (80035d0 <pxCurrentTCBConst>)
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	f01e 0f10 	tst.w	lr, #16
 8003580:	bf08      	it	eq
 8003582:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003586:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800358a:	6010      	str	r0, [r2, #0]
 800358c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003590:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003594:	f380 8811 	msr	BASEPRI, r0
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	f3bf 8f6f 	isb	sy
 80035a0:	f7ff fba0 	bl	8002ce4 <vTaskSwitchContext>
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f380 8811 	msr	BASEPRI, r0
 80035ac:	bc09      	pop	{r0, r3}
 80035ae:	6819      	ldr	r1, [r3, #0]
 80035b0:	6808      	ldr	r0, [r1, #0]
 80035b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035b6:	f01e 0f10 	tst.w	lr, #16
 80035ba:	bf08      	it	eq
 80035bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80035c0:	f380 8809 	msr	PSP, r0
 80035c4:	f3bf 8f6f 	isb	sy
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w

080035d0 <pxCurrentTCBConst>:
 80035d0:	2000007c 	.word	0x2000007c
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80035d4:	bf00      	nop
 80035d6:	bf00      	nop

080035d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
    __asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035e2:	f383 8811 	msr	BASEPRI, r3
 80035e6:	f3bf 8f6f 	isb	sy
 80035ea:	f3bf 8f4f 	dsb	sy
 80035ee:	607b      	str	r3, [r7, #4]
}
 80035f0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
 80035f2:	f001 fc5b 	bl	8004eac <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80035f6:	f7ff fa53 	bl	8002aa0 <xTaskIncrementTick>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d006      	beq.n	800360e <SysTick_Handler+0x36>
        {
            traceISR_EXIT_TO_SCHEDULER();
 8003600:	f001 fcb2 	bl	8004f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003604:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <SysTick_Handler+0x50>)
 8003606:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e001      	b.n	8003612 <SysTick_Handler+0x3a>
        }
        else
        {
            traceISR_EXIT();
 800360e:	f001 fc8f 	bl	8004f30 <SEGGER_SYSVIEW_RecordExitISR>
 8003612:	2300      	movs	r3, #0
 8003614:	603b      	str	r3, [r7, #0]
    __asm volatile
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	f383 8811 	msr	BASEPRI, r3
}
 800361c:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 800361e:	bf00      	nop
 8003620:	3708      	adds	r7, #8
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	e000ed04 	.word	0xe000ed04

0800362c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003630:	4b0b      	ldr	r3, [pc, #44]	@ (8003660 <vPortSetupTimerInterrupt+0x34>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003636:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <vPortSetupTimerInterrupt+0x38>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800363c:	4b0a      	ldr	r3, [pc, #40]	@ (8003668 <vPortSetupTimerInterrupt+0x3c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a0a      	ldr	r2, [pc, #40]	@ (800366c <vPortSetupTimerInterrupt+0x40>)
 8003642:	fba2 2303 	umull	r2, r3, r2, r3
 8003646:	099b      	lsrs	r3, r3, #6
 8003648:	4a09      	ldr	r2, [pc, #36]	@ (8003670 <vPortSetupTimerInterrupt+0x44>)
 800364a:	3b01      	subs	r3, #1
 800364c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800364e:	4b04      	ldr	r3, [pc, #16]	@ (8003660 <vPortSetupTimerInterrupt+0x34>)
 8003650:	2207      	movs	r2, #7
 8003652:	601a      	str	r2, [r3, #0]
}
 8003654:	bf00      	nop
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	e000e010 	.word	0xe000e010
 8003664:	e000e018 	.word	0xe000e018
 8003668:	20000000 	.word	0x20000000
 800366c:	10624dd3 	.word	0x10624dd3
 8003670:	e000e014 	.word	0xe000e014

08003674 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003674:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8003684 <vPortEnableVFP+0x10>
 8003678:	6801      	ldr	r1, [r0, #0]
 800367a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800367e:	6001      	str	r1, [r0, #0]
 8003680:	4770      	bx	lr
 8003682:	0000      	.short	0x0000
 8003684:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop

0800368c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8003692:	f3ef 8305 	mrs	r3, IPSR
 8003696:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2b0f      	cmp	r3, #15
 800369c:	d915      	bls.n	80036ca <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800369e:	4a18      	ldr	r2, [pc, #96]	@ (8003700 <vPortValidateInterruptPriority+0x74>)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	4413      	add	r3, r2
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80036a8:	4b16      	ldr	r3, [pc, #88]	@ (8003704 <vPortValidateInterruptPriority+0x78>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	7afa      	ldrb	r2, [r7, #11]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d20b      	bcs.n	80036ca <vPortValidateInterruptPriority+0x3e>
    __asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	607b      	str	r3, [r7, #4]
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	e7fd      	b.n	80036c6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80036ca:	4b0f      	ldr	r3, [pc, #60]	@ (8003708 <vPortValidateInterruptPriority+0x7c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036d2:	4b0e      	ldr	r3, [pc, #56]	@ (800370c <vPortValidateInterruptPriority+0x80>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d90b      	bls.n	80036f2 <vPortValidateInterruptPriority+0x66>
    __asm volatile
 80036da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036de:	f383 8811 	msr	BASEPRI, r3
 80036e2:	f3bf 8f6f 	isb	sy
 80036e6:	f3bf 8f4f 	dsb	sy
 80036ea:	603b      	str	r3, [r7, #0]
}
 80036ec:	bf00      	nop
 80036ee:	bf00      	nop
 80036f0:	e7fd      	b.n	80036ee <vPortValidateInterruptPriority+0x62>
    }
 80036f2:	bf00      	nop
 80036f4:	3714      	adds	r7, #20
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	e000e3f0 	.word	0xe000e3f0
 8003704:	200003e0 	.word	0x200003e0
 8003708:	e000ed0c 	.word	0xe000ed0c
 800370c:	200003e4 	.word	0x200003e4

08003710 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8003718:	2300      	movs	r3, #0
 800371a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d022      	beq.n	8003768 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8003722:	2308      	movs	r3, #8
 8003724:	43db      	mvns	r3, r3
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	429a      	cmp	r2, r3
 800372a:	d81b      	bhi.n	8003764 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800372c:	2208      	movs	r2, #8
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	2b00      	cmp	r3, #0
 800373c:	d014      	beq.n	8003768 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f003 0307 	and.w	r3, r3, #7
 8003744:	f1c3 0308 	rsb	r3, r3, #8
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374c:	43db      	mvns	r3, r3
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	d804      	bhi.n	800375e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	4413      	add	r3, r2
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	e004      	b.n	8003768 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800375e:	2300      	movs	r3, #0
 8003760:	607b      	str	r3, [r7, #4]
 8003762:	e001      	b.n	8003768 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8003764:	2300      	movs	r3, #0
 8003766:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8003768:	f7ff f864 	bl	8002834 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800376c:	4b7a      	ldr	r3, [pc, #488]	@ (8003958 <pvPortMalloc+0x248>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d101      	bne.n	8003778 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8003774:	f000 f978 	bl	8003a68 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	f2c0 80d3 	blt.w	8003926 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80cf 	beq.w	8003926 <pvPortMalloc+0x216>
 8003788:	4b74      	ldr	r3, [pc, #464]	@ (800395c <pvPortMalloc+0x24c>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	429a      	cmp	r2, r3
 8003790:	f200 80c9 	bhi.w	8003926 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003794:	4b72      	ldr	r3, [pc, #456]	@ (8003960 <pvPortMalloc+0x250>)
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8003798:	4b71      	ldr	r3, [pc, #452]	@ (8003960 <pvPortMalloc+0x250>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800379e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a0:	4a70      	ldr	r2, [pc, #448]	@ (8003964 <pvPortMalloc+0x254>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d305      	bcc.n	80037b2 <pvPortMalloc+0xa2>
 80037a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037a8:	4a6f      	ldr	r2, [pc, #444]	@ (8003968 <pvPortMalloc+0x258>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d801      	bhi.n	80037b2 <pvPortMalloc+0xa2>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <pvPortMalloc+0xa4>
 80037b2:	2300      	movs	r3, #0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d129      	bne.n	800380c <pvPortMalloc+0xfc>
    __asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	623b      	str	r3, [r7, #32]
}
 80037ca:	bf00      	nop
 80037cc:	bf00      	nop
 80037ce:	e7fd      	b.n	80037cc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80037d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80037d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80037da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037dc:	4a61      	ldr	r2, [pc, #388]	@ (8003964 <pvPortMalloc+0x254>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d305      	bcc.n	80037ee <pvPortMalloc+0xde>
 80037e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e4:	4a60      	ldr	r2, [pc, #384]	@ (8003968 <pvPortMalloc+0x258>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d801      	bhi.n	80037ee <pvPortMalloc+0xde>
 80037ea:	2301      	movs	r3, #1
 80037ec:	e000      	b.n	80037f0 <pvPortMalloc+0xe0>
 80037ee:	2300      	movs	r3, #0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <pvPortMalloc+0xfc>
    __asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	61fb      	str	r3, [r7, #28]
}
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800380c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d903      	bls.n	800381e <pvPortMalloc+0x10e>
 8003816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d1d8      	bne.n	80037d0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800381e:	4b4e      	ldr	r3, [pc, #312]	@ (8003958 <pvPortMalloc+0x248>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003824:	429a      	cmp	r2, r3
 8003826:	d07e      	beq.n	8003926 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8003828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2208      	movs	r2, #8
 800382e:	4413      	add	r3, r2
 8003830:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	4a4b      	ldr	r2, [pc, #300]	@ (8003964 <pvPortMalloc+0x254>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d305      	bcc.n	8003846 <pvPortMalloc+0x136>
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	4a4a      	ldr	r2, [pc, #296]	@ (8003968 <pvPortMalloc+0x258>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d801      	bhi.n	8003846 <pvPortMalloc+0x136>
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <pvPortMalloc+0x138>
 8003846:	2300      	movs	r3, #0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <pvPortMalloc+0x154>
    __asm volatile
 800384c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003850:	f383 8811 	msr	BASEPRI, r3
 8003854:	f3bf 8f6f 	isb	sy
 8003858:	f3bf 8f4f 	dsb	sy
 800385c:	61bb      	str	r3, [r7, #24]
}
 800385e:	bf00      	nop
 8003860:	bf00      	nop
 8003862:	e7fd      	b.n	8003860 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003864:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800386c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	429a      	cmp	r2, r3
 8003874:	d90b      	bls.n	800388e <pvPortMalloc+0x17e>
    __asm volatile
 8003876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387a:	f383 8811 	msr	BASEPRI, r3
 800387e:	f3bf 8f6f 	isb	sy
 8003882:	f3bf 8f4f 	dsb	sy
 8003886:	617b      	str	r3, [r7, #20]
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	e7fd      	b.n	800388a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800388e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	1ad2      	subs	r2, r2, r3
 8003896:	2308      	movs	r3, #8
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	429a      	cmp	r2, r3
 800389c:	d924      	bls.n	80038e8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800389e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4413      	add	r3, r2
 80038a4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80038a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a8:	f003 0307 	and.w	r3, r3, #7
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d00b      	beq.n	80038c8 <pvPortMalloc+0x1b8>
    __asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	613b      	str	r3, [r7, #16]
}
 80038c2:	bf00      	nop
 80038c4:	bf00      	nop
 80038c6:	e7fd      	b.n	80038c4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80038c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ca:	685a      	ldr	r2, [r3, #4]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	1ad2      	subs	r2, r2, r3
 80038d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80038d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038d6:	687a      	ldr	r2, [r7, #4]
 80038d8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80038da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80038e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038e6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80038e8:	4b1c      	ldr	r3, [pc, #112]	@ (800395c <pvPortMalloc+0x24c>)
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	4a1a      	ldr	r2, [pc, #104]	@ (800395c <pvPortMalloc+0x24c>)
 80038f4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80038f6:	4b19      	ldr	r3, [pc, #100]	@ (800395c <pvPortMalloc+0x24c>)
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b1c      	ldr	r3, [pc, #112]	@ (800396c <pvPortMalloc+0x25c>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d203      	bcs.n	800390a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003902:	4b16      	ldr	r3, [pc, #88]	@ (800395c <pvPortMalloc+0x24c>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a19      	ldr	r2, [pc, #100]	@ (800396c <pvPortMalloc+0x25c>)
 8003908:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800390a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003914:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800391c:	4b14      	ldr	r3, [pc, #80]	@ (8003970 <pvPortMalloc+0x260>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	3301      	adds	r3, #1
 8003922:	4a13      	ldr	r2, [pc, #76]	@ (8003970 <pvPortMalloc+0x260>)
 8003924:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8003926:	f7fe ff93 	bl	8002850 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800392c:	f003 0307 	and.w	r3, r3, #7
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00b      	beq.n	800394c <pvPortMalloc+0x23c>
    __asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	60fb      	str	r3, [r7, #12]
}
 8003946:	bf00      	nop
 8003948:	bf00      	nop
 800394a:	e7fd      	b.n	8003948 <pvPortMalloc+0x238>
    return pvReturn;
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800394e:	4618      	mov	r0, r3
 8003950:	3738      	adds	r7, #56	@ 0x38
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
 8003956:	bf00      	nop
 8003958:	200193f0 	.word	0x200193f0
 800395c:	200193f4 	.word	0x200193f4
 8003960:	200193e8 	.word	0x200193e8
 8003964:	200003e8 	.word	0x200003e8
 8003968:	200193e7 	.word	0x200193e7
 800396c:	200193f8 	.word	0x200193f8
 8003970:	200193fc 	.word	0x200193fc

08003974 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b088      	sub	sp, #32
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d064      	beq.n	8003a50 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8003986:	2308      	movs	r3, #8
 8003988:	425b      	negs	r3, r3
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	4413      	add	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	4a30      	ldr	r2, [pc, #192]	@ (8003a58 <vPortFree+0xe4>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d305      	bcc.n	80039a8 <vPortFree+0x34>
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	4a2f      	ldr	r2, [pc, #188]	@ (8003a5c <vPortFree+0xe8>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d801      	bhi.n	80039a8 <vPortFree+0x34>
 80039a4:	2301      	movs	r3, #1
 80039a6:	e000      	b.n	80039aa <vPortFree+0x36>
 80039a8:	2300      	movs	r3, #0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10b      	bne.n	80039c6 <vPortFree+0x52>
    __asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	617b      	str	r3, [r7, #20]
}
 80039c0:	bf00      	nop
 80039c2:	bf00      	nop
 80039c4:	e7fd      	b.n	80039c2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	db0b      	blt.n	80039e6 <vPortFree+0x72>
    __asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	613b      	str	r3, [r7, #16]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00b      	beq.n	8003a06 <vPortFree+0x92>
    __asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60fb      	str	r3, [r7, #12]
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	e7fd      	b.n	8003a02 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	0fdb      	lsrs	r3, r3, #31
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d01c      	beq.n	8003a50 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d118      	bne.n	8003a50 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8003a2a:	f7fe ff03 	bl	8002834 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8003a2e:	69bb      	ldr	r3, [r7, #24]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	4b0b      	ldr	r3, [pc, #44]	@ (8003a60 <vPortFree+0xec>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4413      	add	r3, r2
 8003a38:	4a09      	ldr	r2, [pc, #36]	@ (8003a60 <vPortFree+0xec>)
 8003a3a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003a3c:	69b8      	ldr	r0, [r7, #24]
 8003a3e:	f000 f86d 	bl	8003b1c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8003a42:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <vPortFree+0xf0>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	3301      	adds	r3, #1
 8003a48:	4a06      	ldr	r2, [pc, #24]	@ (8003a64 <vPortFree+0xf0>)
 8003a4a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8003a4c:	f7fe ff00 	bl	8002850 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8003a50:	bf00      	nop
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200003e8 	.word	0x200003e8
 8003a5c:	200193e7 	.word	0x200193e7
 8003a60:	200193f4 	.word	0x200193f4
 8003a64:	20019400 	.word	0x20019400

08003a68 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003a6e:	f44f 33c8 	mov.w	r3, #102400	@ 0x19000
 8003a72:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8003a74:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <prvHeapInit+0xa0>)
 8003a76:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 0307 	and.w	r3, r3, #7
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00c      	beq.n	8003a9c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	3307      	adds	r3, #7
 8003a86:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8003a90:	68ba      	ldr	r2, [r7, #8]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	4a1c      	ldr	r2, [pc, #112]	@ (8003b08 <prvHeapInit+0xa0>)
 8003a98:	4413      	add	r3, r2
 8003a9a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	@ (8003b0c <prvHeapInit+0xa4>)
 8003aa0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8003b0c <prvHeapInit+0xa4>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	4413      	add	r3, r2
 8003aae:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	f023 0307 	bic.w	r3, r3, #7
 8003abe:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a13      	ldr	r2, [pc, #76]	@ (8003b10 <prvHeapInit+0xa8>)
 8003ac4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003ac6:	4b12      	ldr	r3, [pc, #72]	@ (8003b10 <prvHeapInit+0xa8>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2200      	movs	r2, #0
 8003acc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8003ace:	4b10      	ldr	r3, [pc, #64]	@ (8003b10 <prvHeapInit+0xa8>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	1ad2      	subs	r2, r2, r3
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8003b10 <prvHeapInit+0xa8>)
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	4a08      	ldr	r2, [pc, #32]	@ (8003b14 <prvHeapInit+0xac>)
 8003af2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	4a07      	ldr	r2, [pc, #28]	@ (8003b18 <prvHeapInit+0xb0>)
 8003afa:	6013      	str	r3, [r2, #0]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr
 8003b08:	200003e8 	.word	0x200003e8
 8003b0c:	200193e8 	.word	0x200193e8
 8003b10:	200193f0 	.word	0x200193f0
 8003b14:	200193f8 	.word	0x200193f8
 8003b18:	200193f4 	.word	0x200193f4

08003b1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b087      	sub	sp, #28
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003b24:	4b36      	ldr	r3, [pc, #216]	@ (8003c00 <prvInsertBlockIntoFreeList+0xe4>)
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e002      	b.n	8003b30 <prvInsertBlockIntoFreeList+0x14>
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	617b      	str	r3, [r7, #20]
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d8f7      	bhi.n	8003b2a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <prvInsertBlockIntoFreeList+0xe4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d018      	beq.n	8003b74 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	4a2f      	ldr	r2, [pc, #188]	@ (8003c04 <prvInsertBlockIntoFreeList+0xe8>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d305      	bcc.n	8003b56 <prvInsertBlockIntoFreeList+0x3a>
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	4a2e      	ldr	r2, [pc, #184]	@ (8003c08 <prvInsertBlockIntoFreeList+0xec>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d801      	bhi.n	8003b56 <prvInsertBlockIntoFreeList+0x3a>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <prvInsertBlockIntoFreeList+0x3c>
 8003b56:	2300      	movs	r3, #0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10b      	bne.n	8003b74 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	60fb      	str	r3, [r7, #12]
}
 8003b6e:	bf00      	nop
 8003b70:	bf00      	nop
 8003b72:	e7fd      	b.n	8003b70 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	687a      	ldr	r2, [r7, #4]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d108      	bne.n	8003b98 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	685a      	ldr	r2, [r3, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	441a      	add	r2, r3
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	441a      	add	r2, r3
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d118      	bne.n	8003bde <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	4b16      	ldr	r3, [pc, #88]	@ (8003c0c <prvInsertBlockIntoFreeList+0xf0>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d00d      	beq.n	8003bd4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685a      	ldr	r2, [r3, #4]
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	685b      	ldr	r3, [r3, #4]
 8003bc2:	441a      	add	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	e008      	b.n	8003be6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8003bd4:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <prvInsertBlockIntoFreeList+0xf0>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	e003      	b.n	8003be6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d002      	beq.n	8003bf4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003bf4:	bf00      	nop
 8003bf6:	371c      	adds	r7, #28
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	200193e8 	.word	0x200193e8
 8003c04:	200003e8 	.word	0x200003e8
 8003c08:	200193e7 	.word	0x200193e7
 8003c0c:	200193f0 	.word	0x200193f0

08003c10 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8003c10:	b580      	push	{r7, lr}
 8003c12:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8003c14:	4803      	ldr	r0, [pc, #12]	@ (8003c24 <_cbSendSystemDesc+0x14>)
 8003c16:	f001 f8f3 	bl	8004e00 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8003c1a:	4803      	ldr	r0, [pc, #12]	@ (8003c28 <_cbSendSystemDesc+0x18>)
 8003c1c:	f001 f8f0 	bl	8004e00 <SEGGER_SYSVIEW_SendSysDesc>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	080056d4 	.word	0x080056d4
 8003c28:	08005710 	.word	0x08005710

08003c2c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8003c30:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4b05      	ldr	r3, [pc, #20]	@ (8003c4c <SEGGER_SYSVIEW_Conf+0x20>)
 8003c36:	6819      	ldr	r1, [r3, #0]
 8003c38:	4b05      	ldr	r3, [pc, #20]	@ (8003c50 <SEGGER_SYSVIEW_Conf+0x24>)
 8003c3a:	4a06      	ldr	r2, [pc, #24]	@ (8003c54 <SEGGER_SYSVIEW_Conf+0x28>)
 8003c3c:	f000 fd66 	bl	800470c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8003c40:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8003c44:	f000 fda6 	bl	8004794 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003c48:	bf00      	nop
 8003c4a:	bd80      	pop	{r7, pc}
 8003c4c:	20000000 	.word	0x20000000
 8003c50:	08003c11 	.word	0x08003c11
 8003c54:	080057ac 	.word	0x080057ac

08003c58 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003c58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	e033      	b.n	8003ccc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003c64:	491e      	ldr	r1, [pc, #120]	@ (8003ce0 <_cbSendTaskList+0x88>)
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	6818      	ldr	r0, [r3, #0]
 8003c74:	491a      	ldr	r1, [pc, #104]	@ (8003ce0 <_cbSendTaskList+0x88>)
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	4613      	mov	r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	009b      	lsls	r3, r3, #2
 8003c80:	440b      	add	r3, r1
 8003c82:	3304      	adds	r3, #4
 8003c84:	6819      	ldr	r1, [r3, #0]
 8003c86:	4c16      	ldr	r4, [pc, #88]	@ (8003ce0 <_cbSendTaskList+0x88>)
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	4413      	add	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4423      	add	r3, r4
 8003c94:	3308      	adds	r3, #8
 8003c96:	681c      	ldr	r4, [r3, #0]
 8003c98:	4d11      	ldr	r5, [pc, #68]	@ (8003ce0 <_cbSendTaskList+0x88>)
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	442b      	add	r3, r5
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	681d      	ldr	r5, [r3, #0]
 8003caa:	4e0d      	ldr	r6, [pc, #52]	@ (8003ce0 <_cbSendTaskList+0x88>)
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	4413      	add	r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	4433      	add	r3, r6
 8003cb8:	3310      	adds	r3, #16
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	9300      	str	r3, [sp, #0]
 8003cbe:	462b      	mov	r3, r5
 8003cc0:	4622      	mov	r2, r4
 8003cc2:	f000 f8bd 	bl	8003e40 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <_cbSendTaskList+0x8c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	d3c6      	bcc.n	8003c64 <_cbSendTaskList+0xc>
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ce0:	20019404 	.word	0x20019404
 8003ce4:	200194a4 	.word	0x200194a4

08003ce8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8003ce8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8003cf0:	f7fe fec0 	bl	8002a74 <xTaskGetTickCountFromISR>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	469a      	mov	sl, r3
 8003cfa:	4693      	mov	fp, r2
 8003cfc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8003d00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d04:	4602      	mov	r2, r0
 8003d06:	460b      	mov	r3, r1
 8003d08:	f04f 0a00 	mov.w	sl, #0
 8003d0c:	f04f 0b00 	mov.w	fp, #0
 8003d10:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8003d14:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8003d18:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8003d1c:	4652      	mov	r2, sl
 8003d1e:	465b      	mov	r3, fp
 8003d20:	1a14      	subs	r4, r2, r0
 8003d22:	eb63 0501 	sbc.w	r5, r3, r1
 8003d26:	f04f 0200 	mov.w	r2, #0
 8003d2a:	f04f 0300 	mov.w	r3, #0
 8003d2e:	00ab      	lsls	r3, r5, #2
 8003d30:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003d34:	00a2      	lsls	r2, r4, #2
 8003d36:	4614      	mov	r4, r2
 8003d38:	461d      	mov	r5, r3
 8003d3a:	eb14 0800 	adds.w	r8, r4, r0
 8003d3e:	eb45 0901 	adc.w	r9, r5, r1
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d56:	4690      	mov	r8, r2
 8003d58:	4699      	mov	r9, r3
 8003d5a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8003d5e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8003d62:	4610      	mov	r0, r2
 8003d64:	4619      	mov	r1, r3
 8003d66:	3708      	adds	r7, #8
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08003d70 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af02      	add	r7, sp, #8
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8003d7e:	2205      	movs	r2, #5
 8003d80:	492b      	ldr	r1, [pc, #172]	@ (8003e30 <SYSVIEW_AddTask+0xc0>)
 8003d82:	68b8      	ldr	r0, [r7, #8]
 8003d84:	f001 fc34 	bl	80055f0 <memcmp>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d04b      	beq.n	8003e26 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8003d8e:	4b29      	ldr	r3, [pc, #164]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b07      	cmp	r3, #7
 8003d94:	d903      	bls.n	8003d9e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003d96:	4828      	ldr	r0, [pc, #160]	@ (8003e38 <SYSVIEW_AddTask+0xc8>)
 8003d98:	f001 fbce 	bl	8005538 <SEGGER_SYSVIEW_Warn>
    return;
 8003d9c:	e044      	b.n	8003e28 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8003d9e:	4b25      	ldr	r3, [pc, #148]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003da0:	681a      	ldr	r2, [r3, #0]
 8003da2:	4926      	ldr	r1, [pc, #152]	@ (8003e3c <SYSVIEW_AddTask+0xcc>)
 8003da4:	4613      	mov	r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	4413      	add	r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4921      	ldr	r1, [pc, #132]	@ (8003e3c <SYSVIEW_AddTask+0xcc>)
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	3304      	adds	r3, #4
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	491b      	ldr	r1, [pc, #108]	@ (8003e3c <SYSVIEW_AddTask+0xcc>)
 8003dce:	4613      	mov	r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3308      	adds	r3, #8
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8003dde:	4b15      	ldr	r3, [pc, #84]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4916      	ldr	r1, [pc, #88]	@ (8003e3c <SYSVIEW_AddTask+0xcc>)
 8003de4:	4613      	mov	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	330c      	adds	r3, #12
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003df4:	4b0f      	ldr	r3, [pc, #60]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4910      	ldr	r1, [pc, #64]	@ (8003e3c <SYSVIEW_AddTask+0xcc>)
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	3310      	adds	r3, #16
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	4a08      	ldr	r2, [pc, #32]	@ (8003e34 <SYSVIEW_AddTask+0xc4>)
 8003e12:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	687a      	ldr	r2, [r7, #4]
 8003e1c:	68b9      	ldr	r1, [r7, #8]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 f80e 	bl	8003e40 <SYSVIEW_SendTaskInfo>
 8003e24:	e000      	b.n	8003e28 <SYSVIEW_AddTask+0xb8>
    return;
 8003e26:	bf00      	nop

}
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	08005720 	.word	0x08005720
 8003e34:	200194a4 	.word	0x200194a4
 8003e38:	08005728 	.word	0x08005728
 8003e3c:	20019404 	.word	0x20019404

08003e40 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	@ 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	607a      	str	r2, [r7, #4]
 8003e4c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8003e4e:	f107 0310 	add.w	r3, r7, #16
 8003e52:	2218      	movs	r2, #24
 8003e54:	2100      	movs	r1, #0
 8003e56:	4618      	mov	r0, r3
 8003e58:	f001 fbda 	bl	8005610 <memset>
  TaskInfo.TaskID     = TaskID;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	613b      	str	r3, [r7, #16]
  TaskInfo.sName      = sName;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	617b      	str	r3, [r7, #20]
  TaskInfo.Prio       = Prio;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	61bb      	str	r3, [r7, #24]
  TaskInfo.StackBase  = StackBase;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackSize  = StackSize;
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e6e:	623b      	str	r3, [r7, #32]
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8003e70:	f107 0310 	add.w	r3, r7, #16
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 fecb 	bl	8004c10 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003e7a:	bf00      	nop
 8003e7c:	3728      	adds	r7, #40	@ 0x28
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
	...

08003e84 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b082      	sub	sp, #8
 8003e88:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003e8a:	4b26      	ldr	r3, [pc, #152]	@ (8003f24 <_DoInit+0xa0>)
 8003e8c:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8003e8e:	22a8      	movs	r2, #168	@ 0xa8
 8003e90:	2100      	movs	r1, #0
 8003e92:	6838      	ldr	r0, [r7, #0]
 8003e94:	f001 fbbc 	bl	8005610 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	2203      	movs	r2, #3
 8003e9c:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2203      	movs	r2, #3
 8003ea2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4a20      	ldr	r2, [pc, #128]	@ (8003f28 <_DoInit+0xa4>)
 8003ea8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	4a1f      	ldr	r2, [pc, #124]	@ (8003f2c <_DoInit+0xa8>)
 8003eae:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003eb6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	4a16      	ldr	r2, [pc, #88]	@ (8003f28 <_DoInit+0xa4>)
 8003ece:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	4a17      	ldr	r2, [pc, #92]	@ (8003f30 <_DoInit+0xac>)
 8003ed4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2210      	movs	r2, #16
 8003eda:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	2200      	movs	r2, #0
 8003eec:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003eee:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	607b      	str	r3, [r7, #4]
 8003ef6:	e00c      	b.n	8003f12 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f1c3 030f 	rsb	r3, r3, #15
 8003efe:	4a0d      	ldr	r2, [pc, #52]	@ (8003f34 <_DoInit+0xb0>)
 8003f00:	5cd1      	ldrb	r1, [r2, r3]
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4413      	add	r3, r2
 8003f08:	460a      	mov	r2, r1
 8003f0a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	3301      	adds	r3, #1
 8003f10:	607b      	str	r3, [r7, #4]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2b0f      	cmp	r3, #15
 8003f16:	d9ef      	bls.n	8003ef8 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8003f18:	f3bf 8f5f 	dmb	sy
}
 8003f1c:	bf00      	nop
 8003f1e:	3708      	adds	r7, #8
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	200194a8 	.word	0x200194a8
 8003f28:	08005778 	.word	0x08005778
 8003f2c:	20019550 	.word	0x20019550
 8003f30:	2001b550 	.word	0x2001b550
 8003f34:	080057b4 	.word	0x080057b4

08003f38 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08c      	sub	sp, #48	@ 0x30
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003f44:	4b3e      	ldr	r3, [pc, #248]	@ (8004040 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f46:	623b      	str	r3, [r7, #32]
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b53      	cmp	r3, #83	@ 0x53
 8003f50:	d001      	beq.n	8003f56 <SEGGER_RTT_ReadNoLock+0x1e>
 8003f52:	f7ff ff97 	bl	8003e84 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4413      	add	r3, r2
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3360      	adds	r3, #96	@ 0x60
 8003f62:	4a37      	ldr	r2, [pc, #220]	@ (8004040 <SEGGER_RTT_ReadNoLock+0x108>)
 8003f64:	4413      	add	r3, r2
 8003f66:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003f7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d92b      	bls.n	8003fdc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	4293      	cmp	r3, r2
 8003f94:	bf28      	it	cs
 8003f96:	4613      	movcs	r3, r2
 8003f98:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	685a      	ldr	r2, [r3, #4]
 8003f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa0:	4413      	add	r3, r2
 8003fa2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003fa4:	697a      	ldr	r2, [r7, #20]
 8003fa6:	6939      	ldr	r1, [r7, #16]
 8003fa8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003faa:	f001 fb5d 	bl	8005668 <memcpy>
    NumBytesRead += NumBytesRem;
 8003fae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8003fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	4413      	add	r3, r2
 8003fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4413      	add	r3, r2
 8003fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d101      	bne.n	8003fdc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fe0:	1ad3      	subs	r3, r2, r3
 8003fe2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf28      	it	cs
 8003fec:	4613      	movcs	r3, r2
 8003fee:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d019      	beq.n	800402a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ffc:	4413      	add	r3, r2
 8003ffe:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	6939      	ldr	r1, [r7, #16]
 8004004:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004006:	f001 fb2f 	bl	8005668 <memcpy>
    NumBytesRead += NumBytesRem;
 800400a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	4413      	add	r3, r2
 8004010:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004012:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	4413      	add	r3, r2
 8004018:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004022:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	4413      	add	r3, r2
 8004028:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800402a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800402c:	2b00      	cmp	r3, #0
 800402e:	d002      	beq.n	8004036 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004034:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004038:	4618      	mov	r0, r3
 800403a:	3730      	adds	r7, #48	@ 0x30
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	200194a8 	.word	0x200194a8

08004044 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004052:	4b3d      	ldr	r3, [pc, #244]	@ (8004148 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004054:	61bb      	str	r3, [r7, #24]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	b2db      	uxtb	r3, r3
 800405c:	2b53      	cmp	r3, #83	@ 0x53
 800405e:	d001      	beq.n	8004064 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004060:	f7ff ff10 	bl	8003e84 <_DoInit>
  SEGGER_RTT_LOCK();
 8004064:	f3ef 8311 	mrs	r3, BASEPRI
 8004068:	f04f 0120 	mov.w	r1, #32
 800406c:	f381 8811 	msr	BASEPRI, r1
 8004070:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004072:	4b35      	ldr	r3, [pc, #212]	@ (8004148 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004074:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800407a:	6939      	ldr	r1, [r7, #16]
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	1c5a      	adds	r2, r3, #1
 8004080:	4613      	mov	r3, r2
 8004082:	005b      	lsls	r3, r3, #1
 8004084:	4413      	add	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	440b      	add	r3, r1
 800408a:	3304      	adds	r3, #4
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	3301      	adds	r3, #1
 8004096:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	69fa      	ldr	r2, [r7, #28]
 800409e:	429a      	cmp	r2, r3
 80040a0:	dbeb      	blt.n	800407a <SEGGER_RTT_AllocUpBuffer+0x36>
 80040a2:	e000      	b.n	80040a6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80040a4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	691b      	ldr	r3, [r3, #16]
 80040aa:	69fa      	ldr	r2, [r7, #28]
 80040ac:	429a      	cmp	r2, r3
 80040ae:	da3f      	bge.n	8004130 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80040b0:	6939      	ldr	r1, [r7, #16]
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	440b      	add	r3, r1
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80040c4:	6939      	ldr	r1, [r7, #16]
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	4613      	mov	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4413      	add	r3, r2
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	440b      	add	r3, r1
 80040d4:	3304      	adds	r3, #4
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80040da:	6939      	ldr	r1, [r7, #16]
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	440b      	add	r3, r1
 80040e8:	3320      	adds	r3, #32
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80040ee:	6939      	ldr	r1, [r7, #16]
 80040f0:	69fa      	ldr	r2, [r7, #28]
 80040f2:	4613      	mov	r3, r2
 80040f4:	005b      	lsls	r3, r3, #1
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	3328      	adds	r3, #40	@ 0x28
 80040fe:	2200      	movs	r2, #0
 8004100:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004102:	6939      	ldr	r1, [r7, #16]
 8004104:	69fa      	ldr	r2, [r7, #28]
 8004106:	4613      	mov	r3, r2
 8004108:	005b      	lsls	r3, r3, #1
 800410a:	4413      	add	r3, r2
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	440b      	add	r3, r1
 8004110:	3324      	adds	r3, #36	@ 0x24
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004116:	6939      	ldr	r1, [r7, #16]
 8004118:	69fa      	ldr	r2, [r7, #28]
 800411a:	4613      	mov	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	4413      	add	r3, r2
 8004120:	00db      	lsls	r3, r3, #3
 8004122:	440b      	add	r3, r1
 8004124:	332c      	adds	r3, #44	@ 0x2c
 8004126:	683a      	ldr	r2, [r7, #0]
 8004128:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800412a:	f3bf 8f5f 	dmb	sy
 800412e:	e002      	b.n	8004136 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004130:	f04f 33ff 	mov.w	r3, #4294967295
 8004134:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800413c:	69fb      	ldr	r3, [r7, #28]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3720      	adds	r7, #32
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200194a8 	.word	0x200194a8

0800414c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	@ 0x28
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800415a:	4b21      	ldr	r3, [pc, #132]	@ (80041e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800415c:	623b      	str	r3, [r7, #32]
 800415e:	6a3b      	ldr	r3, [r7, #32]
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b53      	cmp	r3, #83	@ 0x53
 8004166:	d001      	beq.n	800416c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004168:	f7ff fe8c 	bl	8003e84 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800416c:	4b1c      	ldr	r3, [pc, #112]	@ (80041e0 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800416e:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d82c      	bhi.n	80041d0 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8004176:	f3ef 8311 	mrs	r3, BASEPRI
 800417a:	f04f 0120 	mov.w	r1, #32
 800417e:	f381 8811 	msr	BASEPRI, r1
 8004182:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8004184:	68fa      	ldr	r2, [r7, #12]
 8004186:	4613      	mov	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4413      	add	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	3360      	adds	r3, #96	@ 0x60
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d00e      	beq.n	80041ba <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2200      	movs	r2, #0
 80041b2:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2200      	movs	r2, #0
 80041b8:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041be:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80041c0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80041ca:	2300      	movs	r3, #0
 80041cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80041ce:	e002      	b.n	80041d6 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 80041d0:	f04f 33ff 	mov.w	r3, #4294967295
 80041d4:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3728      	adds	r7, #40	@ 0x28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	200194a8 	.word	0x200194a8

080041e4 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80041e4:	b480      	push	{r7}
 80041e6:	b087      	sub	sp, #28
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	60b9      	str	r1, [r7, #8]
 80041ee:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  if (pText == NULL) {
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d105      	bne.n	8004202 <_EncodeStr+0x1e>
    *pPayload++ = (U8)0;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	60fa      	str	r2, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e022      	b.n	8004248 <_EncodeStr+0x64>
  } else {
    sStart = pText; // Remember start of string.
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	617b      	str	r3, [r7, #20]
    //
    // Save space to store count byte(s).
    //
    pLen = pPayload++;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	1c5a      	adds	r2, r3, #1
 800420a:	60fa      	str	r2, [r7, #12]
 800420c:	613b      	str	r3, [r7, #16]
    pPayload += 2;
#endif
    //
    // Limit string to maximum length and copy into payload buffer.
    //
    if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2b80      	cmp	r3, #128	@ 0x80
 8004212:	d90a      	bls.n	800422a <_EncodeStr+0x46>
      Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8004214:	2380      	movs	r3, #128	@ 0x80
 8004216:	607b      	str	r3, [r7, #4]
    }
    while ((Limit-- > 0) && (*pText != '\0')) {
 8004218:	e007      	b.n	800422a <_EncodeStr+0x46>
      *pPayload++ = *pText++;
 800421a:	68ba      	ldr	r2, [r7, #8]
 800421c:	1c53      	adds	r3, r2, #1
 800421e:	60bb      	str	r3, [r7, #8]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	1c59      	adds	r1, r3, #1
 8004224:	60f9      	str	r1, [r7, #12]
 8004226:	7812      	ldrb	r2, [r2, #0]
 8004228:	701a      	strb	r2, [r3, #0]
    while ((Limit-- > 0) && (*pText != '\0')) {
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	1e5a      	subs	r2, r3, #1
 800422e:	607a      	str	r2, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <_EncodeStr+0x58>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d1ee      	bne.n	800421a <_EncodeStr+0x36>
    Limit = (unsigned int)(pText - sStart);
    *pLen++ = (U8)255;
    *pLen++ = (U8)((Limit >> 8) & 255);
    *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
    *pLen = (U8)(pText - sStart);
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	b2da      	uxtb	r2, r3
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  return pPayload;
 8004248:	68fb      	ldr	r3, [r7, #12]
}
 800424a:	4618      	mov	r0, r3
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004256:	b480      	push	{r7}
 8004258:	b083      	sub	sp, #12
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	3307      	adds	r3, #7
}
 8004262:	4618      	mov	r0, r3
 8004264:	370c      	adds	r7, #12
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004276:	4b34      	ldr	r3, [pc, #208]	@ (8004348 <_HandleIncomingPacket+0xd8>)
 8004278:	7e1b      	ldrb	r3, [r3, #24]
 800427a:	4618      	mov	r0, r3
 800427c:	1cfb      	adds	r3, r7, #3
 800427e:	2201      	movs	r2, #1
 8004280:	4619      	mov	r1, r3
 8004282:	f7ff fe59 	bl	8003f38 <SEGGER_RTT_ReadNoLock>
 8004286:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d057      	beq.n	800433e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800428e:	78fb      	ldrb	r3, [r7, #3]
 8004290:	2b80      	cmp	r3, #128	@ 0x80
 8004292:	d031      	beq.n	80042f8 <_HandleIncomingPacket+0x88>
 8004294:	2b80      	cmp	r3, #128	@ 0x80
 8004296:	dc40      	bgt.n	800431a <_HandleIncomingPacket+0xaa>
 8004298:	2b07      	cmp	r3, #7
 800429a:	dc15      	bgt.n	80042c8 <_HandleIncomingPacket+0x58>
 800429c:	2b00      	cmp	r3, #0
 800429e:	dd3c      	ble.n	800431a <_HandleIncomingPacket+0xaa>
 80042a0:	3b01      	subs	r3, #1
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d839      	bhi.n	800431a <_HandleIncomingPacket+0xaa>
 80042a6:	a201      	add	r2, pc, #4	@ (adr r2, 80042ac <_HandleIncomingPacket+0x3c>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042cf 	.word	0x080042cf
 80042b0:	080042d5 	.word	0x080042d5
 80042b4:	080042db 	.word	0x080042db
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042ed 	.word	0x080042ed
 80042c4:	080042f3 	.word	0x080042f3
 80042c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80042ca:	d033      	beq.n	8004334 <_HandleIncomingPacket+0xc4>
 80042cc:	e025      	b.n	800431a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80042ce:	f000 fb25 	bl	800491c <SEGGER_SYSVIEW_Start>
      break;
 80042d2:	e034      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80042d4:	f000 fbdc 	bl	8004a90 <SEGGER_SYSVIEW_Stop>
      break;
 80042d8:	e031      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80042da:	f000 fdb5 	bl	8004e48 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80042de:	e02e      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80042e0:	f000 fd7a 	bl	8004dd8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80042e4:	e02b      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80042e6:	f000 fbf9 	bl	8004adc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80042ea:	e028      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80042ec:	f001 f8e6 	bl	80054bc <SEGGER_SYSVIEW_SendNumModules>
      break;
 80042f0:	e025      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80042f2:	f001 f8c5 	bl	8005480 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80042f6:	e022      	b.n	800433e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80042f8:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <_HandleIncomingPacket+0xd8>)
 80042fa:	7e1b      	ldrb	r3, [r3, #24]
 80042fc:	4618      	mov	r0, r3
 80042fe:	1cfb      	adds	r3, r7, #3
 8004300:	2201      	movs	r2, #1
 8004302:	4619      	mov	r1, r3
 8004304:	f7ff fe18 	bl	8003f38 <SEGGER_RTT_ReadNoLock>
 8004308:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004310:	78fb      	ldrb	r3, [r7, #3]
 8004312:	4618      	mov	r0, r3
 8004314:	f001 f82a 	bl	800536c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004318:	e00e      	b.n	8004338 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	b25b      	sxtb	r3, r3
 800431e:	2b00      	cmp	r3, #0
 8004320:	da0c      	bge.n	800433c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004322:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <_HandleIncomingPacket+0xd8>)
 8004324:	7e1b      	ldrb	r3, [r3, #24]
 8004326:	4618      	mov	r0, r3
 8004328:	1cfb      	adds	r3, r7, #3
 800432a:	2201      	movs	r2, #1
 800432c:	4619      	mov	r1, r3
 800432e:	f7ff fe03 	bl	8003f38 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004332:	e003      	b.n	800433c <_HandleIncomingPacket+0xcc>
      break;
 8004334:	bf00      	nop
 8004336:	e002      	b.n	800433e <_HandleIncomingPacket+0xce>
      break;
 8004338:	bf00      	nop
 800433a:	e000      	b.n	800433e <_HandleIncomingPacket+0xce>
      break;
 800433c:	bf00      	nop
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	2001c568 	.word	0x2001c568

0800434c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800434c:	b580      	push	{r7, lr}
 800434e:	b08c      	sub	sp, #48	@ 0x30
 8004350:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004352:	2301      	movs	r3, #1
 8004354:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004356:	1d3b      	adds	r3, r7, #4
 8004358:	3301      	adds	r3, #1
 800435a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 8004362:	695b      	ldr	r3, [r3, #20]
 8004364:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004366:	e00b      	b.n	8004380 <_TrySendOverflowPacket+0x34>
 8004368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436a:	b2da      	uxtb	r2, r3
 800436c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800436e:	1c59      	adds	r1, r3, #1
 8004370:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004372:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	09db      	lsrs	r3, r3, #7
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004382:	2b7f      	cmp	r3, #127	@ 0x7f
 8004384:	d8f0      	bhi.n	8004368 <_TrySendOverflowPacket+0x1c>
 8004386:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800438c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800438e:	b2d2      	uxtb	r2, r2
 8004390:	701a      	strb	r2, [r3, #0]
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004396:	4b25      	ldr	r3, [pc, #148]	@ (800442c <_TrySendOverflowPacket+0xe0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61bb      	str	r3, [r7, #24]
  Delta = (I32)(TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp);
 800439c:	4b22      	ldr	r3, [pc, #136]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	1ad3      	subs	r3, r2, r3
 80043a4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	e00b      	b.n	80043c8 <_TrySendOverflowPacket+0x7c>
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80043ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	09db      	lsrs	r3, r3, #7
 80043c6:	623b      	str	r3, [r7, #32]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80043cc:	d8f0      	bhi.n	80043b0 <_TrySendOverflowPacket+0x64>
 80043ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d0:	1c5a      	adds	r2, r3, #1
 80043d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80043d4:	6a3a      	ldr	r2, [r7, #32]
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80043de:	4b12      	ldr	r3, [pc, #72]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 80043e0:	785b      	ldrb	r3, [r3, #1]
 80043e2:	4618      	mov	r0, r3
 80043e4:	1d3b      	adds	r3, r7, #4
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	461a      	mov	r2, r3
 80043ec:	1d3b      	adds	r3, r7, #4
 80043ee:	4619      	mov	r1, r3
 80043f0:	f7fb fef6 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80043f4:	4603      	mov	r3, r0
 80043f6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d009      	beq.n	8004412 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80043fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 8004400:	69bb      	ldr	r3, [r7, #24]
 8004402:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	b2da      	uxtb	r2, r3
 800440c:	4b06      	ldr	r3, [pc, #24]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 800440e:	701a      	strb	r2, [r3, #0]
 8004410:	e004      	b.n	800441c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004412:	4b05      	ldr	r3, [pc, #20]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	3301      	adds	r3, #1
 8004418:	4a03      	ldr	r2, [pc, #12]	@ (8004428 <_TrySendOverflowPacket+0xdc>)
 800441a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800441c:	693b      	ldr	r3, [r7, #16]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3730      	adds	r7, #48	@ 0x30
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	2001c568 	.word	0x2001c568
 800442c:	e0001004 	.word	0xe0001004

08004430 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	@ 0x28
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800443c:	4b98      	ldr	r3, [pc, #608]	@ (80046a0 <_SendPacket+0x270>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d010      	beq.n	8004466 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004444:	4b96      	ldr	r3, [pc, #600]	@ (80046a0 <_SendPacket+0x270>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 812d 	beq.w	80046a8 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800444e:	4b94      	ldr	r3, [pc, #592]	@ (80046a0 <_SendPacket+0x270>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d109      	bne.n	800446a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004456:	f7ff ff79 	bl	800434c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800445a:	4b91      	ldr	r3, [pc, #580]	@ (80046a0 <_SendPacket+0x270>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	f040 8124 	bne.w	80046ac <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8004464:	e001      	b.n	800446a <_SendPacket+0x3a>
    goto Send;
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <_SendPacket+0x3c>
Send:
 800446a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b1f      	cmp	r3, #31
 8004470:	d809      	bhi.n	8004486 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004472:	4b8b      	ldr	r3, [pc, #556]	@ (80046a0 <_SendPacket+0x270>)
 8004474:	69da      	ldr	r2, [r3, #28]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	f040 8115 	bne.w	80046b0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2b17      	cmp	r3, #23
 800448a:	d807      	bhi.n	800449c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	3b01      	subs	r3, #1
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e0c4      	b.n	8004626 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80044a8:	d912      	bls.n	80044d0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	09da      	lsrs	r2, r3, #7
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	3a01      	subs	r2, #1
 80044c2:	60fa      	str	r2, [r7, #12]
 80044c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	e006      	b.n	80044de <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80044e2:	d807      	bhi.n	80044f4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	b2da      	uxtb	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	701a      	strb	r2, [r3, #0]
 80044f2:	e098      	b.n	8004626 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80044fa:	d212      	bcs.n	8004522 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	09da      	lsrs	r2, r3, #7
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b01      	subs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	3a01      	subs	r2, #1
 8004514:	60fa      	str	r2, [r7, #12]
 8004516:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800451a:	b2da      	uxtb	r2, r3
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	701a      	strb	r2, [r3, #0]
 8004520:	e081      	b.n	8004626 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004528:	d21d      	bcs.n	8004566 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0b9a      	lsrs	r2, r3, #14
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	3b01      	subs	r3, #1
 8004532:	60fb      	str	r3, [r7, #12]
 8004534:	b2d2      	uxtb	r2, r2
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	09db      	lsrs	r3, r3, #7
 800453e:	b2db      	uxtb	r3, r3
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	3a01      	subs	r2, #1
 8004544:	60fa      	str	r2, [r7, #12]
 8004546:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800454a:	b2da      	uxtb	r2, r3
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	b2db      	uxtb	r3, r3
 8004554:	68fa      	ldr	r2, [r7, #12]
 8004556:	3a01      	subs	r2, #1
 8004558:	60fa      	str	r2, [r7, #12]
 800455a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800455e:	b2da      	uxtb	r2, r3
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	701a      	strb	r2, [r3, #0]
 8004564:	e05f      	b.n	8004626 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800456c:	d228      	bcs.n	80045c0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	0d5a      	lsrs	r2, r3, #21
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b01      	subs	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	b2d2      	uxtb	r2, r2
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	0b9b      	lsrs	r3, r3, #14
 8004582:	b2db      	uxtb	r3, r3
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	3a01      	subs	r2, #1
 8004588:	60fa      	str	r2, [r7, #12]
 800458a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800458e:	b2da      	uxtb	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	09db      	lsrs	r3, r3, #7
 8004598:	b2db      	uxtb	r3, r3
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	3a01      	subs	r2, #1
 800459e:	60fa      	str	r2, [r7, #12]
 80045a0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045a4:	b2da      	uxtb	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	3a01      	subs	r2, #1
 80045b2:	60fa      	str	r2, [r7, #12]
 80045b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	701a      	strb	r2, [r3, #0]
 80045be:	e032      	b.n	8004626 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	0f1a      	lsrs	r2, r3, #28
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	b2d2      	uxtb	r2, r2
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	0d5b      	lsrs	r3, r3, #21
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	3a01      	subs	r2, #1
 80045da:	60fa      	str	r2, [r7, #12]
 80045dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0b9b      	lsrs	r3, r3, #14
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	3a01      	subs	r2, #1
 80045f0:	60fa      	str	r2, [r7, #12]
 80045f2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80045f6:	b2da      	uxtb	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	09db      	lsrs	r3, r3, #7
 8004600:	b2db      	uxtb	r3, r3
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	3a01      	subs	r2, #1
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800460c:	b2da      	uxtb	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	3a01      	subs	r2, #1
 800461a:	60fa      	str	r2, [r7, #12]
 800461c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004620:	b2da      	uxtb	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004626:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <_SendPacket+0x274>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800462c:	4b1c      	ldr	r3, [pc, #112]	@ (80046a0 <_SendPacket+0x270>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	627b      	str	r3, [r7, #36]	@ 0x24
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	623b      	str	r3, [r7, #32]
 800463e:	e00b      	b.n	8004658 <_SendPacket+0x228>
 8004640:	6a3b      	ldr	r3, [r7, #32]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	6279      	str	r1, [r7, #36]	@ 0x24
 800464a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	6a3b      	ldr	r3, [r7, #32]
 8004654:	09db      	lsrs	r3, r3, #7
 8004656:	623b      	str	r3, [r7, #32]
 8004658:	6a3b      	ldr	r3, [r7, #32]
 800465a:	2b7f      	cmp	r3, #127	@ 0x7f
 800465c:	d8f0      	bhi.n	8004640 <_SendPacket+0x210>
 800465e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004660:	1c5a      	adds	r2, r3, #1
 8004662:	627a      	str	r2, [r7, #36]	@ 0x24
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	b2d2      	uxtb	r2, r2
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800466e:	4b0c      	ldr	r3, [pc, #48]	@ (80046a0 <_SendPacket+0x270>)
 8004670:	785b      	ldrb	r3, [r3, #1]
 8004672:	4618      	mov	r0, r3
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	461a      	mov	r2, r3
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	f7fb fdaf 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004682:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800468a:	4a05      	ldr	r2, [pc, #20]	@ (80046a0 <_SendPacket+0x270>)
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	60d3      	str	r3, [r2, #12]
 8004690:	e00f      	b.n	80046b2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004692:	4b03      	ldr	r3, [pc, #12]	@ (80046a0 <_SendPacket+0x270>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	3301      	adds	r3, #1
 8004698:	b2da      	uxtb	r2, r3
 800469a:	4b01      	ldr	r3, [pc, #4]	@ (80046a0 <_SendPacket+0x270>)
 800469c:	701a      	strb	r2, [r3, #0]
 800469e:	e008      	b.n	80046b2 <_SendPacket+0x282>
 80046a0:	2001c568 	.word	0x2001c568
 80046a4:	e0001004 	.word	0xe0001004
    goto SendDone;
 80046a8:	bf00      	nop
 80046aa:	e002      	b.n	80046b2 <_SendPacket+0x282>
      goto SendDone;
 80046ac:	bf00      	nop
 80046ae:	e000      	b.n	80046b2 <_SendPacket+0x282>
      goto SendDone;
 80046b0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80046b2:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <_SendPacket+0x2d4>)
 80046b4:	7e1b      	ldrb	r3, [r3, #24]
 80046b6:	4619      	mov	r1, r3
 80046b8:	4a13      	ldr	r2, [pc, #76]	@ (8004708 <_SendPacket+0x2d8>)
 80046ba:	460b      	mov	r3, r1
 80046bc:	005b      	lsls	r3, r3, #1
 80046be:	440b      	add	r3, r1
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	336c      	adds	r3, #108	@ 0x6c
 80046c6:	681a      	ldr	r2, [r3, #0]
 80046c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004704 <_SendPacket+0x2d4>)
 80046ca:	7e1b      	ldrb	r3, [r3, #24]
 80046cc:	4618      	mov	r0, r3
 80046ce:	490e      	ldr	r1, [pc, #56]	@ (8004708 <_SendPacket+0x2d8>)
 80046d0:	4603      	mov	r3, r0
 80046d2:	005b      	lsls	r3, r3, #1
 80046d4:	4403      	add	r3, r0
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	440b      	add	r3, r1
 80046da:	3370      	adds	r3, #112	@ 0x70
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d00b      	beq.n	80046fa <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80046e2:	4b08      	ldr	r3, [pc, #32]	@ (8004704 <_SendPacket+0x2d4>)
 80046e4:	789b      	ldrb	r3, [r3, #2]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d107      	bne.n	80046fa <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80046ea:	4b06      	ldr	r3, [pc, #24]	@ (8004704 <_SendPacket+0x2d4>)
 80046ec:	2201      	movs	r2, #1
 80046ee:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80046f0:	f7ff fdbe 	bl	8004270 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80046f4:	4b03      	ldr	r3, [pc, #12]	@ (8004704 <_SendPacket+0x2d4>)
 80046f6:	2200      	movs	r2, #0
 80046f8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80046fa:	bf00      	nop
 80046fc:	3728      	adds	r7, #40	@ 0x28
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	2001c568 	.word	0x2001c568
 8004708:	200194a8 	.word	0x200194a8

0800470c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af02      	add	r7, sp, #8
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800471a:	2300      	movs	r3, #0
 800471c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004720:	4917      	ldr	r1, [pc, #92]	@ (8004780 <SEGGER_SYSVIEW_Init+0x74>)
 8004722:	4818      	ldr	r0, [pc, #96]	@ (8004784 <SEGGER_SYSVIEW_Init+0x78>)
 8004724:	f7ff fc8e 	bl	8004044 <SEGGER_RTT_AllocUpBuffer>
 8004728:	4603      	mov	r3, r0
 800472a:	b2da      	uxtb	r2, r3
 800472c:	4b16      	ldr	r3, [pc, #88]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800472e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8004730:	4b15      	ldr	r3, [pc, #84]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004732:	785a      	ldrb	r2, [r3, #1]
 8004734:	4b14      	ldr	r3, [pc, #80]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004736:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8004738:	4b13      	ldr	r3, [pc, #76]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800473a:	7e1b      	ldrb	r3, [r3, #24]
 800473c:	4618      	mov	r0, r3
 800473e:	2300      	movs	r3, #0
 8004740:	9300      	str	r3, [sp, #0]
 8004742:	2308      	movs	r3, #8
 8004744:	4a11      	ldr	r2, [pc, #68]	@ (800478c <SEGGER_SYSVIEW_Init+0x80>)
 8004746:	490f      	ldr	r1, [pc, #60]	@ (8004784 <SEGGER_SYSVIEW_Init+0x78>)
 8004748:	f7ff fd00 	bl	800414c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800474c:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800474e:	2200      	movs	r2, #0
 8004750:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004752:	4b0f      	ldr	r3, [pc, #60]	@ (8004790 <SEGGER_SYSVIEW_Init+0x84>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a0c      	ldr	r2, [pc, #48]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004758:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800475a:	4a0b      	ldr	r2, [pc, #44]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004760:	4a09      	ldr	r2, [pc, #36]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004766:	4a08      	ldr	r2, [pc, #32]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800476c:	4a06      	ldr	r2, [pc, #24]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004772:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <SEGGER_SYSVIEW_Init+0x7c>)
 8004774:	2200      	movs	r2, #0
 8004776:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004778:	bf00      	nop
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	2001b560 	.word	0x2001b560
 8004784:	0800578c 	.word	0x0800578c
 8004788:	2001c568 	.word	0x2001c568
 800478c:	2001c560 	.word	0x2001c560
 8004790:	e0001004 	.word	0xe0001004

08004794 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800479c:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6113      	str	r3, [r2, #16]
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	2001c568 	.word	0x2001c568

080047b4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b084      	sub	sp, #16
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047bc:	f3ef 8311 	mrs	r3, BASEPRI
 80047c0:	f04f 0120 	mov.w	r1, #32
 80047c4:	f381 8811 	msr	BASEPRI, r1
 80047c8:	60fb      	str	r3, [r7, #12]
 80047ca:	4808      	ldr	r0, [pc, #32]	@ (80047ec <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80047cc:	f7ff fd43 	bl	8004256 <_PreparePacket>
 80047d0:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	68b9      	ldr	r1, [r7, #8]
 80047d6:	68b8      	ldr	r0, [r7, #8]
 80047d8:	f7ff fe2a 	bl	8004430 <_SendPacket>
  RECORD_END();
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f383 8811 	msr	BASEPRI, r3
}
 80047e2:	bf00      	nop
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	2001c598 	.word	0x2001c598

080047f0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b088      	sub	sp, #32
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047fa:	f3ef 8311 	mrs	r3, BASEPRI
 80047fe:	f04f 0120 	mov.w	r1, #32
 8004802:	f381 8811 	msr	BASEPRI, r1
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	4816      	ldr	r0, [pc, #88]	@ (8004864 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800480a:	f7ff fd24 	bl	8004256 <_PreparePacket>
 800480e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004810:	693b      	ldr	r3, [r7, #16]
 8004812:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	61fb      	str	r3, [r7, #28]
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	61bb      	str	r3, [r7, #24]
 800481c:	e00b      	b.n	8004836 <SEGGER_SYSVIEW_RecordU32+0x46>
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	1c59      	adds	r1, r3, #1
 8004826:	61f9      	str	r1, [r7, #28]
 8004828:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	701a      	strb	r2, [r3, #0]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	09db      	lsrs	r3, r3, #7
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	2b7f      	cmp	r3, #127	@ 0x7f
 800483a:	d8f0      	bhi.n	800481e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	1c5a      	adds	r2, r3, #1
 8004840:	61fa      	str	r2, [r7, #28]
 8004842:	69ba      	ldr	r2, [r7, #24]
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	68f9      	ldr	r1, [r7, #12]
 8004850:	6938      	ldr	r0, [r7, #16]
 8004852:	f7ff fded 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f383 8811 	msr	BASEPRI, r3
}
 800485c:	bf00      	nop
 800485e:	3720      	adds	r7, #32
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	2001c598 	.word	0x2001c598

08004868 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b08c      	sub	sp, #48	@ 0x30
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004874:	f3ef 8311 	mrs	r3, BASEPRI
 8004878:	f04f 0120 	mov.w	r1, #32
 800487c:	f381 8811 	msr	BASEPRI, r1
 8004880:	61fb      	str	r3, [r7, #28]
 8004882:	4825      	ldr	r0, [pc, #148]	@ (8004918 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004884:	f7ff fce7 	bl	8004256 <_PreparePacket>
 8004888:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004896:	e00b      	b.n	80048b0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800489a:	b2da      	uxtb	r2, r3
 800489c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800489e:	1c59      	adds	r1, r3, #1
 80048a0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80048a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	701a      	strb	r2, [r3, #0]
 80048aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ac:	09db      	lsrs	r3, r3, #7
 80048ae:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80048b4:	d8f0      	bhi.n	8004898 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80048b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80048bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048be:	b2d2      	uxtb	r2, r2
 80048c0:	701a      	strb	r2, [r3, #0]
 80048c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	e00b      	b.n	80048e8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80048d0:	6a3b      	ldr	r3, [r7, #32]
 80048d2:	b2da      	uxtb	r2, r3
 80048d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048d6:	1c59      	adds	r1, r3, #1
 80048d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80048da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048de:	b2d2      	uxtb	r2, r2
 80048e0:	701a      	strb	r2, [r3, #0]
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	09db      	lsrs	r3, r3, #7
 80048e6:	623b      	str	r3, [r7, #32]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80048ec:	d8f0      	bhi.n	80048d0 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80048ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f0:	1c5a      	adds	r2, r3, #1
 80048f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80048f4:	6a3a      	ldr	r2, [r7, #32]
 80048f6:	b2d2      	uxtb	r2, r2
 80048f8:	701a      	strb	r2, [r3, #0]
 80048fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	6979      	ldr	r1, [r7, #20]
 8004902:	69b8      	ldr	r0, [r7, #24]
 8004904:	f7ff fd94 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
 8004910:	3730      	adds	r7, #48	@ 0x30
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2001c598 	.word	0x2001c598

0800491c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08c      	sub	sp, #48	@ 0x30
 8004920:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004922:	4b58      	ldr	r3, [pc, #352]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8004928:	f3ef 8311 	mrs	r3, BASEPRI
 800492c:	f04f 0120 	mov.w	r1, #32
 8004930:	f381 8811 	msr	BASEPRI, r1
 8004934:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8004936:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004938:	785b      	ldrb	r3, [r3, #1]
 800493a:	220a      	movs	r2, #10
 800493c:	4952      	ldr	r1, [pc, #328]	@ (8004a88 <SEGGER_SYSVIEW_Start+0x16c>)
 800493e:	4618      	mov	r0, r3
 8004940:	f7fb fc4e 	bl	80001e0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800494a:	200a      	movs	r0, #10
 800494c:	f7ff ff32 	bl	80047b4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004950:	f3ef 8311 	mrs	r3, BASEPRI
 8004954:	f04f 0120 	mov.w	r1, #32
 8004958:	f381 8811 	msr	BASEPRI, r1
 800495c:	60bb      	str	r3, [r7, #8]
 800495e:	484b      	ldr	r0, [pc, #300]	@ (8004a8c <SEGGER_SYSVIEW_Start+0x170>)
 8004960:	f7ff fc79 	bl	8004256 <_PreparePacket>
 8004964:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800496e:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004974:	e00b      	b.n	800498e <SEGGER_SYSVIEW_Start+0x72>
 8004976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004978:	b2da      	uxtb	r2, r3
 800497a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800497c:	1c59      	adds	r1, r3, #1
 800497e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004980:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004984:	b2d2      	uxtb	r2, r2
 8004986:	701a      	strb	r2, [r3, #0]
 8004988:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498a:	09db      	lsrs	r3, r3, #7
 800498c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	2b7f      	cmp	r3, #127	@ 0x7f
 8004992:	d8f0      	bhi.n	8004976 <SEGGER_SYSVIEW_Start+0x5a>
 8004994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004996:	1c5a      	adds	r2, r3, #1
 8004998:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800499a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	701a      	strb	r2, [r3, #0]
 80049a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80049a8:	4b36      	ldr	r3, [pc, #216]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	623b      	str	r3, [r7, #32]
 80049ae:	e00b      	b.n	80049c8 <SEGGER_SYSVIEW_Start+0xac>
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	b2da      	uxtb	r2, r3
 80049b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b6:	1c59      	adds	r1, r3, #1
 80049b8:	6279      	str	r1, [r7, #36]	@ 0x24
 80049ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	09db      	lsrs	r3, r3, #7
 80049c6:	623b      	str	r3, [r7, #32]
 80049c8:	6a3b      	ldr	r3, [r7, #32]
 80049ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80049cc:	d8f0      	bhi.n	80049b0 <SEGGER_SYSVIEW_Start+0x94>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	627a      	str	r2, [r7, #36]	@ 0x24
 80049d4:	6a3a      	ldr	r2, [r7, #32]
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	61fb      	str	r3, [r7, #28]
 80049e2:	4b28      	ldr	r3, [pc, #160]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 80049e4:	691b      	ldr	r3, [r3, #16]
 80049e6:	61bb      	str	r3, [r7, #24]
 80049e8:	e00b      	b.n	8004a02 <SEGGER_SYSVIEW_Start+0xe6>
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	b2da      	uxtb	r2, r3
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	1c59      	adds	r1, r3, #1
 80049f2:	61f9      	str	r1, [r7, #28]
 80049f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	701a      	strb	r2, [r3, #0]
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	09db      	lsrs	r3, r3, #7
 8004a00:	61bb      	str	r3, [r7, #24]
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a06:	d8f0      	bhi.n	80049ea <SEGGER_SYSVIEW_Start+0xce>
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	1c5a      	adds	r2, r3, #1
 8004a0c:	61fa      	str	r2, [r7, #28]
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	617b      	str	r3, [r7, #20]
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	613b      	str	r3, [r7, #16]
 8004a20:	e00b      	b.n	8004a3a <SEGGER_SYSVIEW_Start+0x11e>
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1c59      	adds	r1, r3, #1
 8004a2a:	6179      	str	r1, [r7, #20]
 8004a2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a30:	b2d2      	uxtb	r2, r2
 8004a32:	701a      	strb	r2, [r3, #0]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	09db      	lsrs	r3, r3, #7
 8004a38:	613b      	str	r3, [r7, #16]
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a3e:	d8f0      	bhi.n	8004a22 <SEGGER_SYSVIEW_Start+0x106>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	617a      	str	r2, [r7, #20]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	b2d2      	uxtb	r2, r2
 8004a4a:	701a      	strb	r2, [r3, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004a50:	2218      	movs	r2, #24
 8004a52:	6839      	ldr	r1, [r7, #0]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff fceb 	bl	8004430 <_SendPacket>
      RECORD_END();
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004a60:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d002      	beq.n	8004a6e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004a68:	4b06      	ldr	r3, [pc, #24]	@ (8004a84 <SEGGER_SYSVIEW_Start+0x168>)
 8004a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8004a6e:	f000 f9eb 	bl	8004e48 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004a72:	f000 f9b1 	bl	8004dd8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004a76:	f000 fd21 	bl	80054bc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8004a7a:	bf00      	nop
 8004a7c:	3730      	adds	r7, #48	@ 0x30
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2001c568 	.word	0x2001c568
 8004a88:	080057c8 	.word	0x080057c8
 8004a8c:	2001c598 	.word	0x2001c598

08004a90 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004a96:	f3ef 8311 	mrs	r3, BASEPRI
 8004a9a:	f04f 0120 	mov.w	r1, #32
 8004a9e:	f381 8811 	msr	BASEPRI, r1
 8004aa2:	607b      	str	r3, [r7, #4]
 8004aa4:	480b      	ldr	r0, [pc, #44]	@ (8004ad4 <SEGGER_SYSVIEW_Stop+0x44>)
 8004aa6:	f7ff fbd6 	bl	8004256 <_PreparePacket>
 8004aaa:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8004aac:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d007      	beq.n	8004ac4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004ab4:	220b      	movs	r2, #11
 8004ab6:	6839      	ldr	r1, [r7, #0]
 8004ab8:	6838      	ldr	r0, [r7, #0]
 8004aba:	f7ff fcb9 	bl	8004430 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <SEGGER_SYSVIEW_Stop+0x48>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f383 8811 	msr	BASEPRI, r3
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	2001c598 	.word	0x2001c598
 8004ad8:	2001c568 	.word	0x2001c568

08004adc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b08c      	sub	sp, #48	@ 0x30
 8004ae0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ae2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ae6:	f04f 0120 	mov.w	r1, #32
 8004aea:	f381 8811 	msr	BASEPRI, r1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	4845      	ldr	r0, [pc, #276]	@ (8004c08 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8004af2:	f7ff fbb0 	bl	8004256 <_PreparePacket>
 8004af6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b00:	4b42      	ldr	r3, [pc, #264]	@ (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b06:	e00b      	b.n	8004b20 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	b2da      	uxtb	r2, r3
 8004b0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0e:	1c59      	adds	r1, r3, #1
 8004b10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004b12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b16:	b2d2      	uxtb	r2, r2
 8004b18:	701a      	strb	r2, [r3, #0]
 8004b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1c:	09db      	lsrs	r3, r3, #7
 8004b1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b24:	d8f0      	bhi.n	8004b08 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8004b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004b2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004b2e:	b2d2      	uxtb	r2, r2
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b3a:	4b34      	ldr	r3, [pc, #208]	@ (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	623b      	str	r3, [r7, #32]
 8004b40:	e00b      	b.n	8004b5a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b48:	1c59      	adds	r1, r3, #1
 8004b4a:	6279      	str	r1, [r7, #36]	@ 0x24
 8004b4c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b50:	b2d2      	uxtb	r2, r2
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	6a3b      	ldr	r3, [r7, #32]
 8004b56:	09db      	lsrs	r3, r3, #7
 8004b58:	623b      	str	r3, [r7, #32]
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b5e:	d8f0      	bhi.n	8004b42 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b66:	6a3a      	ldr	r2, [r7, #32]
 8004b68:	b2d2      	uxtb	r2, r2
 8004b6a:	701a      	strb	r2, [r3, #0]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	61fb      	str	r3, [r7, #28]
 8004b74:	4b25      	ldr	r3, [pc, #148]	@ (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	e00b      	b.n	8004b94 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	61f9      	str	r1, [r7, #28]
 8004b86:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	09db      	lsrs	r3, r3, #7
 8004b92:	61bb      	str	r3, [r7, #24]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b98:	d8f0      	bhi.n	8004b7c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	61fa      	str	r2, [r7, #28]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	617b      	str	r3, [r7, #20]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	613b      	str	r3, [r7, #16]
 8004bb2:	e00b      	b.n	8004bcc <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	b2da      	uxtb	r2, r3
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	1c59      	adds	r1, r3, #1
 8004bbc:	6179      	str	r1, [r7, #20]
 8004bbe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bc2:	b2d2      	uxtb	r2, r2
 8004bc4:	701a      	strb	r2, [r3, #0]
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	09db      	lsrs	r3, r3, #7
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd0:	d8f0      	bhi.n	8004bb4 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	1c5a      	adds	r2, r3, #1
 8004bd6:	617a      	str	r2, [r7, #20]
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	b2d2      	uxtb	r2, r2
 8004bdc:	701a      	strb	r2, [r3, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004be2:	2218      	movs	r2, #24
 8004be4:	6879      	ldr	r1, [r7, #4]
 8004be6:	68b8      	ldr	r0, [r7, #8]
 8004be8:	f7ff fc22 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004bf2:	4b06      	ldr	r3, [pc, #24]	@ (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d002      	beq.n	8004c00 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8004bfa:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bfe:	4798      	blx	r3
  }
}
 8004c00:	bf00      	nop
 8004c02:	3730      	adds	r7, #48	@ 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	2001c598 	.word	0x2001c598
 8004c0c:	2001c568 	.word	0x2001c568

08004c10 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b092      	sub	sp, #72	@ 0x48
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8004c18:	f3ef 8311 	mrs	r3, BASEPRI
 8004c1c:	f04f 0120 	mov.w	r1, #32
 8004c20:	f381 8811 	msr	BASEPRI, r1
 8004c24:	617b      	str	r3, [r7, #20]
 8004c26:	486a      	ldr	r0, [pc, #424]	@ (8004dd0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8004c28:	f7ff fb15 	bl	8004256 <_PreparePacket>
 8004c2c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b66      	ldr	r3, [pc, #408]	@ (8004dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c42:	e00b      	b.n	8004c5c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004c44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c4a:	1c59      	adds	r1, r3, #1
 8004c4c:	6479      	str	r1, [r7, #68]	@ 0x44
 8004c4e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c52:	b2d2      	uxtb	r2, r2
 8004c54:	701a      	strb	r2, [r3, #0]
 8004c56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c58:	09db      	lsrs	r3, r3, #7
 8004c5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8004c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004c5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c60:	d8f0      	bhi.n	8004c44 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004c62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c6a:	b2d2      	uxtb	r2, r2
 8004c6c:	701a      	strb	r2, [r3, #0]
 8004c6e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c70:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c7c:	e00b      	b.n	8004c96 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c84:	1c59      	adds	r1, r3, #1
 8004c86:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004c88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c92:	09db      	lsrs	r3, r3, #7
 8004c94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004c96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c98:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c9a:	d8f0      	bhi.n	8004c7e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004ca2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	701a      	strb	r2, [r3, #0]
 8004ca8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004caa:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	4619      	mov	r1, r3
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff fa95 	bl	80041e4 <_EncodeStr>
 8004cba:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8004cbc:	2209      	movs	r2, #9
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	6938      	ldr	r0, [r7, #16]
 8004cc2:	f7ff fbb5 	bl	8004430 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	4b40      	ldr	r3, [pc, #256]	@ (8004dd4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cda:	e00b      	b.n	8004cf4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cde:	b2da      	uxtb	r2, r3
 8004ce0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	6379      	str	r1, [r7, #52]	@ 0x34
 8004ce6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	09db      	lsrs	r3, r3, #7
 8004cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004cf8:	d8f0      	bhi.n	8004cdc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfc:	1c5a      	adds	r2, r3, #1
 8004cfe:	637a      	str	r2, [r7, #52]	@ 0x34
 8004d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d02:	b2d2      	uxtb	r2, r2
 8004d04:	701a      	strb	r2, [r3, #0]
 8004d06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d14:	e00b      	b.n	8004d2e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8004d16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d18:	b2da      	uxtb	r2, r3
 8004d1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d1c:	1c59      	adds	r1, r3, #1
 8004d1e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d24:	b2d2      	uxtb	r2, r2
 8004d26:	701a      	strb	r2, [r3, #0]
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	09db      	lsrs	r3, r3, #7
 8004d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d30:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d32:	d8f0      	bhi.n	8004d16 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8004d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d3c:	b2d2      	uxtb	r2, r2
 8004d3e:	701a      	strb	r2, [r3, #0]
 8004d40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d42:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	623b      	str	r3, [r7, #32]
 8004d4e:	e00b      	b.n	8004d68 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004d50:	6a3b      	ldr	r3, [r7, #32]
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	1c59      	adds	r1, r3, #1
 8004d58:	6279      	str	r1, [r7, #36]	@ 0x24
 8004d5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d5e:	b2d2      	uxtb	r2, r2
 8004d60:	701a      	strb	r2, [r3, #0]
 8004d62:	6a3b      	ldr	r3, [r7, #32]
 8004d64:	09db      	lsrs	r3, r3, #7
 8004d66:	623b      	str	r3, [r7, #32]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6c:	d8f0      	bhi.n	8004d50 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	1c5a      	adds	r2, r3, #1
 8004d72:	627a      	str	r2, [r7, #36]	@ 0x24
 8004d74:	6a3a      	ldr	r2, [r7, #32]
 8004d76:	b2d2      	uxtb	r2, r2
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackUsage);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	61fb      	str	r3, [r7, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e00b      	b.n	8004da2 <SEGGER_SYSVIEW_SendTaskInfo+0x192>
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	69fb      	ldr	r3, [r7, #28]
 8004d90:	1c59      	adds	r1, r3, #1
 8004d92:	61f9      	str	r1, [r7, #28]
 8004d94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d98:	b2d2      	uxtb	r2, r2
 8004d9a:	701a      	strb	r2, [r3, #0]
 8004d9c:	69bb      	ldr	r3, [r7, #24]
 8004d9e:	09db      	lsrs	r3, r3, #7
 8004da0:	61bb      	str	r3, [r7, #24]
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004da6:	d8f0      	bhi.n	8004d8a <SEGGER_SYSVIEW_SendTaskInfo+0x17a>
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	1c5a      	adds	r2, r3, #1
 8004dac:	61fa      	str	r2, [r7, #28]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	b2d2      	uxtb	r2, r2
 8004db2:	701a      	strb	r2, [r3, #0]
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004db8:	2215      	movs	r2, #21
 8004dba:	68f9      	ldr	r1, [r7, #12]
 8004dbc:	6938      	ldr	r0, [r7, #16]
 8004dbe:	f7ff fb37 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004dc2:	697b      	ldr	r3, [r7, #20]
 8004dc4:	f383 8811 	msr	BASEPRI, r3
}
 8004dc8:	bf00      	nop
 8004dca:	3748      	adds	r7, #72	@ 0x48
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	2001c598 	.word	0x2001c598
 8004dd4:	2001c568 	.word	0x2001c568

08004dd8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004ddc:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004de4:	4b05      	ldr	r3, [pc, #20]	@ (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d003      	beq.n	8004df6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8004dee:	4b03      	ldr	r3, [pc, #12]	@ (8004dfc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	4798      	blx	r3
  }
}
 8004df6:	bf00      	nop
 8004df8:	bd80      	pop	{r7, pc}
 8004dfa:	bf00      	nop
 8004dfc:	2001c568 	.word	0x2001c568

08004e00 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e08:	f3ef 8311 	mrs	r3, BASEPRI
 8004e0c:	f04f 0120 	mov.w	r1, #32
 8004e10:	f381 8811 	msr	BASEPRI, r1
 8004e14:	617b      	str	r3, [r7, #20]
 8004e16:	480b      	ldr	r0, [pc, #44]	@ (8004e44 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004e18:	f7ff fa1d 	bl	8004256 <_PreparePacket>
 8004e1c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004e1e:	2280      	movs	r2, #128	@ 0x80
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	6938      	ldr	r0, [r7, #16]
 8004e24:	f7ff f9de 	bl	80041e4 <_EncodeStr>
 8004e28:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004e2a:	220e      	movs	r2, #14
 8004e2c:	68f9      	ldr	r1, [r7, #12]
 8004e2e:	6938      	ldr	r0, [r7, #16]
 8004e30:	f7ff fafe 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f383 8811 	msr	BASEPRI, r3
}
 8004e3a:	bf00      	nop
 8004e3c:	3718      	adds	r7, #24
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	2001c598 	.word	0x2001c598

08004e48 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8004e4e:	4b15      	ldr	r3, [pc, #84]	@ (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d01a      	beq.n	8004e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004e56:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d015      	beq.n	8004e8c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004e60:	4b10      	ldr	r3, [pc, #64]	@ (8004ea4 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4798      	blx	r3
 8004e68:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e6c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8004e6e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e72:	f04f 0200 	mov.w	r2, #0
 8004e76:	f04f 0300 	mov.w	r3, #0
 8004e7a:	000a      	movs	r2, r1
 8004e7c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004e7e:	4613      	mov	r3, r2
 8004e80:	461a      	mov	r2, r3
 8004e82:	4621      	mov	r1, r4
 8004e84:	200d      	movs	r0, #13
 8004e86:	f7ff fcef 	bl	8004868 <SEGGER_SYSVIEW_RecordU32x2>
 8004e8a:	e006      	b.n	8004e9a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4619      	mov	r1, r3
 8004e92:	200c      	movs	r0, #12
 8004e94:	f7ff fcac 	bl	80047f0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd90      	pop	{r4, r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	2001c568 	.word	0x2001c568
 8004ea8:	e0001004 	.word	0xe0001004

08004eac <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004eb2:	f3ef 8311 	mrs	r3, BASEPRI
 8004eb6:	f04f 0120 	mov.w	r1, #32
 8004eba:	f381 8811 	msr	BASEPRI, r1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	4819      	ldr	r0, [pc, #100]	@ (8004f28 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004ec2:	f7ff f9c8 	bl	8004256 <_PreparePacket>
 8004ec6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004ecc:	4b17      	ldr	r3, [pc, #92]	@ (8004f2c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ed4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	617b      	str	r3, [r7, #20]
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e00b      	b.n	8004ef8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	b2da      	uxtb	r2, r3
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	1c59      	adds	r1, r3, #1
 8004ee8:	6179      	str	r1, [r7, #20]
 8004eea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]
 8004ef2:	693b      	ldr	r3, [r7, #16]
 8004ef4:	09db      	lsrs	r3, r3, #7
 8004ef6:	613b      	str	r3, [r7, #16]
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	2b7f      	cmp	r3, #127	@ 0x7f
 8004efc:	d8f0      	bhi.n	8004ee0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	1c5a      	adds	r2, r3, #1
 8004f02:	617a      	str	r2, [r7, #20]
 8004f04:	693a      	ldr	r2, [r7, #16]
 8004f06:	b2d2      	uxtb	r2, r2
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8004f0e:	2202      	movs	r2, #2
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f7ff fa8c 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f383 8811 	msr	BASEPRI, r3
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	2001c598 	.word	0x2001c598
 8004f2c:	e000ed04 	.word	0xe000ed04

08004f30 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f36:	f3ef 8311 	mrs	r3, BASEPRI
 8004f3a:	f04f 0120 	mov.w	r1, #32
 8004f3e:	f381 8811 	msr	BASEPRI, r1
 8004f42:	607b      	str	r3, [r7, #4]
 8004f44:	4807      	ldr	r0, [pc, #28]	@ (8004f64 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004f46:	f7ff f986 	bl	8004256 <_PreparePacket>
 8004f4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004f4c:	2203      	movs	r2, #3
 8004f4e:	6839      	ldr	r1, [r7, #0]
 8004f50:	6838      	ldr	r0, [r7, #0]
 8004f52:	f7ff fa6d 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f383 8811 	msr	BASEPRI, r3
}
 8004f5c:	bf00      	nop
 8004f5e:	3708      	adds	r7, #8
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	2001c598 	.word	0x2001c598

08004f68 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004f6e:	f3ef 8311 	mrs	r3, BASEPRI
 8004f72:	f04f 0120 	mov.w	r1, #32
 8004f76:	f381 8811 	msr	BASEPRI, r1
 8004f7a:	607b      	str	r3, [r7, #4]
 8004f7c:	4807      	ldr	r0, [pc, #28]	@ (8004f9c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8004f7e:	f7ff f96a 	bl	8004256 <_PreparePacket>
 8004f82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004f84:	2212      	movs	r2, #18
 8004f86:	6839      	ldr	r1, [r7, #0]
 8004f88:	6838      	ldr	r0, [r7, #0]
 8004f8a:	f7ff fa51 	bl	8004430 <_SendPacket>
  RECORD_END();
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f383 8811 	msr	BASEPRI, r3
}
 8004f94:	bf00      	nop
 8004f96:	3708      	adds	r7, #8
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	2001c598 	.word	0x2001c598

08004fa0 <SEGGER_SYSVIEW_RecordEndCall>:
*    Format and send an End API Call event without return value.
*
*  Parameters
*    EventID - Id of API function which ends.
*/
void SEGGER_SYSVIEW_RecordEndCall(unsigned int EventID) {
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b088      	sub	sp, #32
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004fa8:	f3ef 8311 	mrs	r3, BASEPRI
 8004fac:	f04f 0120 	mov.w	r1, #32
 8004fb0:	f381 8811 	msr	BASEPRI, r1
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	4817      	ldr	r0, [pc, #92]	@ (8005014 <SEGGER_SYSVIEW_RecordEndCall+0x74>)
 8004fb8:	f7ff f94d 	bl	8004256 <_PreparePacket>
 8004fbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	61fb      	str	r3, [r7, #28]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	61bb      	str	r3, [r7, #24]
 8004fca:	e00b      	b.n	8004fe4 <SEGGER_SYSVIEW_RecordEndCall+0x44>
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	b2da      	uxtb	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	1c59      	adds	r1, r3, #1
 8004fd4:	61f9      	str	r1, [r7, #28]
 8004fd6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fda:	b2d2      	uxtb	r2, r2
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	09db      	lsrs	r3, r3, #7
 8004fe2:	61bb      	str	r3, [r7, #24]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe8:	d8f0      	bhi.n	8004fcc <SEGGER_SYSVIEW_RecordEndCall+0x2c>
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	1c5a      	adds	r2, r3, #1
 8004fee:	61fa      	str	r2, [r7, #28]
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	701a      	strb	r2, [r3, #0]
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 8004ffa:	221c      	movs	r2, #28
 8004ffc:	68f9      	ldr	r1, [r7, #12]
 8004ffe:	6938      	ldr	r0, [r7, #16]
 8005000:	f7ff fa16 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f383 8811 	msr	BASEPRI, r3
}
 800500a:	bf00      	nop
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
 8005012:	bf00      	nop
 8005014:	2001c598 	.word	0x2001c598

08005018 <SEGGER_SYSVIEW_RecordEndCallU32>:
*
*  Parameters
*    EventID      - Id of API function which ends.
*    Para0        - Return value which will be returned by the API function.
*/
void SEGGER_SYSVIEW_RecordEndCallU32(unsigned int EventID, U32 Para0) {
 8005018:	b580      	push	{r7, lr}
 800501a:	b08a      	sub	sp, #40	@ 0x28
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005022:	f3ef 8311 	mrs	r3, BASEPRI
 8005026:	f04f 0120 	mov.w	r1, #32
 800502a:	f381 8811 	msr	BASEPRI, r1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	4824      	ldr	r0, [pc, #144]	@ (80050c4 <SEGGER_SYSVIEW_RecordEndCallU32+0xac>)
 8005032:	f7ff f910 	bl	8004256 <_PreparePacket>
 8005036:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, EventID);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	623b      	str	r3, [r7, #32]
 8005044:	e00b      	b.n	800505e <SEGGER_SYSVIEW_RecordEndCallU32+0x46>
 8005046:	6a3b      	ldr	r3, [r7, #32]
 8005048:	b2da      	uxtb	r2, r3
 800504a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504c:	1c59      	adds	r1, r3, #1
 800504e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005050:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]
 8005058:	6a3b      	ldr	r3, [r7, #32]
 800505a:	09db      	lsrs	r3, r3, #7
 800505c:	623b      	str	r3, [r7, #32]
 800505e:	6a3b      	ldr	r3, [r7, #32]
 8005060:	2b7f      	cmp	r3, #127	@ 0x7f
 8005062:	d8f0      	bhi.n	8005046 <SEGGER_SYSVIEW_RecordEndCallU32+0x2e>
 8005064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005066:	1c5a      	adds	r2, r3, #1
 8005068:	627a      	str	r2, [r7, #36]	@ 0x24
 800506a:	6a3a      	ldr	r2, [r7, #32]
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	701a      	strb	r2, [r3, #0]
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Para0);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	61fb      	str	r3, [r7, #28]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	61bb      	str	r3, [r7, #24]
 800507c:	e00b      	b.n	8005096 <SEGGER_SYSVIEW_RecordEndCallU32+0x7e>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	1c59      	adds	r1, r3, #1
 8005086:	61f9      	str	r1, [r7, #28]
 8005088:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	09db      	lsrs	r3, r3, #7
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	2b7f      	cmp	r3, #127	@ 0x7f
 800509a:	d8f0      	bhi.n	800507e <SEGGER_SYSVIEW_RecordEndCallU32+0x66>
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	61fa      	str	r2, [r7, #28]
 80050a2:	69ba      	ldr	r2, [r7, #24]
 80050a4:	b2d2      	uxtb	r2, r2
 80050a6:	701a      	strb	r2, [r3, #0]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_END_CALL);
 80050ac:	221c      	movs	r2, #28
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	6938      	ldr	r0, [r7, #16]
 80050b2:	f7ff f9bd 	bl	8004430 <_SendPacket>
  RECORD_END();
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	f383 8811 	msr	BASEPRI, r3
}
 80050bc:	bf00      	nop
 80050be:	3728      	adds	r7, #40	@ 0x28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	2001c598 	.word	0x2001c598

080050c8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80050ce:	f3ef 8311 	mrs	r3, BASEPRI
 80050d2:	f04f 0120 	mov.w	r1, #32
 80050d6:	f381 8811 	msr	BASEPRI, r1
 80050da:	607b      	str	r3, [r7, #4]
 80050dc:	4807      	ldr	r0, [pc, #28]	@ (80050fc <SEGGER_SYSVIEW_OnIdle+0x34>)
 80050de:	f7ff f8ba 	bl	8004256 <_PreparePacket>
 80050e2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80050e4:	2211      	movs	r2, #17
 80050e6:	6839      	ldr	r1, [r7, #0]
 80050e8:	6838      	ldr	r0, [r7, #0]
 80050ea:	f7ff f9a1 	bl	8004430 <_SendPacket>
  RECORD_END();
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f383 8811 	msr	BASEPRI, r3
}
 80050f4:	bf00      	nop
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	2001c598 	.word	0x2001c598

08005100 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b088      	sub	sp, #32
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005108:	f3ef 8311 	mrs	r3, BASEPRI
 800510c:	f04f 0120 	mov.w	r1, #32
 8005110:	f381 8811 	msr	BASEPRI, r1
 8005114:	617b      	str	r3, [r7, #20]
 8005116:	4819      	ldr	r0, [pc, #100]	@ (800517c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005118:	f7ff f89d 	bl	8004256 <_PreparePacket>
 800511c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005122:	4b17      	ldr	r3, [pc, #92]	@ (8005180 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	61bb      	str	r3, [r7, #24]
 8005134:	e00b      	b.n	800514e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8005136:	69bb      	ldr	r3, [r7, #24]
 8005138:	b2da      	uxtb	r2, r3
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	1c59      	adds	r1, r3, #1
 800513e:	61f9      	str	r1, [r7, #28]
 8005140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005144:	b2d2      	uxtb	r2, r2
 8005146:	701a      	strb	r2, [r3, #0]
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	09db      	lsrs	r3, r3, #7
 800514c:	61bb      	str	r3, [r7, #24]
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	2b7f      	cmp	r3, #127	@ 0x7f
 8005152:	d8f0      	bhi.n	8005136 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	61fa      	str	r2, [r7, #28]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	b2d2      	uxtb	r2, r2
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8005164:	2208      	movs	r2, #8
 8005166:	68f9      	ldr	r1, [r7, #12]
 8005168:	6938      	ldr	r0, [r7, #16]
 800516a:	f7ff f961 	bl	8004430 <_SendPacket>
  RECORD_END();
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f383 8811 	msr	BASEPRI, r3
}
 8005174:	bf00      	nop
 8005176:	3720      	adds	r7, #32
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	2001c598 	.word	0x2001c598
 8005180:	2001c568 	.word	0x2001c568

08005184 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8005184:	b580      	push	{r7, lr}
 8005186:	b088      	sub	sp, #32
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800518c:	f3ef 8311 	mrs	r3, BASEPRI
 8005190:	f04f 0120 	mov.w	r1, #32
 8005194:	f381 8811 	msr	BASEPRI, r1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	4819      	ldr	r0, [pc, #100]	@ (8005200 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800519c:	f7ff f85b 	bl	8004256 <_PreparePacket>
 80051a0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80051a6:	4b17      	ldr	r3, [pc, #92]	@ (8005204 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80051a8:	691b      	ldr	r3, [r3, #16]
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	61fb      	str	r3, [r7, #28]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e00b      	b.n	80051d2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80051ba:	69bb      	ldr	r3, [r7, #24]
 80051bc:	b2da      	uxtb	r2, r3
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	1c59      	adds	r1, r3, #1
 80051c2:	61f9      	str	r1, [r7, #28]
 80051c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051c8:	b2d2      	uxtb	r2, r2
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	69bb      	ldr	r3, [r7, #24]
 80051ce:	09db      	lsrs	r3, r3, #7
 80051d0:	61bb      	str	r3, [r7, #24]
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80051d6:	d8f0      	bhi.n	80051ba <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	61fa      	str	r2, [r7, #28]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	b2d2      	uxtb	r2, r2
 80051e2:	701a      	strb	r2, [r3, #0]
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80051e8:	2204      	movs	r2, #4
 80051ea:	68f9      	ldr	r1, [r7, #12]
 80051ec:	6938      	ldr	r0, [r7, #16]
 80051ee:	f7ff f91f 	bl	8004430 <_SendPacket>
  RECORD_END();
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f383 8811 	msr	BASEPRI, r3
}
 80051f8:	bf00      	nop
 80051fa:	3720      	adds	r7, #32
 80051fc:	46bd      	mov	sp, r7
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	2001c598 	.word	0x2001c598
 8005204:	2001c568 	.word	0x2001c568

08005208 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005210:	f3ef 8311 	mrs	r3, BASEPRI
 8005214:	f04f 0120 	mov.w	r1, #32
 8005218:	f381 8811 	msr	BASEPRI, r1
 800521c:	617b      	str	r3, [r7, #20]
 800521e:	4819      	ldr	r0, [pc, #100]	@ (8005284 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8005220:	f7ff f819 	bl	8004256 <_PreparePacket>
 8005224:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	61fb      	str	r3, [r7, #28]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	61bb      	str	r3, [r7, #24]
 800523c:	e00b      	b.n	8005256 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	b2da      	uxtb	r2, r3
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1c59      	adds	r1, r3, #1
 8005246:	61f9      	str	r1, [r7, #28]
 8005248:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	09db      	lsrs	r3, r3, #7
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	2b7f      	cmp	r3, #127	@ 0x7f
 800525a:	d8f0      	bhi.n	800523e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	61fa      	str	r2, [r7, #28]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	b2d2      	uxtb	r2, r2
 8005266:	701a      	strb	r2, [r3, #0]
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800526c:	2206      	movs	r2, #6
 800526e:	68f9      	ldr	r1, [r7, #12]
 8005270:	6938      	ldr	r0, [r7, #16]
 8005272:	f7ff f8dd 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	f383 8811 	msr	BASEPRI, r3
}
 800527c:	bf00      	nop
 800527e:	3720      	adds	r7, #32
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	2001c598 	.word	0x2001c598
 8005288:	2001c568 	.word	0x2001c568

0800528c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800528c:	b580      	push	{r7, lr}
 800528e:	b08a      	sub	sp, #40	@ 0x28
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
 8005294:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005296:	f3ef 8311 	mrs	r3, BASEPRI
 800529a:	f04f 0120 	mov.w	r1, #32
 800529e:	f381 8811 	msr	BASEPRI, r1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	4827      	ldr	r0, [pc, #156]	@ (8005344 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80052a6:	f7fe ffd6 	bl	8004256 <_PreparePacket>
 80052aa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	687a      	ldr	r2, [r7, #4]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	623b      	str	r3, [r7, #32]
 80052c2:	e00b      	b.n	80052dc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	b2da      	uxtb	r2, r3
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80052ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80052d2:	b2d2      	uxtb	r2, r2
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	6a3b      	ldr	r3, [r7, #32]
 80052d8:	09db      	lsrs	r3, r3, #7
 80052da:	623b      	str	r3, [r7, #32]
 80052dc:	6a3b      	ldr	r3, [r7, #32]
 80052de:	2b7f      	cmp	r3, #127	@ 0x7f
 80052e0:	d8f0      	bhi.n	80052c4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80052e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80052e8:	6a3a      	ldr	r2, [r7, #32]
 80052ea:	b2d2      	uxtb	r2, r2
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	61fb      	str	r3, [r7, #28]
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e00b      	b.n	8005314 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	1c59      	adds	r1, r3, #1
 8005304:	61f9      	str	r1, [r7, #28]
 8005306:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800530a:	b2d2      	uxtb	r2, r2
 800530c:	701a      	strb	r2, [r3, #0]
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	09db      	lsrs	r3, r3, #7
 8005312:	61bb      	str	r3, [r7, #24]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b7f      	cmp	r3, #127	@ 0x7f
 8005318:	d8f0      	bhi.n	80052fc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	1c5a      	adds	r2, r3, #1
 800531e:	61fa      	str	r2, [r7, #28]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	701a      	strb	r2, [r3, #0]
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800532a:	2207      	movs	r2, #7
 800532c:	68f9      	ldr	r1, [r7, #12]
 800532e:	6938      	ldr	r0, [r7, #16]
 8005330:	f7ff f87e 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f383 8811 	msr	BASEPRI, r3
}
 800533a:	bf00      	nop
 800533c:	3728      	adds	r7, #40	@ 0x28
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2001c598 	.word	0x2001c598
 8005348:	2001c568 	.word	0x2001c568

0800534c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005354:	4b04      	ldr	r3, [pc, #16]	@ (8005368 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	1ad3      	subs	r3, r2, r3
}
 800535c:	4618      	mov	r0, r3
 800535e:	370c      	adds	r7, #12
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	2001c568 	.word	0x2001c568

0800536c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b08c      	sub	sp, #48	@ 0x30
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005376:	4b40      	ldr	r3, [pc, #256]	@ (8005478 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d077      	beq.n	800546e <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800537e:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005384:	2300      	movs	r3, #0
 8005386:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005388:	e008      	b.n	800539c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800538a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8005390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005392:	2b00      	cmp	r3, #0
 8005394:	d007      	beq.n	80053a6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005398:	3301      	adds	r3, #1
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800539c:	79fb      	ldrb	r3, [r7, #7]
 800539e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d3f2      	bcc.n	800538a <SEGGER_SYSVIEW_SendModule+0x1e>
 80053a4:	e000      	b.n	80053a8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80053a6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d055      	beq.n	800545a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80053ae:	f3ef 8311 	mrs	r3, BASEPRI
 80053b2:	f04f 0120 	mov.w	r1, #32
 80053b6:	f381 8811 	msr	BASEPRI, r1
 80053ba:	617b      	str	r3, [r7, #20]
 80053bc:	482f      	ldr	r0, [pc, #188]	@ (800547c <SEGGER_SYSVIEW_SendModule+0x110>)
 80053be:	f7fe ff4a 	bl	8004256 <_PreparePacket>
 80053c2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80053cc:	79fb      	ldrb	r3, [r7, #7]
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	e00b      	b.n	80053ea <SEGGER_SYSVIEW_SendModule+0x7e>
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053d8:	1c59      	adds	r1, r3, #1
 80053da:	6279      	str	r1, [r7, #36]	@ 0x24
 80053dc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053e0:	b2d2      	uxtb	r2, r2
 80053e2:	701a      	strb	r2, [r3, #0]
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	09db      	lsrs	r3, r3, #7
 80053e8:	623b      	str	r3, [r7, #32]
 80053ea:	6a3b      	ldr	r3, [r7, #32]
 80053ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80053ee:	d8f0      	bhi.n	80053d2 <SEGGER_SYSVIEW_SendModule+0x66>
 80053f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	627a      	str	r2, [r7, #36]	@ 0x24
 80053f6:	6a3a      	ldr	r2, [r7, #32]
 80053f8:	b2d2      	uxtb	r2, r2
 80053fa:	701a      	strb	r2, [r3, #0]
 80053fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fe:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	61fb      	str	r3, [r7, #28]
 8005404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	61bb      	str	r3, [r7, #24]
 800540a:	e00b      	b.n	8005424 <SEGGER_SYSVIEW_SendModule+0xb8>
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	b2da      	uxtb	r2, r3
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	61f9      	str	r1, [r7, #28]
 8005416:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800541a:	b2d2      	uxtb	r2, r2
 800541c:	701a      	strb	r2, [r3, #0]
 800541e:	69bb      	ldr	r3, [r7, #24]
 8005420:	09db      	lsrs	r3, r3, #7
 8005422:	61bb      	str	r3, [r7, #24]
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	2b7f      	cmp	r3, #127	@ 0x7f
 8005428:	d8f0      	bhi.n	800540c <SEGGER_SYSVIEW_SendModule+0xa0>
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	61fa      	str	r2, [r7, #28]
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	b2d2      	uxtb	r2, r2
 8005434:	701a      	strb	r2, [r3, #0]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800543a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2280      	movs	r2, #128	@ 0x80
 8005440:	4619      	mov	r1, r3
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f7fe fece 	bl	80041e4 <_EncodeStr>
 8005448:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800544a:	2216      	movs	r2, #22
 800544c:	68f9      	ldr	r1, [r7, #12]
 800544e:	6938      	ldr	r0, [r7, #16]
 8005450:	f7fe ffee 	bl	8004430 <_SendPacket>
      RECORD_END();
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800545a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800545c:	2b00      	cmp	r3, #0
 800545e:	d006      	beq.n	800546e <SEGGER_SYSVIEW_SendModule+0x102>
 8005460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8005468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	4798      	blx	r3
    }
  }
}
 800546e:	bf00      	nop
 8005470:	3730      	adds	r7, #48	@ 0x30
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	2001c590 	.word	0x2001c590
 800547c:	2001c598 	.word	0x2001c598

08005480 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8005486:	4b0c      	ldr	r3, [pc, #48]	@ (80054b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00f      	beq.n	80054ae <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800548e:	4b0a      	ldr	r3, [pc, #40]	@ (80054b8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d002      	beq.n	80054a2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f2      	bne.n	8005494 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	2001c590 	.word	0x2001c590

080054bc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80054bc:	b580      	push	{r7, lr}
 80054be:	b086      	sub	sp, #24
 80054c0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80054c2:	f3ef 8311 	mrs	r3, BASEPRI
 80054c6:	f04f 0120 	mov.w	r1, #32
 80054ca:	f381 8811 	msr	BASEPRI, r1
 80054ce:	60fb      	str	r3, [r7, #12]
 80054d0:	4817      	ldr	r0, [pc, #92]	@ (8005530 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80054d2:	f7fe fec0 	bl	8004256 <_PreparePacket>
 80054d6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e00b      	b.n	8005500 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1c59      	adds	r1, r3, #1
 80054f0:	6179      	str	r1, [r7, #20]
 80054f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	09db      	lsrs	r3, r3, #7
 80054fe:	613b      	str	r3, [r7, #16]
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	2b7f      	cmp	r3, #127	@ 0x7f
 8005504:	d8f0      	bhi.n	80054e8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	1c5a      	adds	r2, r3, #1
 800550a:	617a      	str	r2, [r7, #20]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	701a      	strb	r2, [r3, #0]
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8005516:	221b      	movs	r2, #27
 8005518:	6879      	ldr	r1, [r7, #4]
 800551a:	68b8      	ldr	r0, [r7, #8]
 800551c:	f7fe ff88 	bl	8004430 <_SendPacket>
  RECORD_END();
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f383 8811 	msr	BASEPRI, r3
}
 8005526:	bf00      	nop
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	2001c598 	.word	0x2001c598
 8005534:	2001c594 	.word	0x2001c594

08005538 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8005538:	b580      	push	{r7, lr}
 800553a:	b08a      	sub	sp, #40	@ 0x28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005540:	f3ef 8311 	mrs	r3, BASEPRI
 8005544:	f04f 0120 	mov.w	r1, #32
 8005548:	f381 8811 	msr	BASEPRI, r1
 800554c:	617b      	str	r3, [r7, #20]
 800554e:	4827      	ldr	r0, [pc, #156]	@ (80055ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8005550:	f7fe fe81 	bl	8004256 <_PreparePacket>
 8005554:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8005556:	2280      	movs	r2, #128	@ 0x80
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	6938      	ldr	r0, [r7, #16]
 800555c:	f7fe fe42 	bl	80041e4 <_EncodeStr>
 8005560:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	627b      	str	r3, [r7, #36]	@ 0x24
 8005566:	2301      	movs	r3, #1
 8005568:	623b      	str	r3, [r7, #32]
 800556a:	e00b      	b.n	8005584 <SEGGER_SYSVIEW_Warn+0x4c>
 800556c:	6a3b      	ldr	r3, [r7, #32]
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	6279      	str	r1, [r7, #36]	@ 0x24
 8005576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	623b      	str	r3, [r7, #32]
 8005584:	6a3b      	ldr	r3, [r7, #32]
 8005586:	2b7f      	cmp	r3, #127	@ 0x7f
 8005588:	d8f0      	bhi.n	800556c <SEGGER_SYSVIEW_Warn+0x34>
 800558a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005590:	6a3a      	ldr	r2, [r7, #32]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	61fb      	str	r3, [r7, #28]
 800559e:	2300      	movs	r3, #0
 80055a0:	61bb      	str	r3, [r7, #24]
 80055a2:	e00b      	b.n	80055bc <SEGGER_SYSVIEW_Warn+0x84>
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	b2da      	uxtb	r2, r3
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	1c59      	adds	r1, r3, #1
 80055ac:	61f9      	str	r1, [r7, #28]
 80055ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	09db      	lsrs	r3, r3, #7
 80055ba:	61bb      	str	r3, [r7, #24]
 80055bc:	69bb      	ldr	r3, [r7, #24]
 80055be:	2b7f      	cmp	r3, #127	@ 0x7f
 80055c0:	d8f0      	bhi.n	80055a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	1c5a      	adds	r2, r3, #1
 80055c6:	61fa      	str	r2, [r7, #28]
 80055c8:	69ba      	ldr	r2, [r7, #24]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055d2:	221a      	movs	r2, #26
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	6938      	ldr	r0, [r7, #16]
 80055d8:	f7fe ff2a 	bl	8004430 <_SendPacket>
  RECORD_END();
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8811 	msr	BASEPRI, r3
}
 80055e2:	bf00      	nop
 80055e4:	3728      	adds	r7, #40	@ 0x28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	2001c598 	.word	0x2001c598

080055f0 <memcmp>:
 80055f0:	b510      	push	{r4, lr}
 80055f2:	3901      	subs	r1, #1
 80055f4:	4402      	add	r2, r0
 80055f6:	4290      	cmp	r0, r2
 80055f8:	d101      	bne.n	80055fe <memcmp+0xe>
 80055fa:	2000      	movs	r0, #0
 80055fc:	e005      	b.n	800560a <memcmp+0x1a>
 80055fe:	7803      	ldrb	r3, [r0, #0]
 8005600:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005604:	42a3      	cmp	r3, r4
 8005606:	d001      	beq.n	800560c <memcmp+0x1c>
 8005608:	1b18      	subs	r0, r3, r4
 800560a:	bd10      	pop	{r4, pc}
 800560c:	3001      	adds	r0, #1
 800560e:	e7f2      	b.n	80055f6 <memcmp+0x6>

08005610 <memset>:
 8005610:	4402      	add	r2, r0
 8005612:	4603      	mov	r3, r0
 8005614:	4293      	cmp	r3, r2
 8005616:	d100      	bne.n	800561a <memset+0xa>
 8005618:	4770      	bx	lr
 800561a:	f803 1b01 	strb.w	r1, [r3], #1
 800561e:	e7f9      	b.n	8005614 <memset+0x4>

08005620 <__libc_init_array>:
 8005620:	b570      	push	{r4, r5, r6, lr}
 8005622:	4d0d      	ldr	r5, [pc, #52]	@ (8005658 <__libc_init_array+0x38>)
 8005624:	4c0d      	ldr	r4, [pc, #52]	@ (800565c <__libc_init_array+0x3c>)
 8005626:	1b64      	subs	r4, r4, r5
 8005628:	10a4      	asrs	r4, r4, #2
 800562a:	2600      	movs	r6, #0
 800562c:	42a6      	cmp	r6, r4
 800562e:	d109      	bne.n	8005644 <__libc_init_array+0x24>
 8005630:	4d0b      	ldr	r5, [pc, #44]	@ (8005660 <__libc_init_array+0x40>)
 8005632:	4c0c      	ldr	r4, [pc, #48]	@ (8005664 <__libc_init_array+0x44>)
 8005634:	f000 f826 	bl	8005684 <_init>
 8005638:	1b64      	subs	r4, r4, r5
 800563a:	10a4      	asrs	r4, r4, #2
 800563c:	2600      	movs	r6, #0
 800563e:	42a6      	cmp	r6, r4
 8005640:	d105      	bne.n	800564e <__libc_init_array+0x2e>
 8005642:	bd70      	pop	{r4, r5, r6, pc}
 8005644:	f855 3b04 	ldr.w	r3, [r5], #4
 8005648:	4798      	blx	r3
 800564a:	3601      	adds	r6, #1
 800564c:	e7ee      	b.n	800562c <__libc_init_array+0xc>
 800564e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005652:	4798      	blx	r3
 8005654:	3601      	adds	r6, #1
 8005656:	e7f2      	b.n	800563e <__libc_init_array+0x1e>
 8005658:	080057dc 	.word	0x080057dc
 800565c:	080057dc 	.word	0x080057dc
 8005660:	080057dc 	.word	0x080057dc
 8005664:	080057e0 	.word	0x080057e0

08005668 <memcpy>:
 8005668:	440a      	add	r2, r1
 800566a:	4291      	cmp	r1, r2
 800566c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005670:	d100      	bne.n	8005674 <memcpy+0xc>
 8005672:	4770      	bx	lr
 8005674:	b510      	push	{r4, lr}
 8005676:	f811 4b01 	ldrb.w	r4, [r1], #1
 800567a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567e:	4291      	cmp	r1, r2
 8005680:	d1f9      	bne.n	8005676 <memcpy+0xe>
 8005682:	bd10      	pop	{r4, pc}

08005684 <_init>:
 8005684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005686:	bf00      	nop
 8005688:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568a:	bc08      	pop	{r3}
 800568c:	469e      	mov	lr, r3
 800568e:	4770      	bx	lr

08005690 <_fini>:
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005692:	bf00      	nop
 8005694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005696:	bc08      	pop	{r3}
 8005698:	469e      	mov	lr, r3
 800569a:	4770      	bx	lr
